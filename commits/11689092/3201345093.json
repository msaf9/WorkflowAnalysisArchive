[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "file_content_changes": "@@ -959,7 +959,7 @@ def format_of(ty):\n             \"int64_t\": \"L\",\n         }[ty]\n \n-    format = \"iiiiiKK\" + ''.join([format_of(_extracted_type(ty)) for ty in signature.values()])\n+    format = \"iiiiiKKOOO\" + ''.join([format_of(_extracted_type(ty)) for ty in signature.values()])\n \n     # generate glue code\n     src = f\"\"\"\n@@ -1019,14 +1019,37 @@ def format_of(ty):\n   uint64_t _function;\n   int num_warps;\n   int shared_memory;\n+  PyObject *launch_enter_hook = NULL;\n+  PyObject *launch_exit_hook = NULL;\n+  PyObject *compiled_kernel = NULL;\n+  PyObject *hook_ret = NULL;\n   {' '.join([f\"{_extracted_type(ty)} _arg{i}; \" for i, ty in signature.items()])}\n-  if(!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &shared_memory, &_stream, &_function, {', '.join(f\"&_arg{i}\" for i, ty in signature.items())})) {{\n+  if(!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel, {', '.join(f\"&_arg{i}\" for i, ty in signature.items())})) {{\n     return NULL;\n   }}\n \n+  if (launch_enter_hook != Py_None) {{\n+    PyObject *new_args = PyTuple_Pack(1, compiled_kernel);\n+    hook_ret = PyObject_CallObject(launch_enter_hook, new_args);\n+    Py_DECREF(new_args);\n+  }}\n+\n   _launch(gridX, gridY, gridZ, num_warps, shared_memory, (CUstream)_stream, (CUfunction)_function, {', '.join(f\"getPointer(_arg{i},{i})\" if ty[0]==\"*\" else f\"_arg{i}\"for i, ty in signature.items())});\n \n+  if (launch_exit_hook != Py_None) {{\n+    PyObject *new_args = NULL;\n+    if (hook_ret) {{\n+        new_args = PyTuple_Pack(2, compiled_kernel, hook_ret);\n+    }} else {{\n+        new_args = PyTuple_Pack(1, compiled_kernel);\n+    }}\n+    hook_ret = PyObject_CallObject(launch_exit_hook, new_args);\n+    Py_DECREF(new_args);\n+  }}\n \n+  if (hook_ret) {{\n+      Py_DECREF(hook_ret);\n+  }}\n   if(PyErr_Occurred()) {{\n     return NULL;\n   }}\n@@ -1242,6 +1265,10 @@ def compile(fn, signature: str, device: int = -1, constants=dict(), num_warps: i\n \n class CompiledKernel:\n \n+    # Hooks for external tools to monitor the execution of triton kernels\n+    launch_enter_hook = None\n+    launch_exit_hook = None\n+\n     def __init__(self, fn_name, so_path, cache_dir, device):\n         # initialize launcher\n         import importlib.util\n@@ -1267,6 +1294,7 @@ def __init__(self, fn_name, so_path, cache_dir, device):\n             self.asm[\"ttir\"] = f.read()\n \n         mod, func, n_regs, n_spills = _triton.code_gen.load_binary(metadata[\"name\"], self.asm[\"cubin\"], self.shared, device)\n+        self.fn_name = fn_name\n         self.cu_module = mod\n         self.cu_function = func\n         self.n_regs = n_regs\n@@ -1276,7 +1304,8 @@ def __getitem__(self, grid):\n         def runner(*args, stream=None):\n             if stream is None:\n                 stream = torch.cuda.current_stream().cuda_stream\n-            self.c_wrapper(grid[0], grid[1], grid[2], self.num_warps, self.shared, stream, self.cu_function, *args)\n+            self.c_wrapper(grid[0], grid[1], grid[2], self.num_warps, self.shared, stream, self.cu_function,\n+                           CompiledKernel.launch_enter_hook, CompiledKernel.launch_exit_hook, self, *args)\n         return runner\n \n     def get_sass(self, fun=None):"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -109,6 +109,7 @@ def launcher(*args, **kwargs):\n \n class JITFunction(KernelInterface):\n \n+    # Hook for inspecting compiled functions and modules\n     cache_hook = None\n     divisibility = 16\n \n@@ -253,7 +254,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n     try:\n       bin = cache[key]\n       if not warmup:\n-          bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, {args})\n+          bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, triton.compiler.CompiledKernel.launch_enter_hook, triton.compiler.CompiledKernel.launch_exit_hook, bin, {args})\n       return bin\n     # kernel not cached -- compile\n     except KeyError:\n@@ -274,7 +275,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n       if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs):\n         bin = triton.compile(self, signature, device, constants, num_warps, num_stages, extern_libs=extern_libs, configs=configs)\n         if not warmup:\n-            bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, *args)\n+            bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, triton.compiler.CompiledKernel.launch_enter_hook, triton.compiler.CompiledKernel.launch_exit_hook, bin, *args)\n         self.cache[key] = bin\n         return bin\n       return None"}]