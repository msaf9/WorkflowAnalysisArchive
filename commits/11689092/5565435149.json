[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "file_content_changes": "@@ -3082,6 +3082,21 @@ def kernel(InitI, Bound, CutOff, OutI, OutInitI, OutJ):\n     assert out_i[0] == init_i[0] + 1\n     assert out_j[0] == bound[0]\n \n+def test_while(device):\n+    @triton.jit\n+    def nested_while(data, countPtr):\n+        for i in range(10):\n+            count = tl.load(countPtr)\n+            while count > 0:\n+                tl.store(data, tl.load(data) + 1.0)\n+                count = count - 2\n+\n+    counter = torch.tensor([8], dtype=torch.int32, device=device)\n+    data = torch.zeros((1,), device=device, dtype=torch.float32)\n+    nested_while[(1,)](data, counter)\n+    assert data[0] == 40\n+\n+\n # def test_for_if(device):\n \n #     @triton.jit"}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -659,6 +659,7 @@ def visit_UnaryOp(self, node):\n     def visit_While(self, node):\n         with enter_sub_region(self) as sr:\n             liveins, insert_block = sr\n+            ip, last_loc = self._get_insertion_point_and_loc()\n \n             # loop body (the after region)\n             # loop_block = self.builder.create_block()\n@@ -668,6 +669,7 @@ def visit_While(self, node):\n             self.visit_compound_statement(node.body)\n             self.scf_stack.pop()\n             loop_defs = self.local_defs\n+            dummy.erase()\n \n             # collect loop-carried values\n             names = []\n@@ -684,7 +686,7 @@ def visit_While(self, node):\n                     ret_types.append(loop_defs[name].type)\n                     init_args.append(liveins[name])\n \n-            self.builder.set_insertion_point_to_end(insert_block)\n+            self._set_insertion_point_and_loc(ip, last_loc)\n             while_op = self.builder.create_while_op([ty.to_ir(self.builder) for ty in ret_types],\n                                                     [arg.handle for arg in init_args])\n             # merge the condition region"}]