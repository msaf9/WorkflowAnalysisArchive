[{"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "file_content_changes": "@@ -1057,17 +1057,24 @@ def reduce_impl(input: tl.tensor, axis: int, builder: ir.builder, name: str,\n         if INT_OP in int_op_to_unit:\n             INT_OP = int_op_to_unit[INT_OP]\n \n+    # If we are doing an argmin or argmax we want to use an int32 output type\n+    out_scalar_ty = scalar_ty\n+    if FLOAT_OP is ir.REDUCE_OP.ARGFMAX or INT_OP is ir.REDUCE_OP.ARGMAX:\n+        out_scalar_ty = tl.int32\n+    elif FLOAT_OP is ir.REDUCE_OP.ARGFMIN or INT_OP is ir.REDUCE_OP.ARGMIN:\n+        out_scalar_ty = tl.int32\n+\n     # get result type\n     shape = input.type.shape\n     ret_shape = []\n     for i, s in enumerate(shape):\n         if i != axis:\n             ret_shape.append(s)\n     if ret_shape:\n-        res_ty = tl.block_type(scalar_ty, ret_shape)\n+        res_ty = tl.block_type(out_scalar_ty, ret_shape)\n     else:\n         # 0d-tensor -> scalar\n-        res_ty = scalar_ty\n+        res_ty = out_scalar_ty\n \n     if scalar_ty.is_floating():\n         return tl.tensor(builder.create_reduce(input.handle, FLOAT_OP, axis), res_ty)"}]