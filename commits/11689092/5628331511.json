[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -152,7 +152,7 @@ jobs:\n         if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] != 'arc770') }}\n         run: |\n           python3 -m pip install --upgrade pre-commit\n-          python3 -m pre_commit run --all-files\n+          python3 -m pre_commit run --all-files --verbose\n \n       - name: Check pre-commit arc770\n         if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] == 'arc770') }}"}, {"filename": "include/triton/Analysis/Utility.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -37,6 +37,8 @@ class ReduceOpHelper {\n \n   bool isFastReduction();\n \n+  bool isWarpSynchronous();\n+\n   unsigned getInterWarpSize();\n \n   unsigned getIntraWarpSize();"}, {"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "file_content_changes": "@@ -81,14 +81,20 @@ SmallVector<unsigned> ReduceOpHelper::getScratchConfigBasic() {\n   return smemShape;\n }\n \n+bool ReduceOpHelper::isWarpSynchronous() {\n+  auto argsLayout = getSrcLayout();\n+  return isFastReduction() &&\n+         (triton::gpu::getWarpsPerCTA(argsLayout)[axis] == 1);\n+}\n+\n SmallVector<SmallVector<unsigned>> ReduceOpHelper::getScratchConfigsFast() {\n   SmallVector<SmallVector<unsigned>> smemShapes(3);\n \n   auto argLayout = getSrcLayout();\n   auto argLayoutMma = argLayout.dyn_cast<triton::gpu::MmaEncodingAttr>();\n \n   // that case doesn't need inter-warp communication\n-  if (isFastReduction() && triton::gpu::getWarpsPerCTA(argLayout)[axis] == 1)\n+  if (isWarpSynchronous())\n     return {{0, 0}, {0, 0}};\n \n   /// shared memory block0"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "file_content_changes": "@@ -335,7 +335,9 @@ struct ReduceOpConversion\n     unsigned sizeInterWarps = helper.getInterWarpSizeWithUniqueData();\n \n     SmallVector<Value> smemBases(op.getNumOperands());\n-    if (sizeInterWarps > 1) {\n+    bool isWarpSync = helper.isWarpSynchronous();\n+\n+    if (!isWarpSync) {\n       smemBases[0] = bitcast(\n           getSharedMemoryBase(loc, rewriter, op.getOperation()), elemPtrTys[0]);\n       for (unsigned i = 1; i < op.getNumOperands(); ++i) {\n@@ -403,7 +405,7 @@ struct ReduceOpConversion\n         accumulate(rewriter, *combineOp, acc, shfl, false);\n       }\n \n-      if (sizeInterWarps == 1) {\n+      if (isWarpSync) {\n         finalAccs[key] = acc;\n         continue;\n       }\n@@ -418,7 +420,7 @@ struct ReduceOpConversion\n       }\n     }\n \n-    if (sizeInterWarps == 1) {\n+    if (isWarpSync) {\n       SmallVector<Value> results(op.getNumOperands());\n       for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n         if (auto resultTy ="}]