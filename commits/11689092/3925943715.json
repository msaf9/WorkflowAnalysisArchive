[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -885,7 +885,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n \n \n def get_reduced_dtype(dtype_str, op):\n-    if op == 'argmin' or op == 'argmax':\n+    if op in ('argmin', 'argmax'):\n         return 'int32'\n     if dtype_str in ['int8', 'uint8', 'int16', 'uint16']:\n         return 'int32'\n@@ -917,7 +917,7 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n     numpy_op = {'sum': np.sum, 'max': np.max, 'min': np.min,\n                 'argmin': np.argmin, 'argmax': np.argmax}[op]\n     # numpy result\n-    z_dtype_str = 'int32' if op == 'argmin' or op == 'argmax' else dtype_str\n+    z_dtype_str = 'int32' if op in ('argmin', 'argmax') else dtype_str\n     z_tri_dtype_str = z_dtype_str\n     if op not in ['argmin', 'argmax'] and dtype_str == 'bfloat16':\n         z_dtype_str = 'float32'\n@@ -936,7 +936,7 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n     if op == 'sum':\n         np.testing.assert_allclose(z_ref, z_tri, rtol=0.01)\n     else:\n-        if op == 'argmin' or op == 'argmax':\n+        if op in ('argmin', 'argmax'):\n             # argmin and argmax can have multiple valid indices.\n             # so instead we compare the values pointed by indices\n             np.testing.assert_equal(x[z_ref], x[z_tri])\n@@ -1013,7 +1013,7 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n     if op == 'sum':\n         np.testing.assert_allclose(z_ref, z_tri, rtol=0.01)\n     else:\n-        if op == 'argmin' or op == 'argmax':\n+        if op in ('argmin', 'argmax'):\n             # argmin and argmax can have multiple valid indices.\n             # so instead we compare the values pointed by indices\n             z_ref_index = np.expand_dims(z_ref, axis=axis)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -168,13 +168,13 @@ def to_ir(self, builder: ir.builder) -> ir.type:\n             return builder.get_void_ty()\n         elif self.name == 'int1':\n             return builder.get_int1_ty()\n-        elif self.name == 'int8' or self.name == 'uint8':\n+        elif self.name in ('int8', 'uint8'):\n             return builder.get_int8_ty()\n-        elif self.name == 'int16' or self.name == 'uint16':\n+        elif self.name in ('int16', 'uint16'):\n             return builder.get_int16_ty()\n-        elif self.name == 'int32' or self.name == 'uint32':\n+        elif self.name in ('int32', 'uint32'):\n             return builder.get_int32_ty()\n-        elif self.name == 'int64' or self.name == 'uint64':\n+        elif self.name in ('int64', 'uint64'):\n             return builder.get_int64_ty()\n         elif self.name == 'fp8':\n             return builder.get_fp8_ty()"}]