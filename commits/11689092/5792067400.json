[{"filename": "python/test/unit/language/print_helper.py", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "file_content_changes": "@@ -28,6 +28,11 @@ def kernel_static_print(X, Y, BLOCK: tl.constexpr):\n     tl.store(Y + tl.arange(0, BLOCK), x)\n \n \n+@triton.jit\n+def kernel_no_arg_print():\n+    print(\"\", tl.program_id(0))\n+\n+\n def test_print(func: str, data_type: str):\n     shape = (128, )\n     # limit the range of integers so that the sum does not overflow\n@@ -39,7 +44,11 @@ def test_print(func: str, data_type: str):\n         kernel_print[(1,)](x, y, BLOCK=shape[0])\n     elif func == \"static_print\":\n         kernel_static_print[(1,)](x, y, BLOCK=shape[0])\n-    assert_close(y, x)\n+    elif func == \"no_arg_print\":\n+        kernel_no_arg_print[(1,)](num_warps=4)\n+\n+    if func != \"no_arg_print\":\n+        assert_close(y, x)\n \n \n if __name__ == \"__main__\":"}, {"filename": "python/test/unit/language/test_subprocess.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -15,7 +15,7 @@\n \n \n @pytest.mark.parametrize(\"func_type, data_type\",\n-                         [(\"device_print\", data_type) for data_type in torch_types] + [(\"print\", \"int32\"), (\"static_print\", \"int32\")])\n+                         [(\"device_print\", data_type) for data_type in torch_types] + [(\"print\", \"int32\"), (\"static_print\", \"int32\"), (\"no_arg_print\", \"int32\")])\n def test_print(func_type: str, data_type: str):\n     proc = subprocess.Popen([sys.executable, print_path, func_type, data_type], stdout=subprocess.PIPE, shell=False)\n     outs, _ = proc.communicate()\n@@ -29,10 +29,9 @@ def test_print(func_type: str, data_type: str):\n             new_lines.add(value)\n         except Exception as e:\n             print(e)\n-    if func_type != \"static_print\":\n+    if func_type != \"static_print\" and func_type != \"no_arg_print\":\n         for i in range(128):\n             assert i in new_lines\n-        assert len(new_lines) == 128\n     else:\n         assert len(new_lines) == 1\n "}, {"filename": "python/triton/compiler/make_launcher.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -198,7 +198,7 @@ def format_of(ty):\n       PyObject *compiled_kernel = NULL;\n \n       {' '.join([f\"{_extracted_type(ty)} _arg{i}; \" for i, ty in signature.items()])}\n-      if (!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel, {', '.join(f\"&_arg{i}\" for i, ty in signature.items())})) {{\n+      if (!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel{', ' + ', '.join(f\"&_arg{i}\" for i, ty in signature.items()) if len(signature) > 0 else ''})) {{\n         return NULL;\n       }}\n \n@@ -208,7 +208,7 @@ def format_of(ty):\n \n       // raise exception asap\n       {\"; \".join([f\"DevicePtrInfo ptr_info{i} = getPointer(_arg{i}, {i}); if (!ptr_info{i}.valid) return NULL;\" if ty[0] == \"*\" else \"\" for i, ty in signature.items()])};\n-      _launch(gridX, gridY, gridZ, num_warps, shared_memory, (hipStream_t)_stream, (hipFunction_t)_function, {', '.join(f\"ptr_info{i}.dev_ptr\" if ty[0]==\"*\" else f\"_arg{i}\" for i, ty in signature.items())});\n+      _launch(gridX, gridY, gridZ, num_warps, shared_memory, (hipStream_t)_stream, (hipFunction_t)_function{', ' + ', '.join(f\"ptr_info{i}.dev_ptr\" if ty[0]==\"*\" else f\"_arg{i}\" for i, ty in signature.items()) if len(signature) > 0 else ''});\n       if (launch_exit_hook != Py_None) {{\n         PyObject_CallObject(launch_exit_hook, args);\n       }}\n@@ -267,7 +267,7 @@ def format_of(ty):\n \n #define CUDA_CHECK(ans) {{ gpuAssert((ans), __FILE__, __LINE__); }}\n \n-static void _launch(int gridX, int gridY, int gridZ, int num_warps, int num_ctas, int clusterDimX, int clusterDimY, int clusterDimZ, int shared_memory, CUstream stream, CUfunction function, {arg_decls}) {{\n+static void _launch(int gridX, int gridY, int gridZ, int num_warps, int num_ctas, int clusterDimX, int clusterDimY, int clusterDimZ, int shared_memory, CUstream stream, CUfunction function{', ' + arg_decls if len(arg_decls) > 0 else ''}) {{\n   void *params[] = {{ {', '.join(f\"&arg{i}\" for i in params)} }};\n   if(gridX*gridY*gridZ > 0){{\n     if (num_ctas == 1) {{\n@@ -356,7 +356,7 @@ def format_of(ty):\n   PyObject *launch_exit_hook = NULL;\n   PyObject *compiled_kernel = NULL;\n   {' '.join([f\"{_extracted_type(ty)} _arg{i}; \" for i, ty in signature.items()])}\n-  if(!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &num_ctas, &clusterDimX, &clusterDimY, &clusterDimZ, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel, {', '.join(f\"&_arg{i}\" for i, ty in signature.items())})) {{\n+  if(!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &num_ctas, &clusterDimX, &clusterDimY, &clusterDimZ, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel{', ' + ', '.join(f\"&_arg{i}\" for i, ty in signature.items()) if len(signature) > 0 else ''})) {{\n     return NULL;\n   }}\n \n@@ -367,7 +367,7 @@ def format_of(ty):\n \n   // raise exception asap\n   {\"; \".join([f\"DevicePtrInfo ptr_info{i} = getPointer(_arg{i}, {i}); if (!ptr_info{i}.valid) return NULL;\" if ty[0] == \"*\" else \"\" for i, ty in signature.items()])};\n-  _launch(gridX, gridY, gridZ, num_warps, num_ctas, clusterDimX, clusterDimY, clusterDimZ, shared_memory, (CUstream)_stream, (CUfunction)_function, {', '.join(f\"ptr_info{i}.dev_ptr\" if ty[0]==\"*\" else f\"_arg{i}\"for i, ty in signature.items())});\n+  _launch(gridX, gridY, gridZ, num_warps, num_ctas, clusterDimX, clusterDimY, clusterDimZ, shared_memory, (CUstream)_stream, (CUfunction)_function{', ' + ', '.join(f\"ptr_info{i}.dev_ptr\" if ty[0]==\"*\" else f\"_arg{i}\"for i, ty in signature.items()) if len(signature) > 0 else ''});\n \n   if (launch_exit_hook != Py_None) {{\n     PyObject_CallObject(launch_exit_hook, args);"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -352,11 +352,12 @@ def _make_launcher(self):\n         spec_keys = ', '.join(specializations)\n         grid_args = ','.join([f'\"{arg}\": {arg}' for arg in self.arg_names])\n         args_signature = ', '.join(name if dflt == inspect._empty else f'{name} = {dflt}' for name, dflt in zip(self.arg_names, self.arg_defaults))\n+        args_signature = args_signature + ', ' if len(args_signature) > 0 else ''\n \n         src = f\"\"\"\n-def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_ctas=1, num_stages=3, enable_warp_specialization=False, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n+def {self.fn.__name__}({args_signature}grid=None, num_warps=4, num_ctas=1, num_stages=3, enable_warp_specialization=False, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n     from ..compiler import compile, CompiledKernel\n-    sig_key =  {sig_keys},\n+    sig_key = {f'{sig_keys},' if len(sig_keys) > 0 else ()}\n     constexpr_key = {f'{constexpr_keys},' if len(constexpr_keys) > 0 else ()}\n     spec_key = {f'{spec_keys},' if len(spec_keys) > 0 else ()}\n     key = (version_key, sig_key, constexpr_key, spec_key, num_warps, num_ctas, num_stages, enable_warp_specialization, self.debug)\n@@ -399,7 +400,7 @@ def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_ctas=1, num\n     if bin is not None:\n       # build dict of constant values\n       args = [{args}]\n-      all_args = {', '.join([f'{arg}' for arg in self.arg_names])},\n+      all_args = {', '.join([f'{arg}' for arg in self.arg_names]) + ', ' if len(self.arg_names) > 0 else ()}\n       configs = self._get_config(*all_args),\n       constants = self._make_constants(constexpr_key)\n       constants.update({{i: None for i, arg in enumerate(all_args) if arg is None}})\n@@ -413,7 +414,7 @@ def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_ctas=1, num\n     else:\n       # build dict of constant values\n       args = [{args}]\n-      all_args = {', '.join([f'{arg}' for arg in self.arg_names])},\n+      all_args = {', '.join([f'{arg}' for arg in self.arg_names]) + ', ' if len(self.arg_names) > 0 else ()}\n       configs = self._get_config(*all_args),\n       constants = self._make_constants(constexpr_key)\n       constants.update({{i: None for i, arg in enumerate(all_args) if arg is None}})"}]