[{"filename": "python/triton/ops/matmul.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -115,7 +115,7 @@ def _kernel(A, B, C, M, N, K,\n class _matmul(torch.autograd.Function):\n     kernel = _kernel\n \n-    _locks = dict()\n+    _locks = {}\n \n     @staticmethod\n     def _call(a, b):"}, {"filename": "python/triton/runtime/autotuner.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -18,11 +18,11 @@ def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by:\n             'prune_num_stages_by'(optional): a function used to prune num_stages. It take configs:List[Config] as its input, and returns pruned configs.\n         '''\n         if not configs:\n-            self.configs = [Config(dict(), num_warps=4, num_stages=2)]\n+            self.configs = [Config({}, num_warps=4, num_stages=2)]\n         else:\n             self.configs = configs\n         self.key_idx = [arg_names.index(k) for k in key]\n-        self.cache = dict()\n+        self.cache = {}\n         # hook to reset all required tensor to zeros before relaunching a kernel\n         self.hook = lambda args: 0\n         if reset_to_zero is not None:"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -241,8 +241,8 @@ def _make_launcher(self):\n         src = f\"\"\"\n def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stages=3, extern_libs=None, stream=None, warmup=False):\n     sig_key =  {sig_keys},\n-    constexpr_key = {f'{constexpr_keys},' if len(constexpr_keys) > 0 else tuple()}\n-    spec_key = {f'{spec_keys},' if len(spec_keys) > 0 else tuple()}\n+    constexpr_key = {f'{constexpr_keys},' if len(constexpr_keys) > 0 else ()}\n+    spec_key = {f'{spec_keys},' if len(spec_keys) > 0 else ()}\n     key = (version_key, sig_key, constexpr_key, spec_key)\n     if not extern_libs is None:\n       key = (key, tuple(extern_libs.items()))"}]