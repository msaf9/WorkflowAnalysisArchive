[{"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -784,7 +784,7 @@ void generator::visit_load_inst(ir::load_inst* x){\n     int tot_width = nbits*vec;\n     int width = std::min(tot_width, max_word_width);\n     int n_words = std::max(1, tot_width / width);\n-    bool has_evict_policy = x->get_eviction_policy() != ir::load_inst::NORMAL;\n+    bool has_evict_policy = (x->get_eviction_policy() != ir::load_inst::NORMAL) && tgt_->as_nvidia()->sm() >= 80;\n     // -----\n     // create inline asm string\n     // -----\n@@ -2904,6 +2904,7 @@ void generator::visit_function(ir::function* fn) {\n   }\n   builder_->SetInsertPoint(bbs_[fn->blocks()[0]]);\n   // create policies\n+  if(tgt_->as_nvidia()->sm() >= 80)\n   for(ir::load_inst::EVICTION_POLICY evict: {ir::load_inst::EVICT_FIRST, ir::load_inst::EVICT_LAST}){\n     std::string policy = (evict == ir::load_inst::EVICT_FIRST) ? \"evict_first\" : \"evict_last\";\n     std::string asm_str = \"createpolicy.fractional.L2::\" + policy + \".b64 $0;\";"}]