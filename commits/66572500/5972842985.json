[{"filename": "python/triton/testing.py", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "file_content_changes": "@@ -3,6 +3,7 @@\n import subprocess\n import sys\n from contextlib import contextmanager\n+from typing import Any, Dict, List\n \n from . import language as tl\n from ._C.libtriton.triton import runtime\n@@ -201,37 +202,41 @@ class Benchmark:\n \n     def __init__(\n         self,\n-        x_names,\n-        x_vals,\n-        line_arg,\n-        line_vals,\n-        line_names,\n-        plot_name,\n-        args,\n-        xlabel='',\n-        ylabel='',\n-        x_log=False,\n-        y_log=False,\n+        x_names: List[str],\n+        x_vals: List[Any],\n+        line_arg: str,\n+        line_vals: List[Any],\n+        line_names: List[str],\n+        plot_name: str,\n+        args: Dict[str, Any],\n+        xlabel: str = '',\n+        ylabel: str = '',\n+        x_log: bool = False,\n+        y_log: bool = False,\n         color=None,\n         styles=None,\n     ):\n         \"\"\"\n-        Constructor\n+        Constructor.\n+        x_vals can be a list of scalars or a list of tuples/lists. If x_vals is a list\n+        of scalars and there are multiple x_names, all arguments will have the same value.\n+        If x_vals is a list of tuples/lists, each element should have the same length as\n+        x_names.\n \n-        :param x_names: Name of the arguments that should appear on the x axis of the plot. If the list contains more than one element, all the arguments are assumed to have the same value.\n+        :param x_names: Name of the arguments that should appear on the x axis of the plot.\n         :type x_names: List[str]\n         :param x_vals: List of values to use for the arguments in :code:`x_names`.\n         :type x_vals: List[Any]\n         :param line_arg: Argument name for which different values correspond to different lines in the plot.\n         :type line_arg: str\n         :param line_vals: List of values to use for the arguments in :code:`line_arg`.\n-        :type line_vals: List[str]\n+        :type line_vals: List[Any]\n         :param line_names: Label names for the different lines.\n         :type line_names: List[str]\n         :param plot_name: Name of the plot.\n         :type plot_name: str\n-        :param args: List of arguments to remain fixed throughout the benchmark.\n-        :type args: List[str]\n+        :param args: Dictionary of keyword arguments to remain fixed throughout the benchmark.\n+        :type args: Dict[str, Any]\n         :param xlabel: Label for the x axis of the plot.\n         :type xlabel: str, optional\n         :param ylabel: Label for the y axis of the plot.\n@@ -261,23 +266,25 @@ def __init__(self, fn, benchmarks):\n         self.fn = fn\n         self.benchmarks = benchmarks\n \n-    def _run(self, bench, save_path, show_plots, print_data):\n+    def _run(self, bench: Benchmark, save_path: str, show_plots: bool, print_data: bool):\n         import os\n \n         import matplotlib.pyplot as plt\n         import pandas as pd\n         y_mean = bench.line_names\n         y_min = [f'{x}-min' for x in bench.line_names]\n         y_max = [f'{x}-max' for x in bench.line_names]\n-        x_names_str = str(bench.x_names)\n-        df = pd.DataFrame(columns=[x_names_str] + y_mean + y_min + y_max)\n+        x_names = list(bench.x_names)\n+        df = pd.DataFrame(columns=x_names + y_mean + y_min + y_max)\n         for x in bench.x_vals:\n-            if not isinstance(x, list):\n-                x = [x]\n-            if len(x) == 1:\n-                x = x * len(bench.x_names)\n-            x_str = str(x)\n-            x_args = {x_name: x_in for x_name, x_in in zip(bench.x_names, x)}\n+            # x can be a single value or a sequence of values.\n+            if not isinstance(x, (list, tuple)):\n+                x = [x for _ in x_names]\n+\n+            if len(x) != len(x_names):\n+                raise ValueError(f\"Expected {len(x_names)} values, got {x}\")\n+            x_args = dict(zip(x_names, x))\n+\n             row_mean, row_min, row_max = [], [], []\n             for y in bench.line_vals:\n                 ret = self.fn(**x_args, **{bench.line_arg: y}, **bench.args)\n@@ -288,23 +295,24 @@ def _run(self, bench, save_path, show_plots, print_data):\n                 row_mean += [y_mean]\n                 row_min += [y_min]\n                 row_max += [y_max]\n-            df.loc[len(df)] = [x_str] + row_mean + row_min + row_max\n+            df.loc[len(df)] = list(x) + row_mean + row_min + row_max\n+\n         if bench.plot_name:\n             plt.figure()\n             ax = plt.subplot()\n-            x = x_names_str\n+            # Plot first x value on x axis if there are multiple.\n+            first_x = x_names[0]\n             for i, y in enumerate(bench.line_names):\n                 y_min, y_max = df[y + '-min'], df[y + '-max']\n                 col = bench.styles[i][0] if bench.styles else None\n                 sty = bench.styles[i][1] if bench.styles else None\n-                ax.plot(df[x], df[y], label=y, color=col, ls=sty)\n+                ax.plot(df[first_x], df[y], label=y, color=col, ls=sty)\n                 if not y_min.isnull().all() and not y_max.isnull().all():\n                     y_min = y_min.astype(float)\n                     y_max = y_max.astype(float)\n-                    ax.fill_between(df[x], y_min, y_max, alpha=0.15, color=col)\n+                    ax.fill_between(df[first_x], y_min, y_max, alpha=0.15, color=col)\n             ax.legend()\n-            xlabel = bench.xlabel if bench.xlabel else \" = \".join(bench.x_names)\n-            ax.set_xlabel(xlabel)\n+            ax.set_xlabel(bench.xlabel or first_x)\n             ax.set_ylabel(bench.ylabel)\n             # ax.set_title(bench.plot_name)\n             ax.set_xscale(\"log\" if bench.x_log else \"linear\")\n@@ -313,7 +321,7 @@ def _run(self, bench, save_path, show_plots, print_data):\n                 plt.show()\n             if save_path:\n                 plt.savefig(os.path.join(save_path, f\"{bench.plot_name}.png\"))\n-        df = df[[x_names_str] + bench.line_names]\n+        df = df[x_names + bench.line_names]\n         if print_data:\n             print(bench.plot_name + ':')\n             print(df)"}]