[{"filename": "python/triton/runtime/cache.py", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "file_content_changes": "@@ -40,18 +40,20 @@ def __init__(self, key):\n         self.key = key\n         self.lock_path = None\n         # create cache directory if it doesn't exist\n-        self.cache_dir = os.environ.get('TRITON_CACHE_DIR', default_cache_dir())\n+        self.cache_dir = os.getenv('TRITON_CACHE_DIR', \"\").strip() or default_cache_dir()\n         if self.cache_dir:\n             self.cache_dir = os.path.join(self.cache_dir, self.key)\n             self.lock_path = os.path.join(self.cache_dir, \"lock\")\n             os.makedirs(self.cache_dir, exist_ok=True)\n+        else:\n+            raise RuntimeError(\"Could not create or locate cache dir\")\n \n     def _make_path(self, filename) -> str:\n         return os.path.join(self.cache_dir, filename)\n \n-    def has_file(self, filename):\n+    def has_file(self, filename) -> bool:\n         if not self.cache_dir:\n-            return False\n+            raise RuntimeError(\"Could not create or locate cache dir\")\n         return os.path.exists(self._make_path(filename))\n \n     def get_file(self, filename) -> Optional[str]:\n@@ -80,16 +82,16 @@ def get_group(self, filename: str) -> Optional[Dict[str, str]]:\n         return result\n \n     # Note a group of pushed files as being part of a group\n-    def put_group(self, filename: str, group: Dict[str, str]):\n+    def put_group(self, filename: str, group: Dict[str, str]) -> str:\n         if not self.cache_dir:\n-            return\n+            raise RuntimeError(\"Could not create or locate cache dir\")\n         grp_contents = json.dumps({\"child_paths\": sorted(list(group.keys()))})\n         grp_filename = f\"__grp__{filename}\"\n         return self.put(grp_contents, grp_filename, binary=False)\n \n     def put(self, data, filename, binary=True) -> str:\n         if not self.cache_dir:\n-            return\n+            raise RuntimeError(\"Could not create or locate cache dir\")\n         binary = isinstance(data, bytes)\n         if not binary:\n             data = str(data)"}]