[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 1, "deletions": 123, "changes": 124, "file_content_changes": "@@ -51,16 +51,6 @@ jobs:\n         run: |\n           echo \"BACKEND=CUDA\" >> \"${GITHUB_ENV}\"\n \n-      - name: Set ROCM ENV\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}\n-        run: |\n-          echo \"BACKEND=ROCM\" >> \"${GITHUB_ENV}\"\n-\n-      - name: Set XPU ENV\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'arc770')}}\n-        run: |\n-          echo \"BACKEND=XPU\" >> \"${GITHUB_ENV}\"\n-\n       - name: Clear cache\n         run: |\n           rm -rf ~/.triton\n@@ -69,21 +59,6 @@ jobs:\n         run: |\n           echo \"PATH=${HOME}/.local/bin:${PATH}\" >> \"${GITHUB_ENV}\"\n \n-      - name: Check pre-commit\n-        if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] != 'arc770') }}\n-        run: |\n-          python3 -m pip install --upgrade pre-commit\n-          python3 -m pre_commit run --all-files\n-\n-      - name: Check pre-commit arc770\n-        if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] == 'arc770') }}\n-        run: |\n-          source ${HOME}/triton_vars.sh\n-          source ${HOME}/miniconda3/bin/activate\n-          conda activate triton-xpu-ci\n-          python3 -m pip install --upgrade pre-commit\n-          python3 -m pre_commit run --all-files\n-\n       - name: Install Triton\n         if: ${{ env.BACKEND == 'CUDA'}}\n         run: |\n@@ -92,30 +67,6 @@ jobs:\n           python3 -m pip install cmake==3.24\n           python3 -m pip install --no-build-isolation -vvv '.[tests]'\n \n-      - name: Install Triton on ROCM\n-        if: ${{ env.BACKEND == 'ROCM'}}\n-        run: |\n-          cd python\n-          python3 -m pip install --upgrade pip\n-          python3 -m pip install cmake==3.24\n-          python3 -m pip install torch==1.13.1 --index-url https://download.pytorch.org/whl/rocm5.2\n-          python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n-      - name: Install Triton on XPU\n-        if: ${{ env.BACKEND == 'XPU'}}\n-        run: |\n-          source ${HOME}/triton_vars.sh\n-          source ${HOME}/miniconda3/bin/activate\n-          conda activate triton-xpu-ci\n-          git submodule update --init --recursive\n-          cd python\n-          python3 -m pip install --upgrade pip\n-          python3 -m pip install cmake==3.24\n-          export TRITON_CODEGEN_INTEL_XPU_BACKEND=1\n-          python3 -m pip uninstall -y triton\n-          python3 setup.py build\n-          python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n       - name: Run lit tests\n         if: ${{ env.BACKEND == 'CUDA'}}\n         run: |\n@@ -153,21 +104,6 @@ jobs:\n           cd \"build/$(ls build | grep -i cmake)\"\n           ctest\n \n-      - name: Run python tests on ROCM\n-        if: ${{ env.BACKEND == 'ROCM'}}\n-        run: |\n-          cd python/test/unit/language\n-          python3 -m pytest --capture=tee-sys -rfs --verbose \"test_core.py::test_empty_kernel\"\n-\n-      - name: Run python tests on XPU\n-        if: ${{ env.BACKEND == 'XPU'}}\n-        run: |\n-          source ${HOME}/triton_vars.sh\n-          source ${HOME}/miniconda3/bin/activate\n-          conda activate triton-xpu-ci\n-          cd python/test/backend/third_party_backends\n-          python3 -m pytest --capture=tee-sys -rfs --verbose --backend xpu\n-\n       - name: Regression tests\n         if: ${{ contains(matrix.runner, 'A100') }}\n         run: |\n@@ -177,7 +113,7 @@ jobs:\n           python3 -m pytest -vs .\n           sudo nvidia-smi -i 0 -rgc\n \n-  Integration-Tests-Third-Parties:\n+  Integration-Tests-Third-Party:\n     needs: Runner-Preparation\n \n     runs-on: ${{ matrix.runner }}\n@@ -190,11 +126,6 @@ jobs:\n       - name: Checkout\n         uses: actions/checkout@v2\n \n-      - name: Set CUDA ENV\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-        run: |\n-          echo \"BACKEND=CUDA\" >> \"${GITHUB_ENV}\"\n-\n       - name: Set ROCM ENV\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}\n         run: |\n@@ -228,14 +159,6 @@ jobs:\n           python3 -m pip install --upgrade pre-commit\n           python3 -m pre_commit run --all-files\n \n-      - name: Install Triton\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python\n-          python3 -m pip install --upgrade pip\n-          python3 -m pip install cmake==3.24\n-          python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n       - name: Install Triton on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n@@ -260,43 +183,6 @@ jobs:\n           python3 setup.py build\n           python3 -m pip install --no-build-isolation -vvv '.[tests]'\n \n-      - name: Run lit tests\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          python3 -m pip install lit\n-          cd python\n-          LIT_TEST_DIR=\"build/$(ls build | grep -i cmake)/test\"\n-          if [ ! -d \"${LIT_TEST_DIR}\" ]; then\n-            echo \"Coult not find '${LIT_TEST_DIR}'\" ; exit -1\n-          fi\n-          lit -v \"${LIT_TEST_DIR}\"\n-\n-      - name: Run python tests on CUDA\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python/test/unit\n-          python3 -m pytest\n-\n-      - name: Create artifacts archive\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-        run: |\n-          cd ~/.triton\n-          tar -czvf artifacts.tar.gz cache\n-\n-      - name: Upload artifacts archive\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-        uses: actions/upload-artifact@v2\n-        with:\n-          name: artifacts ${{ matrix.runner[1] }}\n-          path: ~/.triton/artifacts.tar.gz\n-\n-      - name: Run CXX unittests\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python\n-          cd \"build/$(ls build | grep -i cmake)\"\n-          ctest\n-\n       - name: Run python tests on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n@@ -312,14 +198,6 @@ jobs:\n           cd python/test/backend/third_party_backends\n           python3 -m pytest --capture=tee-sys -rfs --verbose --backend xpu\n \n-      - name: Regression tests\n-        if: ${{ contains(matrix.runner, 'A100') }}\n-        run: |\n-          cd python/test/regression\n-          sudo nvidia-smi -i 0 -pm 1\n-          sudo nvidia-smi -i 0 --lock-gpu-clocks=1350,1350\n-          python3 -m pytest -vs .\n-          sudo nvidia-smi -i 0 -rgc\n   Compare-artifacts:\n     needs: Integration-Tests-Nvidia\n "}]