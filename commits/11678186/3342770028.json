[{"filename": "include/triton/Conversion/TritonGPUToLLVM/PtxAsmFormat.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "file_content_changes": "@@ -101,7 +101,7 @@ struct PTXBuilder {\n   };\n \n   template <typename INSTR = PTXInstr, typename... Args>\n-  INSTR *create(Args &&...args) {\n+  INSTR *create(Args &&... args) {\n     instrs.emplace_back(std::make_unique<INSTR>(this, args...));\n     return static_cast<INSTR *>(instrs.back().get());\n   }\n@@ -190,14 +190,14 @@ struct PTXInstrCommon {\n   using Operand = PTXBuilder::Operand;\n \n   // clang-format off\n-  PTXInstrExecution& operator()() { return call({},false); }\n-  PTXInstrExecution& operator()(Operand* a) { return call({a},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b) { return call({a, b},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c) { return call({a, b, c},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d) { return call({a, b, c, d},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e) { return call({a, b, c, d, e},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e, Operand* f) { return call({a, b, c, d, e, f},false); }\n-  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e, Operand* f, Operand* g) { return call({a, b, c, d, e, f, g},false); }\n+  PTXInstrExecution& operator()() { return call({}); }\n+  PTXInstrExecution& operator()(Operand* a) { return call({a}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b) { return call({a, b}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c) { return call({a, b, c}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d) { return call({a, b, c, d}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e) { return call({a, b, c, d, e}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e, Operand* f) { return call({a, b, c, d, e, f}); }\n+  PTXInstrExecution& operator()(Operand* a, Operand* b, Operand* c, Operand* d, Operand * e, Operand* f, Operand* g) { return call({a, b, c, d, e, f, g}); }\n   // clang-format on\n \n   // Set operands of this instruction."}]