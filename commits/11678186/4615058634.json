[{"filename": "python/triton/testing.py", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "file_content_changes": "@@ -89,6 +89,35 @@ def do_bench(fn, warmup=25, rep=100, grad_to_none=None,\n         return torch.mean(times).item()\n \n \n+def assert_close(x, y, atol=None, rtol=None, err_msg=''):\n+    import torch\n+\n+    def default_atol(dtype):\n+        return 1e-2\n+\n+    def default_rtol(dtype):\n+        return 0.\n+    if atol is None:\n+        atol = default_atol\n+    if rtol is None:\n+        rtol = default_rtol\n+    if not isinstance(x, torch.Tensor):\n+        x = torch.tensor(x)\n+    if not isinstance(y, torch.Tensor):\n+        y = torch.tensor(y)\n+    atol = atol(x.dtype) if callable(atol) else atol\n+    rtol = rtol(x.dtype) if callable(rtol) else rtol\n+    if x.numel() > 1 or y.numel() > 1:\n+        # we could use a fused kernel for fast `isclose`\n+        # if x.numel()*16 > torch.cuda.mem_get_info()[0]:\n+        torch.testing.assert_close(x.cpu(), y.cpu(), atol=atol, rtol=rtol, equal_nan=True)\n+        # else:\n+        #     torch.testing.assert_close(x, y, atol=atol, rtol=rtol, equal_nan=True)\n+        return\n+    if not torch.isclose(x, y, atol=atol, rtol=rtol):\n+        raise AssertionError(f'{err_msg} {x} is not close to {y} (atol={atol}, rtol={rtol})')\n+\n+\n class Benchmark:\n     \"\"\"\n     This class is used by the :code:`perf_report` function to generate line plots with a concise API."}]