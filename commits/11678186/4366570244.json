[{"filename": "lib/Target/PTX/PTXTranslation.cpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -50,7 +50,6 @@ std::string translateLLVMIRToPTX(llvm::Module &module, int cc, int version) {\n   int ptxMajor = maxPTX / 10;\n   int ptxMinor = maxPTX % 10;\n   // create\n-  llvm::SmallVector<char, 0> buffer;\n   std::string triple = \"nvptx64-nvidia-cuda\";\n   std::string proc = \"sm_\" + std::to_string(maxCC);\n   std::string layout = \"\";\n@@ -82,17 +81,19 @@ std::string translateLLVMIRToPTX(llvm::Module &module, int cc, int version) {\n   else\n     module.setDataLayout(layout);\n   // emit machine code\n+  std::string result;\n+  llvm::raw_string_ostream stream(result);\n+  llvm::buffer_ostream pstream(stream);\n   for (llvm::Function &f : module.functions())\n     f.addFnAttr(llvm::Attribute::AlwaysInline);\n   llvm::legacy::PassManager pass;\n-  llvm::raw_svector_ostream stream(buffer);\n   // emit\n-  machine->addPassesToEmitFile(pass, stream, nullptr,\n+  machine->addPassesToEmitFile(pass, pstream, nullptr,\n                                llvm::CodeGenFileType::CGFT_AssemblyFile);\n   pass.run(module);\n+  stream.flush();\n \n   // post-process\n-  std::string result(buffer.begin(), buffer.end());\n   findAndReplace(result, \".version\", \"\\n\",\n                  \".version \" + std::to_string(ptxMajor) + \".\" +\n                      std::to_string(ptxMinor) + \"\\n\");"}]