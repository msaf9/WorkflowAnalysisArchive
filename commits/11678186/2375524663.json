[{"filename": "python/triton/tools/compare_asm.py", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "file_content_changes": "@@ -31,46 +31,46 @@\n dir0_files = {}\n dir1_files = {}\n for root, _, files in os.walk(dir0):\n-  for file in files:\n-    if not file.endswith('.lock'):\n-      path = os.path.join(root, file)\n-      with open(path, 'rb') as f:\n-        loaded_file = pickle.load(f)\n-        bin = loaded_file['binary']\n-        key = loaded_file['key']\n-        info = key.split('-')[-3:]  # num_warps, num_stages, signature\n-        dict_key = bin.name + '-'.join(info)\n-        dir0_files[dict_key] = bin.asm\n+    for file in files:\n+        if not file.endswith('.lock'):\n+            path = os.path.join(root, file)\n+            with open(path, 'rb') as f:\n+                loaded_file = pickle.load(f)\n+                bin = loaded_file['binary']\n+                key = loaded_file['key']\n+                info = key.split('-')[-3:]  # num_warps, num_stages, signature\n+                dict_key = bin.name + '-'.join(info)\n+                dir0_files[dict_key] = bin.asm\n \n for root, _, files in os.walk(dir1):\n-  for file in files:\n-    if not file.endswith('.lock'):\n-      path = os.path.join(root, file)\n-      with open(path, 'rb') as f:\n-        loaded_file = pickle.load(f)\n-        bin = loaded_file['binary']\n-        key = loaded_file['key']\n-        info = key.split('-')[-3:]  # num_warps, num_stages, signature\n-        dict_key = bin.name + '-'.join(info)\n-        dir1_files[dict_key] = bin.asm\n+    for file in files:\n+        if not file.endswith('.lock'):\n+            path = os.path.join(root, file)\n+            with open(path, 'rb') as f:\n+                loaded_file = pickle.load(f)\n+                bin = loaded_file['binary']\n+                key = loaded_file['key']\n+                info = key.split('-')[-3:]  # num_warps, num_stages, signature\n+                dict_key = bin.name + '-'.join(info)\n+                dir1_files[dict_key] = bin.asm\n \n diff_keys = []\n for key in dir0_files:\n-  asm0 = dir0_files[key]\n-  if key not in dir1_files:\n-    continue\n-  asm1 = dir1_files[key]\n-  if asm0[asm] != asm1[asm]:\n-    diff_keys.append(key)\n+    asm0 = dir0_files[key]\n+    if key not in dir1_files:\n+        continue\n+    asm1 = dir1_files[key]\n+    if asm0[asm] != asm1[asm]:\n+        diff_keys.append(key)\n \n if args.early_stops:\n-  diff_keys = diff_keys[:1]\n+    diff_keys = diff_keys[:1]\n if diff_keys:\n-  with open(args.diff_out0, 'w') as f0, open(args.diff_out1, 'w') as f1:\n-    for key in diff_keys:\n-      f0.write(f'{asm} mismatch at {key}')\n-      f0.write(dir0_files[key][asm])\n-      f0.write('\\n')\n-      f1.write(f'{asm} mismatch at {key}')\n-      f1.write(dir1_files[key][asm])\n-      f1.write('\\n')\n+    with open(args.diff_out0, 'w') as f0, open(args.diff_out1, 'w') as f1:\n+        for key in diff_keys:\n+            f0.write(f'{asm} mismatch at {key}')\n+            f0.write(dir0_files[key][asm])\n+            f0.write('\\n')\n+            f1.write(f'{asm} mismatch at {key}')\n+            f1.write(dir1_files[key][asm])\n+            f1.write('\\n')"}]