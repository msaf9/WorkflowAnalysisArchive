[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "file_content_changes": "@@ -150,10 +150,10 @@ def local_lookup(name: str, absent):\n                 self.global_uses[name] = value\n             return value\n \n-        lookup_order = local_lookup, self.gscope.get, self.builtin_namespace.get\n         absent_marker = object()\n \n         def name_lookup(name: str) -> Any:\n+            lookup_order = local_lookup, self.gscope.get, self.builtin_namespace.get\n             absent = absent_marker\n             for lookup_function in lookup_order:\n                 value = lookup_function(name, absent)\n@@ -201,7 +201,11 @@ def contains_return_op(self, node):\n         elif isinstance(node, ast.Call):\n             fn = self.visit(node.func)\n             if isinstance(fn, triton.JITFunction):\n-                return self.contains_return_op(fn.parse())\n+                old_gscope = self.gscope\n+                self.gscope = sys.modules[fn.fn.__module__].__dict__\n+                ret = self.contains_return_op(fn.parse())\n+                self.gscope = old_gscope\n+                return ret\n             return False\n         elif isinstance(node, ast.If):\n             pred = lambda s: self.contains_return_op(s)"}]