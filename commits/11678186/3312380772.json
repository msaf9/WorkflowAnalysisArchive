[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "file_content_changes": "@@ -622,7 +622,12 @@ class ConvertTritonGPUOpToLLVMPattern\n   Value smem;\n };\n \n-Value convertSplatLikeOpWithMmaLayout(const MmaEncodingAttr& layout,  Type resType, Type elemType, Value constVal, TypeConverter*typeConverter, ConversionPatternRewriter& rewriter, Location loc);\n+Value convertSplatLikeOpWithMmaLayout(const MmaEncodingAttr &layout,\n+                                      Type resType, Type elemType,\n+                                      Value constVal,\n+                                      TypeConverter *typeConverter,\n+                                      ConversionPatternRewriter &rewriter,\n+                                      Location loc);\n \n // Convert SplatOp or arith::ConstantOp with SplatElementsAttr to a\n // LLVM::StructType value.\n@@ -641,15 +646,17 @@ Value convertSplatLikeOp(Type elemType, Type resType, Value constVal,\n     auto srcType = typeConverter->convertType(elemType);\n     auto llSrc = bitcast(srcType, constVal);\n     size_t elemsPerThread = getElemsPerThread(layout, tensorTy.getShape());\n-    llvm::outs() << \"splat.size: \" << elemsPerThread <<\"\\n\";\n+    llvm::outs() << \"splat.size: \" << elemsPerThread << \"\\n\";\n     llvm::SmallVector<Value, 4> elems(elemsPerThread, llSrc);\n     llvm::SmallVector<Type, 4> elemTypes(elems.size(), srcType);\n     auto structTy =\n         LLVM::LLVMStructType::getLiteral(rewriter.getContext(), elemTypes);\n \n     return getStructFromElements(loc, elems, rewriter, structTy);\n-  } else if (auto mmaLayout = tensorTy.getEncoding().dyn_cast<MmaEncodingAttr>()) {\n-    return convertSplatLikeOpWithMmaLayout(mmaLayout, resType, elemType, constVal, typeConverter, rewriter, loc);\n+  } else if (auto mmaLayout =\n+                 tensorTy.getEncoding().dyn_cast<MmaEncodingAttr>()) {\n+    return convertSplatLikeOpWithMmaLayout(\n+        mmaLayout, resType, elemType, constVal, typeConverter, rewriter, loc);\n   }\n }\n \n@@ -2701,8 +2708,6 @@ struct DotOpConversionHelper {\n   };\n };\n \n-\n-\n // This class helps to adapt the existing DotOpConversion to the latest\n // DotOpOperand layout design. It decouples the exising implementation to two\n // parts:\n@@ -2859,9 +2864,9 @@ struct MMA16816ConversionHelper {\n     // LLVM::struct with fcSize elements.\n     auto structTy = llTensor.getType().cast<LLVM::LLVMStructType>();\n     printf(\"struct.size: %d, fcSize: %d\\n\", structTy.getBody().size(), fcSize);\n-    //assert(structTy.getBody().size() == fcSize &&\n-           //\"DotOp's $c operand should pass the same number of values as $d in \"\n-           //\"mma layout.\");\n+    // assert(structTy.getBody().size() == fcSize &&\n+    //\"DotOp's $c operand should pass the same number of values as $d in \"\n+    //\"mma layout.\");\n     return llTensor;\n   }\n \n@@ -3132,21 +3137,26 @@ DotOpConversion::convertMMA16816(triton::DotOp op, OpAdaptor adaptor,\n                               adaptor);\n }\n \n-Value convertSplatLikeOpWithMmaLayout(const MmaEncodingAttr& layout,  Type resType, Type elemType, Value constVal, TypeConverter*typeConverter, ConversionPatternRewriter& rewriter, Location loc) {\n+Value convertSplatLikeOpWithMmaLayout(const MmaEncodingAttr &layout,\n+                                      Type resType, Type elemType,\n+                                      Value constVal,\n+                                      TypeConverter *typeConverter,\n+                                      ConversionPatternRewriter &rewriter,\n+                                      Location loc) {\n   if (layout.getVersion() == 2) {\n     auto tensorTy = resType.cast<RankedTensorType>();\n     auto [repM, repN] = DotOpConversionHelper::getRepMN(tensorTy);\n     size_t fcSize = 4 * repM * repN;\n \n-    auto structTy =\n-        LLVM::LLVMStructType::getLiteral(rewriter.getContext(), SmallVector<Type>(fcSize, elemType));\n-    return getStructFromElements(loc, SmallVector<Value>(fcSize, constVal), rewriter, structTy);\n+    auto structTy = LLVM::LLVMStructType::getLiteral(\n+        rewriter.getContext(), SmallVector<Type>(fcSize, elemType));\n+    return getStructFromElements(loc, SmallVector<Value>(fcSize, constVal),\n+                                 rewriter, structTy);\n   }\n \n-  assert(false && \"Unsupported mma layout found\") ;\n+  assert(false && \"Unsupported mma layout found\");\n }\n \n-\n /// ====================== mma codegen end ============================\n \n class TritonGPUToLLVMTypeConverter : public LLVMTypeConverter {"}]