[{"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "file_content_changes": "@@ -136,16 +136,16 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n   }\n \n   if (!funcs.empty()) {\n-    static const std::string mathlib = \"mathlib\";\n+    static const std::string libdevice = \"libdevice\";\n     // first search for environmental path\n-    std::string env_path = ::triton::tools::getenv(\"TRITON_MATHLIB_PATH\");\n+    std::string env_path = ::triton::tools::getenv(\"TRITON_LIBDEVICE_PATH\");\n     if (!env_path.empty()) {\n-      externLibs.try_emplace(mathlib, env_path);\n+      externLibs.try_emplace(libdevice, env_path);\n       return externLibs;\n     }\n     namespace fs = std::filesystem;\n-    // Search for mathlib relative to its library path if used from Python\n-    // Then native code is in `triton/_C/libtriton.so` and mathlib in\n+    // Search for libdevice relative to its library path if used from Python\n+    // Then native code is in `triton/_C/libtriton.so` and libdevice in\n     // `triton/third_party/cuda/lib/libdevice.10.bc`\n     static const auto this_library_path = [] {\n       Dl_info fileinfo;\n@@ -158,13 +158,13 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n         this_library_path.parent_path().parent_path() / \"third_party\" / \"cuda\" /\n         \"lib\" / \"libdevice.10.bc\";\n     if (fs::exists(runtime_path)) {\n-      externLibs.try_emplace(mathlib, runtime_path.string());\n+      externLibs.try_emplace(libdevice, runtime_path.string());\n     } else {\n       // When using the Math Dialect, it is possible that some ops (e.g., log)\n-      // are lowered to a function call. In this case, we need to link mathlib\n+      // are lowered to a function call. In this case, we need to link libdevice\n       // using its default path:\n       // [triton root dir]/python/triton/language/libdevice.10.bc\n-      // TODO(Keren): handle external linkage other than mathlib?\n+      // TODO(Keren): handle external linkage other than libdevice?\n       static const auto this_file_path = std::filesystem::path(__FILE__);\n       static const auto compiletime_path = this_file_path.parent_path()\n                                                .parent_path()\n@@ -178,16 +178,16 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n                                 compiletime_path.string();\n         llvm::report_fatal_error(error_msg.c_str());\n       }\n-      externLibs.try_emplace(mathlib, compiletime_path.string());\n+      externLibs.try_emplace(libdevice, compiletime_path.string());\n     }\n   }\n \n   return externLibs;\n }\n \n-static void linkMathlib(llvm::Module &module) {\n+static void linkLibdevice(llvm::Module &module) {\n   // please check https://llvm.org/docs/NVPTXUsage.html#reflection-parameters\n-  // this will enable fast math path in mathlib\n+  // this will enable fast math path in libdevice\n   // for example, when enable nvvm-reflect-ftz, sqrt.approx.f32 will change to\n   // sqrt.approx.ftz.f32\n   auto &ctx = module.getContext();\n@@ -221,8 +221,8 @@ static bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n     return true;\n   }\n \n-  if (name == \"mathlib\") {\n-    linkMathlib(module);\n+  if (name == \"libdevice\") {\n+    linkLibdevice(module);\n   } else {\n     assert(false && \"unknown extern lib: \");\n   }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "file_content_changes": "@@ -1802,11 +1802,11 @@ def _kernel(dst):\n \n \n @pytest.mark.parametrize(\"dtype_str, expr, lib_path\",\n-                         [('int32', 'mathlib.ffs', ''),\n-                          ('float32', 'mathlib.log2', ''),\n-                          ('float32', 'mathlib.pow', tl.mathlib.MATHLIB_PATH),\n-                          ('float64', 'mathlib.norm4d', '')])\n-def test_mathlib_tensor(dtype_str, expr, lib_path):\n+                         [('int32', 'math.ffs', ''),\n+                          ('float32', 'math.log2', ''),\n+                          ('float32', 'math.pow', tl.math.LIBDEVICE_PATH),\n+                          ('float64', 'math.norm4d', '')])\n+def test_math_tensor(dtype_str, expr, lib_path):\n \n     @triton.jit\n     def kernel(X, Y, BLOCK: tl.constexpr):\n@@ -1819,37 +1819,37 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n     # limit the range of integers so that the sum does not overflow\n     x = numpy_random(shape, dtype_str=dtype_str, rs=rs)\n \n-    if expr == 'mathlib.log2':\n-        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.broadcast_to(tl.mathlib.log2(5.0), x.shape)'})\n+    if expr == 'math.log2':\n+        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.broadcast_to(tl.math.log2(5.0), x.shape)'})\n         y_ref = np.log2(5.0)\n-    elif expr == 'mathlib.ffs':\n-        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.mathlib.ffs(x)'})\n+    elif expr == 'math.ffs':\n+        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.math.ffs(x)'})\n         y_ref = np.zeros(shape, dtype=x.dtype)\n         for i in range(shape[0]):\n             y_ref[i] = (int(x[i]) & int(-x[i])).bit_length()\n-    elif expr == 'mathlib.pow':\n+    elif expr == 'math.pow':\n         # numpy does not allow negative factors in power, so we use abs()\n         x = np.abs(x)\n-        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.mathlib.pow(x, x)'})\n+        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.math.pow(x, x)'})\n         y_ref = np.power(x, x)\n-    elif expr == 'mathlib.norm4d':\n-        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.mathlib.norm4d(x, x, x, x)'})\n+    elif expr == 'math.norm4d':\n+        kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.math.norm4d(x, x, x, x)'})\n         y_ref = np.sqrt(4 * np.power(x, 2))\n \n     x_tri = to_triton(x)\n     # triton result\n     y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device='cuda')\n-    kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'mathlib': lib_path})\n+    kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'libdevice': lib_path})\n     # compare\n-    if expr == 'mathlib.ffs':\n+    if expr == 'math.ffs':\n         np.testing.assert_equal(y_ref, to_numpy(y_tri))\n     else:\n         np.testing.assert_allclose(y_ref, to_numpy(y_tri), rtol=0.01)\n \n \n @pytest.mark.parametrize(\"dtype_str, expr, lib_path\",\n-                         [('float32', 'mathlib.pow', '')])\n-def test_mathlib_scalar(dtype_str, expr, lib_path):\n+                         [('float32', 'math.pow', '')])\n+def test_math_scalar(dtype_str, expr, lib_path):\n \n     @triton.jit\n     def kernel(X, Y, BLOCK: tl.constexpr):\n@@ -1865,13 +1865,13 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n \n     # numpy does not allow negative factors in power, so we use abs()\n     x = np.abs(x)\n-    kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.mathlib.pow(x, x)'})\n+    kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': 'tl.math.pow(x, x)'})\n     y_ref[:] = np.power(x, x)\n \n     # triton result\n     x_tri = to_triton(x)[0].item()\n     y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device='cuda')\n-    kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'mathlib': lib_path})\n+    kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'math': lib_path})\n     # compare\n     np.testing.assert_allclose(y_ref, to_numpy(y_tri), rtol=0.01)\n "}, {"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -5,7 +5,7 @@\n     ir,\n     builtin,\n )\n-from . import mathlib\n+from . import math\n from .core import (\n     abs,\n     arange,\n@@ -141,7 +141,7 @@\n     \"int64\",\n     \"int8\",\n     \"ir\",\n-    \"mathlib\",\n+    \"math\",\n     \"load\",\n     \"log\",\n     \"max\","}, {"filename": "python/triton/language/math.py", "status": "renamed", "additions": 200, "deletions": 200, "changes": 400, "file_content_changes": "@@ -4,35 +4,35 @@\n from . import core, extern\n \n LOCAL_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"..\", \"third_party\", \"cuda\", \"lib\", \"libdevice.10.bc\")\n-MATHLIB_PATH = os.getenv(\"TRITON_MATHLIB_PATH\", LOCAL_PATH)\n+LIBDEVICE_PATH = os.getenv(\"TRITON_LIBDEVICE_PATH\", LOCAL_PATH)\n \n \n @impl.extern\n def clz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_clz\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_clzll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def popc(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_popc\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_popcll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def byte_perm(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_byte_perm\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def min(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_min\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umin\", core.dtype(\"uint32\")),\n                                (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_llmin\", core.dtype(\"int64\")),\n@@ -44,7 +44,7 @@ def min(arg0, arg1, _builder=None):\n \n @impl.extern\n def max(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_max\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umax\", core.dtype(\"uint32\")),\n                                (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_llmax\", core.dtype(\"int64\")),\n@@ -56,7 +56,7 @@ def max(arg0, arg1, _builder=None):\n \n @impl.extern\n def mulhi(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mulhi\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umulhi\", core.dtype(\"uint32\")),\n                                (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n@@ -66,31 +66,31 @@ def mulhi(arg0, arg1, _builder=None):\n \n @impl.extern\n def mul24(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mul24\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umul24\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n @impl.extern\n def brev(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_brev\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_brevll\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sad(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"uint32\"),): (\"__nv_sad\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_usad\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n @impl.extern\n def abs(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_abs\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_llabs\", core.dtype(\"int64\")),\n                                (core.dtype(\"fp32\"),): (\"__nv_fabsf\", core.dtype(\"fp32\")),\n@@ -100,1370 +100,1370 @@ def abs(arg0, _builder=None):\n \n @impl.extern\n def floor(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_floorf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_floor\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcp64h(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_rcp64h\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rsqrt(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rsqrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rsqrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ceil(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_ceil\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"),): (\"__nv_ceilf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def trunc(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_trunc\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"),): (\"__nv_truncf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def exp2(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_exp2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def saturatef(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_saturatef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_dividef(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_fdividef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def div_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def div_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def div_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def div_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcp_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcp_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcp_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcp_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sqrt_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sqrt_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sqrt_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sqrt_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sqrt(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sqrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sqrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def add_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rn\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def add_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rz\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def add_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rd\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def add_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_ru\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def mul_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rn\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def mul_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rz\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def mul_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rd\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def mul_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_ru\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2float_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2float_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2float_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2float_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2int_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2int_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2int_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2int_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2uint_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2uint_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2uint_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2uint_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def int2double_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint2double_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2int_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2int_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2int_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2int_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2uint_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2uint_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2uint_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2uint_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def int2float_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def int2float_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def int2float_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def int2float_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint2float_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint2float_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint2float_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint2float_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def hiloint2double(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hiloint2double\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2loint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2loint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2hiint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2hiint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ll_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ll_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ll_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ll_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ull_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ull_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ull_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def float2ull_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ll_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ll_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ll_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ll_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ull_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ull_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ull_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double2ull_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2float_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2float_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2float_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2float_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2float_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2float_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2float_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2float_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2double_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2double_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2double_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ll2double_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2double_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2double_rz(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2double_rd(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ull2double_ru(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def int_as_float(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float_as_int(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float_as_int\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def uint_as_float(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def float_as_uint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float_as_uint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def longlong_as_double(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_longlong_as_double\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def double_as_longlong(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double_as_longlong\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_sinf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_sinf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_cosf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_cosf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_log2f(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_log2f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_logf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_logf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_expf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_expf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_tanf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_tanf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_exp10f(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_exp10f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_log10f(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_log10f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def fast_powf(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_powf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def hadd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hadd\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_uhadd\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n @impl.extern\n def rhadd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_rhadd\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_urhadd\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n @impl.extern\n def sub_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sub_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sub_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sub_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rsqrt_rn(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frsqrt_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @impl.extern\n def ffs(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_ffs\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_ffsll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def rint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rintf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rint\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def llrint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_llrintf\", core.dtype(\"int64\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_llrint\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def nearbyint(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_nearbyintf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_nearbyint\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def isnan(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isnanf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def signbit(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_signbitf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def copysign(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_copysignf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_copysign\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def finitef(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_finitef\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def isinf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isinff\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def nextafter(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_nextafterf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_nextafter\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sin(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sin\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cos(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cosf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cos\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sinpi(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinpif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sinpi\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cospi(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cospif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cospi\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def tan(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tanf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tan\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def log2(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def exp(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_expf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def exp10(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_exp10f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp10\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cosh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_coshf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cosh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def sinh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sinh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def tanh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tanhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tanh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def atan2(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_atan2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_atan2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def atan(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_atanf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_atan\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def asin(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_asinf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_asin\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def acos(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_acosf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_acos\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def log(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_logf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def log10(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log10f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log10\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def log1p(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log1pf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log1p\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def acosh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_acoshf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_acosh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def asinh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_asinhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_asinh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def atanh(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_atanhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_atanh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def expm1(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_expm1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_expm1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def hypot(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_hypotf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_hypot\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rhypot(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rhypotf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rhypot\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def norm3d(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm3df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm3d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rnorm3d(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm3df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm3d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def norm4d(arg0, arg1, arg2, arg3, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, arg3, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm4df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm4d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rnorm4d(arg0, arg1, arg2, arg3, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, arg3, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm4df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm4d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cbrt(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cbrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cbrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def rcbrt(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rcbrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rcbrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def j0(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_j0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_j0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def j1(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_j1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_j1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def y0(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_y0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_y0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def y1(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_y1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_y1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def yn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_ynf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_yn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def jn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_jnf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_jn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cyl_bessel_i0(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def cyl_bessel_i1(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def erf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erff\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erf\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def erfinv(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def erfc(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfc\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def erfcx(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcxf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfcx\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def erfcinv(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfcinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def normcdfinv(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_normcdfinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_normcdfinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def normcdf(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_normcdff\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_normcdf\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def lgamma(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_lgammaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_lgamma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ldexp(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_ldexpf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_ldexp\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def scalbn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_scalbnf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_scalbn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fmod(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmodf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fmod\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def remainder(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_remainderf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_remainder\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fma(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, arg2, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def pow(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_powif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_powi\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n@@ -1473,54 +1473,54 @@ def pow(arg0, arg1, _builder=None):\n \n @impl.extern\n def tgamma(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tgammaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tgamma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def round(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_roundf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_round\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def llround(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_llroundf\", core.dtype(\"int64\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_llround\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n @impl.extern\n def fdim(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, arg1, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdimf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fdim\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def ilogb(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_ilogbf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_ilogb\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @impl.extern\n def logb(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_logbf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_logb\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @impl.extern\n def isfinited(arg0, _builder=None):\n-    return extern.elementwise(\"mathlib\", MATHLIB_PATH, [arg0, ],\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_isfinited\", core.dtype(\"int32\")),\n                                }, _builder)"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -1188,14 +1188,14 @@ def xor_sum(input: tl.tensor, axis: int, builder: ir.builder) -> tl.tensor:\n def umulhi(x: tl.tensor, y: tl.tensor, builder: ir.builder) -> tl.tensor:\n     x, y = binary_op_type_checking_impl(x, y, builder)\n     # FIXME(Keren): not portable, should be fixed\n-    from . import mathlib\n-    return mathlib.mulhi(x, y, _builder=builder)\n+    from . import math\n+    return math.mulhi(x, y, _builder=builder)\n \n \n def floor(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n     # FIXME(Keren): not portable, should be fixed\n-    from . import mathlib\n-    return mathlib.floor(x, _builder=builder)\n+    from . import math\n+    return math.floor(x, _builder=builder)\n \n \n def exp(x: tl.tensor, builder: ir.builder) -> tl.tensor:"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "file_content_changes": "@@ -152,9 +152,9 @@ class Libdevice(ExternLibrary):\n     def __init__(self, path) -> None:\n         '''\n         Constructor for Libdevice.\n-        :param path: path of the mathlib library\n+        :param path: path of the libdevice library\n         '''\n-        super().__init__(\"mathlib\", path)\n+        super().__init__(\"libdevice\", path)\n         self._symbol_groups = {}\n \n     @staticmethod\n@@ -286,11 +286,11 @@ def _output_stubs(self) -> str:\n         # @extern.extern\n         # def <op_name>(<args>, _builder=None):\n         #   arg_type_symbol_dict = {[arg_type]: {(symbol, ret_type)}}\n-        #   return extern.dispatch(\"mathlib\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n+        #   return extern.dispatch(\"libdevice\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n         import_str = \"from . import core, extern\\n\"\n         import_str += \"import os\\n\"\n         header_str = \"LOCAL_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \\\"..\\\", \\\"third_party\\\", \\\"cuda\\\", \\\"lib\\\", \\\"libdevice.10.bc\\\")\\n\"\n-        header_str += \"MATHLIB_PATH = os.getenv(\\\"TRITON_MATHLIB_PATH\\\", LOCAL_PATH)\\n\"\n+        header_str += \"LIBDEVICE_PATH = os.getenv(\\\"TRITON_LIBDEVICE_PATH\\\", LOCAL_PATH)\\n\"\n         func_str = \"\"\n         for symbols in self._symbol_groups.values():\n             func_str += \"@extern.extern\\n\"\n@@ -299,7 +299,7 @@ def _output_stubs(self) -> str:\n                 func_name_str += f\"{arg_name}, \"\n             func_name_str += \"_builder=None):\\n\"\n \n-            return_str = f\"\\treturn extern.elementwise(\\\"{self._name}\\\", MATHLIB_PATH, [\"\n+            return_str = f\"\\treturn extern.elementwise(\\\"{self._name}\\\", LIBDEVICE_PATH, [\"\n             for arg_name in symbols[0].arg_names:\n                 return_str += f\"{arg_name}, \"\n             return_str += \"], \\n\"\n@@ -347,7 +347,7 @@ def path(self) -> str:\n         return self._path\n \n \n-extern_libs = [\"mathlib\"]\n+extern_libs = [\"libdevice\"]\n \n \n def build(\n@@ -363,7 +363,7 @@ def build(\n       :param lib_name: name of the library\n       :param output_dir: path to the output directory\n     '''\n-    if lib_name == \"mathlib\":\n+    if lib_name == \"libdevice\":\n         extern_lib = Libdevice(lib_path)\n     else:\n         raise Exception(f\"Unknown extern library: {lib_name}\")"}]