[{"filename": "bin/CMakeLists.txt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "file_content_changes": "@@ -21,6 +21,26 @@ target_link_libraries(triton-opt PRIVATE\n \n mlir_check_all_link_libraries(triton-opt)\n \n+add_llvm_executable(triton-reduce triton-reduce.cpp PARTIAL_SOURCES_INTENDED)\n+mlir_check_all_link_libraries(triton-reduce)\n+\n+llvm_update_compile_flags(triton-reduce)\n+target_link_libraries(triton-reduce PRIVATE\n+  TritonAnalysis\n+  TritonTransforms\n+  TritonGPUTransforms\n+  ${dialect_libs}\n+  ${conversion_libs}\n+  # tests\n+  TritonTestAnalysis\n+  # MLIR core\n+  MLIRReduceLib\n+  MLIRPass\n+  MLIRTransforms\n+)\n+\n+mlir_check_all_link_libraries(triton-reduce)\n+\n \n add_llvm_executable(triton-translate triton-translate.cpp PARTIAL_SOURCES_INTENDED)\n llvm_update_compile_flags(triton-translate)"}, {"filename": "bin/RegisterTritonDialects.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "file_content_changes": "@@ -0,0 +1,38 @@\n+#pragma once\n+#include \"triton/Dialect/Triton/IR/Dialect.h\"\n+#include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n+\n+#include \"triton/Dialect/Triton/Transforms/Passes.h\"\n+#include \"triton/Dialect/TritonGPU/Transforms/Passes.h\"\n+\n+#include \"triton/Conversion/TritonGPUToLLVM/Passes.h\"\n+#include \"triton/Conversion/TritonToTritonGPU/Passes.h\"\n+\n+#include \"mlir/InitAllPasses.h\"\n+\n+namespace mlir {\n+namespace test {\n+void registerTestAliasPass();\n+void registerTestAlignmentPass();\n+void registerTestAllocationPass();\n+void registerTestMembarPass();\n+} // namespace test\n+} // namespace mlir\n+\n+inline void registerTritonDialects(mlir::DialectRegistry &registry) {\n+  mlir::registerAllPasses();\n+  mlir::registerTritonPasses();\n+  mlir::registerTritonGPUPasses();\n+  mlir::test::registerTestAliasPass();\n+  mlir::test::registerTestAlignmentPass();\n+  mlir::test::registerTestAllocationPass();\n+  mlir::test::registerTestMembarPass();\n+  mlir::triton::registerConvertTritonToTritonGPUPass();\n+  mlir::triton::registerConvertTritonGPUToLLVMPass();\n+\n+  // TODO: register Triton & TritonGPU passes\n+  registry.insert<mlir::triton::TritonDialect, mlir::cf::ControlFlowDialect,\n+                  mlir::triton::gpu::TritonGPUDialect, mlir::func::FuncDialect,\n+                  mlir::math::MathDialect, mlir::arith::ArithDialect,\n+                  mlir::scf::SCFDialect, mlir::gpu::GPUDialect>();\n+}"}, {"filename": "bin/triton-opt.cpp", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "file_content_changes": "@@ -1,42 +1,10 @@\n-#include \"triton/Dialect/Triton/IR/Dialect.h\"\n-#include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n+#include \"./RegisterTritonDialects.h\"\n \n-#include \"triton/Dialect/Triton/Transforms/Passes.h\"\n-#include \"triton/Dialect/TritonGPU/Transforms/Passes.h\"\n-\n-#include \"triton/Conversion/TritonGPUToLLVM/Passes.h\"\n-#include \"triton/Conversion/TritonToTritonGPU/Passes.h\"\n-\n-#include \"mlir/IR/Dialect.h\"\n-#include \"mlir/InitAllPasses.h\"\n #include \"mlir/Tools/mlir-opt/MlirOptMain.h\"\n \n-namespace mlir {\n-namespace test {\n-void registerTestAliasPass();\n-void registerTestAlignmentPass();\n-void registerTestAllocationPass();\n-void registerTestMembarPass();\n-} // namespace test\n-} // namespace mlir\n-\n int main(int argc, char **argv) {\n-  mlir::registerAllPasses();\n-  mlir::registerTritonPasses();\n-  mlir::registerTritonGPUPasses();\n-  mlir::test::registerTestAliasPass();\n-  mlir::test::registerTestAlignmentPass();\n-  mlir::test::registerTestAllocationPass();\n-  mlir::test::registerTestMembarPass();\n-  mlir::triton::registerConvertTritonToTritonGPUPass();\n-  mlir::triton::registerConvertTritonGPUToLLVMPass();\n-\n-  // TODO: register Triton & TritonGPU passes\n   mlir::DialectRegistry registry;\n-  registry.insert<mlir::triton::TritonDialect, mlir::cf::ControlFlowDialect,\n-                  mlir::triton::gpu::TritonGPUDialect, mlir::func::FuncDialect,\n-                  mlir::math::MathDialect, mlir::arith::ArithDialect,\n-                  mlir::scf::SCFDialect, mlir::gpu::GPUDialect>();\n+  registerTritonDialects(registry);\n \n   return mlir::asMainReturnCode(mlir::MlirOptMain(\n       argc, argv, \"Triton (GPU) optimizer driver\\n\", registry));"}, {"filename": "bin/triton-reduce.cpp", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "file_content_changes": "@@ -0,0 +1,11 @@\n+#include \"./RegisterTritonDialects.h\"\n+\n+#include \"mlir/Tools/mlir-reduce/MlirReduceMain.h\"\n+\n+int main(int argc, char **argv) {\n+  mlir::DialectRegistry registry;\n+  registerTritonDialects(registry);\n+\n+  mlir::MLIRContext context(registry);\n+  return mlir::failed(mlir::mlirReduceMain(argc, argv, context));\n+}"}]