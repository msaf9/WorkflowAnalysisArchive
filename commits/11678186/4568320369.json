[{"filename": "include/triton/Dialect/Triton/IR/Dialect.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "file_content_changes": "@@ -21,6 +21,19 @@\n namespace mlir {\n namespace triton {\n \n+// Type inference\n+Type getPointeeType(Type type);\n+\n+Type getPointerType(Type type);\n+\n+Type getElementTypeOfTensorPointerType(Type type);\n+\n+Type getI1SameShape(Type type);\n+\n+Type getI32SameShape(Type type);\n+\n+Type getPointerTypeSameShape(Type type);\n+\n class DialectInferLayoutInterface\n     : public DialectInterface::Base<DialectInferLayoutInterface> {\n public:"}, {"filename": "lib/Dialect/Triton/IR/Dialect.cpp", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "file_content_changes": "@@ -49,3 +49,62 @@ Operation *TritonDialect::materializeConstant(OpBuilder &builder,\n                                               Location loc) {\n   return builder.create<arith::ConstantOp>(loc, type, value);\n }\n+\n+namespace mlir {\n+\n+namespace triton {\n+\n+// Type inference\n+Type getI1SameShape(Type type) {\n+  auto i1Type = IntegerType::get(type.getContext(), 1);\n+  if (auto tensorType = type.dyn_cast<RankedTensorType>())\n+    return RankedTensorType::get(tensorType.getShape(), i1Type,\n+                                 tensorType.getEncoding());\n+  return Type();\n+}\n+\n+Type getPointeeType(Type type) {\n+  if (auto tensorType = type.dyn_cast<RankedTensorType>()) {\n+    // Tensor of pointers\n+    auto shape = tensorType.getShape();\n+    auto ptrType = tensorType.getElementType().dyn_cast<PointerType>();\n+    Type pointeeType = ptrType.getPointeeType();\n+    return RankedTensorType::get(shape, pointeeType, tensorType.getEncoding());\n+  } else if (auto ptrType = type.dyn_cast<PointerType>()) {\n+    // scalar pointer\n+    Type pointeeType = ptrType.getPointeeType();\n+    return pointeeType;\n+  }\n+  return Type();\n+}\n+\n+Type getI32SameShape(Type type) {\n+  auto i32Type = IntegerType::get(type.getContext(), 32);\n+  if (auto tensorType = type.dyn_cast<RankedTensorType>())\n+    return RankedTensorType::get(tensorType.getShape(), i32Type,\n+                                 tensorType.getEncoding());\n+  return i32Type;\n+}\n+\n+Type getPointerTypeSameShape(Type type) {\n+  if (auto tensorType = type.dyn_cast<RankedTensorType>()) {\n+    Type elementType = tensorType.getElementType();\n+    auto shape = tensorType.getShape();\n+    PointerType ptrType = PointerType::get(elementType, 1);\n+    return RankedTensorType::get(shape, ptrType, tensorType.getEncoding());\n+  } else {\n+    return PointerType::get(type, 1);\n+  }\n+}\n+\n+Type getPointerType(Type type) { return PointerType::get(type, 1); }\n+\n+Type getElementTypeOfTensorPointerType(Type type) {\n+  if (auto ptrType = type.dyn_cast<PointerType>())\n+    if (auto tensorType = ptrType.getPointeeType().dyn_cast<RankedTensorType>())\n+      return tensorType.getElementType();\n+  return {};\n+}\n+\n+} // namespace triton\n+} // namespace mlir"}, {"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "file_content_changes": "@@ -8,43 +8,6 @@\n namespace mlir {\n namespace triton {\n \n-// Type inference\n-static Type getI1SameShape(Type type) {\n-  auto i1Type = IntegerType::get(type.getContext(), 1);\n-  if (auto tensorType = type.dyn_cast<RankedTensorType>())\n-    return RankedTensorType::get(tensorType.getShape(), i1Type,\n-                                 tensorType.getEncoding());\n-  return i1Type;\n-}\n-\n-static Type getI32SameShape(Type type) {\n-  auto i32Type = IntegerType::get(type.getContext(), 32);\n-  if (auto tensorType = type.dyn_cast<RankedTensorType>())\n-    return RankedTensorType::get(tensorType.getShape(), i32Type,\n-                                 tensorType.getEncoding());\n-  return i32Type;\n-}\n-\n-static Type getPointerTypeSameShape(Type type) {\n-  if (auto tensorType = type.dyn_cast<RankedTensorType>()) {\n-    Type elementType = tensorType.getElementType();\n-    auto shape = tensorType.getShape();\n-    PointerType ptrType = PointerType::get(elementType, 1);\n-    return RankedTensorType::get(shape, ptrType, tensorType.getEncoding());\n-  } else {\n-    return PointerType::get(type, 1);\n-  }\n-}\n-\n-static Type getPointerType(Type type) { return PointerType::get(type, 1); }\n-\n-static Type getElementTypeOfTensorPointerType(Type type) {\n-  if (auto ptrType = type.dyn_cast<PointerType>())\n-    if (auto tensorType = ptrType.getPointeeType().dyn_cast<RankedTensorType>())\n-      return tensorType.getElementType();\n-  return {};\n-}\n-\n // Parser & printer for assembly forms\n ParseResult LoadOp::parse(OpAsmParser &parser, OperationState &result) {\n   // Parse operands"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "file_content_changes": "@@ -16,30 +16,6 @@ using namespace mlir::triton::gpu;\n namespace mlir {\n namespace triton {\n \n-// Type inference\n-static Type getI1SameShape(Type type) {\n-  auto i1Type = IntegerType::get(type.getContext(), 1);\n-  if (auto tensorType = type.dyn_cast<RankedTensorType>())\n-    return RankedTensorType::get(tensorType.getShape(), i1Type,\n-                                 tensorType.getEncoding());\n-  return Type();\n-}\n-\n-static Type getPointeeType(Type type) {\n-  if (auto tensorType = type.dyn_cast<RankedTensorType>()) {\n-    // Tensor of pointers\n-    auto shape = tensorType.getShape();\n-    auto ptrType = tensorType.getElementType().dyn_cast<PointerType>();\n-    Type pointeeType = ptrType.getPointeeType();\n-    return RankedTensorType::get(shape, pointeeType, tensorType.getEncoding());\n-  } else if (auto ptrType = type.dyn_cast<PointerType>()) {\n-    // scalar pointer\n-    Type pointeeType = ptrType.getPointeeType();\n-    return pointeeType;\n-  }\n-  return Type();\n-}\n-\n namespace gpu {\n \n // TODO: Inheritance of layout attributes"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "file_content_changes": "@@ -22,15 +22,6 @@ namespace ttg = triton::gpu;\n #define GEN_PASS_CLASSES\n #include \"triton/Dialect/TritonGPU/Transforms/Passes.h.inc\"\n \n-static Type getI1SameShape(Value v) {\n-  Type vType = v.getType();\n-  auto i1Type = IntegerType::get(vType.getContext(), 1);\n-  if (auto tensorType = vType.dyn_cast<RankedTensorType>())\n-    return RankedTensorType::get(tensorType.getShape(), i1Type,\n-                                 tensorType.getEncoding());\n-  return i1Type;\n-}\n-\n // pass named attrs (e.g., tt.contiguity) from Triton to Triton\n static void addNamedAttrs(Operation *op, DictionaryAttr dictAttrs) {\n   for (const NamedAttribute attr : dictAttrs.getValue())\n@@ -321,7 +312,7 @@ LogicalResult LoopPipeliner::initialize() {\n \n Value LoopPipeliner::getLoadMask(triton::LoadOp loadOp, Value mappedMask,\n                                  Value loopCond, OpBuilder &builder) {\n-  Type maskType = getI1SameShape(loadOp);\n+  Type maskType = triton::getI1SameShape(loadOp.getType());\n   Value mask = loadOp.getMask();\n   Value newMask;\n   if (mask) {"}]