[{"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "file_content_changes": "@@ -346,18 +346,24 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK: llvm.mlir.global external @global_smem\n   // CHECK-LABEL: basic_extract_slice\n   func @basic_extract_slice() {\n-    // CHECK: %[[BASE0:.*]] = llvm.mlir.addressof @global_smem\n-    // CHECK-NEXT: %[[BASE1:.*]] = llvm.bitcast %[[BASE0]]\n-    // CHECK-NEXT: %[[OFFSET0:.*]] = llvm.mlir.constant\n-    // CHECK-NEXT: %[[OFFSET1:.*]] = llvm.mlir.constant\n-    // CHECK-NEXT: llvm.getelementptr %[[BASE1]][%[[OFFSET1]]]\n-    // CHECK-NEXT: %[[BASE2:.*]] = llvm.bitcast\n-    // CHECK-NEXT: %[[OFFSET2:.*]] = llvm.mlir.constant\n-    // CHECK-NEXT: %[[OFFSET3:.*]] = llvm.mul %[[OFFSET0]], %[[OFFSET2]]\n-    // CHECK-NEXT: llvm.getelementptr %[[BASE2]][%[[OFFSET3]]]\n-    %index = arith.constant 1 : i32\n+    // CHECK: llvm.mlir.addressof @global_smem\n+    // CHECK: llvm.extractvalue \n+    // CHECK-NEXT: llvm.extractvalue\n+    // CHECK-NEXT: llvm.extractvalue\n+    // CHECK-NEXT: llvm.extractvalue\n+    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK-NEXT: llvm.mul\n+    // CHECK-NEXT: llvm.add\n+    // CHECK-NEXT: llvm.mul\n+    // CHECK-NEXT: llvm.add\n+    // CHECK-NEXT: llvm.mul\n+    // CHECK-NEXT: llvm.add\n+    // CHECK-NEXT: llvm.getelementptr\n+    %index = arith.constant 1 : index\n     %0 = triton_gpu.alloc_tensor : tensor<128x16x32xf32, #shared0>\n-    %1 = triton_gpu.extract_slice %0, %index {axis = 0: i32} : tensor<128x16x32xf32, #shared0> -> tensor<16x32xf32, #shared0>\n+    %1 = tensor.extract_slice %0[%index, 0, 0][1, 16, 32][1, 1, 1] : tensor<128x16x32xf32, #shared0> to tensor<16x32xf32, #shared0>\n     return\n   }\n }\n@@ -504,15 +510,15 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK: llvm.mlir.constant(16 : i32) : i32\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK: llvm.mlir.constant(16 : i32) : i32\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n+    // CHECK: llvm.mlir.constant(16 : i32) : i32\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4"}]