[{"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "file_content_changes": "@@ -2310,58 +2310,6 @@ inline Value* generator::shfl_sync(Value* acc, int32_t i){\n   return bit_cast(ret, ty);\n }\n \n-/**\n- * \\brief Code Generation for `reduce` (1D case)\n- */\n-void generator::visit_reduce1d_inst(ir::reduce_inst* x, std::function<Value*(Value*,Value*)> do_acc, Value *neutral) {\n-  std::map<indices_t, Value*> partial;\n-  ir::value *arg = x->get_operand(0);\n-  Type *ret_ty = cvt(x->get_type()->get_scalar_ty());\n-  Value *acc = nullptr;\n-\n-  // reduce within thread\n-  for(indices_t idx: idxs_.at(arg)){\n-    Value *val = vals_[arg][idx];\n-    acc = !acc ? val : do_acc(acc, val);\n-  }\n-  // reduce within wrap\n-  for(int i = 16; i > 0; i >>= 1)\n-    acc = do_acc(acc, shfl_sync(acc, i));\n-  // pointers\n-  unsigned addr_space = shmem_->getType()->getPointerAddressSpace();\n-  Value *base = bit_cast(shmem_, ptr_ty(ret_ty, addr_space));\n-  Value* thread = tgt_->get_local_id(mod_, *builder_, 0);\n-  Value* warp = udiv(thread, i32(32));\n-  Value* lane = urem(thread, i32(32));\n-  // store warp result in shared memory\n-  add_barrier();\n-  store(neutral, gep(base, lane));\n-  add_barrier();\n-  store(acc, gep(base, warp));\n-  add_barrier();\n-\n-  // reduce across warps\n-  Value *cond = icmp_eq(warp, i32(0));\n-  Instruction *barrier = add_barrier();\n-  builder_->SetInsertPoint(barrier->getParent());\n-  Instruction* dummy = builder_->CreateRet(nullptr);\n-  Instruction *term = llvm::SplitBlockAndInsertIfThen(cond, barrier, false);\n-  dummy->removeFromParent();\n-  builder_->SetInsertPoint(term);\n-  Value* ret = load(gep(base, thread));\n-  for(int i = (num_warps_+1)/2; i > 0; i >>= 1){\n-    Value *current = shfl_sync(ret, i);\n-    ret = do_acc(ret, current);\n-  }\n-  store(ret, gep(base, thread));\n-\n-  // store first warp done\n-  builder_->SetInsertPoint(barrier->getParent());\n-  ret = load(base);\n-  for(indices_t idx: idxs_.at(x))\n-    vals_[x][idx] = ret;\n-}\n-\n /**\n  * \\brief Code Generation for `reduce` (ND case)\n  */"}]