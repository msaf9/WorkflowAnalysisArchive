[{"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -159,6 +159,20 @@ SmallVector<unsigned> getUniqueContigPerThread(Type type) {\n     return SmallVector<unsigned>(1, 1);\n   auto tensorType = type.cast<RankedTensorType>();\n   auto shape = tensorType.getShape();\n+  // If slice layout, call recursively on parent layout, and drop\n+  // sliced dim\n+  if (auto sliceLayout =\n+          tensorType.getEncoding().dyn_cast<SliceEncodingAttr>()) {\n+    auto parentLayout = sliceLayout.getParent();\n+    auto parentShape = sliceLayout.paddedShape(shape);\n+    auto parentTy = RankedTensorType::get(\n+        parentShape, tensorType.getElementType(), parentLayout);\n+    auto parentUniqueContigPerThread = getUniqueContigPerThread(parentTy);\n+    parentUniqueContigPerThread.erase(parentUniqueContigPerThread.begin() +\n+                                      sliceLayout.getDim());\n+    return parentUniqueContigPerThread;\n+  }\n+  // Base case\n   auto rank = shape.size();\n   SmallVector<unsigned> ret(rank);\n   auto contigPerThread = getContigPerThread(tensorType.getEncoding());"}]