[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "file_content_changes": "@@ -1961,3 +1961,16 @@ def test_convert2d(dtype, shape, src_layout, dst_layout, device='cuda'):\n     kernel[(1, 1, 1)](x.data_ptr(), z.data_ptr())\n \n     assert torch.equal(z, x)\n+\n+\n+def test_load_scalar_with_mask():\n+    @triton.jit\n+    def kernel(Input, Index, Out, N: int):\n+        index = tl.load(Index)\n+        scalar = tl.load(Input + index, mask=index < N, other=0)\n+        tl.store(Out, scalar, mask=index < N)\n+    Index = torch.tensor([0], dtype=torch.int32, device='cuda')\n+    Input = torch.tensor([0], dtype=torch.int32, device='cuda')\n+    Out = torch.empty_like(Index, device='cuda')\n+    kernel[(1,)](Input, Index, Out, Index.numel())\n+    assert Out.data[0] == 0"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -31,7 +31,7 @@ def _to_tensor(x, builder):\n         return _to_tensor(x.value, builder)\n     elif isinstance(x, tensor):\n         return x\n-    assert False, f'cannot convert {x} to tensor'\n+    assert False, f\"cannot convert {x} of type {type(x)} to tensor\"\n \n \n class dtype:"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -814,7 +814,7 @@ def store(ptr: tl.tensor,\n         raise ValueError(\"Pointer argument of store instruction is \" + ptr.type.__repr__())\n     if ptr.type.is_block():\n         val = broadcast_impl_shape(val, ptr.type.get_block_shapes(), builder)\n-    if mask:\n+    if mask and ptr.type.is_block():\n         mask = broadcast_impl_shape(mask, ptr.type.get_block_shapes(), builder)\n     ptr_ty = ptr.type.scalar\n     elt_ty = ptr_ty.element_ty"}]