[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -67,7 +67,7 @@ jobs:\n       - name: Install Triton\n         run: |\n           cd python\n-          DEBUG=TRUE TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -e '.[tests]'\n+          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -e '.[tests]'\n \n       - name: Run lit tests\n         run: |"}, {"filename": "CMakeLists.txt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -19,6 +19,10 @@ option(TRITON_BUILD_PYTHON_MODULE \"Build Python Triton bindings\" OFF)\n #  used conditionally in this file and by lit tests\n find_package(Python3 REQUIRED COMPONENTS Development Interpreter)\n \n+# Customized release build type with assertions\n+set(CMAKE_C_FLAGS_RELWITHDEBINFOANDASSERTIONS \"-O2 -g\")\n+set(CMAKE_CXX_FLAGS_RELWITHDEBINFOANDASSERTIONS \"-O2 -g\")\n+\n # Default build type\n if(NOT CMAKE_BUILD_TYPE)\n   message(STATUS \"Default build type: Release\")"}, {"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPU.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -223,7 +223,7 @@ struct TritonDotPattern : public OpConversionPattern<triton::DotOp> {\n                   ConversionPatternRewriter &rewriter) const override {\n     RankedTensorType origType = op.getType().cast<RankedTensorType>();\n     auto origShape = origType.getShape();\n-    auto typeConverter = cast<TritonGPUTypeConverter>(getTypeConverter());\n+    auto typeConverter = static_cast<TritonGPUTypeConverter*>(getTypeConverter());\n     int numWarps = typeConverter->getNumWarps();\n \n     SmallVector<unsigned> retSizePerThread = {1, 1};"}, {"filename": "python/setup.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -24,9 +24,11 @@ def get_build_type():\n         return \"Debug\"\n     elif check_env_flag(\"REL_WITH_DEB_INFO\"):\n         return \"RelWithDebInfo\"\n+    elif check_env_flag(\"REL_WITH_DEB_INFO_AND_ASSERTIONS\"):\n+        return \"RelWithDebInfoAndAssertions\"\n     else:\n         # TODO: change to release when stable enough\n-        return \"RelWithDebInfo\"\n+        return \"RelWithDebInfoAndAssertions\"\n \n \n # --- third party packages -----"}]