[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "file_content_changes": "@@ -2,7 +2,6 @@\n \n import functools\n import hashlib\n-import importlib\n import json\n import os\n import re\n@@ -14,7 +13,7 @@\n from .._C.libtriton.triton import (add_external_libs, compile_ptx_to_cubin,\n                                    get_shared_memory_size, ir, translate_llvmir_to_ptx,\n                                    translate_triton_gpu_to_llvmir)\n-from ..common.backend import get_backend, path_to_ptxas, register_backend\n+from ..common.backend import get_backend, path_to_ptxas\n from ..common.build import is_hip\n # from ..runtime import driver, jit, JITFunction\n # TODO: runtime.errors\n@@ -27,11 +26,6 @@\n from .code_generator import ast_to_ttir\n from .make_launcher import make_stub\n \n-rocm_module_path = os.path.join(Path(__file__).parents[3], \"third_party\", \"amd_hip_backend\", \"python\", \"rocm.py\")\n-spec = importlib.util.spec_from_file_location(\"rocm\", rocm_module_path)\n-rocm = importlib.util.module_from_spec(spec)\n-spec.loader.exec_module(rocm)\n-\n \n def inline_triton_ir(mod):\n     pm = ir.pass_manager(mod.context)\n@@ -274,20 +268,10 @@ def add_cuda_stages(arch, context, num_warps, num_stages, extern_libs, stages):\n def compile(fn, **kwargs):\n     # Get device type to decide which backend should be used\n     device_type = kwargs.get(\"device_type\", \"cuda\")\n-\n-    device_type = \"hip\"\n+    _device_backend = get_backend(device_type)\n \n     if device_type == \"cuda\":\n-        _device_backend = get_backend(device_type)\n-        assert _device_backend\n         arch = get_architecture_descriptor(kwargs.get(\"cc\", None))\n-    elif device_type == \"hip\":\n-        _device_backend = get_backend(device_type)\n-        if _device_backend is None:\n-            register_backend(device_type, rocm.HIPBackend)\n-            _device_backend = get_backend(device_type)\n-        assert _device_backend\n-        arch = _device_backend.get_architecture_descriptor(**kwargs)\n     else:\n         _device_backend = get_backend(device_type)\n         assert _device_backend"}, {"filename": "third_party/amd_hip_backend", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1 +1 @@\n-Subproject commit 1d792ee1c6dec37a28ac7572734f357516996850\n+Subproject commit 26be18dfa2f382440d6dc87c0f0eda8b11541817"}]