[{"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "file_content_changes": "@@ -122,8 +122,7 @@ unsigned ScanLoweringHelper::getAxisNumElementsPerThread() {\n }\n \n unsigned ScanLoweringHelper::getNonAxisNumElementsPerThread() {\n-  SmallVector<unsigned> sizePerThreads(getEncoding().getSizePerThread().begin(),\n-                                       getEncoding().getSizePerThread().end());\n+  SmallVector<unsigned> sizePerThreads = getContigPerThread(getEncoding());\n   sizePerThreads[getAxis()] = 1;\n   return product<unsigned>(sizePerThreads);\n }\n@@ -159,8 +158,9 @@ unsigned ScanLoweringHelper::getAxisNumBlocks() {\n   auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcEncoding);\n   auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n   unsigned axis = getAxis();\n-  return type.getShape()[axis] /\n-         (sizePerThreads[axis] * threadsPerWarp[axis] * warpsPerCTA[axis]);\n+  return ceil<unsigned>(\n+      type.getShape()[axis],\n+      (sizePerThreads[axis] * threadsPerWarp[axis] * warpsPerCTA[axis]));\n }\n \n unsigned ScanLoweringHelper::getNonAxisNumBlocks() {\n@@ -173,8 +173,9 @@ unsigned ScanLoweringHelper::getNonAxisNumBlocks() {\n   for (unsigned i = 0; i < sizePerThreads.size(); i++) {\n     if (i == axis)\n       continue;\n-    numBlocks *= type.getShape()[i] /\n-                 (sizePerThreads[i] * threadsPerWarp[i] * warpsPerCTA[i]);\n+    numBlocks *= ceil<unsigned>(\n+        type.getShape()[i],\n+        (sizePerThreads[i] * threadsPerWarp[i] * warpsPerCTA[i]));\n   }\n   return numBlocks;\n }\n@@ -194,8 +195,8 @@ unsigned ScanLoweringHelper::getScratchSizeInBytes() {\n   auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n   unsigned tensorSizeInBytes =\n       type.getNumElements() * type.getElementTypeBitWidth() / 8;\n-  return tensorSizeInBytes /\n-         (getAxisNumElementsPerThread() * getAxisNumThreadsPerWarp());\n+  return ceil<unsigned>(tensorSizeInBytes, (getAxisNumElementsPerThread() *\n+                                            getAxisNumThreadsPerWarp()));\n }\n \n triton::gpu::BlockedEncodingAttr ScanLoweringHelper::getEncoding() {\n@@ -208,7 +209,7 @@ unsigned ScanLoweringHelper::getAxisElementStride() {\n   for (unsigned dim : order) {\n     if (dim == getAxis())\n       return stride;\n-    stride *= getEncoding().getSizePerThread()[dim];\n+    stride *= getContigPerThread(getEncoding())[dim];\n   }\n   llvm_unreachable(\"Axis not found in order\");\n }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "file_content_changes": "@@ -1494,19 +1494,20 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n             np.testing.assert_equal(z_ref, z_tri)\n \n \n-scan2d_shapes = [(16, 32), (32, 16), (2, 1024), (1024, 2), (32, 32), (1, 1024)]\n+scan2d_shapes = [(8, 32), (16, 32), (32, 16), (2, 1024), (1024, 2), (32, 32), (1, 1024)]\n \n scan_configs = [\n-    (op, type, shape, axis)\n+    (op, type, shape, axis, num_warps)\n+    for num_warps in [4, 16]\n     for type in ['int32', 'float32']\n     for axis in [1, 0]\n     for shape in scan2d_shapes\n     for op in ['cumsum']\n ]\n \n \n-@pytest.mark.parametrize(\"op, dtype_str, shape, axis\", scan_configs)\n-def test_scan2d(op, dtype_str, shape, axis, device):\n+@pytest.mark.parametrize(\"op, dtype_str, shape, axis, num_warps\", scan_configs)\n+def test_scan2d(op, dtype_str, shape, axis, num_warps, device):\n     check_type_supported(dtype_str, device)\n \n     # triton kernel\n@@ -1529,7 +1530,7 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n     z_ref = numpy_op(x, axis=axis).astype(getattr(np, z_dtype_str))\n     # triton result\n     z_tri = to_triton(z, device=device)\n-    kernel[(1,)](x_tri, z_tri, BLOCK_M=shape[0], BLOCK_N=shape[1], AXIS=axis)\n+    kernel[(1,)](x_tri, z_tri, BLOCK_M=shape[0], BLOCK_N=shape[1], AXIS=axis, num_warps=num_warps)\n     z_tri = to_numpy(z_tri)\n     # compare\n     if dtype_str == 'float32':"}]