[{"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUAttrDefs.td", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "file_content_changes": "@@ -92,12 +92,16 @@ A_{3, 2}  A_{3, 3}  A_{3, 0}  A_{3, 1} ...   [phase 1] /\n         unsigned inner = (opIdx == 0) ? 0 : 1;\n \n         // ---- begin version 1 ----\n-        // TODO: handle rep (see\n-        // https://github.com/openai/triton/blob/master/lib/codegen/analysis/layout.cc#L209)\n         if (version == 1) {\n+          bool is_row = order[0] != 0;\n+          bool is_vec4 = opIdx == 0 ? is_row && (shape[order[0]] <= 16) :\n+                                      !is_row && (shape[order[0]] <= 16);\n+          int pack_size = opIdx == 0 ? ((is_row || is_vec4) ? 1 : 2) :\n+                                       ((is_row && !is_vec4) ? 2 : 1);\n+          int rep = 2 * pack_size;\n           int maxPhase = (order[inner] == 1 ? 8 : 4) / perPhase;\n-          return $_get(context, 1, perPhase, maxPhase, order);\n-        } \n+          return $_get(context, 2 * rep, perPhase, maxPhase, order);\n+        }\n \n         // ---- begin version 2 ----\n         if (version == 2) {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -3035,7 +3035,6 @@ void ConvertLayoutOpConversion::processReplica(\n             currVal = zext(llvmElemTy, currVal);\n           else if (isPtr)\n             currVal = ptrtoint(llvmElemTy, currVal);\n-\n           valVec = insert_element(vecTy, valVec, currVal, idx_val(v));\n         }\n         store(valVec, ptr);\n@@ -3143,7 +3142,6 @@ LogicalResult ConvertLayoutOpConversion::lowerBlockedToShared(\n     triton::gpu::ConvertLayoutOp op, OpAdaptor adaptor,\n     ConversionPatternRewriter &rewriter) const {\n   auto loc = op.getLoc();\n-\n   Value src = op.src();\n   Value dst = op.result();\n   auto srcTy = src.getType().cast<RankedTensorType>();"}]