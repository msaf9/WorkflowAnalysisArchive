[{"filename": "include/triton/Analysis/Utility.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -59,7 +59,6 @@ template <typename Int> Int product(llvm::ArrayRef<Int> arr) {\n \n template <typename Int> Int ceil(Int m, Int n) { return (m + n - 1) / n; }\n \n-bool isCvtSharedToShared(Operation *op);\n // output[i] = input[order[i]]\n template <typename T, typename RES_T = T>\n SmallVector<RES_T> reorder(ArrayRef<T> input, ArrayRef<unsigned> order) {"}, {"filename": "lib/Analysis/Alias.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -26,8 +26,7 @@ ChangeResult SharedMemoryAliasAnalysis::visitOperation(\n     // These ops may allocate a new shared memory buffer.\n     auto result = op->getResult(0);\n     // FIXME(Keren): extract and insert are always alias for now\n-    if (isa<tensor::ExtractSliceOp, triton::TransOp>(op) ||\n-        isCvtSharedToShared(op)) {\n+    if (isa<tensor::ExtractSliceOp, triton::TransOp>(op)) {\n       // extract_slice %src\n       aliasInfo = AliasInfo(operands[0]->getValue());\n       pessimistic = false;"}, {"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "file_content_changes": "@@ -104,19 +104,10 @@ bool maybeSharedAllocationOp(Operation *op) {\n           dialect->getTypeID() == mlir::TypeID::get<tensor::TensorDialect>());\n }\n \n-bool isCvtSharedToShared(Operation *op) {\n-  if (!isa<triton::gpu::ConvertLayoutOp>(op))\n-    return false;\n-  auto srcTy = op->getOperand(0).getType().cast<RankedTensorType>();\n-  auto dstTy = op->getResult(0).getType().cast<RankedTensorType>();\n-  return srcTy.getEncoding().isa<triton::gpu::SharedEncodingAttr>() &&\n-         dstTy.getEncoding().isa<triton::gpu::SharedEncodingAttr>();\n-}\n-\n bool maybeAliasOp(Operation *op) {\n   return isa<tensor::ExtractSliceOp>(op) || isa<triton::TransOp>(op) ||\n          isa<triton::gpu::InsertSliceAsyncOp>(op) ||\n-         isa<tensor::InsertSliceOp>(op) || isCvtSharedToShared(op);\n+         isa<tensor::InsertSliceOp>(op);\n }\n \n std::string getValueOperandName(Value value, AsmState &state) {"}]