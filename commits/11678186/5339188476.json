[{"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -595,12 +595,14 @@ def visit_Pass(self, node):\n     def visit_Compare(self, node):\n         if not (len(node.comparators) == 1 and len(node.ops) == 1):\n             raise UnsupportedLanguageConstruct(None, node, \"simultaneous multiple comparison is not supported\")\n-        lhs = _unwrap_if_constexpr(self.visit(node.left))\n-        rhs = _unwrap_if_constexpr(self.visit(node.comparators[0]))\n+        lhs = self.visit(node.left)\n+        rhs = self.visit(node.comparators[0])\n+        lhs_value = _unwrap_if_constexpr(lhs)\n+        rhs_value = _unwrap_if_constexpr(rhs)\n         if type(node.ops[0]) == ast.Is:\n-            return constexpr(lhs is rhs)\n+            return constexpr(lhs_value is rhs_value)\n         if type(node.ops[0]) == ast.IsNot:\n-            return constexpr(lhs is not rhs)\n+            return constexpr(lhs_value is not rhs_value)\n         method_name = self._method_name_for_comp_op.get(type(node.ops[0]))\n         if method_name is None:\n             raise UnsupportedLanguageConstruct(None, node, \"AST comparison operator '{}' is not (currently) implemented.\".format(node.ops[0].__name__))\n@@ -988,7 +990,7 @@ def execute_static_assert(self, node: ast.Call) -> None:\n         if not (0 < arg_count <= 2) or len(node.keywords):\n             raise TypeError(\"`static_assert` requires one or two positional arguments only\")\n \n-        passed = self.visit(node.args[0])\n+        passed = _unwrap_if_constexpr(self.visit(node.args[0]))\n         if not isinstance(passed, bool):\n             raise NotImplementedError(\"Assertion condition could not be determined at compile-time. Make sure that it depends only on `constexpr` values\")\n         if not passed:"}]