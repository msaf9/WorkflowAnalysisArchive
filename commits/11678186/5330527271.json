[{"filename": "python/test/unit/tools/test_aot.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -131,8 +131,7 @@ def kernel(C, A, B,\n def test_compile_link_matmul():\n     np.random.seed(3)\n \n-    curr_dir = os.path.dirname(os.path.realpath(__file__))\n-    with tempfile.TemporaryDirectory(dir=curr_dir) as tmp_dir:\n+    with tempfile.TemporaryDirectory() as tmp_dir:\n         kernel_path = os.path.join(tmp_dir, \"kernel.py\")\n         with open(kernel_path, \"w\") as file:\n             file.write(kernel_src)"}, {"filename": "python/triton/tools/compile.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "file_content_changes": "@@ -46,7 +46,6 @@\n     args = parser.parse_args()\n \n     # execute python sources and extract functions wrapped in JITFunction\n-    print(\"extract JITFunction\")\n     arg_path = Path(args.path)\n     sys.path.insert(0, str(arg_path.parent))\n     spec = importlib.util.spec_from_file_location(arg_path.stem, arg_path)\n@@ -55,7 +54,6 @@\n     kernel = getattr(mod, args.kernel_name)\n \n     # validate and parse signature\n-    print(\"parse sig\")\n     signature = list(map(lambda s: s.strip(\" \"), args.signature.split(\",\")))\n \n     def constexpr(s):\n@@ -86,7 +84,6 @@ def constexpr(s):\n     arg_names = [kernel.arg_names[i] for i in signature.keys()]\n \n     # dump C stub code\n-    print(\"dump stub\")\n     suffix = kernel_suffix(signature.values(), config)\n     func_name = '_'.join([kernel.__name__, suffix])\n     hex_ = str(binascii.hexlify(ccinfo.asm[\"cubin\"]))[2:-1]\n@@ -101,8 +98,6 @@ def constexpr(s):\n         \"shared\": ccinfo.shared,\n     }\n     for ext in ['h', 'c']:\n-        print(\"writing \")\n         template_path = Path(__file__).parent / f\"compile.{ext}\"\n         with args.out_path.with_suffix(f\".{suffix}.{ext}\").open(\"w\") as fp:\n             fp.write(Path(template_path).read_text().format(**params))\n-    print(\"done\")"}]