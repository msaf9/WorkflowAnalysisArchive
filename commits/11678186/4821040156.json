[{"filename": "python/test/unit/runtime/test_cache.py", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "file_content_changes": "@@ -180,27 +180,26 @@ def test_jit_noinline() -> None:\n     \"\"\"\n     This test is temporarily disabled because it will crash the test_compile_in_subproc\n     test for unknown reasons only on the CI (not locally).\n-    # @triton.jit\n-    # def kernel_add_device(a, b, o, N: tl.constexpr):\n-    #     add_fn(a, b, o, N)\n-\n-    # device = torch.cuda.current_device()\n-    # assert len(kernel_add_device.cache[device]) == 0\n-    # kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n-    # assert len(kernel_add_device.cache[device]) == 1\n-    # bins = list(kernel_add_device.cache[device].values())\n-    # inline_ttir = bins[0].asm['ttir']\n-    # add_fn.noinline = True\n-    # add_fn.hash = None\n-    # kernel_add_device.hash = None\n-    # kernel_add_device.cache[device].clear()\n-    # kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n-    # assert len(kernel_add_device.cache[device]) == 1\n-    # bins = list(kernel_add_device.cache[device].values())\n-    # noinline_ttir = bins[0].asm['ttir']\n-    # assert inline_ttir != noinline_ttir\n     \"\"\"\n-    pass\n+    @triton.jit\n+    def kernel_add_device(a, b, o, N: tl.constexpr):\n+        add_fn(a, b, o, N)\n+\n+    device = torch.cuda.current_device()\n+    assert len(kernel_add_device.cache[device]) == 0\n+    kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n+    assert len(kernel_add_device.cache[device]) == 1\n+    bins = list(kernel_add_device.cache[device].values())\n+    inline_ttir = bins[0].asm['ttir']\n+    add_fn.noinline = True\n+    add_fn.hash = None\n+    kernel_add_device.hash = None\n+    kernel_add_device.cache[device].clear()\n+    kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n+    assert len(kernel_add_device.cache[device]) == 1\n+    bins = list(kernel_add_device.cache[device].values())\n+    noinline_ttir = bins[0].asm['ttir']\n+    assert inline_ttir != noinline_ttir\n \n \n def test_compile_in_subproc() -> None:"}]