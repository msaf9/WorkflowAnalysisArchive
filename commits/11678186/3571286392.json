[{"filename": "python/tests/test_core.py", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "file_content_changes": "@@ -677,36 +677,7 @@ def kernel(Z, X, AXIS: tl.constexpr, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr)\n     kernel[(1,)](z_tri, x_tri, axis, shape0, shape1)\n     np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=1e-4)\n \n-# def test_atomic_cas():\n-#     # 1. make sure that atomic_cas changes the original value (Lock)\n-#     @triton.jit\n-#     def change_value(Lock):\n-#         tl.atomic_cas(Lock, 0, 1)\n-\n-#     Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n-#     change_value[(1,)](Lock)\n-\n-#     assert (Lock[0] == 1)\n-\n-#     # 2. only one block enters the critical section\n-#     @triton.jit\n-#     def serialized_add(data, Lock):\n-#         ptrs = data + tl.arange(0, 128)\n-#         while tl.atomic_cas(Lock, 0, 1) == 1:\n-#             pass\n-\n-#         tl.store(ptrs, tl.load(ptrs) + 1.0)\n-\n-#         # release lock\n-#         tl.atomic_xchg(Lock, 0)\n-\n-#     Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n-#     data = torch.zeros((128,), device='cuda', dtype=torch.float32)\n-#     ref = torch.full((128,), 64.0)\n-#     serialized_add[(64,)](data, Lock)\n-#     triton.testing.assert_almost_equal(data, ref)\n-\n-def test_simple_atomic_cas():\n+def test_atomic_cas():\n     # 1. make sure that atomic_cas changes the original value (Lock)\n     @triton.jit\n     def change_value(Lock):\n@@ -717,6 +688,25 @@ def change_value(Lock):\n \n     assert (Lock[0] == 1)\n \n+    # 2. only one block enters the critical section\n+    @triton.jit\n+    def serialized_add(data, Lock):\n+        ptrs = data + tl.arange(0, 128)\n+        while tl.atomic_cas(Lock, 0, 1) == 1:\n+            pass\n+\n+        tl.store(ptrs, tl.load(ptrs) + 1.0)\n+\n+        # release lock\n+        tl.atomic_xchg(Lock, 0)\n+\n+    Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n+    data = torch.zeros((128,), device='cuda', dtype=torch.float32)\n+    ref = torch.full((128,), 64.0)\n+    serialized_add[(64,)](data, Lock)\n+    triton.testing.assert_almost_equal(data, ref)\n+\n+\n # # ---------------\n # # test cast\n # # ---------------"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -528,8 +528,7 @@ def visit_While(self, node):\n                                                                 [ty.to_ir(self.builder) for ty in ret_types])\n             loop_block.merge_block_before(after_block)\n             self.builder.set_insertion_point_to_end(after_block)\n-            if len(yields) > 0:\n-                self.builder.create_yield_op([y.handle for y in yields])\n+            self.builder.create_yield_op([y.handle for y in yields])\n \n         # update global uses in while_op\n         for i, name in enumerate(names):"}]