[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1511,7 +1511,7 @@ def _kernel(in_ptr, out_ptr, in_size: tl.constexpr, out_size: tl.constexpr):\n     kernel[(1,)](input, output, input_size, output_size)\n \n     reference_out = torch.cat((input, torch.ones((size_diff,), dtype=dtype, device=device)))\n-    np.testing.assert_allclose(output.cpu(), reference_out.cpu())\n+    torch.testing.assert_allclose(output, reference_out)\n \n # Testing masked loads with an intermate copy to shared memory run.\n \n@@ -1562,7 +1562,7 @@ def _kernel(in1_ptr, in2_ptr, output_ptr,\n                         M=M, N=N, K=K)\n \n     reference_out = torch.matmul(in1, in2)\n-    np.testing.assert_allclose(out, reference_out)\n+    torch.testing.assert_allclose(out, reference_out)\n \n \n @pytest.mark.parametrize(\"cache\", [\"\", \".ca\", \".cg\"])"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "file_content_changes": "@@ -14,10 +14,12 @@\n from triton.utils import MockTensor\n \n \n-def get_cuda_stream(idx):\n+def get_cuda_stream(idx = None):\n+    if idx is None:\n+        idx = get_current_device()\n     try:\n-        from torch._C import _cuda_getCurrentRawStream as get_cuda_stream\n-        return get_cuda_stream(idx)\n+        from torch._C import _cuda_getCurrentRawStream\n+        return _cuda_getCurrentRawStream(idx)\n     except ImportError:\n         import torch\n         return torch.cuda.current_stream(idx).cuda_stream"}, {"filename": "python/triton/utils.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -24,9 +24,8 @@ class MockTensor:\n     \"\"\"\n     @staticmethod\n     def wrap_dtype(arg):\n-        arg_module = arg.__module__\n-        arg_class = arg.__class__.__name__\n-        if arg_module == \"torch\" and arg_class == \"dtype\":\n+        if arg.__class__.__name__ == \"dtype\" and\\\n+           arg.__module__ == \"torch\":\n             return MockTensor(arg)\n         return arg\n "}]