[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -912,7 +912,6 @@ unsigned ModuleAxisInfoAnalysis::getPtrContiguity(Value ptr) {\n   if (!tensorTy)\n     return 1;\n   auto layout = tensorTy.getEncoding();\n-  auto shape = tensorTy.getShape();\n \n   // Here order should be ordered by contiguous first, so the first element\n   // should have the largest contiguous."}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -103,8 +103,8 @@ struct ReturnOpConversion : public ConvertOpToLLVMPattern<triton::ReturnOp> {\n struct FuncOpConversion : public FuncOpConversionBase {\n   FuncOpConversion(LLVMTypeConverter &converter, int numWarps,\n                    ModuleAllocation &allocation, PatternBenefit benefit)\n-      : FuncOpConversionBase(converter, benefit), allocation(allocation),\n-        numWarps(numWarps) {}\n+      : FuncOpConversionBase(converter, benefit), numWarps(numWarps),\n+        allocation(allocation) {}\n \n   triton::FuncOp amendFuncOp(triton::FuncOp funcOp,\n                              ConversionPatternRewriter &rewriter) const {\n@@ -185,7 +185,7 @@ struct CallOpConversion : public ConvertOpToLLVMPattern<triton::CallOp> {\n   CallOpConversion(LLVMTypeConverter &converter, int numWarps,\n                    ModuleAllocation &allocation, PatternBenefit benefit)\n       : ConvertOpToLLVMPattern<triton::CallOp>(converter, benefit),\n-        allocation(allocation), numWarps(numWarps) {}\n+        numWarps(numWarps), allocation(allocation) {}\n \n   LogicalResult\n   matchAndRewrite(triton::CallOp callOp,"}, {"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "file_content_changes": "@@ -556,7 +556,6 @@ class TritonCallOpPattern : public OpConversionPattern<triton::CallOp> {\n   LogicalResult\n   matchAndRewrite(triton::CallOp op, OpAdaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n-    auto converter = getTypeConverter();\n     auto newOp = rewriter.replaceOpWithNewOp<triton::CallOp>(\n         op, op.getCallee(), op.getResultTypes(), adaptor.getOperands());\n     addNamedAttrs(newOp, adaptor.getAttributes());\n@@ -571,9 +570,7 @@ class TritonReturnOpPattern : public OpConversionPattern<ReturnOp> {\n   LogicalResult\n   matchAndRewrite(ReturnOp op, ReturnOp::Adaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n-    auto converter = getTypeConverter();\n-    auto newOp =\n-        rewriter.replaceOpWithNewOp<ReturnOp>(op, adaptor.getOperands());\n+    rewriter.replaceOpWithNewOp<ReturnOp>(op, adaptor.getOperands());\n     return success();\n   }\n };"}]