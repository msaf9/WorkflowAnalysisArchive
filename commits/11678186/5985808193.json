[{"filename": "docs/conf.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -101,7 +101,7 @@ def documenter(app, obj, parent):\n     'gallery_dirs': 'getting-started/tutorials',\n     'filename_pattern': '',\n     # XXX: Temporarily disable fused attention tutorial on V100\n-    'ignore_pattern': r'__init__\\.py',\n+    'ignore_pattern': r'(__init__\\.py|09.*\\.py|10.*\\.py)',\n     'within_subsection_order': FileNameSortKey,\n     'reference_url': {\n         'sphinx_gallery': None,"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -468,9 +468,6 @@ def __init__(self, fn, version=None, do_not_specialize=None, debug=None, noinlin\n         self.arg_names = [v.name for v in signature.parameters.values()]\n         self.arg_defaults = [v.default for v in signature.parameters.values()]\n         self.has_defaults = any(v != inspect._empty for v in self.arg_defaults)\n-        # specialization hints\n-        self.do_not_specialize = [] if do_not_specialize is None else do_not_specialize\n-        self.do_not_specialize = {self.arg_names.index(arg) if isinstance(arg, str) else arg for arg in self.do_not_specialize}\n         # function source code (without decorators)\n         self.src = textwrap.dedent(inspect.getsource(fn))\n         self.src = self.src[self.src.find(\"def\"):]\n@@ -487,6 +484,10 @@ def __init__(self, fn, version=None, do_not_specialize=None, debug=None, noinlin\n         self.__annotations__ = {name: _normalize_ty(ty) for name, ty in fn.__annotations__.items()}\n         # index of constexprs\n         self.constexprs = [self.arg_names.index(name) for name, ty in self.__annotations__.items() if 'constexpr' in ty]\n+        # specialization hints\n+        regular_args = [arg for i, arg in enumerate(self.arg_names) if i not in self.constexprs]\n+        self.do_not_specialize = [] if do_not_specialize is None else do_not_specialize\n+        self.do_not_specialize = {regular_args.index(arg) if isinstance(arg, str) else arg for arg in self.do_not_specialize}\n         # tma info\n         self.tensormaps_info = TMAInfos()\n         # launcher"}]