[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "file_content_changes": "@@ -379,6 +379,7 @@ def visit_then_else_blocks(self, node, liveins, then_block, else_block):\n         names = []\n         ret_types = []\n         ir_ret_types = []\n+        # variables in livein whose value is updated in `if`\n         for name in liveins:\n             # check type\n             for defs, block_name in [(then_defs, 'then'), (else_defs, 'else')]:\n@@ -390,10 +391,25 @@ def visit_then_else_blocks(self, node, liveins, then_block, else_block):\n                 names.append(name)\n                 ret_types.append(then_defs[name].type if name in then_defs else else_defs[name].type)\n                 ir_ret_types.append(then_defs[name].handle.get_type() if name in then_defs else else_defs[name].handle.get_type())\n+            # variable defined in then but not in else\n             if name in then_defs and name not in else_defs:\n                 else_defs[name] = liveins[name]\n+            # variable defined in else but not in then\n             if name in else_defs and name not in then_defs:\n                 then_defs[name] = liveins[name]\n+        # variables that are both in then and else but not in liveins\n+        # TODO: could probably be cleaned up\n+        for name in then_defs.keys() & else_defs.keys():\n+            if name in names:\n+                continue\n+            then_ty = then_defs[name].type\n+            else_ty = else_defs[name].type\n+            assert then_ty == else_ty,\\\n+                   f'mismatched type for {name} between then block ({then_ty}) '\\\n+                   f'and else block ({else_ty})'\n+            names.append(name)\n+            ret_types.append(then_ty)\n+            ir_ret_types.append(then_defs[name].handle.get_type())\n \n         return then_defs, else_defs, then_block, else_block, names, ret_types, ir_ret_types\n "}]