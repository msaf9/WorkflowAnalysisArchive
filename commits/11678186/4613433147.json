[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "file_content_changes": "@@ -56,22 +56,6 @@ class TritonLLVMFunctionConversionTarget : public ConversionTarget {\n   }\n };\n \n-class TritonPTXConversionTarget : public ConversionTarget {\n-public:\n-  explicit TritonPTXConversionTarget(MLIRContext &ctx) : ConversionTarget(ctx) {\n-    addLegalDialect<NVVM::NVVMDialect>();\n-    addLegalOp<mlir::UnrealizedConversionCastOp>();\n-  }\n-};\n-\n-class TritonGCNConversionTarget : public ConversionTarget {\n-public:\n-  explicit TritonGCNConversionTarget(MLIRContext &ctx) : ConversionTarget(ctx) {\n-    addLegalDialect<ROCDL::ROCDLDialect>();\n-    addLegalOp<mlir::UnrealizedConversionCastOp>();\n-  }\n-};\n-\n struct ReturnOpConversion : public ConvertOpToLLVMPattern<func::ReturnOp> {\n   using ConvertOpToLLVMPattern<func::ReturnOp>::ConvertOpToLLVMPattern;\n \n@@ -230,24 +214,6 @@ class ConvertTritonGPUToLLVM\n                                                           patterns);\n     if (failed(applyPartialConversion(mod, target, std::move(patterns))))\n       return signalPassFailure();\n-\n-    if (isROCM) {\n-      TritonGCNConversionTarget gcnTarget(*context);\n-      RewritePatternSet gcnPatterns(context);\n-      if (failed(\n-              applyPartialConversion(mod, gcnTarget, std::move(gcnPatterns))))\n-        return signalPassFailure();\n-    } else {\n-      // Use our custom converters to convert some operations to PTX to avoid\n-      // using NVPTX for two reasons:\n-      // 1. NVPTX backend is flaky on data types like float16 and bfloat16\n-      // 2. In some cases, we may generate faster PTX code than NVPTX backend\n-      TritonPTXConversionTarget ptxTarget(*context);\n-      RewritePatternSet ptxPatterns(context);\n-      if (failed(\n-              applyPartialConversion(mod, ptxTarget, std::move(ptxPatterns))))\n-        return signalPassFailure();\n-    }\n   }\n \n private:"}]