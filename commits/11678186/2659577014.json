[{"filename": "python/triton/language/libdevice.py", "status": "modified", "additions": 452, "deletions": 225, "changes": 677, "file_content_changes": "N/A"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -211,7 +211,7 @@ def _output_stubs(self):\n         #   arg_type_symbol_dict = {[arg_type]: {(symbol, ret_type)}}\n         #   return extern.dispatch(\"libdevice\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n         import_str = \"from . import core, extern\\n\"\n-        file_str = \"\"\n+        header_str = \"LIBDEVICE_PATH = \\\"{}\\\"\\n\".format(self._path)\n         func_str = \"\"\n         for symbols in self._symbol_groups.values():\n             func_str += \"@extern.extern\\n\"\n@@ -220,7 +220,7 @@ def _output_stubs(self):\n                 func_name_str += f\"{arg_name}, \"\n             func_name_str += \"_builder=None):\\n\"\n \n-            return_str = f\"\\treturn extern.elementwise(\\\"{self._name}\\\", \\\"{self.path}\\\", [\"\n+            return_str = f\"\\treturn extern.elementwise(\\\"{self._name}\\\", LIBDEVICE_PATH, [\"\n             for arg_name in symbols[0].arg_names:\n                 return_str += f\"{arg_name}, \"\n             return_str += \"], \"\n@@ -238,7 +238,7 @@ def _output_stubs(self):\n             return_str += \", _builder)\\n\"\n \n             func_str += func_name_str + return_str + \"\\n\"\n-        file_str += import_str + func_str\n+        file_str = import_str + header_str + func_str\n \n         return file_str\n "}]