[{"filename": "include/triton/codegen/selection/generator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -177,6 +177,7 @@ class generator: public ir::visitor, public analysis::layout_visitor {\n   void visit_sqrt_inst(ir::sqrt_inst*);\n   Value* shfl_sync(Value* acc, int32_t i);\n   void visit_reduce1d_inst(ir::reduce_inst*, std::function<Value*(Value*,Value*)>, Value*);\n+  void visit_reducend_inst_fast(ir::reduce_inst* x, std::function<Value*(Value*,Value*)> do_acc, Value *neutral);\n   void visit_reducend_inst(ir::reduce_inst*, std::function<Value*(Value*,Value*)>, Value*);\n   void visit_reduce_inst(ir::reduce_inst*);\n   void visit_select_inst(ir::select_inst*);"}, {"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 56, "deletions": 46, "changes": 102, "file_content_changes": "@@ -2311,60 +2311,69 @@ inline Value* generator::shfl_sync(Value* acc, int32_t i){\n }\n \n /**\n- * \\brief Code Generation for `reduce` (1D case)\n+ * \\brief Code Generation for `reduce` (ND case)\n  */\n-void generator::visit_reduce1d_inst(ir::reduce_inst* x, std::function<Value*(Value*,Value*)> do_acc, Value *neutral) {\n-  std::map<indices_t, Value*> partial;\n+void generator::visit_reducend_inst_fast(ir::reduce_inst* x, std::function<Value*(Value*,Value*)> do_acc, Value *neutral){\n+  //\n   ir::value *arg = x->get_operand(0);\n+  analysis::scanline_layout* layout = layouts_->get(arg)->to_scanline();\n+  std::vector<unsigned> shapes = layout->get_shape();\n+  std::vector<int> order = layout->get_order();\n+  unsigned mts = layout->mts(order[0]);\n+  unsigned nts = layout->nts(order[0]);\n+  unsigned col_per_thread = shapes[order[0]] / mts;\n+  auto idxs = idxs_.at(arg);\n+  size_t n_elts = idxs.size();\n+  //\n   Type *ret_ty = cvt(x->get_type()->get_scalar_ty());\n-  Value *acc = nullptr;\n-\n-  // reduce within thread\n-  for(indices_t idx: idxs_.at(arg)){\n-    Value *val = vals_[arg][idx];\n-    acc = !acc ? val : do_acc(acc, val);\n-  }\n-  // reduce within wrap\n-  for(int i = 16; i > 0; i >>= 1)\n-    acc = do_acc(acc, shfl_sync(acc, i));\n-  // pointers\n   unsigned addr_space = shmem_->getType()->getPointerAddressSpace();\n   Value *base = bit_cast(shmem_, ptr_ty(ret_ty, addr_space));\n   Value* thread = tgt_->get_local_id(mod_, *builder_, 0);\n   Value* warp = udiv(thread, i32(32));\n   Value* lane = urem(thread, i32(32));\n-  // store warp result in shared memory\n-  add_barrier();\n-  store(neutral, gep(base, lane));\n-  add_barrier();\n-  store(acc, gep(base, warp));\n-  add_barrier();\n-\n-  // reduce across warps\n-  Value *cond = icmp_eq(warp, i32(0));\n-  Instruction *barrier = add_barrier();\n-  builder_->SetInsertPoint(barrier->getParent());\n-  Instruction* dummy = builder_->CreateRet(nullptr);\n-  Instruction *term = llvm::SplitBlockAndInsertIfThen(cond, barrier, false);\n-  dummy->removeFromParent();\n-  builder_->SetInsertPoint(term);\n-  Value* ret = load(gep(base, thread));\n-  for(int i = (num_warps_+1)/2; i > 0; i >>= 1){\n-    Value *current = shfl_sync(ret, i);\n-    ret = do_acc(ret, current);\n-  }\n-  store(ret, gep(base, thread));\n-\n-  // store first warp done\n-  builder_->SetInsertPoint(barrier->getParent());\n-  ret = load(base);\n-  for(indices_t idx: idxs_.at(x))\n-    vals_[x][idx] = ret;\n+  size_t warps_per_inner = std::max<int>(mts/32, 1);\n+  Value* warp_i = udiv(warp, i32(warps_per_inner));\n+  unsigned row_per_thread = std::max<int>(32/mts, 1);\n+\n+  for(size_t i = 0; i < n_elts/col_per_thread; i++){\n+    Value* acc;\n+    // reduce within thread\n+    for(size_t j = 0; j < col_per_thread; j++){\n+      Value* val = vals_[arg][idxs[i*col_per_thread + j]];\n+      acc = (j == 0) ? val : do_acc(acc, val);\n+    }\n+    // reduce within warp\n+    for(int k = std::min<int>(mts, 32)/2 ; k > 0; k >>= 1)\n+      acc = do_acc(acc, shfl_sync(acc, k));\n+    // store warp result in shared memory\n+    Value* ret = acc;\n+    if(mts >= 32){\n+      add_barrier();\n+      store(neutral, gep(base, lane));\n+      add_barrier();\n+      store(acc, gep(base, warp));\n+      add_barrier();\n+      // reduce across warps\n+      Value *cond = icmp_eq(warp, i32(0));\n+      Instruction *barrier = add_barrier();\n+      builder_->SetInsertPoint(barrier->getParent());\n+      Instruction* dummy = builder_->CreateRet(nullptr);\n+      Instruction *term = llvm::SplitBlockAndInsertIfThen(cond, barrier, false);\n+      dummy->removeFromParent();\n+      builder_->SetInsertPoint(term);\n+      ret = load(gep(base, thread));\n+      for(int k = (mts/32)/2; k > 0; k >>= 1){\n+        Value *current = shfl_sync(ret, k);\n+        ret = do_acc(ret, current);\n+      }\n+      store(ret, gep(base, thread));\n+      builder_->SetInsertPoint(barrier->getParent());\n+      ret = load(gep(base, warp));\n+    }\n+    vals_[x][idxs_[x][i]] = ret;\n+  }\n }\n \n-/**\n- * \\brief Code Generation for `reduce` (ND case)\n- */\n void generator::visit_reducend_inst(ir::reduce_inst* x, std::function<Value*(Value*,Value*)> do_acc, Value *neutral) {\n   ir::value *arg = x->get_operand(0);\n   Type *ty = cvt(x->get_type()->get_scalar_ty());\n@@ -2462,8 +2471,9 @@ void generator::visit_reduce_inst(ir::reduce_inst* x) {\n     default: throw std::runtime_error(\"unreachable\");\n   }\n   ir::value *arg = x->get_operand(0);\n-  if(arg->get_type()->get_tile_rank() == 1)\n-    visit_reduce1d_inst(x, do_acc, neutral);\n+  analysis::scanline_layout* scanline = layouts_->get(x->get_operand(0))->to_scanline();\n+  if(scanline && scanline->get_order()[0] == x->get_axis())\n+    visit_reducend_inst_fast(x, do_acc, neutral);\n   else\n     visit_reducend_inst(x, do_acc, neutral);\n }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "file_content_changes": "@@ -676,9 +676,16 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n     np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=0.01)\n \n \n-@pytest.mark.parametrize(\"dtype_str, shape, axis\", [\n-    (dtype, (1, 1024), 1) for dtype in ['float32', 'uint32']\n-])\n+reduce_configs1 = [\n+    (dtype, (1, 1024), axis) for dtype in ['float32', 'uint32']\n+    for axis in [1]\n+]\n+reduce_configs2 = [\n+    ('float32', shape, 1) for shape in [(2, 32), (4, 128), (32, 64), (64, 128), (128, 256), (32, 1024)]\n+]\n+\n+\n+@pytest.mark.parametrize(\"dtype_str, shape, axis\", reduce_configs1 + reduce_configs2)\n def test_reduce2d(dtype_str, shape, axis, device='cuda'):\n     # triton kernel\n     @triton.jit"}]