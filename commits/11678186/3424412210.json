[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "file_content_changes": "@@ -3953,6 +3953,7 @@ LogicalResult ConvertLayoutOpConversion::lowerSharedToDotOperand(\n LogicalResult\n DotOpConversion::convertMMA16816(triton::DotOp op, OpAdaptor adaptor,\n                                  ConversionPatternRewriter &rewriter) const {\n+  LLVM::llPrintf(\"dot op start\", {}, rewriter);\n   auto loc = op.getLoc();\n   auto mmaLayout = op.getResult()\n                        .getType()\n@@ -3977,8 +3978,10 @@ DotOpConversion::convertMMA16816(triton::DotOp op, OpAdaptor adaptor,\n   loadedB = adaptor.b();\n   loadedC = mmaHelper.loadC(op.c(), adaptor.c());\n \n-  return mmaHelper.convertDot(A, B, C, op.d(), loadedA, loadedB, loadedC, op,\n+  auto ret = mmaHelper.convertDot(A, B, C, op.d(), loadedA, loadedB, loadedC, op,\n                               adaptor);\n+  LLVM::llPrintf(\"dot op done\", {}, rewriter);\n+  return ret;\n }\n \n // Simply port the old code here to avoid large difference and make debugging\n@@ -4598,6 +4601,7 @@ struct InsertSliceAsyncOpConversion\n   LogicalResult\n   matchAndRewrite(triton::gpu::InsertSliceAsyncOp op, OpAdaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n+    LLVM::llPrintf(\"insert_slice_async start\", {}, rewriter);\n     // insert_slice_async %src, %dst, %index, %mask, %other\n     auto loc = op.getLoc();\n     Value src = op.src();\n@@ -4790,6 +4794,7 @@ struct InsertSliceAsyncOpConversion\n     ptxBuilder.create<PTXCpAsyncCommitGroupInstr>()->operator()();\n     ptxBuilder.launch(rewriter, loc, void_ty(getContext()));\n     rewriter.replaceOp(op, llDst);\n+    LLVM::llPrintf(\"insert_slice_async done\", {}, rewriter);\n     return success();\n   }\n };"}]