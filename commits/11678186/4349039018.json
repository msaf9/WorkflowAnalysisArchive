[{"filename": "test/TritonGPU/combine.mlir", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "file_content_changes": "@@ -955,3 +955,30 @@ func.func public @cmp(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !\n   }\n   return\n }\n+\n+\n+// Just make sure it doesn't crash on non-tensor types.\n+// CHECK-LABEL: if_no_tensor\n+func.func public @if_no_tensor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32}) {\n+  // CHECK-NOT: triton_gpu.convert_layout\n+  %c-1_i64 = arith.constant -1 : i64\n+  %cst = arith.constant 0.000000e+00 : f32\n+  %c-1_i32 = arith.constant -1 : i32\n+  %0 = tt.get_program_id {axis = 0 : i32} : i32\n+  %1 = tt.addptr %arg3, %0 : !tt.ptr<i64>, i32\n+  %2 = tt.load %1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i64\n+  %3 = arith.cmpi eq, %2, %c-1_i64 : i64\n+  %4 = arith.select %3, %c-1_i32, %arg2 : i32\n+  %5 = scf.if %3 -> (!tt.ptr<f32>) {\n+    scf.yield %arg0 : !tt.ptr<f32>\n+  } else {\n+    %10 = tt.addptr %arg0, %2 : !tt.ptr<f32>, i64\n+    scf.yield %10 : !tt.ptr<f32>\n+  }\n+  %6 = arith.extsi %4 : i32 to i64\n+  %7 = arith.cmpi slt, %2, %6 : i64\n+  %8 = tt.load %5, %7, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32\n+  %9 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32\n+  tt.store %9, %8 {cache = 1 : i32, evict = 1 : i32} : f32\n+  return\n+}"}]