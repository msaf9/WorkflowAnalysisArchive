[{"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "file_content_changes": "@@ -113,10 +113,11 @@\n \n namespace mlir {\n namespace LLVM {\n+using namespace mlir::triton;\n \n-static Value getStructFromElements(Location loc, ValueRange resultVals,\n-                                   ConversionPatternRewriter &rewriter,\n-                                   Type structType) {\n+Value getStructFromElements(Location loc, ValueRange resultVals,\n+                            ConversionPatternRewriter &rewriter,\n+                            Type structType) {\n   if (!structType.isa<LLVM::LLVMStructType>()) {\n     return *resultVals.begin();\n   }\n@@ -130,9 +131,8 @@ static Value getStructFromElements(Location loc, ValueRange resultVals,\n   return llvmStruct;\n }\n \n-static SmallVector<Value>\n-getElementsFromStruct(Location loc, Value llvmStruct,\n-                      ConversionPatternRewriter &rewriter) {\n+SmallVector<Value> getElementsFromStruct(Location loc, Value llvmStruct,\n+                                         ConversionPatternRewriter &rewriter) {\n   if (llvmStruct.getType().isIntOrIndexOrFloat() ||\n       llvmStruct.getType().isa<triton::PointerType>() ||\n       llvmStruct.getType().isa<LLVM::LLVMPointerType>())\n@@ -147,9 +147,6 @@ getElementsFromStruct(Location loc, Value llvmStruct,\n   return results;\n }\n \n-namespace {\n-using namespace mlir::triton;\n-\n // Create a 32-bit integer constant.\n Value createConstantI32(Location loc, PatternRewriter &rewriter, int32_t v) {\n   auto i32ty = rewriter.getIntegerType(32);\n@@ -185,10 +182,8 @@ Value createLLVMIntegerConstant(OpBuilder &builder, Location loc, short width,\n                                           builder.getIntegerAttr(ty, value));\n }\n \n-} // namespace\n-\n /// Helper function to get strides from a given shape and its order\n-static SmallVector<Value>\n+SmallVector<Value>\n getStridesFromShapeAndOrder(ArrayRef<int64_t> shape, ArrayRef<unsigned> order,\n                             Location loc, ConversionPatternRewriter &rewriter) {\n   auto rank = shape.size();\n@@ -264,7 +259,7 @@ struct SharedMemoryObject {\n   }\n };\n \n-static SharedMemoryObject\n+SharedMemoryObject\n getSharedMemoryObjectFromStruct(Location loc, Value llvmStruct,\n                                 ConversionPatternRewriter &rewriter) {\n   auto elems = getElementsFromStruct(loc, llvmStruct, rewriter);"}]