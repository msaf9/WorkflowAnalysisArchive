[{"filename": "python/src/triton.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -1080,7 +1080,8 @@ void init_triton_ir(py::module &&m) {\n            [](mlir::OpBuilder &self, mlir::Value &ptr, mlir::Value &cmp,\n               mlir::Value &val) -> mlir::Value {\n              auto loc = self.getUnknownLoc();\n-             auto ptrType = ptr.getType().dyn_cast<mlir::triton::PointerType>();\n+             auto ptrType = mlir::getElementTypeOrSelf(ptr)\n+                                .cast<mlir::triton::PointerType>();\n              mlir::Type dstType = ptrType.getPointeeType();\n              return self.create<mlir::triton::AtomicCASOp>(loc, dstType, ptr,\n                                                            cmp, val);\n@@ -1090,7 +1091,8 @@ void init_triton_ir(py::module &&m) {\n               mlir::Value &ptr, mlir::Value &val,\n               mlir::Value &mask) -> mlir::Value {\n              auto loc = self.getUnknownLoc();\n-             auto ptrType = ptr.getType().dyn_cast<mlir::triton::PointerType>();\n+             auto ptrType = mlir::getElementTypeOrSelf(ptr)\n+                                .cast<mlir::triton::PointerType>();\n              mlir::Type dstType = ptrType.getPointeeType();\n              return self.create<mlir::triton::AtomicRMWOp>(loc, dstType, rmwOp,\n                                                            ptr, val, mask);"}]