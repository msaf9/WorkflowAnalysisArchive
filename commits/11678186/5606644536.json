[{"filename": "python/setup.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -125,8 +125,8 @@ def download_and_copy_ptxas():\n \n     base_dir = os.path.dirname(__file__)\n     src_path = \"bin/ptxas\"\n-    version = \"12.2.91\"\n-    url = f\"https://conda.anaconda.org/nvidia/label/cuda-12.2.0/linux-64/cuda-nvcc-{version}-0.tar.bz2\"\n+    version = \"12.1.105\"\n+    url = f\"https://conda.anaconda.org/nvidia/label/cuda-12.1.1/linux-64/cuda-nvcc-{version}-0.tar.bz2\"\n     dst_prefix = os.path.join(base_dir, \"triton\")\n     dst_suffix = os.path.join(\"third_party\", \"cuda\", src_path)\n     dst_path = os.path.join(dst_prefix, dst_suffix)"}, {"filename": "python/triton/common/backend.py", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "file_content_changes": "@@ -1,6 +1,10 @@\n \n+import functools\n import importlib\n import importlib.util\n+import os\n+import re\n+import subprocess\n from typing import Dict\n \n from ..runtime.driver import DriverBase\n@@ -94,3 +98,22 @@ def get_backend(device_type: str):\n         else:\n             return None\n     return _backends[device_type] if device_type in _backends else None\n+\n+\n+@functools.lru_cache()\n+def path_to_ptxas():\n+    base_dir = os.path.join(os.path.dirname(__file__), os.pardir)\n+    paths = [\n+        os.environ.get(\"TRITON_PTXAS_PATH\", \"\"),\n+        os.path.join(base_dir, \"third_party\", \"cuda\", \"bin\", \"ptxas\")\n+    ]\n+\n+    for ptxas in paths:\n+        ptxas_bin = ptxas.split(\" \")[0]\n+        if os.path.exists(ptxas_bin) and os.path.isfile(ptxas_bin):\n+            result = subprocess.check_output([ptxas_bin, \"--version\"], stderr=subprocess.STDOUT)\n+            if result is not None:\n+                version = re.search(r\".*release (\\d+\\.\\d+).*\", result.decode(\"utf-8\"), flags=re.MULTILINE)\n+                if version is not None:\n+                    return ptxas, version.group(1)\n+    raise RuntimeError(\"Cannot find ptxas\")"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "file_content_changes": "@@ -15,7 +15,7 @@\n                                    get_shared_memory_size, ir,\n                                    translate_llvmir_to_hsaco, translate_llvmir_to_ptx,\n                                    translate_triton_gpu_to_llvmir)\n-from ..common.backend import get_backend\n+from ..common.backend import get_backend, path_to_ptxas\n # from ..runtime import driver, jit, JITFunction\n # TODO: runtime.errors\n from ..runtime.autotuner import OutOfResources\n@@ -127,25 +127,6 @@ def ptx_get_version(cuda_version) -> int:\n     raise RuntimeError(\"Triton only support CUDA 10.0 or higher\")\n \n \n-@functools.lru_cache()\n-def path_to_ptxas():\n-    base_dir = os.path.join(os.path.dirname(__file__), os.pardir)\n-    paths = [\n-        os.environ.get(\"TRITON_PTXAS_PATH\", \"\"),\n-        os.path.join(base_dir, \"third_party\", \"cuda\", \"bin\", \"ptxas\")\n-    ]\n-\n-    for ptxas in paths:\n-        ptxas_bin = ptxas.split(\" \")[0]\n-        if os.path.exists(ptxas_bin) and os.path.isfile(ptxas_bin):\n-            result = subprocess.check_output([ptxas_bin, \"--version\"], stderr=subprocess.STDOUT)\n-            if result is not None:\n-                version = re.search(r\".*release (\\d+\\.\\d+).*\", result.decode(\"utf-8\"), flags=re.MULTILINE)\n-                if version is not None:\n-                    return ptxas, version.group(1)\n-    raise RuntimeError(\"Cannot find ptxas\")\n-\n-\n def llir_to_ptx(mod: Any, arch: int, ptx_version: int = None) -> str:\n     '''\n     Translate TritonGPU module to PTX code."}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "file_content_changes": "@@ -11,7 +11,7 @@\n from typing import (Callable, Generic, Iterable, List, Optional, TypeVar, Union, cast,\n                     overload)\n \n-from ..common.backend import get_backend\n+from ..common.backend import get_backend, path_to_ptxas\n \n TRITON_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n TRITON_VERSION = \"2.1.0\"\n@@ -117,10 +117,8 @@ def version_key():\n         with open(lib.module_finder.find_spec(lib.name).origin, \"rb\") as f:\n             contents += [hashlib.md5(f.read()).hexdigest()]\n     # ptxas version\n-    try:\n-        ptxas_version = hashlib.md5(subprocess.check_output([\"ptxas\", \"--version\"])).hexdigest()\n-    except Exception:\n-        ptxas_version = ''\n+    ptxas = path_to_ptxas()[0]\n+    ptxas_version = hashlib.md5(subprocess.check_output([ptxas, \"--version\"])).hexdigest()\n     return '-'.join(TRITON_VERSION) + '-' + ptxas_version + '-' + '-'.join(contents)\n \n "}]