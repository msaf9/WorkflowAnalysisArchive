[{"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUDialect.td", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -23,14 +23,16 @@ def TritonGPU_Dialect : Dialect {\n   let extraClassDeclaration = [{\n     static std::string getNumWarpsAttrName() { return \"triton_gpu.num-warps\"; }\n     static int getNumWarps(ModuleOp mod) {\n-      if(!mod->hasAttr(\"triton_gpu.num-warps\"))\n+      Attribute numWarps = mod->getDiscardableAttr(\"triton_gpu.num-warps\");\n+      if(!numWarps)\n         llvm::report_fatal_error(\n             \"TritonGPU module should contain a triton_gpu.num-warps attribute\");\n-      return mod->getAttr(\"triton_gpu.num-warps\").cast<IntegerAttr>().getInt();\n+      return numWarps.cast<IntegerAttr>().getInt();\n     }\n   }];\n \n   let useDefaultAttributePrinterParser = 1;\n+  let usePropertiesForAttributes = 1;\n }\n \n #endif"}, {"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -111,15 +111,15 @@ AxisInfo AxisInfo::getPessimisticValueState(Value value) {\n       }\n     }\n   } else if (Operation *op = value.getDefiningOp()) {\n-    if (Attribute attr = op->getAttr(\"tt.divisibility\")) {\n+    if (Attribute attr = op->getDiscardableAttr(\"tt.divisibility\")) {\n       auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n       knownDivisibility = DimVectorT(vals.begin(), vals.end());\n     }\n-    if (Attribute attr = op->getAttr(\"tt.contiguity\")) {\n+    if (Attribute attr = op->getDiscardableAttr(\"tt.contiguity\")) {\n       auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n       knownContiguity = DimVectorT(vals.begin(), vals.end());\n     }\n-    if (Attribute attr = op->getAttr(\"tt.constancy\")) {\n+    if (Attribute attr = op->getDiscardableAttr(\"tt.constancy\")) {\n       auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n       knownConstancy = DimVectorT(vals.begin(), vals.end());\n     }\n@@ -888,15 +888,15 @@ void AxisInfoAnalysis::visitOperation(\n   auto newContiguity = curr.getContiguity();\n   auto newDivisibility = curr.getDivisibility();\n   auto newConstancy = curr.getConstancy();\n-  if (Attribute attr = op->getAttr(\"tt.contiguity\")) {\n+  if (Attribute attr = op->getDiscardableAttr(\"tt.contiguity\")) {\n     auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n     newContiguity = AxisInfo::DimVectorT(vals.begin(), vals.end());\n   }\n-  if (Attribute attr = op->getAttr(\"tt.divisibility\")) {\n+  if (Attribute attr = op->getDiscardableAttr(\"tt.divisibility\")) {\n     auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n     newDivisibility = AxisInfo::DimVectorT(vals.begin(), vals.end());\n   }\n-  if (Attribute attr = op->getAttr(\"tt.constancy\")) {\n+  if (Attribute attr = op->getDiscardableAttr(\"tt.constancy\")) {\n     auto vals = attr.cast<DenseElementsAttr>().getValues<int>();\n     newConstancy = AxisInfo::DimVectorT(vals.begin(), vals.end());\n   }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -118,9 +118,8 @@ struct FuncOpConversionBase : public ConvertOpToLLVMPattern<triton::FuncOp> {\n     // Create an LLVM function, use external linkage by default until MLIR\n     // functions have linkage.\n     LLVM::Linkage linkage = LLVM::Linkage::External;\n-    if (funcOp->hasAttr(\"llvm.linkage\")) {\n-      auto attr =\n-          funcOp->getAttr(\"llvm.linkage\").dyn_cast<mlir::LLVM::LinkageAttr>();\n+    if (auto linkageAttr = funcOp->getDiscardableAttr(\"llvm.linkage\")) {\n+      auto attr = linkageAttr.dyn_cast<mlir::LLVM::LinkageAttr>();\n       if (!attr) {\n         funcOp->emitError()\n             << \"Contains llvm.linkage attribute not of type LLVM::LinkageAttr\";"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "file_content_changes": "@@ -25,9 +25,19 @@ namespace ttg = triton::gpu;\n \n // pass named attrs (e.g., tt.contiguity) from Triton to Triton\n static void addNamedAttrs(Operation *op, DictionaryAttr dictAttrs) {\n-  for (const NamedAttribute attr : dictAttrs.getValue())\n-    if (!op->hasAttr(attr.getName()))\n-      op->setAttr(attr.getName(), attr.getValue());\n+  NamedAttrList attrs = op->getDiscardableAttrs();\n+  // Collect the attributes to propagate: the ones in dictAttrs and not yet on\n+  // the operation.\n+  SmallVector<NamedAttribute> toPropagate;\n+  for (const NamedAttribute attr : dictAttrs.getValue()) {\n+    if (!attrs.get(attr.getName()))\n+      toPropagate.push_back(attr);\n+  }\n+  // If we found any, let's set them here as a single step.\n+  if (toPropagate.size()) {\n+    attrs.append(toPropagate);\n+    op->setDiscardableAttrs(attrs);\n+  }\n }\n \n #define int_attr(num) builder.getI64IntegerAttr(num)\n@@ -428,7 +438,7 @@ void LoopPipeliner::emitPrologue() {\n               lookupOrDefault(loadOp.getOther(), stage),\n               loadOp.getBoundaryCheckAttr(), loadOp.getPaddingAttr(),\n               loadOp.getCache(), loadOp.getEvict(), loadOp.getIsVolatile());\n-          addNamedAttrs(newOp, op->getAttrDictionary());\n+          addNamedAttrs(newOp, op->getDiscardableAttrDictionary());\n         } else {\n           newOp = builder.clone(*op);\n         }\n@@ -652,7 +662,7 @@ scf::ForOp LoopPipeliner::createNewForOp() {\n             nextMapping.lookupOrDefault(loadOp.getOther()),\n             loadOp.getBoundaryCheckAttr(), loadOp.getPaddingAttr(),\n             loadOp.getCache(), loadOp.getEvict(), loadOp.getIsVolatile());\n-        addNamedAttrs(nextOp, op->getAttrDictionary());\n+        addNamedAttrs(nextOp, op->getDiscardableAttrDictionary());\n         nextMapping.map(loadOp.getResult(), nextOp->getResult(0));\n       } else {\n         nextOp = builder.clone(*op, nextMapping);"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "file_content_changes": "@@ -154,24 +154,21 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n       funcs.push_back(func);\n   });\n \n-  for (auto &func : funcs) {\n-    if (func.getOperation()->hasAttr(\"libname\")) {\n-      auto name =\n-          func.getOperation()->getAttr(\"libname\").dyn_cast<StringAttr>();\n-      auto path =\n-          func.getOperation()->getAttr(\"libpath\").dyn_cast<StringAttr>();\n+  for (LLVM::LLVMFuncOp func : funcs) {\n+    if (auto libnameAttr = func->getDiscardableAttr(\"libname\")) {\n+      auto name = libnameAttr.dyn_cast<StringAttr>();\n+      auto path = func.getOperation()\n+                      ->getDiscardableAttr(\"libpath\")\n+                      .dyn_cast<StringAttr>();\n       if (name) {\n         std::string libName = name.str();\n         externLibs[libName] = path.str();\n       }\n     }\n   }\n \n-  if (module.getOperation()->hasAttr(\"triton_gpu.externs\")) {\n-    auto dict = module.getOperation()\n-                    ->getAttr(\"triton_gpu.externs\")\n-                    .dyn_cast<DictionaryAttr>();\n-    for (auto &attr : dict) {\n+  if (auto externsAttr = module->getDiscardableAttr(\"triton_gpu.externs\")) {\n+    for (auto &attr : externsAttr.cast<DictionaryAttr>()) {\n       externLibs[attr.getName().strref().trim().str()] =\n           attr.getValue().dyn_cast<StringAttr>().strref().trim().str();\n     }"}]