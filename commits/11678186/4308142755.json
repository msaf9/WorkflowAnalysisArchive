[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "file_content_changes": "@@ -131,6 +131,7 @@ class ConvertTritonGPUToLLVM\n     MLIRContext *context = &getContext();\n     ModuleOp mod = getOperation();\n     mlir::LowerToLLVMOptions option(context);\n+    option.overrideIndexBitwidth(32);\n     TritonGPUToLLVMTypeConverter typeConverter(context, option);\n     TritonLLVMConversionTarget target(*context);\n     int numWarps = triton::gpu::TritonGPUDialect::getNumWarps(mod);\n@@ -147,13 +148,18 @@ class ConvertTritonGPUToLLVM\n     membarPass.run();\n \n     /* lower functions */\n-    TritonLLVMFunctionConversionTarget funcTarget(*context);\n-    RewritePatternSet funcPatterns(context);\n-    funcPatterns.add<FuncOpConversion>(typeConverter, numWarps, /*benefit=*/1);\n-    funcPatterns.add<ReturnOpConversion>(typeConverter, /*benefit=*/1);\n-    if (failed(\n-            applyPartialConversion(mod, funcTarget, std::move(funcPatterns))))\n-      return signalPassFailure();\n+    {\n+      mlir::LowerToLLVMOptions option(context);\n+      TritonGPUToLLVMTypeConverter typeConverter(context, option);\n+      TritonLLVMFunctionConversionTarget funcTarget(*context);\n+      RewritePatternSet funcPatterns(context);\n+      funcPatterns.add<FuncOpConversion>(typeConverter, numWarps,\n+                                         /*benefit=*/1);\n+      funcPatterns.add<ReturnOpConversion>(typeConverter);\n+      if (failed(\n+              applyPartialConversion(mod, funcTarget, std::move(funcPatterns))))\n+        return signalPassFailure();\n+    }\n \n     std::unique_ptr<DataFlowSolver> solver = createDataFlowSolver();\n     AxisInfoAnalysis *axisInfoAnalysis = solver->load<AxisInfoAnalysis>();\n@@ -165,7 +171,6 @@ class ConvertTritonGPUToLLVM\n                                         allocation.getSharedMemorySize()));\n \n     /* rewrite ops */\n-    option.overrideIndexBitwidth(32);\n     RewritePatternSet patterns(context);\n     // TritonGPU lowering patterns\n     OpBuilder::InsertPoint indexInsertPoint;\n@@ -186,8 +191,6 @@ class ConvertTritonGPUToLLVM\n     populatePatterns1(populateLoadStoreOpToLLVMPatterns);\n     populatePatterns1(populateReduceOpToLLVMPatterns);\n     populatePatterns2(populateViewOpToLLVMPatterns);\n-    patterns.add<FuncOpConversion>(typeConverter, numWarps, 1);\n-    patterns.add<ReturnOpConversion>(typeConverter);\n     // Native lowering patterns\n     mlir::cf::populateControlFlowToLLVMConversionPatterns(typeConverter,\n                                                           patterns);"}]