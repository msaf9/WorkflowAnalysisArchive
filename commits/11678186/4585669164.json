[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "file_content_changes": "@@ -70,10 +70,10 @@ def ttgir_to_llir(mod, extern_libs, arch):\n         _triton.add_external_libs(mod, list(extern_libs.keys()),\n                                   list(extern_libs.values()))\n     # TODO: separate tritongpu_to_llvmir for different backends\n-    if _is_rocm(arch):\n-        return _triton.translate_triton_gpu_to_llvmir(mod, 0, True)\n-    else:\n+    if _is_cuda(arch):\n         return _triton.translate_triton_gpu_to_llvmir(mod, arch, False)\n+    else:\n+        return _triton.translate_triton_gpu_to_llvmir(mod, 0, True)\n \n \n # PTX translation\n@@ -289,9 +289,6 @@ def parse_mlir_module(path, context):\n \n \n # TODO: architecture descriptor class\n-def _is_rocm(arch):\n-    return isinstance(arch, tuple)\n-\n \n def _is_cuda(arch):\n     return isinstance(arch, int)\n@@ -378,9 +375,7 @@ def compile(fn, **kwargs):\n         import re\n         match = re.search(prototype_pattern[ir], src, re.MULTILINE)\n         name, signature = match.group(1), match.group(2)\n-        # print(name, signature)\n         types = re.findall(arg_type_pattern[ir], signature)\n-        # print(types)\n         param_tys = [convert_type_repr(ty) for ty in types]\n         signature = {k: v for k, v in enumerate(param_tys)}\n         first_stage = list(stages.keys()).index(ir)"}]