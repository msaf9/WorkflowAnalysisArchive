[{"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "file_content_changes": "@@ -176,12 +176,10 @@ class AllocationAnalysis {\n       unsigned outVec = 0;\n       auto smemShape = getScratchConfigForCvtLayout(cvtLayout, inVec, outVec);\n       unsigned elems = std::accumulate(smemShape.begin(), smemShape.end(), 1,\n-                                      std::multiplies{});\n-      unsigned elemBitWidth = std::max<unsigned>(srcTy.getElementTypeBitWidth(),\n-                                                 8);\n+                                       std::multiplies{});\n       auto bytes = srcTy.getElementType().isa<triton::PointerType>()\n                        ? elems * kPtrBitWidth / 8\n-                       : elems * elemBitWidth / 8;\n+                       : elems * std::max<int>(8, srcTy.getElementTypeBitWidth()) / 8;\n       allocation->addBuffer<BufferT::BufferKind::Scratch>(op, bytes);\n     } else if (auto atomicRMWOp = dyn_cast<triton::AtomicRMWOp>(op)) {\n       auto value = op->getOperand(0);\n@@ -197,7 +195,7 @@ class AllocationAnalysis {\n             value.getType().cast<triton::PointerType>().getPointeeType();\n         auto bytes = elemTy.isa<triton::PointerType>()\n                          ? elems * kPtrBitWidth / 8\n-                         : elems * elemTy.getIntOrFloatBitWidth() / 8;\n+                         : elems * std::max<int>(8, elemTy.getIntOrFloatBitWidth()) / 8;\n         allocation->addBuffer<BufferT::BufferKind::Scratch>(op, bytes);\n       }\n     } else if (auto atomicCASOp = dyn_cast<triton::AtomicCASOp>(op)) {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -3124,6 +3124,7 @@ LogicalResult ConvertLayoutOpConversion::lowerDistributedToDistributed(\n     if (dstLayout.isa<BlockedEncodingAttr>() ||\n         dstLayout.isa<SliceEncodingAttr>() ||\n         dstLayout.isa<MmaEncodingAttr>()) {\n+      llvm::outs() << op << \"\\n\";\n       processReplica(loc, rewriter, /*stNotRd*/ false, dstTy, outNumCTAsEachRep,\n                      multiDimRepId, outVec, paddedRepShape, outOrd, outVals,\n                      smemBase);"}, {"filename": "python/setup.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -25,7 +25,7 @@ def get_build_type():\n     elif check_env_flag(\"REL_WITH_DEB_INFO\"):\n         return \"RelWithDebInfo\"\n     else:\n-        return \"RelWithDebInfo\"\n+        return \"Debug\"\n         # TODO: change to release when stable enough\n         #return \"Release\"\n "}]