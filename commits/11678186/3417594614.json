[{"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "file_content_changes": "@@ -53,37 +53,17 @@ def matmul_no_scf_kernel(\n \n \n @pytest.mark.parametrize('SIZE_M,SIZE_N,SIZE_K,NUM_WARPS', [\n-    [128, 256, 32, 4],\n-    [256, 128, 16, 4],\n-    [128, 16, 32, 4],\n-    [32, 128, 64, 4],\n-    [128, 128, 64, 4],\n-    [64, 128, 128, 4],\n-    [64, 128, 128, 2],\n+    [64, 128, 128, 1],\n+    [128, 128, 128, 4],\n+    [16, 8, 32, 1],\n+    [32, 16, 64, 2],\n+    [32, 16, 64, 4],\n ])\n def test_gemm_no_scf_int8(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS):\n-    a = torch.randint(-1, 0, (SIZE_M, SIZE_K), device='cuda', dtype=torch.int8)\n-    b = torch.randint(-1, 0, (SIZE_K, SIZE_N), device='cuda', dtype=torch.int8)\n+    a = torch.randint(-5, 5, (SIZE_M, SIZE_K), device='cuda', dtype=torch.int8)\n+    b = torch.randint(-5, 5, (SIZE_K, SIZE_N), device='cuda', dtype=torch.int8)\n     c = torch.empty((SIZE_M, SIZE_N), device=a.device, dtype=torch.int32)\n \n-    # for debug\n-    offset = -128\n-    for i in range(len(a)):\n-        for j in range(len(a[0])):\n-            a.data[i][j] = offset\n-            offset += 1\n-            if offset > 127: offset = -offset\n-    print('a', a)\n-\n-    offset = -128\n-    for i in range(len(b)):\n-        for j in range(len(b[0])):\n-            b.data[i][j] = offset\n-            offset += 1\n-            if offset > 127: offset = -offset\n-    print('b', b)\n-    # end for debug\n-\n     grid = lambda META: (1, )\n     matmul_no_scf_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,\n                                stride_am=a.stride(0), stride_ak=a.stride(1),\n@@ -94,7 +74,7 @@ def test_gemm_no_scf_int8(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS):\n \n     aa = a.cpu()\n     bb = b.cpu()\n-    golden = torch.matmul(aa, bb)\n+    golden = torch.matmul(aa.float(), bb.float()).int()\n     torch.set_printoptions(profile=\"full\")\n     print(\"c\", c.cpu())\n     print(\"gloden\", golden)\n@@ -190,4 +170,5 @@ def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLO\n     assert_close(c, golden, rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err), check_dtype=False)\n \n \n-test_gemm_no_scf_int8(SIZE_M=16, SIZE_N=8, SIZE_K=32, NUM_WARPS=1)\n+test_gemm_no_scf_int8(SIZE_M=16, SIZE_N=32, SIZE_K=64, NUM_WARPS=2)\n+#test_gemm(*[128, 64, 128, 4, 128, 64, 32])"}]