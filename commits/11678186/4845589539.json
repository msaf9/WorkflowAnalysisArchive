[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "file_content_changes": "@@ -2322,6 +2322,33 @@ def kernel(ExitEarly, Out):\n     assert to_numpy(out)[0] == 1\n \n \n+@triton.jit\n+def add_fn(x):\n+    return x + 1\n+\n+\n+@pytest.mark.parametrize(\"call_type\", [\"attribute\", \"jit_function\"])\n+def test_if_call(call_type):\n+    @triton.jit\n+    def kernel(Out, call_type: tl.constexpr):\n+        pid = tl.program_id(0)\n+        o = tl.load(Out)\n+        if pid == 0:\n+            if call_type == \"attribute\":\n+                a = o + 1\n+                a = a.to(tl.int32)\n+                o = a\n+            else:\n+                a = o\n+                a = add_fn(a)\n+                o = a\n+        tl.store(Out, o)\n+\n+    out = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n+    kernel[(1,)](out, call_type)\n+    assert to_numpy(out)[0] == 1\n+\n+\n @pytest.mark.parametrize(\"_cond1\", [True, False])\n @pytest.mark.parametrize(\"_cond2\", [True, False])\n @pytest.mark.parametrize(\"_cond3\", [True, False])"}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -168,6 +168,8 @@ def contains_return_op(self, node):\n             pred = lambda s: self.contains_return_op(s)\n             return any(pred(s) for s in node.body)\n         elif isinstance(node, ast.Call):\n+            if isinstance(node.func, ast.Attribute):\n+                return False\n             fn = self.visit(node.func)\n             if isinstance(fn, JITFunction):\n                 old_gscope = self.gscope"}]