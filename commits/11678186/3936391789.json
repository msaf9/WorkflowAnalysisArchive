[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1241,7 +1241,7 @@ def _kernel(out):\n         out_ptr = out + tl.arange(0, 32)[:, None] * 32 + tl.arange(0, 32)[None, :]\n         tl.store(out_ptr, c)\n \n-    kernel = patch_kernel(_kernel, {'GENERATE_TEST_HERE': f\"tl.fill((32, 32), 1.0, tl.{dtype_str})\"})\n+    kernel = patch_kernel(_kernel, {'GENERATE_TEST_HERE': f\"tl.full((32, 32), 1.0, tl.{dtype_str})\"})\n     a = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n     b = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n     out_ref = torch.matmul(a, b)"}, {"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -31,7 +31,7 @@\n     dot,\n     dtype,\n     exp,\n-    fill,\n+    full,\n     fdiv,\n     float16,\n     float32,\n@@ -125,7 +125,7 @@\n     \"float32\",\n     \"float64\",\n     \"float8\",\n-    \"fill\",\n+    \"full\",\n     \"function_type\",\n     \"int1\",\n     \"int16\","}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -711,7 +711,7 @@ def zeros(shape, dtype, _builder=None):\n \n \n @builtin\n-def fill(shape, value, dtype, _builder=None):\n+def full(shape, value, dtype, _builder=None):\n     \"\"\"\n     Returns a tensor filled with the scalar value for the given :code:`shape` and :code:`dtype`.\n \n@@ -729,7 +729,7 @@ def fill(shape, value, dtype, _builder=None):\n     shape = [x.value for x in shape]\n     value = _constexpr_to_value(value)\n     dtype = _constexpr_to_value(dtype)\n-    return semantic.fill(shape, value, dtype, _builder)\n+    return semantic.full(shape, value, dtype, _builder)\n \n \n # -----------------------\n@@ -760,6 +760,7 @@ def broadcast_to(input, shape, _builder=None):\n     :param shape: The desired shape.\n     :type shape: Tuple[int]\n     \"\"\"\n+    shape = [_constexpr_to_value(s) for s in shape]\n     return semantic.broadcast_impl_shape(input, shape, _builder)\n \n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -477,7 +477,7 @@ def zeros(shape: List[int], dtype: tl.dtype, builder: ir.builder) -> tl.tensor:\n     return tl.tensor(builder.create_splat(_0, shape), ret_ty)\n \n \n-def fill(shape: List[int], value, dtype: tl.dtype, builder: ir.builder) -> tl.tensor:\n+def full(shape: List[int], value, dtype: tl.dtype, builder: ir.builder) -> tl.tensor:\n     get_value_fn = getattr(builder, f\"get_{dtype.name}\")\n     _value = get_value_fn(value)\n     ret_ty = tl.block_type(dtype, shape)"}]