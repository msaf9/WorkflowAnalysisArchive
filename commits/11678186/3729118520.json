[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -95,14 +95,15 @@ class SimplifyReduceCvt : public mlir::RewritePattern {\n       return mlir::failure();\n     auto newReduce = rewriter.create<triton::ReduceOp>(\n         op->getLoc(), reduce.redOp(), reduceArg.getOperand(), reduce.axis());\n+    if(isa<triton::gpu::ConvertLayoutOp>(*reduceArg.getOperand().getDefiningOp()))\n+      return mlir::failure();\n     Value newRet = newReduce.getResult();\n     // it's still beneficial to move the conversion\n     // to after the reduce if necessary since it will be\n     // done on a rank-reduced tensor hence cheaper\n     if(newRet.getType() != reduce.getResult().getType())\n       newRet = rewriter.create<triton::gpu::ConvertLayoutOp>(\n           op->getLoc(), reduce.getResult().getType(), newRet);\n-\n     rewriter.replaceOp(op, newRet);\n       \n     return success();\n@@ -1207,7 +1208,7 @@ class TritonGPUCombineOpsPass\n     patterns.add<OptimizeConvertToDotOperand>(context);\n     patterns.add<SimplifyConversion>(context);\n     patterns.add<SimplifyReduceCvt>(context);\n-    patterns.add<FoldConvertAndReduce>(context);\n+    // patterns.add<FoldConvertAndReduce>(context);\n     patterns.add<DecomposeDotOperand>(context);\n     patterns.add<RematerializeBackward>(context);\n     patterns.add<RematerializeForward>(context);"}]