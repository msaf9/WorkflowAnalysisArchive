[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "file_content_changes": "@@ -1530,7 +1530,22 @@ def make_hash(fn, **kwargs):\n }\n \n \n+def _get_jsonable_constants(constants):\n+    def _is_jsonable(x):\n+        try:\n+            json.dumps(x)\n+            return True\n+        except (TypeError, OverflowError):\n+            return False\n+    serialized_constants = {}\n+    for constant in constants:\n+        if _is_jsonable(constants[constant]):\n+            serialized_constants[constant] = constants[constant]\n+    return serialized_constants\n+\n # def compile(fn, signature: str, device: int = -1, constants=dict(), num_warps: int = 4, num_stages: int = 3, extern_libs=None, configs=None):\n+\n+\n def compile(fn, **kwargs):\n     capability = kwargs.get(\"cc\", None)\n     if capability is None:\n@@ -1603,7 +1618,7 @@ def compile(fn, **kwargs):\n         with open(fn_cache_manager._make_path(f\"{name}.json\")) as f:\n             metadata = json.load(f)\n     else:\n-        metadata = {\"num_warps\": num_warps, \"num_stages\": num_stages, \"constants\": constants, \"ctime\": dict()}\n+        metadata = {\"num_warps\": num_warps, \"num_stages\": num_stages, \"constants\": _get_jsonable_constants(constants), \"ctime\": dict()}\n         if ext == \"ptx\":\n             assert \"shared\" in kwargs, \"ptx compilation must provide shared memory size\"\n             metadata[\"shared\"] = kwargs[\"shared\"]"}]