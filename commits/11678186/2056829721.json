[{"filename": "include/triton/ir/builder.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -158,6 +158,9 @@ class builder{\n   value *create_atomic_or(value *ptr, value *val, value *msk);\n   value *create_atomic_xor(value *ptr, value *val, value *msk);\n   value *create_atomic_xchg(value *ptr, value *val, value *msk);\n+  // Utilities\n+  value *create_clock();\n+  value *create_globaltimer();\n   // Built-in instruction\n   value *create_get_program_id(unsigned axis);\n   value *create_get_num_programs(unsigned axis);"}, {"filename": "lib/ir/builder.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "file_content_changes": "@@ -1,3 +1,4 @@\n+#include <bits/types/clock_t.h>\n #include <string>\n #include <algorithm>\n #include <iostream>\n@@ -343,6 +344,15 @@ DEFINE_ATOMIC_RMW_INSTR(atomic_or, ir::atomic_rmw_op_t::Or)\n DEFINE_ATOMIC_RMW_INSTR(atomic_xor, ir::atomic_rmw_op_t::Xor)\n DEFINE_ATOMIC_RMW_INSTR(atomic_xchg, ir::atomic_rmw_op_t::Xchg)\n \n+// Utilities\n+value *builder::create_clock() {\n+  return insert(clock_inst::create(ctx_));\n+}\n+\n+value *builder::create_globaltimer() {\n+  return insert(globaltimer_inst::create(ctx_));\n+}\n+\n //===----------------------------------------------------------------------===//\n //                               built-in instructions\n //===----------------------------------------------------------------------===//"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -890,6 +890,9 @@ void init_triton_ir(py::module &&m) {\n       // atomic\n       .def(\"create_atomic_cas\", &ir::builder::create_atomic_cas, ret::reference)\n       .def(\"create_atomic_rmw\", &ir::builder::create_atomic_rmw, ret::reference)\n+      // Utilities\n+      .def(\"create_clock\", &ir::builder::create_clock, ret::reference)\n+      .def(\"create_globaltimer\", &ir::builder::create_globaltimer, ret::reference)\n \n       // Built-in instruction\n       .def(\"create_get_program_id\", &ir::builder::create_get_program_id, ret::reference)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1041,12 +1041,12 @@ def xor_sum(input, axis, _builder=None):\n \n @builtin\n def globaltimer(_builder=None):\n-    return frontend.globaltimer(_builder)\n+    return semantic.globaltimer(_builder)\n \n \n @builtin\n def clock(_builder=None):\n-    return frontend.clock(_builder)\n+    return semantic.clock(_builder)\n \n # -----------------------\n # Internal for debugging"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "file_content_changes": "@@ -995,6 +995,17 @@ def xor_sum(input: tl.tensor, axis: int, builder: ir.builder) -> tl.tensor:\n     return reduce_impl(input, axis, builder, \"sum\", ir.REDUCE_OP.XOR, ir.REDUCE_OP.XOR)\n \n \n+# -----------------------\n+# Utilities\n+# -----------------------\n+\n+def clock(builder: ir.builder) -> tl.tensor:\n+    return tl.tensor(builder.create_clock(), tl.int64)\n+\n+\n+def globaltimer(builder: ir.builder) -> tl.tensor:\n+    return tl.tensor(builder.create_globaltimer, tl.int64)\n+\n # ===----------------------------------------------------------------------===\n #                               Math\n # ===----------------------------------------------------------------------==="}]