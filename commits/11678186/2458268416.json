[{"filename": "python/src/triton.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "file_content_changes": "@@ -418,7 +418,7 @@ typedef std::map<std::string, py::object> asm_map_t;\n // --------------------------------------- \n \n // CUDA\n-std::tuple<uint64_t, uint64_t> cu_load_binary(const std::string& name, asm_map_t &asm_map, size_t n_shared_bytes, uint64_t dev){\n+std::tuple<uint64_t, uint64_t, uint64_t, uint64_t> cu_load_binary(const std::string& name, asm_map_t &asm_map, size_t n_shared_bytes, uint64_t dev){\n   // load assembly\n   std::string assembly;\n   if(asm_map.find(\"cubin\") != asm_map.end())\n@@ -430,24 +430,27 @@ std::tuple<uint64_t, uint64_t> cu_load_binary(const std::string& name, asm_map_t\n   CUmodule mod;\n   drv::dispatch::cuModuleLoadData(&mod, assembly.c_str());\n   drv::dispatch::cuModuleGetFunction(&fun, mod, name.c_str());\n+  // get allocated registers and spilled registers from the function\n+  int n_regs = 0;\n+  int n_spills = 0;\n+  drv::dispatch::cuFuncGetAttribute(&n_regs, CU_FUNC_ATTRIBUTE_NUM_REGS, fun);\n+  drv::dispatch::cuFuncGetAttribute(&n_spills, CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, fun);\n+  n_spills /= 4;\n   // set dynamic shared memory if necessary\n   int shared_optin;\n   drv::dispatch::cuDeviceGetAttribute(&shared_optin, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN, dev);\n   if(n_shared_bytes > 49152 && shared_optin > 49152){\n     drv::dispatch::cuFuncSetCacheConfig(fun, CU_FUNC_CACHE_PREFER_SHARED);\n     int shared_total, shared_static;\n-    int n_spills, n_reg;\n     drv::dispatch::cuDeviceGetAttribute(&shared_total, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR, dev);\n     drv::dispatch::cuFuncGetAttribute(&shared_static, CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, fun);\n-    drv::dispatch::cuFuncGetAttribute(&n_spills, CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES,  fun);\n-    drv::dispatch::cuFuncGetAttribute(&n_reg, CU_FUNC_ATTRIBUTE_NUM_REGS, fun);\n     drv::dispatch::cuFuncSetAttribute(fun, CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, shared_optin - shared_static);\n   }\n-  return std::make_tuple((uint64_t)mod, (uint64_t)fun);\n+  return std::make_tuple((uint64_t)mod, (uint64_t)fun, (uint64_t)n_regs, (uint64_t)n_spills);\n }\n \n // ROCM\n-std::tuple<uint64_t, uint64_t> hip_load_binary(const std::string& name, asm_map_t &asm_map, size_t n_shared_bytes, uint64_t dev){\n+std::tuple<uint64_t, uint64_t, uint64_t, uint64_t> hip_load_binary(const std::string& name, asm_map_t &asm_map, size_t n_shared_bytes, uint64_t dev){\n   py::bytes _assembly = asm_map[\"hsaco\"];\n   std::string assembly = py::cast<std::string>(_assembly);\n   // HSA-CO -> hipModule\n@@ -456,7 +459,7 @@ std::tuple<uint64_t, uint64_t> hip_load_binary(const std::string& name, asm_map_\n   hipFunction_t fun;\n   drv::dispatch::hipModuleGetFunction(&fun, mod, name.c_str());\n   // record asm\n-  return std::make_tuple((uint64_t)mod, (uint64_t)fun);\n+  return std::make_tuple((uint64_t)mod, (uint64_t)fun, 0, 0);\n }\n \n // --------------------------------------- "}, {"filename": "python/triton/code_gen.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -769,16 +769,18 @@ def __init__(self, backend, name, asm, shared_mem, num_warps):\n \n class LoadedBinary:\n     def __init__(self, device: int, bin: Binary):\n-        module, kernel = _triton.code_gen.load_binary(bin.backend,\n-                                                      bin.name,\n-                                                      bin.asm,\n-                                                      bin.shared_mem,\n-                                                      device)\n+        module, kernel, n_regs, n_spills = _triton.code_gen.load_binary(bin.backend,\n+                                                                        bin.name,\n+                                                                        bin.asm,\n+                                                                        bin.shared_mem,\n+                                                                        device)\n         self.bin = bin\n         self.asm = bin.asm\n         self.sass = ''\n         self.module = module\n         self.kernel = kernel\n+        self.n_regs = n_regs\n+        self.n_spills = n_spills\n         self.device = device\n         self.shared_mem = bin.shared_mem\n "}]