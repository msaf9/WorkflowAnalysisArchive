[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -998,9 +998,10 @@ def kernel(x):\n ])\n def test_value_specialization(value: int, value_type: str, device='cuda') -> None:\n     spec_type = None\n+\n     def cache_hook(*args, **kwargs):\n         nonlocal spec_type\n-        spec_type = kwargs[\"compile\"][\"arg_types\"][0][1] \n+        spec_type = kwargs[\"compile\"][\"arg_types\"][0][1]\n     JITFunction.cache_hook = cache_hook\n \n     @triton.jit\n@@ -1013,6 +1014,7 @@ def kernel(VALUE, X):\n     JITFunction.cache_hook = None\n     assert spec_type == value_type\n \n+\n @pytest.mark.parametrize(\n     \"value, overflow\",\n     [(2**64 - 1, False), (2**64, True), (-2**63, False), (-2**63 - 1, True)]"}, {"filename": "python/triton/code_gen.py", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "file_content_changes": "@@ -57,11 +57,13 @@ def mangle_fn(name, arg_tys, constants):\n     ret = f'{name}__{mangled_arg_names}__{mangled_constants}'\n     return ret\n \n+\n def is_triton_tensor(value):\n     return isinstance(value, triton.language.tensor)\n \n+\n class ValueConstructor:\n-    def __init__(self, module, builder, gscope)-> None:\n+    def __init__(self, module, builder, gscope) -> None:\n         self.gscope = gscope\n         self.lscope = dict()\n         self.builder = builder\n@@ -200,8 +202,6 @@ def _try_remove_trivial_phi(self, phi: triton.language.tensor) -> triton.languag\n         return triton.language.tensor(v, phi.type)\n \n \n-\n-\n class CodeGenerator(ast.NodeVisitor):\n \n     def __init__(self, context, prototype, gscope, attributes, constants, prototypes=None, module=None, is_kernel=False):\n@@ -213,22 +213,20 @@ def __init__(self, context, prototype, gscope, attributes, constants, prototypes\n         self.constants = constants\n         self.last_node = None\n         self.is_kernel = is_kernel\n-        \n-        self.value_constructor = ValueConstructor(self.module, self.builder, gscope)\n \n+        self.value_constructor = ValueConstructor(self.module, self.builder, gscope)\n \n     #\n     # AST visitor\n     #\n+\n     def visit_compound_statement(self, stmts):\n         for stmt in stmts:\n             self.last_ret = self.visit(stmt)\n             if isinstance(stmt, ast.Return):\n                 break\n         return stmts and isinstance(stmt, ast.Return)\n \n-\n-\n     def visit_Module(self, node):\n         ast.NodeVisitor.generic_visit(self, node)\n \n@@ -341,7 +339,7 @@ def visit_Assign(self, node):\n         if not isinstance(values, tuple):\n             values = [values]\n         if isinstance(values[0], triton.language.tensor) \\\n-            and isinstance(values[0].type, triton.language.tuple_type):\n+                and isinstance(values[0].type, triton.language.tuple_type):\n             struct = values[0].handle\n             tys = values[0].type.element_types\n             values = [self.builder.extract_value(struct, i) for i in range(len(tys))]"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -125,7 +125,7 @@ def is_uint32(self):\n \n     def is_uint64(self):\n         return self.name == 'uint64'\n-    \n+\n     def is_floating(self):\n         return self.name in dtype.FP_TYPES\n \n@@ -286,6 +286,7 @@ def to_ir(self, builder: ir.builder):\n         ir_param_types = [ty.to_ir(builder) for ty in self.param_types]\n         return ir.type.make_function(self.ret_type.to_ir(builder), ir_param_types)\n \n+\n class tuple_type(dtype):\n     def __init__(self, element_types: List[dtype]) -> None:\n         self.element_types = element_types\n@@ -297,6 +298,7 @@ def to_ir(self, builder: ir.builder):\n         ir_element_types = [ty.to_ir(builder) for ty in self.element_types]\n         return ir.struct_type.get(ir_element_types, True)\n \n+\n # scalar types\n void = dtype('void')\n int1 = dtype('int1')"}]