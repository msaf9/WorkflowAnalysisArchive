[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "file_content_changes": "@@ -4082,23 +4082,38 @@ struct InsertSliceAsyncOpConversion\n           auto selectOp = select(pred, i32_val(byteWidth), i32_val(0));\n           srcSize = ptxBuilder.newOperand(selectOp, \"r\");\n           if (llOther) {\n-            // Construct a new vecTy\n-            auto vecTy = LLVM::getFixedVectorType(resElemTy, numWordElems);\n-            Value v = rewriter.create<LLVM::UndefOp>(loc, vecTy);\n-            for (size_t i = 0; i < numWordElems; ++i) {\n-              Value falseVal = otherElems[elemIdx + wordElemIdx + i];\n-              Value indexVal = createIndexAttrConstant(\n-                  rewriter, loc, this->getTypeConverter()->getIndexType(), i);\n-              v = insert_element(vecTy, v, falseVal, indexVal);\n+            auto storeVecSize = 4;\n+            auto remStoreElems = numWordElems % storeVecSize;\n+            auto constraint =\n+                resElemTy.getIntOrFloatBitWidth() <= 32 ? \"r\" : \"l\";\n+            for (auto i = 0; i < numWordElems - remStoreElems;\n+                 i += storeVecSize) {\n+              PTXBuilder ptxStoreBuilder;\n+              auto *valOperands = ptxStoreBuilder.newListOperand();\n+              for (auto s = 0; s < storeVecSize; ++s) {\n+                auto value = otherElems[elemIdx + wordElemIdx + i + s];\n+                auto *opr = ptxStoreBuilder.newOperand(value, constraint);\n+                valOperands->listAppend(opr);\n+              }\n+              auto *storeDstOperand = ptxStoreBuilder.newAddrOperand(\n+                  basePtr, \"r\", (wordElemIdx + i) * resByteWidth);\n+              auto &st = ptxStoreBuilder.create<PTXInstr>(\"st\")->shared();\n+              st.v(storeVecSize).b(resElemTy.getIntOrFloatBitWidth());\n+              st(storeDstOperand, valOperands).predicate(pred);\n+              ptxStoreBuilder.launch(rewriter, loc, void_ty(getContext()));\n+            }\n+            for (auto i = numWordElems - remStoreElems; i < numWordElems; ++i) {\n+              PTXBuilder ptxStoreBuilder;\n+              auto value = otherElems[elemIdx + wordElemIdx + i];\n+              auto *storeValOperand =\n+                  ptxStoreBuilder.newOperand(value, constraint);\n+              auto *storeDstOperand = ptxStoreBuilder.newAddrOperand(\n+                  basePtr, \"r\", (wordElemIdx + i) * resByteWidth);\n+              auto &st = ptxStoreBuilder.create<PTXInstr>(\"st\")->shared();\n+              st.b(resElemTy.getIntOrFloatBitWidth());\n+              st(storeDstOperand, storeValOperand).predicate(pred);\n+              ptxStoreBuilder.launch(rewriter, loc, void_ty(getContext()));\n             }\n-            v = bitcast(v, IntegerType::get(getContext(), bitWidth));\n-            // Write shared memory if predicate is true\n-            PTXBuilder ptxStoreBuilder;\n-            auto *valOperand = ptxStoreBuilder.newOperand(v, \"r\");\n-            auto &st = *ptxStoreBuilder.create<PTXInstr>(\"st\");\n-            st.shared().o(\"b\" + std::to_string(bitWidth));\n-            st(dstOperand, valOperand).predicate(pred);\n-            ptxStoreBuilder.launch(rewriter, loc, void_ty(getContext()));\n           }\n         }\n         copyAsyncOp(dstOperand, srcOperand, copySize, srcSize);"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -545,11 +545,11 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     %other_tensor = tt.splat %other : (f32) -> tensor<16x64xf32, #AL>\n \n     // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n-    // CHECK-SAME: @${{.*}} st.shared.b128 [ ${{.*}} + 0 ], ${{.*}}\n+    // CHECK-SAME: @${{.*}} st.shared.v4.b32 [ ${{.*}} + 0 ]\n     // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n     // CHECK-SAME: cp.async.cg.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x10, ${{.*}}\n     // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n-    // CHECK-SAME: @${{.*}} st.shared.b128 [ ${{.*}} + 16 ], ${{.*}}\n+    // CHECK-SAME: @${{.*}} st.shared.v4.b32 [ ${{.*}} + 16 ]\n     // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n     // CHECK-SAME: cp.async.cg.shared.global [ ${{.*}} + 16 ], [ ${{.*}} + 0 ], 0x10, ${{.*}}\n     // CHECK: llvm.inline_asm has_side_effects asm_dialect = att"}]