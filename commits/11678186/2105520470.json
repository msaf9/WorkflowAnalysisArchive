[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "file_content_changes": "@@ -1047,13 +1047,13 @@ def stub(X, alpha, grid_0, grid_1, grid_2):\n     tl.launch(mult, [X, alpha], [grid_0, grid_1, grid_2])\n \n \n-def test_dyn_par(cond=True, device='cuda'):\n-    n_pids = 10\n-    # pids = torch.arange(n_pids, device=device)\n-    # alpha = 2.0\n-    # x_ref = pids * alpha\n-    x_tri = torch.full((10,), fill_value=-1., device=device)\n-    # cond = torch.tensor([cond], device=device)\n-    stub[(1,)](x_tri, 3.14, n_pids, 1, 1)\n-    print(x_tri)\n-    # triton.testing.assert_almost_equal(x_ref, x_tri)\n+# def test_dyn_par(cond=True, device='cuda'):\n+#     n_pids = 10\n+#     # pids = torch.arange(n_pids, device=device)\n+#     # alpha = 2.0\n+#     # x_ref = pids * alpha\n+#     x_tri = torch.full((10,), fill_value=-1., device=device)\n+#     # cond = torch.tensor([cond], device=device)\n+#     stub[(1,)](x_tri, 3.14, n_pids, 1, 1)\n+#     print(x_tri)\n+#     # triton.testing.assert_almost_equal(x_ref, x_tri)"}]