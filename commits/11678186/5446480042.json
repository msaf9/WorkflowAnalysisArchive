[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 85, "deletions": 61, "changes": 146, "file_content_changes": "@@ -19,25 +19,28 @@ jobs:\n   Runner-Preparation:\n     runs-on: ubuntu-latest\n     outputs:\n-      matrix: ${{ steps.set-matrix.outputs.matrix }}\n+      matrix-required: ${{ steps.set-matrix.outputs.matrix-required }}\n+      matrix-optional: ${{ steps.set-matrix.outputs.matrix-optional }}\n     steps:\n       - name: Prepare runner matrix\n         id: set-matrix\n         run: |\n           if [ x\"${{ github.repository }}\" == x\"openai/triton\" ]; then\n-            echo '::set-output name=matrix::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"H100\"], [\"self-hosted\", \"gfx908\"], [\"self-hosted\", \"arc770\"]]'\n+            echo '::set-output name=matrix-required::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"H100\"]]'\n+            echo '::set-output name=matrix-optional::[[\"self-hosted\", \"gfx908\"], [\"self-hosted\", \"arc770\"]]'\n           else\n-            echo '::set-output name=matrix::[\"ubuntu-latest\"]'\n+            echo '::set-output name=matrix-required::[\"ubuntu-latest\"]'\n+            echo '::set-output name=matrix-optional::[\"ubuntu-latest\"]'\n           fi\n \n-  Integration-Tests:\n+  Integration-Tests-Nvidia:\n     needs: Runner-Preparation\n \n     runs-on: ${{ matrix.runner }}\n \n     strategy:\n       matrix:\n-        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix)}}\n+        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-required)}}\n \n     steps:\n       - name: Checkout\n@@ -48,6 +51,81 @@ jobs:\n         run: |\n           echo \"BACKEND=CUDA\" >> \"${GITHUB_ENV}\"\n \n+      - name: Clear cache\n+        run: |\n+          rm -rf ~/.triton\n+\n+      - name: Update PATH\n+        run: |\n+          echo \"PATH=${HOME}/.local/bin:${PATH}\" >> \"${GITHUB_ENV}\"\n+\n+      - name: Install Triton\n+        if: ${{ env.BACKEND == 'CUDA'}}\n+        run: |\n+          cd python\n+          python3 -m pip install --upgrade pip\n+          python3 -m pip install cmake==3.24\n+          python3 -m pip install --no-build-isolation -vvv '.[tests]'\n+\n+      - name: Run lit tests\n+        if: ${{ env.BACKEND == 'CUDA'}}\n+        run: |\n+          python3 -m pip install lit\n+          cd python\n+          LIT_TEST_DIR=\"build/$(ls build | grep -i cmake)/test\"\n+          if [ ! -d \"${LIT_TEST_DIR}\" ]; then\n+            echo \"Coult not find '${LIT_TEST_DIR}'\" ; exit -1\n+          fi\n+          lit -v \"${LIT_TEST_DIR}\"\n+\n+      - name: Run python tests on CUDA\n+        if: ${{ env.BACKEND == 'CUDA'}}\n+        run: |\n+          cd python/test/unit\n+          python3 -m pytest\n+\n+      - name: Create artifacts archive\n+        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n+        run: |\n+          cd ~/.triton\n+          tar -czvf artifacts.tar.gz cache\n+\n+      - name: Upload artifacts archive\n+        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n+        uses: actions/upload-artifact@v2\n+        with:\n+          name: artifacts ${{ matrix.runner[1] }}\n+          path: ~/.triton/artifacts.tar.gz\n+\n+      - name: Run CXX unittests\n+        if: ${{ env.BACKEND == 'CUDA'}}\n+        run: |\n+          cd python\n+          cd \"build/$(ls build | grep -i cmake)\"\n+          ctest\n+\n+      - name: Regression tests\n+        if: ${{ contains(matrix.runner, 'A100') }}\n+        run: |\n+          cd python/test/regression\n+          sudo nvidia-smi -i 0 -pm 1\n+          sudo nvidia-smi -i 0 --lock-gpu-clocks=1350,1350\n+          python3 -m pytest -vs .\n+          sudo nvidia-smi -i 0 -rgc\n+\n+  Integration-Tests-Third-Party:\n+    needs: Runner-Preparation\n+\n+    runs-on: ${{ matrix.runner }}\n+\n+    strategy:\n+      matrix:\n+        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-optional)}}\n+\n+    steps:\n+      - name: Checkout\n+        uses: actions/checkout@v2\n+\n       - name: Set ROCM ENV\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}\n         run: |\n@@ -81,14 +159,6 @@ jobs:\n           python3 -m pip install --upgrade pre-commit\n           python3 -m pre_commit run --all-files\n \n-      - name: Install Triton\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python\n-          python3 -m pip install --upgrade pip\n-          python3 -m pip install cmake==3.24\n-          python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n       - name: Install Triton on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n@@ -113,43 +183,6 @@ jobs:\n           python3 setup.py build\n           python3 -m pip install --no-build-isolation -vvv '.[tests]'\n \n-      - name: Run lit tests\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          python3 -m pip install lit\n-          cd python\n-          LIT_TEST_DIR=\"build/$(ls build | grep -i cmake)/test\"\n-          if [ ! -d \"${LIT_TEST_DIR}\" ]; then\n-            echo \"Coult not find '${LIT_TEST_DIR}'\" ; exit -1\n-          fi\n-          lit -v \"${LIT_TEST_DIR}\"\n-\n-      - name: Run python tests on CUDA\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python/test/unit\n-          python3 -m pytest\n-\n-      - name: Create artifacts archive\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-        run: |\n-          cd ~/.triton\n-          tar -czvf artifacts.tar.gz cache\n-\n-      - name: Upload artifacts archive\n-        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-        uses: actions/upload-artifact@v2\n-        with:\n-          name: artifacts ${{ matrix.runner[1] }}\n-          path: ~/.triton/artifacts.tar.gz\n-\n-      - name: Run CXX unittests\n-        if: ${{ env.BACKEND == 'CUDA'}}\n-        run: |\n-          cd python\n-          cd \"build/$(ls build | grep -i cmake)\"\n-          ctest\n-\n       - name: Run python tests on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n@@ -165,17 +198,8 @@ jobs:\n           cd python/test/backend/third_party_backends\n           python3 -m pytest --capture=tee-sys -rfs --verbose --backend xpu\n \n-      - name: Regression tests\n-        if: ${{ contains(matrix.runner, 'A100') }}\n-        run: |\n-          cd python/test/regression\n-          sudo nvidia-smi -i 0 -pm 1\n-          sudo nvidia-smi -i 0 --lock-gpu-clocks=1350,1350\n-          python3 -m pytest -vs .\n-          sudo nvidia-smi -i 0 -rgc\n-\n   Compare-artifacts:\n-    needs: Integration-Tests\n+    needs: Integration-Tests-Nvidia\n \n     runs-on: ubuntu-latest\n \n@@ -193,7 +217,7 @@ jobs:\n       - name: Download latest main artifacts\n         env:\n           ARTIFACT_NAME: artifacts A100\n-          ARTIFACT_JOB_NAME: Integration-Tests\n+          ARTIFACT_JOB_NAME: Integration-Tests-Nvidia\n           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         run: |\n           OWNER_REPO=\"${{ github.repository }}\""}, {"filename": "CMakeLists.txt", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "file_content_changes": "@@ -86,59 +86,59 @@ if(NOT MLIR_DIR)\n   else()\n     set(LLVM_LDFLAGS \"-L${LLVM_LIBRARY_DIR}\")\n     set(LLVM_LIBRARIES\n-      libLLVMNVPTXCodeGen.a\n-      libLLVMNVPTXDesc.a\n-      libLLVMNVPTXInfo.a\n-      libLLVMAMDGPUDisassembler.a\n-      libLLVMMCDisassembler.a\n-      libLLVMAMDGPUCodeGen.a\n-      libLLVMMIRParser.a\n-      libLLVMGlobalISel.a\n-      libLLVMSelectionDAG.a\n-      libLLVMipo.a\n-      libLLVMInstrumentation.a\n-      libLLVMVectorize.a\n-      libLLVMLinker.a\n-      libLLVMIRReader.a\n-      libLLVMAsmParser.a\n-      libLLVMFrontendOpenMP.a\n-      libLLVMAsmPrinter.a\n-      libLLVMDebugInfoDWARF.a\n-      libLLVMCodeGen.a\n-      libLLVMTarget.a\n-      libLLVMScalarOpts.a\n-      libLLVMInstCombine.a\n-      libLLVMAggressiveInstCombine.a\n-      libLLVMTransformUtils.a\n-      libLLVMBitWriter.a\n-      libLLVMAnalysis.a\n-      libLLVMProfileData.a\n-      libLLVMObject.a\n-      libLLVMTextAPI.a\n-      libLLVMBitReader.a\n-      libLLVMAMDGPUAsmParser.a\n-      libLLVMMCParser.a\n-      libLLVMAMDGPUDesc.a\n-      libLLVMAMDGPUUtils.a\n-      libLLVMMC.a\n-      libLLVMDebugInfoCodeView.a\n-      libLLVMDebugInfoMSF.a\n-      libLLVMCore.a\n-      libLLVMRemarks.a\n-      libLLVMBitstreamReader.a\n-      libLLVMBinaryFormat.a\n-      libLLVMAMDGPUInfo.a\n-      libLLVMSupport.a\n-      libLLVMDemangle.a\n-      libLLVMPasses.a\n-      libLLVMAnalysis.a\n-      libLLVMTransformUtils.a\n-      libLLVMScalarOpts.a\n-      libLLVMTransformUtils.a\n-      libLLVMipo.a\n-      libLLVMObjCARCOpts.a\n-      libLLVMCoroutines.a\n-      libLLVMAnalysis.a\n+      LLVMNVPTXCodeGen\n+      LLVMNVPTXDesc\n+      LLVMNVPTXInfo\n+      LLVMAMDGPUDisassembler\n+      LLVMMCDisassembler\n+      LLVMAMDGPUCodeGen\n+      LLVMMIRParser\n+      LLVMGlobalISel\n+      LLVMSelectionDAG\n+      LLVMipo\n+      LLVMInstrumentation\n+      LLVMVectorize\n+      LLVMLinker\n+      LLVMIRReader\n+      LLVMAsmParser\n+      LLVMFrontendOpenMP\n+      LLVMAsmPrinter\n+      LLVMDebugInfoDWARF\n+      LLVMCodeGen\n+      LLVMTarget\n+      LLVMScalarOpts\n+      LLVMInstCombine\n+      LLVMAggressiveInstCombine\n+      LLVMTransformUtils\n+      LLVMBitWriter\n+      LLVMAnalysis\n+      LLVMProfileData\n+      LLVMObject\n+      LLVMTextAPI\n+      LLVMBitReader\n+      LLVMAMDGPUAsmParser\n+      LLVMMCParser\n+      LLVMAMDGPUDesc\n+      LLVMAMDGPUUtils\n+      LLVMMC\n+      LLVMDebugInfoCodeView\n+      LLVMDebugInfoMSF\n+      LLVMCore\n+      LLVMRemarks\n+      LLVMBitstreamReader\n+      LLVMBinaryFormat\n+      LLVMAMDGPUInfo\n+      LLVMSupport\n+      LLVMDemangle\n+      LLVMPasses\n+      LLVMAnalysis\n+      LLVMTransformUtils\n+      LLVMScalarOpts\n+      LLVMTransformUtils\n+      LLVMipo\n+      LLVMObjCARCOpts\n+      LLVMCoroutines\n+      LLVMAnalysis\n     )\n   endif()\n "}, {"filename": "include/triton/Analysis/Utility.h", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "file_content_changes": "@@ -12,19 +12,19 @@ namespace mlir {\n \n class ReduceOpHelper {\n public:\n-  explicit ReduceOpHelper(triton::ReduceOp rop)\n-      : op(rop.getOperation()), axis(rop.getAxis()) {\n-    auto firstTy = rop.getOperands()[0].getType().cast<RankedTensorType>();\n+  explicit ReduceOpHelper(triton::ReduceOp op)\n+      : op(op.getOperation()), axis(op.getAxis()) {\n+    auto firstTy = op.getOperands()[0].getType().cast<RankedTensorType>();\n     srcShape = firstTy.getShape();\n     srcEncoding = firstTy.getEncoding();\n-    srcElementTypes = rop.getElementTypes();\n+    srcElementTypes = op.getElementTypes();\n \n-    for (const auto &t : rop.getInputTypes()) {\n+    for (const auto &t : op.getInputTypes()) {\n       if (t.getShape() != srcShape) {\n-        rop.emitError() << \"shape mismatch\";\n+        op.emitError() << \"shape mismatch\";\n       }\n       if (t.getEncoding() != srcEncoding) {\n-        rop.emitError() << \"encoding mismatch\";\n+        op.emitError() << \"encoding mismatch\";\n       }\n     }\n   }\n@@ -33,6 +33,8 @@ class ReduceOpHelper {\n \n   Attribute getSrcLayout() { return srcEncoding; }\n \n+  triton::ReduceOp getOperation() { return op; }\n+\n   bool isFastReduction();\n \n   unsigned getInterWarpSize();\n@@ -54,13 +56,57 @@ class ReduceOpHelper {\n   bool isSupportedLayout();\n \n private:\n-  Operation *op;\n+  triton::ReduceOp op;\n   ArrayRef<int64_t> srcShape;\n   Attribute srcEncoding;\n   SmallVector<Type> srcElementTypes;\n   int axis;\n };\n \n+class ScanLoweringHelper {\n+public:\n+  explicit ScanLoweringHelper(triton::ScanOp op) : scanOp(op) {\n+    auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n+    srcEncoding = type.getEncoding();\n+  }\n+  // Return true if the lowering of the scan op is supported.\n+  bool isSupported();\n+  // Return the number of elements per thread along axis dim.\n+  unsigned getAxisNumElementsPerThread();\n+  // Return the number of elements per thread along non-axis dims.\n+  unsigned getNonAxisNumElementsPerThread();\n+  // Return the number of threads per warp along non-axis dims.\n+  unsigned getNonAxisNumThreadsPerWarp();\n+  // Return the flat numbers of threads computing independent scan results.\n+  unsigned getNonAxisNumThreadsPerCTA();\n+  // Return the number of warps per CTA along axis dim.\n+  unsigned getAxisNumWarps();\n+  // Return the number of threads per warp along axis dim.\n+  unsigned getAxisNumThreadsPerWarp();\n+  // Return the number of blocks along axis dim.\n+  unsigned getAxisNumBlocks();\n+  // Return the number of blocks along non axis dim.\n+  unsigned getNonAxisNumBlocks();\n+  // Return the size of the scratch space needed for scan lowering.\n+  unsigned getScratchSizeInBytes();\n+\n+  // Stride between contiguous element along axis dim.\n+  unsigned getAxisElementStride();\n+  // Stride between contiguous threads along axis dim.\n+  unsigned getAxisThreadStride();\n+  // Stride between contiguous blocks along axis dim.\n+  unsigned getAxisBlockStride();\n+\n+  Location getLoc() { return scanOp.getLoc(); }\n+  unsigned getAxis() { return scanOp.getAxis(); }\n+  triton::gpu::BlockedEncodingAttr getEncoding();\n+  Region &getCombineOp();\n+\n+private:\n+  triton::ScanOp scanOp;\n+  Attribute srcEncoding;\n+};\n+\n bool maybeSharedAllocationOp(Operation *op);\n \n bool maybeAliasOp(Operation *op);"}, {"filename": "include/triton/Dialect/Triton/IR/TritonAttrDefs.td", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -12,6 +12,7 @@ def TT_CacheModifierAttr : I32EnumAttr<\n         I32EnumAttrCase<\"CG\", 3, \"cg\">,\n         I32EnumAttrCase<\"WB\", 4, \"wb\">,\n         I32EnumAttrCase<\"CS\", 5, \"cs\">,\n+        I32EnumAttrCase<\"WT\", 6, \"wt\">,\n     ]> {\n     let cppNamespace = \"::mlir::triton\";\n }"}, {"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "file_content_changes": "@@ -431,6 +431,32 @@ def TT_ReduceReturnOp: TT_Op<\"reduce.return\",\n     let assemblyFormat = \"$result attr-dict `:` type($result)\";\n }\n \n+//\n+// Scan Op\n+//\n+def TT_ScanOp: TT_Op<\"scan\",\n+                       [Pure,\n+                        SameOperandsAndResultEncoding,\n+                        SameOperandsAndResultElementType,\n+                        SingleBlock,\n+                        DeclareOpInterfaceMethods<InferTypeOpInterface>]> {\n+    let summary = \"Reduction using generic combination algorithm\";\n+    let arguments = (ins Variadic<TT_Tensor>:$operands, I32Attr:$axis);\n+    let results = (outs Variadic<TT_Tensor>:$result);\n+    let regions = (region SizedRegion<1>:$combineOp);\n+    let builders = [\n+        OpBuilder<(ins \"ValueRange\":$operands, \"int\":$axis)>,\n+    ];\n+    let hasVerifier = 1;\n+}\n+\n+def TT_ScanReturnOp: TT_Op<\"scan.return\",\n+                             [HasParent<\"ScanOp\">, Pure, Terminator, ReturnLike]> {\n+    let summary = \"terminator for scan operator\";\n+    let arguments = (ins Variadic<AnyType>:$result);\n+    let assemblyFormat = \"$result attr-dict `:` type($result)\";\n+}\n+\n \n //\n // External Elementwise op"}, {"filename": "include/triton/Dialect/TritonGPU/IR/Dialect.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "file_content_changes": "@@ -28,8 +28,13 @@ unsigned getTotalElemsPerThread(Attribute layout, ArrayRef<int64_t> shape,\n \n SmallVector<unsigned> getElemsPerThread(Type type);\n \n+// Returns the number of threads per warp that may have access to replicated\n+// elements. If you want non-replicated threads, use\n+// getThreadsPerWarpWithUniqueData.\n SmallVector<unsigned> getThreadsPerWarp(Attribute layout);\n \n+// Returns the number of warps per CTA that may have access to replicated\n+// elements. If you want non-replicated warps, use getWarpsPerCTAWithUniqueData.\n SmallVector<unsigned> getWarpsPerCTA(Attribute layout);\n \n SmallVector<unsigned> getSizePerThread(Attribute layout);"}, {"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -168,6 +168,10 @@ class AllocationAnalysis {\n       ReduceOpHelper helper(reduceOp);\n       unsigned bytes = helper.getScratchSizeInBytes();\n       allocation->addBuffer<BufferT::BufferKind::Scratch>(op, bytes);\n+    } else if (auto scanOp = dyn_cast<triton::ScanOp>(op)) {\n+      ScanLoweringHelper helper(scanOp);\n+      unsigned bytes = helper.getScratchSizeInBytes();\n+      allocation->addBuffer<BufferT::BufferKind::Scratch>(op, bytes);\n     } else if (auto cvtLayout = dyn_cast<triton::gpu::ConvertLayoutOp>(op)) {\n       auto srcTy = cvtLayout.getSrc().getType().cast<RankedTensorType>();\n       auto dstTy = cvtLayout.getResult().getType().cast<RankedTensorType>();"}, {"filename": "lib/Analysis/Membar.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -86,7 +86,8 @@ void MembarAnalysis::visitTerminator(Operation *op,\n     return;\n   }\n   // Otherwise, it could be a return op\n-  if (isa<triton::ReduceReturnOp>(op) || isa<triton::ReturnOp>(op)) {\n+  if (isa<triton::ReduceReturnOp>(op) || isa<triton::ScanReturnOp>(op) ||\n+      isa<triton::ReturnOp>(op)) {\n     return;\n   }\n   llvm_unreachable(\"Unknown terminator encountered in membar analysis\");"}, {"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "file_content_changes": "@@ -5,11 +5,15 @@\n #include \"mlir/IR/Matchers.h\"\n #include \"triton/Dialect/Triton/IR/Dialect.h\"\n #include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n+#include \"triton/Tools/Sys/GetEnv.hpp\"\n #include <deque>\n \n namespace mlir {\n \n bool ReduceOpHelper::isFastReduction() {\n+  // Disable fast reduction only for debugging purpose\n+  if (::triton::tools::getBoolEnv(\"DISABLE_FAST_REDUCTION\"))\n+    return false;\n   return axis == triton::gpu::getOrder(getSrcLayout())[0];\n }\n \n@@ -113,6 +117,134 @@ bool ReduceOpHelper::isSupportedLayout() {\n   return false;\n }\n \n+unsigned ScanLoweringHelper::getAxisNumElementsPerThread() {\n+  return getEncoding().getSizePerThread()[getAxis()];\n+}\n+\n+unsigned ScanLoweringHelper::getNonAxisNumElementsPerThread() {\n+  SmallVector<unsigned> sizePerThreads = getContigPerThread(getEncoding());\n+  sizePerThreads[getAxis()] = 1;\n+  return product<unsigned>(sizePerThreads);\n+}\n+\n+Region &ScanLoweringHelper::getCombineOp() { return scanOp.getCombineOp(); }\n+\n+unsigned ScanLoweringHelper::getAxisNumThreadsPerWarp() {\n+  return triton::gpu::getThreadsPerWarp(getEncoding())[getAxis()];\n+}\n+\n+unsigned ScanLoweringHelper::getNonAxisNumThreadsPerWarp() {\n+  auto threadsPerWarp = triton::gpu::getThreadsPerWarp(getEncoding());\n+  threadsPerWarp[getAxis()] = 1;\n+  return product<unsigned>(threadsPerWarp);\n+}\n+\n+// Return the flat numbers of threads computing independent scan results.\n+unsigned ScanLoweringHelper::getNonAxisNumThreadsPerCTA() {\n+  unsigned numParallelThreadsPerWarp = getNonAxisNumThreadsPerWarp();\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(getEncoding());\n+  warpsPerCTA[getAxis()] = 1;\n+  unsigned numParallelWarpsPerCTA = product<unsigned>(warpsPerCTA);\n+  return numParallelThreadsPerWarp * numParallelWarpsPerCTA;\n+}\n+unsigned ScanLoweringHelper::getAxisNumWarps() {\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n+  return warpsPerCTA[getAxis()];\n+}\n+\n+unsigned ScanLoweringHelper::getAxisNumBlocks() {\n+  auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n+  auto sizePerThreads = triton::gpu::getSizePerThread(srcEncoding);\n+  auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcEncoding);\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n+  unsigned axis = getAxis();\n+  return ceil<unsigned>(\n+      type.getShape()[axis],\n+      (sizePerThreads[axis] * threadsPerWarp[axis] * warpsPerCTA[axis]));\n+}\n+\n+unsigned ScanLoweringHelper::getNonAxisNumBlocks() {\n+  auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n+  auto sizePerThreads = triton::gpu::getSizePerThread(srcEncoding);\n+  auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcEncoding);\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n+  unsigned axis = getAxis();\n+  unsigned numBlocks = 1;\n+  for (unsigned i = 0; i < sizePerThreads.size(); i++) {\n+    if (i == axis)\n+      continue;\n+    numBlocks *= ceil<unsigned>(\n+        type.getShape()[i],\n+        (sizePerThreads[i] * threadsPerWarp[i] * warpsPerCTA[i]));\n+  }\n+  return numBlocks;\n+}\n+\n+bool ScanLoweringHelper::isSupported() {\n+  // TODO: Support the following cases:\n+  // 1. Scan on non-blocking encodings\n+  // 2. Scan with multiple operands\n+  if (!isa<triton::gpu::BlockedEncodingAttr>(srcEncoding))\n+    return false;\n+  if (scanOp.getNumOperands() != 1)\n+    return false;\n+  return true;\n+}\n+\n+unsigned ScanLoweringHelper::getScratchSizeInBytes() {\n+  auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n+  unsigned elementSizeInBytes = type.getElementTypeBitWidth() / 8;\n+  auto mod = scanOp->getParentOfType<ModuleOp>();\n+  unsigned numWarps = triton::gpu::TritonGPUDialect::getNumWarps(mod);\n+  unsigned numNonAxisElementsPerWapr =\n+      getNonAxisNumThreadsPerWarp() * getNonAxisNumElementsPerThread();\n+  unsigned numElements = numWarps * numNonAxisElementsPerWapr *\n+                         getAxisNumBlocks() * getNonAxisNumBlocks();\n+  return elementSizeInBytes * numElements;\n+}\n+\n+triton::gpu::BlockedEncodingAttr ScanLoweringHelper::getEncoding() {\n+  return srcEncoding.cast<triton::gpu::BlockedEncodingAttr>();\n+}\n+\n+unsigned ScanLoweringHelper::getAxisElementStride() {\n+  auto order = triton::gpu::getOrder(srcEncoding);\n+  unsigned stride = 1;\n+  for (unsigned dim : order) {\n+    if (dim == getAxis())\n+      return stride;\n+    stride *= getContigPerThread(getEncoding())[dim];\n+  }\n+  llvm_unreachable(\"Axis not found in order\");\n+}\n+\n+unsigned ScanLoweringHelper::getAxisThreadStride() {\n+  auto order = triton::gpu::getOrder(srcEncoding);\n+  unsigned stride = 1;\n+  for (unsigned dim : order) {\n+    if (dim == getAxis())\n+      return stride;\n+    stride *= getEncoding().getThreadsPerWarp()[dim];\n+  }\n+  llvm_unreachable(\"Axis not found in order\");\n+}\n+\n+unsigned ScanLoweringHelper::getAxisBlockStride() {\n+  auto order = triton::gpu::getOrder(srcEncoding);\n+  unsigned stride = 1;\n+  auto type = scanOp.getOperand(0).getType().cast<RankedTensorType>();\n+  auto sizePerThreads = triton::gpu::getSizePerThread(srcEncoding);\n+  auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcEncoding);\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n+  for (unsigned dim : order) {\n+    if (dim == getAxis())\n+      return stride;\n+    stride *= type.getShape()[dim] /\n+              (sizePerThreads[dim] * threadsPerWarp[dim] * warpsPerCTA[dim]);\n+  }\n+  llvm_unreachable(\"Axis not found in order\");\n+}\n+\n bool maybeSharedAllocationOp(Operation *op) {\n   // TODO(Keren): This function can be replaced by adding\n   // MemoryEffectOpInterface. We can then use the MemoryEffectOpInterface to"}, {"filename": "lib/Conversion/TritonGPUToLLVM/CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -17,6 +17,7 @@ add_mlir_conversion_library(TritonGPUToLLVM\n     TritonGPUToLLVMPass.cpp\n     PTXAsmFormat.cpp\n     ReduceOpToLLVM.cpp\n+    ScanOpToLLVM.cpp\n     Utility.cpp\n     TypeConverter.cpp\n     ViewOpToLLVM.cpp"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "file_content_changes": "@@ -1,8 +1,10 @@\n #include \"ConvertLayoutOpToLLVM.h\"\n #include \"Utility.h\"\n \n+using ::mlir::LLVM::delinearize;\n using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n using ::mlir::LLVM::getStridesFromShapeAndOrder;\n+using ::mlir::LLVM::linearize;\n using ::mlir::triton::gpu::DotOperandEncodingAttr;\n using ::mlir::triton::gpu::getContigPerThread;\n using ::mlir::triton::gpu::getOrder;\n@@ -143,9 +145,10 @@ struct ConvertLayoutOpConversion\n       Value laneId = urem(threadId, warpSize);\n       Value warpId = udiv(threadId, warpSize);\n       // TODO: fix the bug in MMAEncodingAttr document\n-      SmallVector<Value> multiDimWarpId(2);\n-      multiDimWarpId[0] = urem(warpId, i32_val(mmaLayout.getWarpsPerCTA()[0]));\n-      multiDimWarpId[1] = udiv(warpId, i32_val(mmaLayout.getWarpsPerCTA()[0]));\n+      auto warpsPerCTA = mmaLayout.getWarpsPerCTA();\n+      auto order = triton::gpu::getOrder(mmaLayout);\n+      SmallVector<Value> multiDimWarpId =\n+          delinearize(rewriter, loc, warpId, warpsPerCTA, order);\n       Value _1 = i32_val(1);\n       Value _2 = i32_val(2);\n       Value _4 = i32_val(4);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM/SharedToDotOperandMMAv2.cpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "file_content_changes": "@@ -4,6 +4,7 @@\n using namespace mlir;\n \n using ValueTable = std::map<std::pair<unsigned, unsigned>, Value>;\n+using ::mlir::LLVM::delinearize;\n using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n using ::mlir::LLVM::getStridesFromShapeAndOrder;\n using ::mlir::triton::gpu::DotOperandEncodingAttr;\n@@ -552,14 +553,14 @@ Value loadArg(ConversionPatternRewriter &rewriter, Location loc, Value tensor,\n   int kWidth = encoding.getMMAv2kWidth();\n \n   auto warpsPerCTA = mmaLayout.getWarpsPerCTA();\n+  auto order = triton::gpu::getOrder(mmaLayout);\n   Value warp = udiv(thread, i32_val(32));\n   Value lane = urem(thread, i32_val(32));\n-  // Note: warps are currently column major in MMA layout\n-  Value warpRowIndex = urem(warp, i32_val(warpsPerCTA[0]));\n-  Value warpColIndex =\n-      urem(udiv(warp, i32_val(warpsPerCTA[0])), i32_val(warpsPerCTA[1]));\n-  Value warpM = urem(warpRowIndex, i32_val(shape[0] / 16));\n-  Value warpN = urem(warpColIndex, i32_val(shape[1] / 8));\n+\n+  SmallVector<Value> multiDimWarpId =\n+      delinearize(rewriter, loc, warp, warpsPerCTA, order);\n+  Value warpM = urem(multiDimWarpId[0], i32_val(shape[0] / 16));\n+  Value warpN = urem(multiDimWarpId[1], i32_val(shape[1] / 8));\n \n   int warpsPerTile;\n   if (isA)"}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -357,6 +357,7 @@ struct StoreOpConversion\n               .o(\"wb\", op.getCache() == triton::CacheModifier::WB)\n               .o(\"cg\", op.getCache() == triton::CacheModifier::CG)\n               .o(\"cs\", op.getCache() == triton::CacheModifier::CS)\n+              .o(\"wt\", op.getCache() == triton::CacheModifier::WT)\n               .o(\"L1::evict_first\",\n                  op.getEvict() == triton::EvictionPolicy::EVICT_FIRST)\n               .o(\"L1::evict_last\","}, {"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "file_content_changes": "@@ -1,8 +1,11 @@\n #include \"ReduceOpToLLVM.h\"\n+#include \"Utility.h\"\n \n using namespace mlir;\n using namespace mlir::triton;\n \n+using ::mlir::LLVM::delinearize;\n+using ::mlir::LLVM::linearize;\n using ::mlir::LLVM::shflSync;\n using ::mlir::LLVM::storeShared;\n using ::mlir::triton::gpu::getOrder;\n@@ -367,8 +370,10 @@ struct ReduceOpConversion\n     Value warpId = udiv(threadId, warpSize);\n     Value laneId = urem(threadId, warpSize);\n \n-    auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcLayout);\n-    auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcLayout);\n+    auto threadsPerWarp =\n+        triton::gpu::getThreadsPerWarpWithUniqueData(srcLayout, srcShape);\n+    auto warpsPerCTA =\n+        triton::gpu::getWarpsPerCTAWithUniqueData(srcLayout, srcShape);\n     auto order = getOrder(srcLayout);\n     SmallVector<Value> multiDimLaneId =\n         delinearize(rewriter, loc, laneId, threadsPerWarp, order);\n@@ -412,8 +417,11 @@ struct ReduceOpConversion\n     //\n     // Each thread needs to process:\n     //   elemsPerThread = sizeInterWarps * s1 * s2 .. Sn / numThreads\n+\n+    auto mod = op.getOperation()->getParentOfType<ModuleOp>();\n     unsigned numThreads =\n-        product<unsigned>(triton::gpu::getWarpsPerCTA(srcLayout)) * 32;\n+        product<unsigned>(triton::gpu::getWarpsPerCTA(srcLayout)) *\n+        triton::gpu::TritonGPUDialect::getThreadsPerWarp(mod);\n     unsigned elemsPerThread = std::max<unsigned>(elems / numThreads, 1);\n     Value readOffset = threadId;\n     for (unsigned round = 0; round < elemsPerThread; ++round) {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ScanOpToLLVM.cpp", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "file_content_changes": "@@ -0,0 +1,324 @@\n+#include \"ScanOpToLLVM.h\"\n+#include \"TritonGPUToLLVMBase.h\"\n+#include \"triton/Analysis/Utility.h\"\n+\n+using namespace mlir;\n+using namespace mlir::triton;\n+\n+using ::mlir::LLVM::delinearize;\n+using ::mlir::LLVM::linearize;\n+using ::mlir::LLVM::shflUpSync;\n+using ::mlir::LLVM::storeShared;\n+\n+// Apply the region of the scan op to the acc and cur values and update acc\n+// inplace with the result.\n+static void accumulate(ConversionPatternRewriter &rewriter, Region &combineOp,\n+                       Value &acc, Value cur) {\n+  if (!acc) {\n+    acc = cur;\n+    return;\n+  }\n+  // Create a new copy of the reduce block, and inline it\n+  Block *currentBlock = rewriter.getBlock();\n+  Region &parent = *currentBlock->getParent();\n+  rewriter.cloneRegionBefore(combineOp, &parent.front());\n+  auto &newScan = parent.front();\n+  auto returnOp = dyn_cast<triton::ScanReturnOp>(newScan.getTerminator());\n+  llvm::SmallVector<Value> combineArgs = {acc, cur};\n+  rewriter.inlineBlockBefore(&newScan, &*rewriter.getInsertionPoint(),\n+                             combineArgs);\n+  auto results = returnOp.getResult();\n+  acc = results[0];\n+  // Delete the terminator, which is no longer used\n+  rewriter.eraseOp(returnOp);\n+}\n+\n+// Scan a contiguous elements within a thread and update `srcValues` in place.\n+static void scanThreadContiguousElements(SmallVector<Value> &srcValues,\n+                                         ConversionPatternRewriter &rewriter,\n+                                         ScanLoweringHelper &helper) {\n+  // Depending on layout contiguous elements along axis dim may not be\n+  // contiguous in srcValues. Keep track of what elements belong to the same\n+  // chunk of contiguous elements.\n+  unsigned scanElementsPerThreads = helper.getAxisNumElementsPerThread();\n+  unsigned parallelElementsPerThread = helper.getAxisNumElementsPerThread();\n+  unsigned numChunks = srcValues.size() / scanElementsPerThreads;\n+  unsigned stride = helper.getAxisElementStride();\n+  SmallVector<Value> accs(numChunks);\n+  for (unsigned srcIndex = 0; srcIndex < srcValues.size(); srcIndex++) {\n+    unsigned accIndex = (srcIndex % stride) +\n+                        ((srcIndex / stride) / scanElementsPerThreads) * stride;\n+\n+    accumulate(rewriter, helper.getCombineOp(), accs[accIndex],\n+               srcValues[srcIndex]);\n+    srcValues[srcIndex] = accs[accIndex];\n+  }\n+}\n+\n+// Apply a scan across threads of the warp for the last element of each\n+// contiguous group of elements.\n+static void warpScan(SmallVector<Value> &srcValues,\n+                     ConversionPatternRewriter &rewriter,\n+                     ScanLoweringHelper &helper, Value laneId) {\n+  Location loc = helper.getLoc();\n+  unsigned scanElementsPerThreads = helper.getAxisNumElementsPerThread();\n+  unsigned elementStride = helper.getAxisElementStride();\n+  unsigned threadStride = helper.getAxisThreadStride();\n+  unsigned scanDim = helper.getAxisNumThreadsPerWarp();\n+  for (unsigned srcIndex = 0; srcIndex < srcValues.size(); srcIndex++) {\n+    unsigned elementIdx = (srcIndex / elementStride) % scanElementsPerThreads;\n+    // Only consider the last element of each contiguous chunk of elements.\n+    if (elementIdx != scanElementsPerThreads - 1)\n+      continue;\n+    // Reduce within warps.\n+    Value acc = srcValues[srcIndex];\n+    for (unsigned i = 1; i <= (scanDim) / 2; i = i << 1) {\n+      Value shfl = shflUpSync(loc, rewriter, acc, i * threadStride);\n+      Value tempAcc = acc;\n+      accumulate(rewriter, helper.getCombineOp(), tempAcc, shfl);\n+      Value mask = icmp_slt(laneId, i32_val(i));\n+      acc = select(mask, acc, tempAcc);\n+    }\n+    srcValues[srcIndex] = acc;\n+  }\n+}\n+\n+// For each set of contiguous elements within a thread we store the partial\n+// reduction into shared memory. Each parallel scan and each warp will store its\n+// own partial reductions. The shared memory is organized as follow:\n+//          -----------------------------------------------------------------\n+// chunk 0: | acc[0] warp 0 | acc[1] warp 0 | acc[0] warp 1 | acc[1] warp 1 |\n+// chunk 1: | acc[0] warp 0 | acc[1] warp 0 | acc[0] warp 1 | acc[1] warp 1 |\n+static void storeWarpAccumulator(SmallVector<Value> &srcValues,\n+                                 ConversionPatternRewriter &rewriter,\n+                                 ScanLoweringHelper &helper, Value laneId,\n+                                 Value warpId, Value baseSharedMemPtr,\n+                                 Value parallelLaneId) {\n+  Location loc = helper.getLoc();\n+  unsigned scanElementsPerThreads = helper.getAxisNumElementsPerThread();\n+  unsigned scanDim = helper.getAxisNumThreadsPerWarp();\n+  unsigned numParallelLane = helper.getNonAxisNumThreadsPerCTA();\n+  unsigned numWarps = helper.getAxisNumWarps();\n+  unsigned chunkId = 0;\n+  unsigned elementStride = helper.getAxisElementStride();\n+  for (unsigned srcIndex = 0; srcIndex < srcValues.size(); srcIndex++) {\n+    unsigned elementIdx = (srcIndex / elementStride) % scanElementsPerThreads;\n+    // Only consider the last element of each contiguous chunk of elements.\n+    if (elementIdx != scanElementsPerThreads - 1)\n+      continue;\n+    Value lastElement = srcValues[srcIndex];\n+    Value mask = icmp_eq(laneId, i32_val(scanDim - 1));\n+    Value index = add(parallelLaneId, mul(warpId, i32_val(numParallelLane)));\n+    index = add(index, i32_val(chunkId * numParallelLane * numWarps));\n+    Value writePtr = gep(baseSharedMemPtr.getType(), baseSharedMemPtr, index);\n+    storeShared(rewriter, loc, writePtr, lastElement, mask);\n+    chunkId++;\n+  }\n+}\n+\n+// Read the partial reductions from shared memory from each chunk of contiguous\n+// elements for each warp and parallel scan. Then combine the partial reduction\n+// with the right elements. Within a given contiguous element chunk we update\n+// all the elements by accumulating the value from the last element of the\n+// reduced value from the previous lane.\n+static void AddPartialReduce(SmallVector<Value> &srcValues,\n+                             ConversionPatternRewriter &rewriter,\n+                             ScanLoweringHelper &helper, Value sharedMemoryPtr,\n+                             Value warpId, Value laneId, Value parallelLaneId) {\n+  Location loc = helper.getLoc();\n+  unsigned numParallelLane = helper.getNonAxisNumThreadsPerCTA();\n+  unsigned numWarps = helper.getAxisNumWarps();\n+  unsigned scanElementsPerThreads = helper.getAxisNumElementsPerThread();\n+  unsigned parallelElementsPerThread = helper.getNonAxisNumElementsPerThread();\n+  unsigned elementStride = helper.getAxisElementStride();\n+  unsigned threadStride = helper.getAxisThreadStride();\n+  Value maskFirstWarp = icmp_eq(warpId, i32_val(0));\n+  Value maskFirstLane = icmp_eq(laneId, i32_val(0));\n+  Value maskFirstThread = and_(maskFirstWarp, maskFirstLane);\n+  struct Accumulator {\n+    Value acc;\n+    Value maskedAcc;\n+  };\n+  unsigned numScanBlocks = helper.getAxisNumBlocks();\n+  unsigned numParallelBlocks = helper.getNonAxisNumBlocks();\n+  assert(numScanBlocks * numParallelBlocks * parallelElementsPerThread *\n+             scanElementsPerThreads ==\n+         srcValues.size());\n+  SmallVector<Accumulator> accumulators(numParallelBlocks *\n+                                        parallelElementsPerThread);\n+  unsigned chunkId = 0;\n+  unsigned blockStride = helper.getAxisBlockStride();\n+  for (unsigned srcIndex = 0; srcIndex < srcValues.size(); srcIndex++) {\n+    unsigned elementIdx = (srcIndex / elementStride) % scanElementsPerThreads;\n+    // Only consider the last element of each contiguous chunk of elements.\n+    if (elementIdx != scanElementsPerThreads - 1)\n+      continue;\n+    // Accumulate the partial reduction from shared memory. Decide which\n+    // accumulator to combine based on whether the elements belong to the same\n+    // dimension along axis.\n+    unsigned blockId = chunkId / parallelElementsPerThread;\n+    unsigned parallelBlockId =\n+        blockId % blockStride +\n+        ((blockId / blockStride) / numScanBlocks) * blockStride;\n+    unsigned accumulatorIndex = chunkId % parallelElementsPerThread +\n+                                parallelBlockId * parallelElementsPerThread;\n+    Accumulator &accumulator = accumulators[accumulatorIndex];\n+    for (unsigned i = 0; i < numWarps; ++i) {\n+      Value index = add(parallelLaneId,\n+                        i32_val(numParallelLane * (i + chunkId * numWarps)));\n+      Value ptr = gep(sharedMemoryPtr.getType(), sharedMemoryPtr, index);\n+      Value partialReduce = load(ptr);\n+      if (!accumulator.acc) {\n+        accumulator.acc = partialReduce;\n+        accumulator.maskedAcc = partialReduce;\n+        continue;\n+      }\n+      accumulate(rewriter, helper.getCombineOp(), accumulator.acc,\n+                 partialReduce);\n+      Value mask = icmp_slt(warpId, i32_val(i + 1));\n+      accumulator.maskedAcc =\n+          select(mask, accumulator.maskedAcc, accumulator.acc);\n+    }\n+    Value temp = srcValues[srcIndex];\n+    accumulate(rewriter, helper.getCombineOp(), temp, accumulator.maskedAcc);\n+    unsigned axisBlockId = (blockId / blockStride) % numScanBlocks;\n+    if (axisBlockId == 0) {\n+      // For the first warp and first chunk we don't have anything to\n+      // accumulate.\n+      temp = select(maskFirstWarp, srcValues[srcIndex], temp);\n+    }\n+    srcValues[srcIndex] = temp;\n+    // Update the rest of the contiguous elements.\n+    Value lastElement =\n+        shflUpSync(loc, rewriter, srcValues[srcIndex], threadStride);\n+    lastElement = select(maskFirstLane, accumulator.maskedAcc, lastElement);\n+    for (unsigned i = 1; i < scanElementsPerThreads; ++i) {\n+      Value laneValue = srcValues[srcIndex - i * elementStride];\n+      accumulate(rewriter, helper.getCombineOp(), laneValue, lastElement);\n+      if (axisBlockId == 0) {\n+        // For the first warp and first chunk we don't have anything to\n+        // accumulate.\n+        laneValue = select(maskFirstThread,\n+                           srcValues[srcIndex - i * elementStride], laneValue);\n+      }\n+      srcValues[srcIndex - i * elementStride] = laneValue;\n+    }\n+    // For the next chunk start back from the value containing the\n+    // accumulated value of all the warps.\n+    accumulator.maskedAcc = accumulator.acc;\n+    chunkId++;\n+  }\n+}\n+\n+namespace {\n+struct ScanOpConversion\n+    : public ConvertTritonGPUOpToLLVMPattern<triton::ScanOp> {\n+public:\n+  using ConvertTritonGPUOpToLLVMPattern<\n+      triton::ScanOp>::ConvertTritonGPUOpToLLVMPattern;\n+\n+  LogicalResult\n+  matchAndRewrite(triton::ScanOp op, OpAdaptor adaptor,\n+                  ConversionPatternRewriter &rewriter) const override {\n+    if (succeeded(emitFastScan(op, adaptor, rewriter)))\n+      return success();\n+    return failure();\n+  }\n+\n+private:\n+  std::tuple<Value, Value, Value>\n+  getDelinearizedIds(ConversionPatternRewriter &rewriter,\n+                     ScanLoweringHelper &helper) const;\n+  LogicalResult emitFastScan(triton::ScanOp op, triton::ScanOpAdaptor adaptor,\n+                             ConversionPatternRewriter &rewriter) const;\n+};\n+\n+// Break up the threadId into lane and warp id along the scan dimension and\n+// compute a flat id for the parallel dimensions.\n+std::tuple<Value, Value, Value>\n+ScanOpConversion::getDelinearizedIds(ConversionPatternRewriter &rewriter,\n+                                     ScanLoweringHelper &helper) const {\n+  auto loc = helper.getLoc();\n+  unsigned axis = helper.getAxis();\n+  auto srcEncoding = helper.getEncoding();\n+\n+  Value threadId = getThreadId(rewriter, loc);\n+  Value warpSize = i32_val(32);\n+  Value warpId = udiv(threadId, warpSize);\n+  Value laneId = urem(threadId, warpSize);\n+\n+  auto threadsPerWarp = triton::gpu::getThreadsPerWarp(srcEncoding);\n+  auto warpsPerCTA = triton::gpu::getWarpsPerCTA(srcEncoding);\n+  auto order = triton::gpu::getOrder(srcEncoding);\n+  SmallVector<Value> multiDimLaneId =\n+      delinearize(rewriter, loc, laneId, threadsPerWarp, order);\n+  SmallVector<Value> multiDimWarpId =\n+      delinearize(rewriter, loc, warpId, warpsPerCTA, order);\n+\n+  Value laneIdAxis = multiDimLaneId[axis];\n+  Value warpIdAxis = multiDimWarpId[axis];\n+\n+  multiDimLaneId[axis] = i32_val(0);\n+  threadsPerWarp[axis] = 1;\n+  Value laneIdParallel =\n+      linearize(rewriter, loc, multiDimLaneId, threadsPerWarp, order);\n+  multiDimWarpId[axis] = i32_val(0);\n+  warpsPerCTA[axis] = 1;\n+  Value warpIdParallel =\n+      linearize(rewriter, loc, multiDimWarpId, warpsPerCTA, order);\n+  Value flatIdParallel =\n+      add(laneIdParallel,\n+          mul(warpIdParallel, i32_val(helper.getNonAxisNumThreadsPerWarp())));\n+  return std::make_tuple(laneIdAxis, warpIdAxis, flatIdParallel);\n+}\n+\n+// Lowering using warp shuffle operations to do warp level scan.\n+LogicalResult\n+ScanOpConversion::emitFastScan(triton::ScanOp op, triton::ScanOpAdaptor adaptor,\n+                               ConversionPatternRewriter &rewriter) const {\n+  ScanLoweringHelper helper(op);\n+  auto loc = helper.getLoc();\n+  if (!helper.isSupported())\n+    return failure();\n+\n+  auto [laneIdAxis, warpIdAxis, flatIdParallel] =\n+      getDelinearizedIds(rewriter, helper);\n+  auto input = adaptor.getOperands()[0];\n+  auto type = op.getOperand(0).getType().cast<RankedTensorType>();\n+  SmallVector<Value> srcValues =\n+      getTypeConverter()->unpackLLElements(loc, input, rewriter, type);\n+\n+  // Scan contigous elements in a thread and update `srcValues`.\n+  scanThreadContiguousElements(srcValues, rewriter, helper);\n+  // Apply warp level scan to the last element of each chunk of contiguous\n+  // elements.\n+  warpScan(srcValues, rewriter, helper, laneIdAxis);\n+\n+  // Store the partial reducing for each warp into shared memory.\n+  Type elemPtrTys = LLVM::LLVMPointerType::get(srcValues[0].getType(), 3);\n+  Value baseSharedMemPtr = bitcast(\n+      getSharedMemoryBase(loc, rewriter, op.getOperation()), elemPtrTys);\n+  storeWarpAccumulator(srcValues, rewriter, helper, laneIdAxis, warpIdAxis,\n+                       baseSharedMemPtr, flatIdParallel);\n+  barrier();\n+  // Read back the partial reduction of each warp and accumulate them based on\n+  // warpId. Then update each chunk of contiguous elements by adding the\n+  // accumulated value from the previous lane.\n+  AddPartialReduce(srcValues, rewriter, helper, baseSharedMemPtr, warpIdAxis,\n+                   laneIdAxis, flatIdParallel);\n+\n+  Value results = getTypeConverter()->packLLElements(loc, srcValues, rewriter,\n+                                                     input.getType());\n+  rewriter.replaceOp(op, results);\n+  return success();\n+}\n+} // namespace\n+\n+void populateScanOpToLLVMPatterns(\n+    TritonGPUToLLVMTypeConverter &typeConverter, RewritePatternSet &patterns,\n+    ModuleAllocation &allocation,\n+    ConvertTritonGPUOpToLLVMPatternBase::IndexCacheInfo &indexCacheInfo,\n+    PatternBenefit benefit) {\n+  patterns.add<ScanOpConversion>(typeConverter, allocation, indexCacheInfo,\n+                                 benefit);\n+}"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ScanOpToLLVM.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "file_content_changes": "@@ -0,0 +1,15 @@\n+#ifndef TRITON_CONVERSION_TRITONGPU_TO_LLVM_SCAN_OP_H\n+#define TRITON_CONVERSION_TRITONGPU_TO_LLVM_SCAN_OP_H\n+\n+#include \"TritonGPUToLLVMBase.h\"\n+\n+using namespace mlir;\n+using namespace mlir::triton;\n+\n+void populateScanOpToLLVMPatterns(\n+    TritonGPUToLLVMTypeConverter &typeConverter, RewritePatternSet &patterns,\n+    ModuleAllocation &allocation,\n+    ConvertTritonGPUOpToLLVMPatternBase::IndexCacheInfo &indexCacheInfo,\n+    PatternBenefit benefit);\n+\n+#endif"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "file_content_changes": "@@ -129,9 +129,15 @@ struct PrintOpConversion\n     } else if (type.isBF16() || type.isF16() || type.isF32() || type.isF64()) {\n       return \"%f\";\n     } else if (type.isSignedInteger()) {\n-      return \"%i\";\n+      if (type.getIntOrFloatBitWidth() == 64)\n+        return \"%lli\";\n+      else\n+        return \"%i\";\n     } else if (type.isUnsignedInteger() || type.isSignlessInteger()) {\n-      return \"%u\";\n+      if (type.getIntOrFloatBitWidth() == 64)\n+        return \"%llu\";\n+      else\n+        return \"%u\";\n     }\n     assert(false && \"not supported type\");\n     return \"\";"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 14, "deletions": 68, "changes": 82, "file_content_changes": "@@ -15,6 +15,7 @@\n using namespace mlir;\n using namespace mlir::triton;\n \n+using ::mlir::LLVM::delinearize;\n using ::mlir::LLVM::SharedMemoryObject;\n using ::mlir::triton::gpu::BlockedEncodingAttr;\n using ::mlir::triton::gpu::DotOperandEncodingAttr;\n@@ -504,65 +505,6 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     return mask;\n   }\n \n-  // Convert an \\param index to a multi-dim coordinate given \\param shape and\n-  // \\param order.\n-  SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n-                                 Location loc, Value linear,\n-                                 ArrayRef<unsigned> shape,\n-                                 ArrayRef<unsigned> order) const {\n-    unsigned rank = shape.size();\n-    assert(rank == order.size());\n-    auto reordered = reorder(shape, order);\n-    auto reorderedMultiDim = delinearize(rewriter, loc, linear, reordered);\n-    SmallVector<Value> multiDim(rank);\n-    for (unsigned i = 0; i < rank; ++i) {\n-      multiDim[order[i]] = reorderedMultiDim[i];\n-    }\n-    return multiDim;\n-  }\n-\n-  SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n-                                 Location loc, Value linear,\n-                                 ArrayRef<unsigned> shape) const {\n-    unsigned rank = shape.size();\n-    assert(rank > 0);\n-    SmallVector<Value> multiDim(rank);\n-    if (rank == 1) {\n-      multiDim[0] = linear;\n-    } else {\n-      Value remained = linear;\n-      for (auto &&en : llvm::enumerate(shape.drop_back())) {\n-        Value dimSize = i32_val(en.value());\n-        multiDim[en.index()] = urem(remained, dimSize);\n-        remained = udiv(remained, dimSize);\n-      }\n-      multiDim[rank - 1] = remained;\n-    }\n-    return multiDim;\n-  }\n-\n-  Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n-                  ArrayRef<Value> multiDim, ArrayRef<unsigned> shape,\n-                  ArrayRef<unsigned> order) const {\n-    return linearize(rewriter, loc, reorder<Value>(multiDim, order),\n-                     reorder<unsigned>(shape, order));\n-  }\n-\n-  Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n-                  ArrayRef<Value> multiDim, ArrayRef<unsigned> shape) const {\n-    auto rank = multiDim.size();\n-    Value linear = i32_val(0);\n-    if (rank > 0) {\n-      linear = multiDim.back();\n-      for (auto [dim, dimShape] :\n-           llvm::reverse(llvm::zip(multiDim.drop_back(), shape.drop_back()))) {\n-        Value dimSize = i32_val(dimShape);\n-        linear = add(mul(linear, dimSize), dim);\n-      }\n-    }\n-    return linear;\n-  }\n-\n   Value dot(ConversionPatternRewriter &rewriter, Location loc,\n             ArrayRef<Value> offsets, ArrayRef<Value> strides) const {\n     assert(offsets.size() == strides.size());\n@@ -927,19 +869,23 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n                               const MmaEncodingAttr &mmaLayout,\n                               RankedTensorType type) const {\n     auto shape = type.getShape();\n-    auto _warpsPerCTA = mmaLayout.getWarpsPerCTA();\n-    assert(_warpsPerCTA.size() == 2);\n-    SmallVector<Value> warpsPerCTA = {i32_val(_warpsPerCTA[0]),\n-                                      i32_val(_warpsPerCTA[1])};\n+    auto warpsPerCTA = mmaLayout.getWarpsPerCTA();\n+    assert(warpsPerCTA.size() == 2);\n+    auto order = triton::gpu::getOrder(mmaLayout);\n     Value threadId = getThreadId(rewriter, loc);\n     Value warpSize = i32_val(32);\n     Value laneId = urem(threadId, warpSize);\n     Value warpId = udiv(threadId, warpSize);\n-    Value warpId0 = urem(urem(warpId, warpsPerCTA[0]), i32_val(shape[0] / 16));\n-    Value warpId1 = urem(urem(udiv(warpId, warpsPerCTA[0]), warpsPerCTA[1]),\n-                         i32_val(shape[1] / 8));\n-    Value offWarp0 = mul(warpId0, i32_val(16));\n-    Value offWarp1 = mul(warpId1, i32_val(8));\n+\n+    SmallVector<Value> multiDimWarpId =\n+        delinearize(rewriter, loc, warpId, warpsPerCTA, order);\n+    unsigned lastAxis = order[order.size() - 1];\n+    multiDimWarpId[lastAxis] =\n+        urem(multiDimWarpId[lastAxis], i32_val(warpsPerCTA[lastAxis]));\n+    multiDimWarpId[0] = urem(multiDimWarpId[0], i32_val(shape[0] / 16));\n+    multiDimWarpId[1] = urem(multiDimWarpId[1], i32_val(shape[1] / 8));\n+    Value offWarp0 = mul(multiDimWarpId[0], i32_val(16));\n+    Value offWarp1 = mul(multiDimWarpId[1], i32_val(8));\n \n     SmallVector<Value> multiDimBase(2);\n     multiDimBase[0] = add(udiv(laneId, i32_val(4)), offWarp0);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -26,6 +26,7 @@\n #include \"ElementwiseOpToLLVM.h\"\n #include \"LoadStoreOpToLLVM.h\"\n #include \"ReduceOpToLLVM.h\"\n+#include \"ScanOpToLLVM.h\"\n #include \"TritonGPUToLLVM.h\"\n #include \"TypeConverter.h\"\n #include \"ViewOpToLLVM.h\"\n@@ -372,6 +373,8 @@ class ConvertTritonGPUToLLVM\n                                       /*benefit=*/1);\n     populateReduceOpToLLVMPatterns(typeConverter, patterns, allocation,\n                                    indexCacheInfo, /*benefit=*/1);\n+    populateScanOpToLLVMPatterns(typeConverter, patterns, allocation,\n+                                 indexCacheInfo, /*benefit=*/1);\n     populateViewOpToLLVMPatterns(typeConverter, patterns, /*benefit=*/1);\n \n     // Native lowering patterns"}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.cpp", "status": "modified", "additions": 93, "deletions": 6, "changes": 99, "file_content_changes": "@@ -70,6 +70,82 @@ getStridesFromShapeAndOrder(ArrayRef<int64_t> shape, ArrayRef<unsigned> order,\n   return strides;\n }\n \n+// Convert an \\param index to a multi-dim coordinate given \\param shape and\n+// \\param order.\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, Value linear,\n+                               ArrayRef<unsigned> shape,\n+                               ArrayRef<unsigned> order) {\n+  unsigned rank = shape.size();\n+  assert(rank == order.size());\n+  auto reordered = reorder(shape, order);\n+  SmallVector<Value> reorderedMultiDim(rank);\n+  if (auto constantOp = linear.getDefiningOp<arith::ConstantOp>()) {\n+    unsigned intVal =\n+        constantOp.getValue().cast<IntegerAttr>().getValue().getSExtValue();\n+    reorderedMultiDim = delinearize(rewriter, loc, intVal, reordered);\n+  } else {\n+    reorderedMultiDim = delinearize(rewriter, loc, linear, reordered);\n+  }\n+  SmallVector<Value> multiDim(rank);\n+  for (unsigned i = 0; i < rank; ++i) {\n+    multiDim[order[i]] = reorderedMultiDim[i];\n+  }\n+  return multiDim;\n+}\n+\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, unsigned linear,\n+                               ArrayRef<unsigned> shape) {\n+  unsigned rank = shape.size();\n+  assert(rank > 0);\n+  SmallVector<Value> multiDim(rank);\n+  unsigned remained = linear;\n+  for (auto &&en : llvm::enumerate(shape)) {\n+    unsigned dimSize = en.value();\n+    multiDim[en.index()] = i32_val(remained % dimSize);\n+    remained = remained / dimSize;\n+  }\n+  return multiDim;\n+}\n+\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, Value linear,\n+                               ArrayRef<unsigned> shape) {\n+  unsigned rank = shape.size();\n+  assert(rank > 0);\n+  SmallVector<Value> multiDim(rank);\n+  Value remained = linear;\n+  for (auto &&en : llvm::enumerate(shape)) {\n+    Value dimSize = i32_val(en.value());\n+    multiDim[en.index()] = urem(remained, dimSize);\n+    remained = udiv(remained, dimSize);\n+  }\n+  return multiDim;\n+}\n+\n+Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n+                ArrayRef<Value> multiDim, ArrayRef<unsigned> shape,\n+                ArrayRef<unsigned> order) {\n+  return linearize(rewriter, loc, reorder<Value>(multiDim, order),\n+                   reorder<unsigned>(shape, order));\n+}\n+\n+Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n+                ArrayRef<Value> multiDim, ArrayRef<unsigned> shape) {\n+  auto rank = multiDim.size();\n+  Value linear = i32_val(0);\n+  if (rank > 0) {\n+    linear = multiDim.back();\n+    for (auto [dim, dimShape] :\n+         llvm::reverse(llvm::zip(multiDim.drop_back(), shape.drop_back()))) {\n+      Value dimSize = i32_val(dimShape);\n+      linear = add(mul(linear, dimSize), dim);\n+    }\n+  }\n+  return linear;\n+}\n+\n Value storeShared(ConversionPatternRewriter &rewriter, Location loc, Value ptr,\n                   Value val, Value pred) {\n   MLIRContext *ctx = rewriter.getContext();\n@@ -84,34 +160,45 @@ Value storeShared(ConversionPatternRewriter &rewriter, Location loc, Value ptr,\n   return builder.launch(rewriter, loc, void_ty(ctx));\n }\n \n-Value shflSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n-               int i) {\n+static Value commonShflSync(Location loc, ConversionPatternRewriter &rewriter,\n+                            Value val, int i, const std::string &shuffleType,\n+                            const std::string &clamp) {\n   unsigned bits = val.getType().getIntOrFloatBitWidth();\n \n   if (bits == 64) {\n     Type vecTy = vec_ty(f32_ty, 2);\n     Value vec = bitcast(val, vecTy);\n     Value val0 = extract_element(f32_ty, vec, i32_val(0));\n     Value val1 = extract_element(f32_ty, vec, i32_val(1));\n-    val0 = shflSync(loc, rewriter, val0, i);\n-    val1 = shflSync(loc, rewriter, val1, i);\n+    val0 = commonShflSync(loc, rewriter, val0, i, shuffleType, clamp);\n+    val1 = commonShflSync(loc, rewriter, val1, i, shuffleType, clamp);\n     vec = undef(vecTy);\n     vec = insert_element(vecTy, vec, val0, i32_val(0));\n     vec = insert_element(vecTy, vec, val1, i32_val(1));\n     return bitcast(vec, val.getType());\n   }\n \n   PTXBuilder builder;\n-  auto &shfl = builder.create(\"shfl.sync\")->o(\"bfly\").o(\"b32\");\n+  auto &shfl = builder.create(\"shfl.sync\")->o(shuffleType).o(\"b32\");\n   auto *dOpr = builder.newOperand(\"=r\");\n   auto *aOpr = builder.newOperand(val, \"r\");\n   auto *bOpr = builder.newConstantOperand(i);\n-  auto *cOpr = builder.newConstantOperand(\"0x1f\");\n+  auto *cOpr = builder.newConstantOperand(clamp);\n   auto *maskOpr = builder.newConstantOperand(\"0xffffffff\");\n   shfl(dOpr, aOpr, bOpr, cOpr, maskOpr);\n   return builder.launch(rewriter, loc, val.getType(), false);\n }\n \n+Value shflSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n+               int i) {\n+  return commonShflSync(loc, rewriter, val, i, \"bfly\", \"0x1f\");\n+}\n+\n+Value shflUpSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n+                 int i) {\n+  return commonShflSync(loc, rewriter, val, i, \"up\", \"0x0\");\n+}\n+\n Value addStringToModule(Location loc, ConversionPatternRewriter &rewriter,\n                         StringRef key, StringRef content) {\n   auto moduleOp = rewriter.getBlock()->getParent()->getParentOfType<ModuleOp>();"}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "file_content_changes": "@@ -258,11 +258,35 @@ SharedMemoryObject\n getSharedMemoryObjectFromStruct(Location loc, Value llvmStruct,\n                                 ConversionPatternRewriter &rewriter);\n \n+// Convert an \\param index to a multi-dim coordinate given \\param shape and\n+// \\param order.\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, Value linear,\n+                               ArrayRef<unsigned> shape,\n+                               ArrayRef<unsigned> order);\n+\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, unsigned linear,\n+                               ArrayRef<unsigned> shape);\n+\n+SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                               Location loc, Value linear,\n+                               ArrayRef<unsigned> shape);\n+\n+Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n+                ArrayRef<Value> multiDim, ArrayRef<unsigned> shape,\n+                ArrayRef<unsigned> order);\n+\n+Value linearize(ConversionPatternRewriter &rewriter, Location loc,\n+                ArrayRef<Value> multiDim, ArrayRef<unsigned> shape);\n+\n Value storeShared(ConversionPatternRewriter &rewriter, Location loc, Value ptr,\n                   Value val, Value pred);\n \n Value shflSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n                int i);\n+Value shflUpSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n+                 int i);\n \n Value addStringToModule(Location loc, ConversionPatternRewriter &rewriter,\n                         StringRef key, StringRef content);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ViewOpToLLVM.cpp", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "file_content_changes": "@@ -22,7 +22,26 @@ struct SplatOpConversion\n                                   ConversionPatternRewriter &rewriter,\n                                   Location loc) {\n     auto tensorTy = resType.cast<RankedTensorType>();\n-    auto srcType = typeConverter->convertType(elemType);\n+    // Check the converted type for the tensor as depending on the encoding the\n+    // converter may pick different element types.\n+    auto srcType = typeConverter->convertType(tensorTy);\n+    if (auto structTy = dyn_cast<LLVM::LLVMStructType>(srcType))\n+      srcType = structTy.getBody()[0];\n+    // If the type sizes don't match we need to pack constants.\n+    if (srcType.isIntOrFloat() && constVal.getType().getIntOrFloatBitWidth() !=\n+                                      srcType.getIntOrFloatBitWidth()) {\n+      unsigned cstBitWidth = constVal.getType().getIntOrFloatBitWidth();\n+      unsigned srcBitWidth = srcType.getIntOrFloatBitWidth();\n+      assert(cstBitWidth <= srcBitWidth && srcBitWidth % cstBitWidth == 0);\n+      unsigned ratio = srcBitWidth / cstBitWidth;\n+      Type intTy = IntegerType::get(elemType.getContext(), cstBitWidth);\n+      VectorType vecType = VectorType::get(ratio, intTy);\n+      Value intCst = bitcast(constVal, intTy);\n+      Value vec = undef(vecType);\n+      for (unsigned i = 0; i < ratio; ++i)\n+        vec = insert_element(vecType, vec, intCst, int_val(32, i));\n+      constVal = vec;\n+    }\n     auto llSrc = bitcast(constVal, srcType);\n     size_t elemsPerThread = getTotalElemsPerThread(tensorTy);\n     llvm::SmallVector<Value> elems(elemsPerThread, llSrc);"}, {"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.cpp", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "file_content_changes": "@@ -537,6 +537,38 @@ struct TritonReduceReturnPattern\n   }\n };\n \n+struct TritonScanPattern : public OpConversionPattern<triton::ScanOp> {\n+  using OpConversionPattern<triton::ScanOp>::OpConversionPattern;\n+\n+  LogicalResult\n+  matchAndRewrite(triton::ScanOp op, OpAdaptor adaptor,\n+                  ConversionPatternRewriter &rewriter) const override {\n+    auto newScan = rewriter.create<triton::ScanOp>(\n+        op.getLoc(), adaptor.getOperands(), adaptor.getAxis());\n+    addNamedAttrs(newScan, adaptor.getAttributes());\n+\n+    auto &newCombineOp = newScan.getCombineOp();\n+    rewriter.cloneRegionBefore(op.getCombineOp(), newCombineOp,\n+                               newCombineOp.end());\n+    rewriter.replaceOp(op, newScan.getResult());\n+    return success();\n+  }\n+};\n+\n+struct TritonScanReturnPattern\n+    : public OpConversionPattern<triton::ScanReturnOp> {\n+  using OpConversionPattern<triton::ScanReturnOp>::OpConversionPattern;\n+\n+  LogicalResult\n+  matchAndRewrite(triton::ScanReturnOp op, OpAdaptor adaptor,\n+                  ConversionPatternRewriter &rewriter) const override {\n+    addNamedAttrs(rewriter.replaceOpWithNewOp<triton::ScanReturnOp>(\n+                      op, adaptor.getResult()),\n+                  adaptor.getAttributes());\n+    return success();\n+  }\n+};\n+\n struct TritonPrintPattern : public OpConversionPattern<triton::PrintOp> {\n   using OpConversionPattern<triton::PrintOp>::OpConversionPattern;\n \n@@ -623,9 +655,10 @@ void populateTritonPatterns(TritonGPUTypeConverter &typeConverter,\n           TritonGenericPattern<triton::PtrToIntOp>,\n           TritonGenericPattern<triton::SplatOp>, TritonBroadcastPattern,\n           TritonGenericPattern<triton::AddPtrOp>, TritonCatPattern,\n-          TritonReducePattern, TritonReduceReturnPattern, TritonTransPattern,\n-          TritonExpandDimsPattern, TritonMakeRangePattern, TritonDotPattern,\n-          TritonLoadPattern, TritonStorePattern,\n+          TritonReducePattern, TritonReduceReturnPattern, TritonScanPattern,\n+          TritonScanReturnPattern, TritonTransPattern, TritonExpandDimsPattern,\n+          TritonMakeRangePattern, TritonDotPattern, TritonLoadPattern,\n+          TritonStorePattern,\n           TritonExternElementwisePattern<triton::PureExternElementwiseOp>,\n           TritonExternElementwisePattern<triton::ImpureExternElementwiseOp>,\n           TritonPrintPattern, TritonAssertPattern, TritonAtomicRMWPattern,"}, {"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "file_content_changes": "@@ -559,6 +559,36 @@ llvm::SmallVector<Type> ReduceOp::getElementTypes() {\n \n unsigned ReduceOp::getNumOperands() { return this->getOperands().size(); }\n \n+//-- ScanOp --\n+void ScanOp::build(mlir::OpBuilder &builder, mlir::OperationState &state,\n+                   mlir::ValueRange operands, int axis) {\n+  SmallVector<Type> inferredReturnTypes;\n+  for (auto arg : operands)\n+    inferredReturnTypes.push_back(arg.getType());\n+  ReduceOp::build(builder, state, inferredReturnTypes, operands, axis);\n+}\n+\n+mlir::LogicalResult mlir::triton::ScanOp::inferReturnTypes(\n+    MLIRContext *context, std::optional<Location> location, ValueRange operands,\n+    DictionaryAttr attributes, OpaqueProperties properties, RegionRange regions,\n+    SmallVectorImpl<Type> &inferredReturnTypes) {\n+  for (auto arg : operands)\n+    inferredReturnTypes.push_back(arg.getType());\n+  return success();\n+}\n+\n+mlir::LogicalResult mlir::triton::ScanOp::verify() {\n+  if (this->getOperands().size() < 1) {\n+    return this->emitOpError() << \"must have at least 1 operand\";\n+  }\n+  for (const auto &operand : this->getOperands()) {\n+    if (!dyn_cast<RankedTensorType>(operand.getType())) {\n+      return this->emitOpError() << \"operands must be RankedTensorType\";\n+    }\n+  }\n+  return success();\n+}\n+\n //-- SplatOp --\n OpFoldResult SplatOp::fold(FoldAdaptor adaptor) {\n   auto value = adaptor.getSrc();"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -85,6 +85,8 @@ SmallVector<unsigned> getThreadsPerWarp(Attribute layout) {\n   if (auto sliceLayout = layout.dyn_cast<SliceEncodingAttr>()) {\n     auto parent = sliceLayout.getParent();\n     auto parentThreadsPerWarp = getThreadsPerWarp(parent);\n+    assert(parentThreadsPerWarp.size() == 2 &&\n+           \"getThreadsPerWarp only implemented for 2D slice layout\");\n     SmallVector<unsigned> threadsPerWarp = parentThreadsPerWarp;\n     threadsPerWarp.erase(threadsPerWarp.begin() + sliceLayout.getDim());\n     for (unsigned i = 0; i < threadsPerWarp.size(); i++)\n@@ -129,6 +131,8 @@ SmallVector<unsigned> getWarpsPerCTA(Attribute layout) {\n   if (auto sliceLayout = layout.dyn_cast<SliceEncodingAttr>()) {\n     auto parent = sliceLayout.getParent();\n     auto parentWarpsPerCTA = getWarpsPerCTA(parent);\n+    assert(parentWarpsPerCTA.size() == 2 &&\n+           \"getWarpsPerCTA only implemented for 2D slice layout\");\n     SmallVector<unsigned> warpsPerCTA = parentWarpsPerCTA;\n     warpsPerCTA.erase(warpsPerCTA.begin() + sliceLayout.getDim());\n     for (unsigned i = 0; i < warpsPerCTA.size(); i++)"}, {"filename": "lib/Dialect/TritonGPU/Transforms/OptimizeDotOperands.cpp", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "file_content_changes": "@@ -238,7 +238,9 @@ updateDotEncodingLayout(SmallVector<ConvertLayoutOp> &convertsToDotEncoding,\n                                 convertsToDotEncoding.end());\n   // Collect all the operations where the type needs to be propagated.\n   for (auto cvt : convertsToDotEncoding) {\n-    auto filter = [&](Operation *op) {\n+    auto forwardFilter = [&](Operation *op) {\n+      if (op == cvt.getOperation())\n+        return true;\n       for (Value operand : op->getOperands()) {\n         auto tensorType = operand.getType().dyn_cast<RankedTensorType>();\n         if (tensorType &&\n@@ -247,7 +249,18 @@ updateDotEncodingLayout(SmallVector<ConvertLayoutOp> &convertsToDotEncoding,\n       }\n       return false;\n     };\n-    mlir::getForwardSlice(cvt.getResult(), &slices, {filter});\n+    auto backwardFilter = [&](Operation *op) {\n+      for (Value results : op->getResults()) {\n+        auto tensorType = results.getType().dyn_cast<RankedTensorType>();\n+        if (tensorType &&\n+            tensorType.getEncoding().isa<DotOperandEncodingAttr>())\n+          return true;\n+      }\n+      return false;\n+    };\n+    SetVector<Operation *> opSlice =\n+        getSlice(cvt.getOperation(), {backwardFilter}, {forwardFilter});\n+    slices.insert(opSlice.begin(), opSlice.end());\n   }\n   // Apply the type change by walking ops in topological order.\n   slices = mlir::topologicalSort(slices);"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "file_content_changes": "@@ -816,28 +816,49 @@ void LoopPipeliner::prefetchNextIteration(scf::ForOp newForOp,\n       builder.create<arith::ConstantIntOp>(nextIV.getLoc(), numStages, 32));\n \n   // Prefetch load deps\n+  // If a load-dependent instruction that uses a block argument, we\n+  // shouldn't update the new mapping of the block argument in the current\n+  // iteration.\n+  // For example.\n+  // %a = add %arg0, %c\n+  // %b = add %arg0, %d\n+  //\n+  // Update %arg0 will cause the value of %b to be incorrect.\n+  // We do need to use the next iteration value of %arg0 because it could be a\n+  // immediate arg of a load op.\n+  // load %arg0\n+  // %a = add %arg0, %c\n+  // yield %a\n+  //\n+  // We reroder instructions so %a and yield are actually before load. load\n+  // %arg0 should use the updated %arg0.\n+  IRMapping curMapping = nextMapping;\n   for (Operation *op : orderedDeps)\n     if (!validLoads.contains(op->getResult(0))) {\n       if (immediateOpStages[op].contains(numStages - 2))\n         // A post load op that provides values for numStage - 2\n-        nextMapping.map(forOp.getInductionVar(), curIV);\n+        curMapping.map(forOp.getInductionVar(), curIV);\n       else\n-        nextMapping.map(forOp.getInductionVar(), nextIV);\n+        curMapping.map(forOp.getInductionVar(), nextIV);\n       Operation *nextOp;\n       if (auto loadOp = dyn_cast<triton::LoadOp>(op)) {\n         auto newMask =\n-            getLoadMask(loadOp, nextMapping.lookupOrDefault(loadOp.getMask()),\n+            getLoadMask(loadOp, curMapping.lookupOrDefault(loadOp.getMask()),\n                         nextLoopCond, builder);\n         nextOp = builder.create<triton::LoadOp>(\n             loadOp.getLoc(), loadOp.getResult().getType(),\n-            nextMapping.lookupOrDefault(loadOp.getPtr()), newMask,\n-            nextMapping.lookupOrDefault(loadOp.getOther()),\n+            curMapping.lookupOrDefault(loadOp.getPtr()), newMask,\n+            curMapping.lookupOrDefault(loadOp.getOther()),\n             loadOp.getBoundaryCheckAttr(), loadOp.getPaddingAttr(),\n             loadOp.getCache(), loadOp.getEvict(), loadOp.getIsVolatile());\n         addNamedAttrs(nextOp, op->getDiscardableAttrDictionary());\n+        curMapping.map(loadOp.getResult(), nextOp->getResult(0));\n         nextMapping.map(loadOp.getResult(), nextOp->getResult(0));\n-      } else\n-        nextOp = builder.clone(*op, nextMapping);\n+      } else {\n+        nextOp = builder.clone(*op, curMapping);\n+        for (unsigned dstIdx : llvm::seq(unsigned(0), op->getNumResults()))\n+          nextMapping.map(op->getResult(dstIdx), nextOp->getResult(dstIdx));\n+      }\n \n       for (unsigned dstIdx : llvm::seq(unsigned(0), op->getNumResults()))\n         setValueMappingYield(newForOp, op->getResult(dstIdx),"}, {"filename": "lib/Dialect/TritonGPU/Transforms/RemoveLayoutConversions.cpp", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "file_content_changes": "@@ -345,6 +345,14 @@ class RematerializeForward : public mlir::RewritePattern {\n     // heuristics for flash attention\n     if (srcEncoding.isa<triton::gpu::SliceEncodingAttr>())\n       return failure();\n+    // For cases like:\n+    // %0 = convert_layout %arg0\n+    // We should try to move %0 out of scf.for first, if it couldn't be moved\n+    // out additional conversions will be added to the loop body.\n+    if (!cvt.getOperand().getDefiningOp() &&\n+        isa<scf::ForOp>(cvt->getParentOp()))\n+      return failure();\n+\n     SetVector<Operation *> cvtSlices;\n     auto filter = [&](Operation *op) {\n       return op->getBlock() == cvt->getBlock() &&\n@@ -363,7 +371,8 @@ class RematerializeForward : public mlir::RewritePattern {\n       // don't rematerialize non-element-wise\n       if (!op->hasTrait<mlir::OpTrait::SameOperandsAndResultEncoding>() &&\n           !op->hasTrait<mlir::OpTrait::Elementwise>() &&\n-          !isa<triton::StoreOp, triton::ReduceOp>(op))\n+          !isa<triton::StoreOp, triton::AssertOp, triton::PrintOp,\n+               triton::ReduceOp>(op))\n         return failure();\n       // don't rematerialize if it adds an extra conversion that can't\n       // be removed\n@@ -380,6 +389,10 @@ class RematerializeForward : public mlir::RewritePattern {\n       }\n     }\n \n+    // Call SimplifyReduceCvt instead of the general push conversion forward\n+    if (isa<triton::ReduceOp>(cvtSlices.front()))\n+      return failure();\n+\n     pushConversionForward(cvt, cvtSlices, rewriter);\n     return success();\n   }\n@@ -425,8 +438,8 @@ class RematerializeBackward : public mlir::RewritePattern {\n \n     IRMapping mapping;\n     rematerializeConversionChain(toConvert, rewriter, processed, mapping);\n-\n     rewriter.replaceOp(cvt, mapping.lookup(cvt->getOperand(0)));\n+\n     return mlir::success();\n   }\n };\n@@ -459,31 +472,21 @@ class MoveConvertOutOfLoop : public mlir::RewritePattern {\n     for (const auto &arg : llvm::enumerate(forOp.getRegionIterArgs()))\n       mapping.map(arg.value(), newForOp.getRegionIterArgs()[arg.index()]);\n     mapping.map(origConversion.getResult(), newForOp.getRegionIterArgs()[i]);\n-    // the iter arg of interest may have other uses than the conversion\n-    // we're hoisting out of the loop. If that's the case we will\n-    // need to add extra conversions for all uses... which is only useful\n-    // if these extra conversions can be removed by another pattern\n-    auto oldArg = forOp.getRegionIterArgs()[i];\n-    auto newArg = newForOp.getRegionIterArgs()[i];\n-    auto newArgFallback = rewriter.create<triton::gpu::ConvertLayoutOp>(\n-        newForOp.getLoc(), origType, newArg);\n \n     mapping.map(forOp.getInductionVar(), newForOp.getInductionVar());\n     for (Operation &op : forOp.getBody()->without_terminator()) {\n       if (&op == (Operation *)(&origConversion))\n         continue;\n       Operation *newOp = rewriter.clone(op, mapping);\n-      if (find(oldArg.getUsers(), &op) != oldArg.getUsers().end())\n-        newOp->replaceUsesOfWith(newArg, newArgFallback);\n     }\n-\n     // create yield, inserting conversions if necessary\n     auto yieldOp = forOp.getBody()->getTerminator();\n     SmallVector<Value, 4> newYieldArgs;\n     for (Value arg : yieldOp->getOperands())\n       newYieldArgs.push_back(mapping.lookup(arg));\n-    newYieldArgs[i] = rewriter.create<triton::gpu::ConvertLayoutOp>(\n-        yieldOp->getLoc(), newType, newYieldArgs[i]);\n+    if (newYieldArgs[i].getType() != newType)\n+      newYieldArgs[i] = rewriter.create<triton::gpu::ConvertLayoutOp>(\n+          yieldOp->getLoc(), newType, newYieldArgs[i]);\n     rewriter.create<scf::YieldOp>(forOp.getLoc(), newYieldArgs);\n \n     // replace"}, {"filename": "lib/Dialect/TritonGPU/Transforms/ReorderInstructions.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "file_content_changes": "@@ -1,6 +1,7 @@\n #include \"mlir/Analysis/SliceAnalysis.h\"\n #include \"mlir/Dialect/SCF/IR/SCF.h\"\n #include \"mlir/IR/BuiltinAttributes.h\"\n+#include \"mlir/IR/Dominance.h\"\n #include \"mlir/IR/IRMapping.h\"\n #include \"mlir/IR/Matchers.h\"\n #include \"mlir/IR/PatternMatch.h\"\n@@ -42,6 +43,7 @@ class TritonGPUReorderInstructionsPass\n \n   void runOnOperation() override {\n     ModuleOp m = getOperation();\n+    mlir::DominanceInfo dom(m);\n     // Sink conversions into loops when they will increase\n     // register pressure\n     DenseMap<Operation *, Operation *> opToMove;\n@@ -97,6 +99,10 @@ class TritonGPUReorderInstructionsPass\n       auto BOp = dotUser.getOperand(1).getDefiningOp();\n       if (!BOp)\n         return;\n+      // TODO: An alternative would be to move cvt of OpIdx=0 down instead of\n+      // movig cvt of OpIdx=1 up. This would allow re-ordering more cases.\n+      if (!dom.dominates(op.getOperand(), BOp))\n+        return;\n       op->moveBefore(BOp);\n     });\n     return;"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Utility.cpp", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "file_content_changes": "@@ -297,7 +297,7 @@ LogicalResult canMoveOutOfLoop(BlockArgument arg,\n   // 2. There is only a single conversion\n   // 3. Moving this conversion out of the loop will not generate any extra\n   // non-removable conversion\n-  DenseSet<Type> cvtTypes;\n+  SetVector<RankedTensorType> cvtTypes;\n   SetVector<Operation *> others;\n   auto oldType = arg.getType().cast<RankedTensorType>();\n   for (auto user : arg.getUsers()) {\n@@ -326,16 +326,34 @@ LogicalResult canMoveOutOfLoop(BlockArgument arg,\n     // Second condition\n     if (others.empty())\n       return success();\n-    // Third condition: not complete\n+    // Third condition - part 1:\n     // If the other or the cvt is in the different block, we cannot push the\n     // conversion forward or backward\n     for (auto *cvt : cvts) {\n       if (cvt->getBlock() != forOp.getBody())\n         return failure();\n     }\n+    auto targetEncoding = cvtTypes.front().getEncoding();\n     for (auto *other : others) {\n+      // Third condition - part 2:\n+      // If the other non-cvt op is in the different block, we cannot push the\n+      // conversion forward or backward\n       if (other->getBlock() != forOp.getBody())\n         return failure();\n+      // Third condition - part 3:\n+      // %0 (enc1) = cvt %arg (enc0)\n+      // other %0 (enc1), %1 (enc0) => other %0 (enc1), %1 (enc1)\n+      // Check if %2 (enc1) = cvt %1 (enc0) can be eliminated\n+      SetVector<Operation *> processed;\n+      SetVector<Attribute> layout;\n+      llvm::MapVector<Value, Attribute> toConvert;\n+      for (auto operand : other->getOperands()) {\n+        auto argOp = operand.getDefiningOp();\n+        if (argOp && !isa<triton::gpu::ConvertLayoutOp>(argOp) &&\n+            simulateBackwardRematerialization(argOp, processed, layout,\n+                                              toConvert, targetEncoding) > 0)\n+          return failure();\n+      }\n     }\n     return success();\n   }"}, {"filename": "lib/Target/LLVMIR/CMakeLists.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -4,7 +4,9 @@ add_mlir_translation_library(TritonLLVMIR\n         LINK_COMPONENTS\n         Core\n \n-        LINK_LIBS PUBLIC\n+        LINK_LIBS\n+        ${CMAKE_DL_LIBS}\n+        PUBLIC\n         MLIRArithToLLVM\n         MLIRBuiltinToLLVMIRTranslation\n         MLIRExecutionEngineUtils"}, {"filename": "python/setup.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -211,6 +211,7 @@ def build_extension(self, ext):\n         # python directories\n         python_include_dir = sysconfig.get_path(\"platinclude\")\n         cmake_args = [\n+            \"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON\",\n             \"-DLLVM_ENABLE_WERROR=ON\",\n             \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\" + extdir,\n             \"-DTRITON_BUILD_TUTORIALS=OFF\","}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "file_content_changes": "@@ -91,6 +91,7 @@ void init_triton_ir(py::module &&m) {\n       .value(\"CG\", mlir::triton::CacheModifier::CG)\n       .value(\"WB\", mlir::triton::CacheModifier::WB)\n       .value(\"CS\", mlir::triton::CacheModifier::CS)\n+      .value(\"WT\", mlir::triton::CacheModifier::WT)\n       .export_values();\n \n   py::enum_<mlir::triton::MemSemantic>(m, \"MEM_SEMANTIC\")\n@@ -1405,6 +1406,21 @@ void init_triton_ir(py::module &&m) {\n              return self.create<mlir::triton::ReduceReturnOp>(loc,\n                                                               return_values);\n            })\n+      .def(\"create_scan\",\n+           [](mlir::OpBuilder &self, std::vector<mlir::Value> operands,\n+              int axis) -> mlir::OpState {\n+             auto loc = self.getUnknownLoc();\n+             return self.create<mlir::triton::ScanOp>(loc, operands, axis);\n+           })\n+      .def(\"create_scan_ret\",\n+           [](mlir::OpBuilder &self, py::args args) -> mlir::OpState {\n+             auto loc = self.getUnknownLoc();\n+             llvm::SmallVector<mlir::Value> return_values;\n+             for (const auto &arg : args) {\n+               return_values.push_back(py::cast<mlir::Value>(arg));\n+             }\n+             return self.create<mlir::triton::ScanReturnOp>(loc, return_values);\n+           })\n       .def(\"create_ptr_to_int\",\n            [](mlir::OpBuilder &self, mlir::Value &val,\n               mlir::Type &type) -> mlir::Value {"}, {"filename": "python/test/unit/language/conftest.py", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -0,0 +1,14 @@\n+# content of conftest.py\n+\n+import pytest\n+\n+\n+def pytest_addoption(parser):\n+    parser.addoption(\n+        \"--device\", action=\"store\", default='cuda'\n+    )\n+\n+\n+@pytest.fixture\n+def device(request):\n+    return request.config.getoption(\"--device\")"}, {"filename": "python/test/unit/language/test_annotations.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -7,13 +7,13 @@\n import triton.language as tl\n \n \n-def test_annotations():\n+def test_annotations(device):\n \n     @triton.jit\n     def _kernel(X: torch.Tensor, N: int, BLOCK_SIZE: tl.constexpr):\n         pass\n \n-    x = torch.empty(1, device='cuda')\n+    x = torch.empty(1, device=device)\n     _kernel[(1,)](x, x.shape[0], 32)\n     try:\n         _kernel[(1,)](x.shape[0], x.shape[0], 32)"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 362, "deletions": 218, "changes": 580, "file_content_changes": "@@ -101,13 +101,19 @@ def patch_kernel(template, to_replace):\n     return kernel\n \n \n-def check_type_supported(dtype):\n+def check_cuda_only(device):\n+    if device not in ['cuda']:\n+        pytest.skip(\"Only for cuda\")\n+\n+\n+def check_type_supported(dtype, device):\n     '''\n     skip test if dtype is not supported on the current device\n     '''\n-    cc = torch.cuda.get_device_capability()\n-    if cc[0] < 8 and (dtype is tl.bfloat16 or dtype == \"bfloat16\" or dtype is torch.bfloat16):\n-        pytest.skip(\"bfloat16 is only supported on NVGPU with cc >= 80\")\n+    if device in ['cuda']:\n+        cc = torch.cuda.get_device_capability()\n+        if cc[0] < 8 and (dtype is tl.bfloat16 or dtype == \"bfloat16\" or dtype is torch.bfloat16):\n+            pytest.skip(\"bfloat16 is only supported on NVGPU with cc >= 80\")\n \n \n class MmaLayout:\n@@ -142,20 +148,20 @@ def __str__(self):\n \n \n @pytest.mark.parametrize(\"dtype_x\", list(dtypes) + [\"bfloat16\"])\n-def test_empty_kernel(dtype_x, device='cuda'):\n+def test_empty_kernel(dtype_x, device):\n     SIZE = 128\n \n     @triton.jit\n     def kernel(X, SIZE: tl.constexpr):\n         pass\n-    check_type_supported(dtype_x)\n+    check_type_supported(dtype_x, device)\n     x = to_triton(numpy_random(SIZE, dtype_str=dtype_x), device=device, dst_type=dtype_x)\n     kernel[(1, )](x, SIZE=SIZE, num_warps=4)\n \n \n # generic test functions\n def _test_unary(dtype_x, expr, numpy_expr=None, device='cuda'):\n-    check_type_supported(dtype_x)  # early return if dtype_x is not supported\n+    check_type_supported(dtype_x, device)  # early return if dtype_x is not supported\n     SIZE = 128\n     # define the kernel / launch-grid\n \n@@ -213,8 +219,8 @@ def _binary_op_dtype_override(a: str, b: str) -> Optional[np.dtype]:\n \n \n def _test_binary(dtype_x, dtype_y, expr, numpy_expr=None, mode_x='real', mode_y='real', device='cuda', y_low=None, y_high=None):\n-    check_type_supported(dtype_x)  # early return if dtype_x is not supported\n-    check_type_supported(dtype_y)\n+    check_type_supported(dtype_x, device)  # early return if dtype_x is not supported\n+    check_type_supported(dtype_y, device)\n     SIZE = 128\n     # define the kernel / launch-grid\n \n@@ -284,7 +290,7 @@ def _mod_operation_ill_conditioned(dtype_x, dtype_y) -> bool:\n     for dtype_x in dtypes_with_bfloat16\n     for dtype_y in dtypes_with_bfloat16\n ])\n-def test_bin_op(dtype_x, dtype_y, op, device='cuda'):\n+def test_bin_op(dtype_x, dtype_y, op, device):\n     expr = f' x {op} y'\n     if op == '%' and dtype_x in int_dtypes + uint_dtypes and dtype_y in int_dtypes + uint_dtypes:\n         # LLVM has 'numpy.fmod', not 'numpy.remainder', semantics on integer remainders.\n@@ -317,7 +323,7 @@ def test_bin_op(dtype_x, dtype_y, op, device='cuda'):\n                          [(dtype_x, dtype_y) for dtype_x in int_dtypes for dtype_y in int_dtypes] +\n                          [(dtype_x, dtype_y) for dtype_x in uint_dtypes for dtype_y in uint_dtypes]\n                          )\n-def test_floordiv(dtype_x, dtype_y, device='cuda'):\n+def test_floordiv(dtype_x, dtype_y, device):\n     # Triton has IEEE, not numpy/torch, semantics for %, and those carry\n     # through to //, so we have to use a nonstandard expression to get a\n     # reference result for //.\n@@ -326,7 +332,7 @@ def test_floordiv(dtype_x, dtype_y, device='cuda'):\n     _test_binary(dtype_x, dtype_y, expr, numpy_expr, device=device)\n \n \n-def test_unsigned_name_mangling(device='cuda'):\n+def test_unsigned_name_mangling(device):\n     # Test that uint32 and int32 are mangled differently by the compiler\n     SIZE = 128\n     # define the kernel / launch-grid\n@@ -372,7 +378,7 @@ def kernel(O1, O2, X, Y, SIZE: tl.constexpr):\n     for dtype_x in dtypes + dtypes_with_bfloat16\n     for dtype_y in dtypes + dtypes_with_bfloat16\n ])\n-def test_bitwise_op(dtype_x, dtype_y, op, device='cuda'):\n+def test_bitwise_op(dtype_x, dtype_y, op, device):\n     expr = f'x {op} y'\n     if (dtype_x in uint_dtypes and dtype_y in int_dtypes and _bitwidth(dtype_x) >= _bitwidth(dtype_y)):\n         numpy_expr = f'x.astype(np.{dtype_x}) {op} y.astype(np.{dtype_x})'\n@@ -395,7 +401,7 @@ def test_bitwise_op(dtype_x, dtype_y, op, device='cuda'):\n     for dtype_x in int_dtypes + uint_dtypes\n     for dtype_y in int_dtypes + uint_dtypes\n ])\n-def test_shift_op(dtype_x, dtype_y, op, device='cuda'):\n+def test_shift_op(dtype_x, dtype_y, op, device):\n     expr = f'x {op} y'\n     bw = max(_bitwidth(dtype_x), _bitwidth(dtype_y))\n     if dtype_x.startswith('int'):\n@@ -428,7 +434,7 @@ def test_shift_op(dtype_x, dtype_y, op, device='cuda'):\n                                                     ('nan', 'nan')]\n \n                           ])\n-def test_compare_op(dtype_x, dtype_y, op, mode_x, mode_y, device='cuda'):\n+def test_compare_op(dtype_x, dtype_y, op, mode_x, mode_y, device):\n     expr = f'x {op} y'\n     if (dtype_x in uint_dtypes and dtype_y in int_dtypes and _bitwidth(dtype_x) >= _bitwidth(dtype_y)):\n         numpy_expr = f'x.astype(np.{dtype_x}) {op} y.astype(np.{dtype_x})'\n@@ -443,7 +449,7 @@ def test_compare_op(dtype_x, dtype_y, op, mode_x, mode_y, device='cuda'):\n # test broadcast\n # ---------------\n @pytest.mark.parametrize(\"dtype\", dtypes_with_bfloat16)\n-def test_broadcast(dtype):\n+def test_broadcast(dtype, device):\n     @triton.jit\n     def broadcast_kernel(x_ptr, y_ptr, y_broadcasted_ptr, M: tl.constexpr, N: tl.constexpr):\n         offset1 = tl.arange(0, M)\n@@ -460,9 +466,9 @@ def broadcast_kernel(x_ptr, y_ptr, y_broadcasted_ptr, M: tl.constexpr, N: tl.con\n     y = numpy_random(N, dtype_str=dtype, rs=rs)\n     _, y_broadcasted_np = np.broadcast_arrays(x, y)\n \n-    x_tri = to_triton(x, device='cuda', dst_type=dtype)\n-    y_tri = to_triton(y, device='cuda', dst_type=dtype)\n-    y_broadcasted_tri = to_triton(np.empty((M, N), dtype=y_broadcasted_np.dtype), device='cuda', dst_type=dtype)\n+    x_tri = to_triton(x, device=device, dst_type=dtype)\n+    y_tri = to_triton(y, device=device, dst_type=dtype)\n+    y_broadcasted_tri = to_triton(np.empty((M, N), dtype=y_broadcasted_np.dtype), device=device, dst_type=dtype)\n \n     broadcast_kernel[(1,)](x_tri, y_tri, y_broadcasted_tri, M=M, N=N)\n     assert (y_broadcasted_np == to_numpy(y_broadcasted_tri)).all()\n@@ -472,8 +478,8 @@ def broadcast_kernel(x_ptr, y_ptr, y_broadcasted_ptr, M: tl.constexpr, N: tl.con\n # ------------------\n \n \n-def test_invalid_slice():\n-    dst = torch.empty(128, device='cuda')\n+def test_invalid_slice(device):\n+    dst = torch.empty(128, device=device)\n \n     @triton.jit\n     def _kernel(dst):\n@@ -486,7 +492,7 @@ def _kernel(dst):\n # ----------------\n # test expand_dims\n # ----------------\n-def test_expand_dims():\n+def test_expand_dims(device):\n     @triton.jit\n     def expand_dims_kernel(dummy, N: tl.constexpr):\n         offset1 = tl.arange(0, N)\n@@ -516,11 +522,11 @@ def expand_dims_kernel(dummy, N: tl.constexpr):\n         tl.static_assert(t.shape == [N, 1, 1, 1])\n \n     N = 32\n-    dummy_tensor = torch.empty((), device=\"cuda\")\n+    dummy_tensor = torch.empty((), device=device)\n     expand_dims_kernel[(1,)](dummy_tensor, N)\n \n \n-def test_expand_dims_error_cases():\n+def test_expand_dims_error_cases(device):\n     @triton.jit\n     def dim_out_of_range1(dummy, N: tl.constexpr):\n         offset1 = tl.arange(0, N)\n@@ -548,7 +554,7 @@ def duplicate_dim2(dummy, N: tl.constexpr):\n         t = tl.expand_dims(offset1, (0, -3))\n \n     N = 32\n-    dummy_tensor = torch.empty((), device=\"cuda\")\n+    dummy_tensor = torch.empty((), device=device)\n \n     with pytest.raises(triton.CompilationError, match=\"invalid axis -3\"):\n         dim_out_of_range1[(1,)](dummy_tensor, N)\n@@ -566,8 +572,8 @@ def duplicate_dim2(dummy, N: tl.constexpr):\n # ----------------------------\n # test invalid program id axis\n # ----------------------------\n-def test_invalid_pid_axis():\n-    dst = torch.empty(128, device='cuda')\n+def test_invalid_pid_axis(device):\n+    dst = torch.empty(128, device=device)\n \n     @triton.jit\n     def _kernel(dst):\n@@ -581,12 +587,12 @@ def _kernel(dst):\n # test where\n # ---------------\n @pytest.mark.parametrize(\"dtype\", dtypes_with_bfloat16 + [\"*int32\"])\n-def test_where(dtype):\n+def test_where(dtype, device):\n     select_ptrs = False\n     if dtype == \"*int32\":\n         dtype = \"int64\"\n         select_ptrs = True\n-    check_type_supported(dtype)\n+    check_type_supported(dtype, device)\n \n     @triton.jit\n     def where_kernel(cond_ptr, a_ptr, b_ptr, output_ptr, n_elements,\n@@ -616,10 +622,10 @@ def where_kernel(cond_ptr, a_ptr, b_ptr, output_ptr, n_elements,\n     y = numpy_random(SIZE, dtype_str=dtype, rs=rs)\n     z = np.where(cond, x, y)\n \n-    cond_tri = to_triton(cond, device='cuda')\n-    x_tri = to_triton(x, device='cuda', dst_type=dtype)\n-    y_tri = to_triton(y, device='cuda', dst_type=dtype)\n-    z_tri = to_triton(np.empty(SIZE, dtype=z.dtype), device='cuda', dst_type=dtype)\n+    cond_tri = to_triton(cond, device=device)\n+    x_tri = to_triton(x, device=device, dst_type=dtype)\n+    y_tri = to_triton(y, device=device, dst_type=dtype)\n+    z_tri = to_triton(np.empty(SIZE, dtype=z.dtype), device=device, dst_type=dtype)\n \n     grid = lambda meta: (triton.cdiv(SIZE, meta['BLOCK_SIZE']),)\n     where_kernel[grid](cond_tri, x_tri, y_tri, z_tri, SIZE, BLOCK_SIZE=1024, TEST_POINTERS=select_ptrs, TEST_SCALAR_POINTERS=False)\n@@ -630,7 +636,7 @@ def where_kernel(cond_ptr, a_ptr, b_ptr, output_ptr, n_elements,\n         assert (z == to_numpy(z_tri)).all()\n \n \n-def test_where_broadcast():\n+def test_where_broadcast(device):\n     @triton.jit\n     def where_kernel(cond_ptr, a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n         xoffsets = tl.arange(0, BLOCK_SIZE)[:, None]\n@@ -656,9 +662,9 @@ def where_scalar_condition(a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n     x = numpy_random((SIZE, SIZE), dtype_str=dtype, rs=rs)\n     mask = numpy_random(SIZE, 'bool', rs=rs)\n     z = np.where(mask, x, 0)\n-    cond_tri = to_triton(mask, device=\"cuda\")\n-    x_tri = to_triton(x, device='cuda', dst_type=dtype)\n-    z_tri = to_triton(np.empty((SIZE, SIZE), dtype=z.dtype), device='cuda', dst_type=dtype)\n+    cond_tri = to_triton(mask, device=device)\n+    x_tri = to_triton(x, device=device, dst_type=dtype)\n+    z_tri = to_triton(np.empty((SIZE, SIZE), dtype=z.dtype), device=device, dst_type=dtype)\n     where_kernel[(1,)](cond_tri, x_tri, z_tri, SIZE)\n     assert (z == to_numpy(z_tri)).all()\n     where_scalar_condition[(1,)](x_tri, z_tri, SIZE)\n@@ -675,7 +681,7 @@ def where_scalar_condition(a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n ] + [\n     (dtype_x, ' ~x') for dtype_x in int_dtypes\n ])\n-def test_unary_op(dtype_x, expr, device='cuda'):\n+def test_unary_op(dtype_x, expr, device):\n     _test_unary(dtype_x, expr, device=device)\n \n # ----------------\n@@ -684,7 +690,7 @@ def test_unary_op(dtype_x, expr, device='cuda'):\n \n \n @pytest.mark.parametrize(\"dtype_x, expr\", [(dtype_x, expr) for dtype_x in [\"float32\", \"float64\"] for expr in ['exp', 'log', 'cos', 'sin']])\n-def test_math_op(dtype_x, expr, device='cuda'):\n+def test_math_op(dtype_x, expr, device):\n     _test_unary(dtype_x, f'tl.{expr}(x)', f'np.{expr}(x) ', device=device)\n \n # ----------------\n@@ -696,21 +702,21 @@ def test_math_op(dtype_x, expr, device='cuda'):\n     (dtype_x)\n     for dtype_x in dtypes_with_bfloat16\n ])\n-def test_abs(dtype_x, device='cuda'):\n+def test_abs(dtype_x, device):\n     _test_unary(dtype_x, 'tl.abs(x)', 'np.abs(x) ', device=device)\n \n \n @pytest.mark.parametrize(\"in_dtype\", [tl.float8e4, tl.float8e5])\n-def test_abs_f8(in_dtype):\n+def test_abs_f8(in_dtype, device):\n \n     @triton.jit\n-    def abs_kernel(Z, X, SIZE: tl.constexpr):\n+    def abs_kernel(X, Z, SIZE: tl.constexpr):\n         off = tl.arange(0, SIZE)\n         x = tl.load(X + off)\n         z = tl.abs(x)\n         tl.store(Z + off, z)\n \n-    f8_tensor = torch.tensor(range(-128, 128), dtype=torch.int8, device='cuda')\n+    f8_tensor = torch.tensor(range(-128, 128), dtype=torch.int8, device=device)\n     # f32_to_f8 doesn't handle nan, so we make sure f8_tensor doesn't contain any nan\n     all_exp_ones = (f8_tensor & 0b01111100) == 128 - 2**in_dtype.fp_mantissa_width\n     f8_tensor[all_exp_ones] = 0\n@@ -723,7 +729,7 @@ def abs_kernel(Z, X, SIZE: tl.constexpr):\n     f32_tensor = convert_float_to_float32(f8_tensor, in_dtype)\n     expect = f32_tensor.abs()\n     actual_f8 = convert_float_to_float32(out_f8, in_dtype)\n-    torch.testing.assert_allclose(expect, actual_f8)\n+    torch.testing.assert_allclose(actual_f8, expect)\n \n \n # ----------------\n@@ -750,7 +756,7 @@ def make_ptr_str(name, shape):\n               ':, :, None']\n     for d in ['int32', 'uint32', 'uint16']\n ])\n-def test_index1d(expr, dtype_str, device='cuda'):\n+def test_index1d(expr, dtype_str, device):\n     rank_x = expr.count(':')\n     rank_y = expr.count(',') + 1\n     shape_x = [32 for _ in range(rank_x)]\n@@ -785,7 +791,7 @@ def generate_kernel(shape_x, shape_z):\n     z_ref = eval(expr) + y\n     # triton result\n     z_tri = to_triton(np.empty_like(z_ref), device=device)\n-    x_tri = to_triton(x)\n+    x_tri = to_triton(x, device=device)\n     kernel_match[(1, )](z_tri, x_tri, num_warps=1, SIZE=shape_x[0])\n     # compare\n     assert (z_ref == to_numpy(z_tri)).all()\n@@ -814,9 +820,7 @@ def tuples_fn(a, b):\n         a * b\n \n \n-def test_tuples():\n-    device = 'cuda'\n-\n+def test_tuples(device):\n     @triton.jit\n     def with_fn(X, Y, A, B, C):\n         x = tl.load(X)\n@@ -907,9 +911,7 @@ def noinline_multi_values_fn(x, y, Z):\n \n \n @pytest.mark.parametrize(\"mode\", [\"simple\", \"call_graph\", \"shared\", \"dynamic\", \"multi_values\"])\n-def test_noinline(mode):\n-    device = 'cuda'\n-\n+def test_noinline(mode, device):\n     @triton.jit\n     def kernel(X, Y, Z):\n         x = tl.load(X)\n@@ -946,7 +948,9 @@ def kernel(X, Y, Z):\n     ]\n     for mode in ['all_neg', 'all_pos', 'min_neg', 'max_pos']\n     for sem in [None, 'acquire', 'release', 'acq_rel', 'relaxed']]))\n-def test_atomic_rmw(op, dtype_x_str, mode, sem, device='cuda'):\n+def test_atomic_rmw(op, dtype_x_str, mode, sem, device):\n+    check_cuda_only(device)\n+\n     capability = torch.cuda.get_device_capability()\n     if capability[0] < 7:\n         if dtype_x_str == 'float16':\n@@ -996,7 +1000,7 @@ def kernel(X, Z):\n     assert f\"atom.global.gpu.{sem_str}\" in h.asm[\"ptx\"]\n \n \n-def test_atomic_rmw_predicate(device=\"cuda\"):\n+def test_atomic_rmw_predicate(device):\n     @triton.jit\n     def kernel(X):\n         val = tl.program_id(0)\n@@ -1009,7 +1013,7 @@ def kernel(X):\n \n @pytest.mark.parametrize(\"shape, axis\",\n                          [(shape, axis) for shape in [(2, 2), (2, 8), (8, 2), (8, 8), (32, 32)] for axis in [0, 1]])\n-def test_tensor_atomic_rmw(shape, axis, device=\"cuda\"):\n+def test_tensor_atomic_rmw(shape, axis, device):\n     shape0, shape1 = shape\n     # triton kernel\n \n@@ -1035,7 +1039,7 @@ def kernel(Z, X, AXIS: tl.constexpr, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr)\n     np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=1e-4)\n \n \n-def test_tensor_atomic_rmw_block(device=\"cuda\"):\n+def test_tensor_atomic_rmw_block(device):\n     shape = (8, 8)\n \n     @triton.jit\n@@ -1052,13 +1056,13 @@ def kernel(X, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"sem\", [None, 'acquire', 'release', 'acq_rel', 'relaxed'])\n-def test_atomic_cas(sem):\n+def test_atomic_cas(sem, device):\n     # 1. make sure that atomic_cas changes the original value (Lock)\n     @triton.jit\n     def change_value(Lock):\n         tl.atomic_cas(Lock, 0, 1)\n \n-    Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n+    Lock = torch.zeros((1,), device=device, dtype=torch.int32)\n     change_value[(1,)](Lock)\n \n     assert (Lock[0] == 1)\n@@ -1075,8 +1079,8 @@ def serialized_add(data, Lock, SEM: tl.constexpr):\n         # release lock\n         tl.atomic_xchg(Lock, 0)\n \n-    Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n-    data = torch.zeros((128,), device='cuda', dtype=torch.float32)\n+    Lock = torch.zeros((1,), device=device, dtype=torch.int32)\n+    data = torch.zeros((128,), device=device, dtype=torch.float32)\n     ref = torch.full((128,), 64.0)\n     h = serialized_add[(64,)](data, Lock, SEM=sem)\n     sem_str = \"acq_rel\" if sem is None else sem\n@@ -1103,10 +1107,10 @@ def serialized_add(data, Lock, SEM: tl.constexpr):\n ] + [\n     (f'int{x}', f'uint{x}', True) for x in [8, 16, 32, 64]\n ])\n-def test_cast(dtype_x, dtype_z, bitcast, device='cuda'):\n+def test_cast(dtype_x, dtype_z, bitcast, device):\n     # bfloat16 on cc < 80 will not be tested\n-    check_type_supported(dtype_x)\n-    check_type_supported(dtype_z)\n+    check_type_supported(dtype_x, device)\n+    check_type_supported(dtype_z, device)\n \n     # This is tricky because numpy doesn't have bfloat, and torch doesn't have uints.\n     x0 = 43 if dtype_x in int_dtypes else 43.5\n@@ -1116,7 +1120,7 @@ def test_cast(dtype_x, dtype_z, bitcast, device='cuda'):\n         x_tri = torch.tensor([x0], dtype=getattr(torch, dtype_x), device=device)\n     else:\n         x = np.array([x0], dtype=getattr(np, dtype_x))\n-        x_tri = to_triton(x)\n+        x_tri = to_triton(x, device=device)\n \n     # triton kernel\n     @triton.jit\n@@ -1148,8 +1152,8 @@ def kernel(X, Z, BITCAST: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"dtype_str, num_warps\", [(dtype_str, num_warps) for dtype_str in int_dtypes + float_dtypes for num_warps in [4, 8]])\n-def test_cat(dtype_str, num_warps):\n-    check_type_supported(dtype_str)\n+def test_cat(dtype_str, num_warps, device):\n+    check_type_supported(dtype_str, device)\n \n     @triton.jit\n     def kernel(X, Y, Z, N: tl.constexpr):\n@@ -1159,19 +1163,19 @@ def kernel(X, Y, Z, N: tl.constexpr):\n         z = tl.cat(x, y, can_reorder=True)\n         tl.store(Z + tl.arange(0, 2 * N), z)\n \n-    x = torch.arange(0, 128, device='cuda').to(getattr(torch, dtype_str))\n-    y = torch.arange(-128, 0, device='cuda').to(getattr(torch, dtype_str))\n+    x = torch.arange(0, 128, device=device).to(getattr(torch, dtype_str))\n+    y = torch.arange(-128, 0, device=device).to(getattr(torch, dtype_str))\n     z_ref = torch.cat([x, y], dim=0).sum()\n-    z = torch.zeros((256,), dtype=getattr(torch, dtype_str), device='cuda')\n+    z = torch.zeros((256,), dtype=getattr(torch, dtype_str), device=device)\n     kernel[(1, )](x, y, z, N=128, num_warps=num_warps)\n     assert z.sum() == z_ref\n     # check if there's no duplicate value in z\n     assert z.unique().size(0) == z.size(0)\n \n \n @pytest.mark.parametrize(\"dtype_str\", list(torch_dtypes))\n-def test_store_constant(dtype_str):\n-    check_type_supported(dtype_str)\n+def test_store_constant(dtype_str, device):\n+    check_type_supported(dtype_str, device)\n \n     \"\"\"Tests that boolean True is stored as 1\"\"\"\n     @triton.jit\n@@ -1184,14 +1188,14 @@ def kernel(output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n     triton_dtype_str = 'uint8' if dtype_str == 'bool' else dtype_str\n     kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': f'tl.zeros([BLOCK_SIZE], dtype=tl.{triton_dtype_str}) + 1'})\n     block_size = 128\n-    ref = torch.ones([block_size], dtype=getattr(torch, dtype_str), device='cuda')\n-    output = torch.zeros([block_size], dtype=getattr(torch, dtype_str), device='cuda')\n+    ref = torch.ones([block_size], dtype=getattr(torch, dtype_str), device=device)\n+    output = torch.zeros([block_size], dtype=getattr(torch, dtype_str), device=device)\n     kernel[(1,)](output, block_size, BLOCK_SIZE=block_size)\n \n     assert torch.all(output == ref)\n \n \n-def test_load_store_same_ptr():\n+def test_load_store_same_ptr(device):\n     @triton.jit()\n     def kernel(in_out_ptr):\n         pid = tl.program_id(axis=0)\n@@ -1200,7 +1204,7 @@ def kernel(in_out_ptr):\n         tl.store(in_out_ptr + pid, out)\n \n     for _ in range(1000):\n-        x = torch.ones((65536,), device=\"cuda\", dtype=torch.float32)\n+        x = torch.ones((65536,), device=device, dtype=torch.float32)\n         kernel[(65536,)](x, num_warps=32)\n         assert torch.all(x == 2)\n \n@@ -1236,9 +1240,9 @@ def convert_float_to_float32(fp: torch.tensor, dtype=None):\n \n \n @pytest.mark.parametrize(\"in_dtype\", [torch.float16, torch.bfloat16])\n-def test_convert_float16_to_float32(in_dtype):\n+def test_convert_float16_to_float32(in_dtype, device):\n     \"\"\"Tests that check convert_float_to_float32 function\"\"\"\n-    check_type_supported(in_dtype)\n+    check_type_supported(in_dtype, device)\n \n     f16_input = torch.tensor(range(-int(2 ** (16 - 1)), int(2 ** (16 - 1))), dtype=torch.int16).view(in_dtype)\n     f32_output = convert_float_to_float32(f16_input)\n@@ -1253,9 +1257,9 @@ def test_convert_float16_to_float32(in_dtype):\n \n @pytest.mark.parametrize(\"in_dtype\", [tl.float8e4, tl.float8e5])\n @pytest.mark.parametrize(\"out_dtype\", [torch.float16, torch.bfloat16, torch.float32])\n-def test_f8_xf16_roundtrip(in_dtype, out_dtype):\n+def test_f8_xf16_roundtrip(in_dtype, out_dtype, device):\n     \"\"\"Tests that converting an f8 to f16 and back to f8 doesn't change its value\"\"\"\n-    check_type_supported(out_dtype)\n+    check_type_supported(out_dtype, device)\n \n     @triton.jit\n     def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n@@ -1265,7 +1269,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n         output = input\n         tl.store(output_ptr + offsets, output, mask=mask)\n \n-    f8_tensor = torch.tensor(range(-128, 128), dtype=torch.int8, device='cuda')\n+    f8_tensor = torch.tensor(range(-128, 128), dtype=torch.int8, device=device)\n     # f32_to_f8 doesn't handle nan, so we make sure f8_tensor doesn't contain any nan\n     all_exp_ones = (f8_tensor & 0b01111100) == 128 - 2**in_dtype.fp_mantissa_width\n     f8_tensor[all_exp_ones] = 0\n@@ -1292,7 +1296,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n \n @pytest.mark.parametrize(\"in_dtype\", [tl.float8e4, tl.float8e5])\n @pytest.mark.parametrize(\"out_dtype\", [torch.float16, torch.bfloat16])\n-def test_f16_to_f8_rounding(in_dtype, out_dtype):\n+def test_f16_to_f8_rounding(in_dtype, out_dtype, device):\n     \"\"\"Takes all float16s, converts them to float8 and back to float16. Checks that the absolute\n     error is the minimum over all float8.\n     Or the same explanation a bit mathier:\n@@ -1305,7 +1309,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n         output = input\n         tl.store(output_ptr + offsets, output, mask=mask)\n \n-    i16_input = torch.tensor(range(-int(2 ** (16 - 1)), int(2 ** (16 - 1))), dtype=torch.int16, device='cuda')\n+    i16_input = torch.tensor(range(-int(2 ** (16 - 1)), int(2 ** (16 - 1))), dtype=torch.int16, device=device)\n     f16_input = i16_input.view(out_dtype)\n     n_elements = f16_input.numel()\n     f8_output_tensor = torch.empty_like(f16_input, dtype=torch.int8)\n@@ -1318,7 +1322,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n \n     abs_error = torch.abs(f16_input - f16_output)\n \n-    all_f8_vals_tensor = torch.tensor(range(2 ** 8), dtype=torch.uint8, device='cuda')\n+    all_f8_vals_tensor = torch.tensor(range(2 ** 8), dtype=torch.uint8, device=device)\n     all_f8_vals = triton.reinterpret(all_f8_vals_tensor, in_dtype)\n     all_f8_vals_in_f16 = torch.empty_like(all_f8_vals_tensor, dtype=out_dtype)\n     copy_kernel[grid](all_f8_vals, all_f8_vals_in_f16, n_elements=256, BLOCK_SIZE=1024)\n@@ -1375,8 +1379,8 @@ def get_reduced_dtype(dtype_str, op):\n                                      'sum']\n                           for dtype in dtypes_with_bfloat16\n                           for shape in [32, 64, 128, 512]])\n-def test_reduce1d(op, dtype_str, shape, device='cuda'):\n-    check_type_supported(dtype_str)  # bfloat16 on cc < 80 will not be tested\n+def test_reduce1d(op, dtype_str, shape, device):\n+    check_type_supported(dtype_str, device)  # bfloat16 on cc < 80 will not be tested\n \n     # triton kernel\n     @triton.jit\n@@ -1448,7 +1452,7 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n reduce2d_shapes = [(2, 32), (4, 32), (4, 128)]\n # TODO: fix and uncomment\n # , (32, 64), (64, 128)]\n-if 'V100' in torch.cuda.get_device_name(0):\n+if torch.cuda.is_available() and 'V100' in torch.cuda.get_device_name(0):\n     reduce2d_shapes += [(128, 256) and (32, 1024)]\n \n \n@@ -1464,8 +1468,8 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"op, dtype_str, shape, axis\", reduce_configs1 + reduce_configs2)\n-def test_reduce2d(op, dtype_str, shape, axis, device='cuda'):\n-    check_type_supported(dtype_str)  # bfloat16 on cc < 80 will not be tested\n+def test_reduce2d(op, dtype_str, shape, axis, device):\n+    check_type_supported(dtype_str, device)  # bfloat16 on cc < 80 will not be tested\n \n     # triton kernel\n     @triton.jit\n@@ -1486,7 +1490,7 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n     rs = RandomState(17)\n     # limit the range of integers so that the sum does not overflow\n     x = numpy_random(shape, dtype_str=dtype_str, rs=rs)\n-    x_tri = to_triton(x)\n+    x_tri = to_triton(x, device=device)\n     numpy_op = {'sum': np.sum, 'max': np.max, 'min': np.min,\n                 'argmin': np.argmin, 'argmax': np.argmax}[op]\n     z_dtype_str = get_reduced_dtype(dtype_str, op)\n@@ -1522,17 +1526,132 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n             np.testing.assert_equal(z_ref, z_tri)\n \n \n+scan2d_shapes = [(8, 32), (16, 32), (32, 16), (2, 1024), (1024, 2), (32, 32), (1, 1024)]\n+\n+scan_configs = [\n+    (op, type, shape, axis, num_warps)\n+    for num_warps in [4, 16]\n+    for type in ['int32', 'float32']\n+    for axis in [1, 0]\n+    for shape in scan2d_shapes\n+    for op in ['cumsum']\n+]\n+\n+\n+@pytest.mark.parametrize(\"op, dtype_str, shape, axis, num_warps\", scan_configs)\n+def test_scan2d(op, dtype_str, shape, axis, num_warps, device):\n+    check_type_supported(dtype_str, device)\n+\n+    # triton kernel\n+    @triton.jit\n+    def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexpr):\n+        range_m = tl.arange(0, BLOCK_M)\n+        range_n = tl.arange(0, BLOCK_N)\n+        x = tl.load(X + range_m[:, None] * BLOCK_N + range_n[None, :])\n+        z = GENERATE_TEST_HERE\n+        tl.store(Z + range_m[:, None] * BLOCK_N + range_n[None, :], z)\n+\n+    kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': f'tl.{op}(x, axis={axis})'})\n+    # input\n+    rs = RandomState(17)\n+    x = numpy_random(shape, dtype_str=dtype_str, rs=rs)\n+    z = np.empty_like(x)\n+    x_tri = to_triton(x, device=device)\n+    numpy_op = {'cumsum': np.cumsum}[op]\n+    z_dtype_str = dtype_str\n+    z_ref = numpy_op(x, axis=axis).astype(getattr(np, z_dtype_str))\n+    # triton result\n+    z_tri = to_triton(z, device=device)\n+    kernel[(1,)](x_tri, z_tri, BLOCK_M=shape[0], BLOCK_N=shape[1], AXIS=axis, num_warps=num_warps)\n+    z_tri = to_numpy(z_tri)\n+    # compare\n+    if dtype_str == 'float32':\n+        np.testing.assert_allclose(z_ref, z_tri, rtol=0.01)\n+    else:\n+        np.testing.assert_equal(z_ref, z_tri)\n+\n+\n+scan_layouts = [\n+    BlockedLayout([1, 4], [4, 8], [4, 1], [0, 1]),\n+    BlockedLayout([1, 4], [8, 4], [4, 1], [0, 1]),\n+    BlockedLayout([4, 1], [4, 8], [1, 4], [0, 1]),\n+    BlockedLayout([2, 2], [4, 8], [2, 2], [0, 1]),\n+    BlockedLayout([2, 2], [8, 4], [2, 2], [0, 1]),\n+\n+    BlockedLayout([1, 4], [4, 8], [4, 1], [1, 0]),\n+    BlockedLayout([1, 4], [8, 4], [4, 1], [1, 0]),\n+    BlockedLayout([4, 1], [4, 8], [1, 4], [1, 0]),\n+    BlockedLayout([2, 2], [4, 8], [2, 2], [1, 0]),\n+    BlockedLayout([2, 2], [8, 4], [2, 2], [1, 0]),\n+]\n+\n+\n+@pytest.mark.parametrize(\"M, N\", [[32, 32], [32, 64], [64, 32]])\n+@pytest.mark.parametrize(\"src_layout\", scan_layouts)\n+@pytest.mark.parametrize(\"axis\", [0, 1])\n+def test_scan_layouts(M, N, src_layout, axis, device):\n+    ir = f\"\"\"\n+    #blocked = {src_layout}\n+    module attributes {{\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32}} {{\n+    tt.func public @kernel_0d1d(%arg0: !tt.ptr<i32> {{tt.divisibility = 16 : i32}}, %arg1: !tt.ptr<i32> {{tt.divisibility = 16 : i32}}) {{\n+      %cst = arith.constant dense<{N}> : tensor<{M}x1xi32, #blocked>\n+      %0 = tt.make_range {{end = {M} : i32, start = 0 : i32}} : tensor<{M}xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>>\n+      %1 = tt.expand_dims %0 {{axis = 1 : i32}} : (tensor<{M}xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>>) -> tensor<{M}x1xi32, #blocked>\n+      %2 = arith.muli %1, %cst : tensor<{M}x1xi32, #blocked>\n+      %3 = tt.splat %arg0 : (!tt.ptr<i32>) -> tensor<{M}x1x!tt.ptr<i32>, #blocked>\n+      %4 = tt.addptr %3, %2 : tensor<{M}x1x!tt.ptr<i32>, #blocked>, tensor<{M}x1xi32, #blocked>\n+      %5 = tt.make_range {{end = {N} : i32, start = 0 : i32}} : tensor<{N}xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>>\n+      %6 = tt.expand_dims %5 {{axis = 0 : i32}} : (tensor<{N}xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>>) -> tensor<1x{N}xi32, #blocked>\n+      %7 = tt.broadcast %4 : (tensor<{M}x1x!tt.ptr<i32>, #blocked>) -> tensor<{M}x{N}x!tt.ptr<i32>, #blocked>\n+      %8 = tt.broadcast %6 : (tensor<1x{N}xi32, #blocked>) -> tensor<{M}x{N}xi32, #blocked>\n+      %9 = tt.addptr %7, %8 : tensor<{M}x{N}x!tt.ptr<i32>, #blocked>, tensor<{M}x{N}xi32, #blocked>\n+      %10 = tt.load %9 {{cache = 1 : i32, evict = 1 : i32, isVolatile = false}} : tensor<{M}x{N}xi32, #blocked>\n+      %11 = \"tt.scan\"(%10) <{{axis = {axis} : i32}}> ({{\n+      ^bb0(%arg2: i32, %arg3: i32):\n+        %16 = arith.addi %arg2, %arg3 : i32\n+        tt.scan.return %16 : i32\n+      }}) : (tensor<{M}x{N}xi32, #blocked>) -> tensor<{M}x{N}xi32, #blocked>\n+      %12 = tt.splat %arg1 : (!tt.ptr<i32>) -> tensor<{M}x1x!tt.ptr<i32>, #blocked>\n+      %13 = tt.addptr %12, %2 : tensor<{M}x1x!tt.ptr<i32>, #blocked>, tensor<{M}x1xi32, #blocked>\n+      %14 = tt.broadcast %13 : (tensor<{M}x1x!tt.ptr<i32>, #blocked>) -> tensor<{M}x{N}x!tt.ptr<i32>, #blocked>\n+      %15 = tt.addptr %14, %8 : tensor<{M}x{N}x!tt.ptr<i32>, #blocked>, tensor<{M}x{N}xi32, #blocked>\n+      tt.store %15, %11 {{cache = 1 : i32, evict = 1 : i32}} : tensor<{M}x{N}xi32, #blocked>\n+      tt.return\n+    }}\n+    }}\n+    \"\"\"\n+\n+    import tempfile\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.ttgir') as f:\n+        f.write(ir)\n+        f.flush()\n+        kernel = triton.compile(f.name)\n+    rs = RandomState(17)\n+    x = rs.randint(-100, 100, (M, N)).astype('int32')\n+\n+    z = np.zeros((M, N)).astype('int32')\n+    x_tri = torch.tensor(x, device=device)\n+    z_tri = torch.tensor(z, device=device)\n+\n+    kernel[(1, 1, 1)](x_tri, z_tri)\n+\n+    z_ref = np.cumsum(x, axis=axis)\n+\n+    np.testing.assert_equal(z_ref, z_tri.cpu().numpy())\n+\n+\n layouts = [\n     BlockedLayout([1, 4], [8, 4], [4, 1], [1, 0]),\n     BlockedLayout([1, 4], [8, 4], [4, 1], [0, 1]),\n-    MmaLayout(version=(2, 0), warps_per_cta=[4, 1])\n+    MmaLayout(version=(2, 0), warps_per_cta=[4, 1]),\n+    MmaLayout(version=(2, 0), warps_per_cta=[2, 2])\n ]\n \n \n @pytest.mark.parametrize(\"M, N\", [[128, 16], [128, 128], [32, 128]])\n @pytest.mark.parametrize(\"src_layout\", layouts)\n @pytest.mark.parametrize(\"axis\", [0, 1])\n-def test_reduce_layouts(M, N, src_layout, axis, device='cuda'):\n+def test_reduce_layouts(M, N, src_layout, axis, device):\n     rdims_2d = f\"1x{N}\" if axis == 0 else f\"{M}x1\"\n     rdims_1d = f\"{N}\" if axis == 0 else f\"{M}\"\n     store_range = \"%7\" if axis == 0 else \"%1\"\n@@ -1604,7 +1723,7 @@ def test_reduce_layouts(M, N, src_layout, axis, device='cuda'):\n \n @pytest.mark.parametrize(\"M\", [32, 64, 128, 256])\n @pytest.mark.parametrize(\"src_layout\", layouts)\n-def test_store_op(M, src_layout, device='cuda'):\n+def test_store_op(M, src_layout, device):\n     ir = f\"\"\"\n     #src = {src_layout}\n     module attributes {{\"triton_gpu.num-warps\" = 4 : i32}} {{\n@@ -1653,7 +1772,7 @@ def test_store_op(M, src_layout, device='cuda'):\n @pytest.mark.parametrize(\"dst_layout\", layouts)\n @pytest.mark.parametrize(\"src_dim\", [0, 1])\n @pytest.mark.parametrize(\"dst_dim\", [0, 1])\n-def test_convert1d(M, src_layout, dst_layout, src_dim, dst_dim, device='cuda'):\n+def test_convert1d(M, src_layout, dst_layout, src_dim, dst_dim, device):\n     ir = f\"\"\"\n     #dst = {dst_layout}\n     #src = {src_layout}\n@@ -1710,7 +1829,18 @@ def _welford_combine(mean_1, m2_1, weight_1, mean_2, m2_2, weight_2):\n \n @pytest.mark.parametrize(\"M, N\", [[128, 128], [256, 128], [256, 256], [128, 256]])\n @pytest.mark.parametrize(\"src_layout\", layouts)\n-def test_chain_reduce(M, N, src_layout, device='cuda'):\n+@pytest.mark.parametrize(\"op\", [\"sum\", \"max\"])\n+def test_chain_reduce(M, N, src_layout, op, device):\n+    op_str = \"\"\n+    if op == \"sum\":\n+        op_str = f\"\"\"\n+        %13 = arith.addi %arg2, %arg3 : i32\n+        tt.reduce.return %13 : i32\"\"\"\n+    elif op == \"max\":\n+        op_str = f\"\"\"\n+        %13 = \"triton_gpu.cmpi\"(%arg2, %arg3) <{{predicate = 4 : i64}}> : (i32, i32) -> i1\n+        %14 = arith.select %13, %arg2, %arg3 : i32\n+        tt.reduce.return %14 : i32\"\"\"\n     ir = f\"\"\"\n     #src = {src_layout}\n     module attributes {{\"triton_gpu.num-warps\" = 4 : i32}} {{\n@@ -1729,13 +1859,11 @@ def test_chain_reduce(M, N, src_layout, device='cuda'):\n         %10 = tt.load %9 {{cache = 1 : i32, evict = 1 : i32, isVolatile = false}} : tensor<{M}x{N}xi32, #src>\n         %11 = \"tt.reduce\"(%10) ({{\n         ^bb0(%arg2: i32, %arg3: i32):\n-        %13 = arith.addi %arg2, %arg3 : i32\n-        tt.reduce.return %13 : i32\n+        {op_str}\n         }}) {{axis = 1 : i32}} : (tensor<{M}x{N}xi32, #src>) -> tensor<{M}xi32, #triton_gpu.slice<{{dim = 1, parent = #src}}>>\n         %12 = \"tt.reduce\"(%11) ({{\n         ^bb0(%arg2: i32, %arg3: i32):\n-        %13 = arith.addi %arg2, %arg3 : i32\n-        tt.reduce.return %13 : i32\n+        {op_str}\n         }}) {{axis = 0 : i32}} : (tensor<{M}xi32, #triton_gpu.slice<{{dim = 1, parent = #src}}>>) -> i32\n         tt.store %arg1, %12 {{cache = 1 : i32, evict = 1 : i32}} : i32\n         tt.return\n@@ -1757,12 +1885,15 @@ def test_chain_reduce(M, N, src_layout, device='cuda'):\n     z_tri = torch.tensor(z, device=device)\n \n     pgm = kernel[(1, 1, 1)](x_tri, z_tri)\n-    z_ref = np.sum(x)\n+    if op == \"sum\":\n+        z_ref = np.sum(x)\n+    elif op == \"max\":\n+        z_ref = np.max(x)\n \n     np.testing.assert_allclose(z_ref, z_tri.cpu().numpy(), rtol=0.01, atol=1e-3)\n \n \n-def test_generic_reduction(device='cuda'):\n+def test_generic_reduction(device):\n \n     @triton.jit\n     def var_mean_kernel(X, out_mean, out_var, BLOCK: tl.constexpr):\n@@ -1798,8 +1929,8 @@ def var_mean_kernel(X, out_mean, out_var, BLOCK: tl.constexpr):\n                           for dtype in ['float16', 'float32']\n                              for shape in [(64, 64), (128, 128)]\n                              for perm in [(1, 0)]])\n-def test_permute(dtype_str, shape, perm, device='cuda'):\n-    check_type_supported(dtype_str)  # bfloat16 on cc < 80 will not be tested\n+def test_permute(dtype_str, shape, perm, device):\n+    check_type_supported(dtype_str, device)  # bfloat16 on cc < 80 will not be tested\n \n     # triton kernel\n     @triton.jit\n@@ -1869,7 +2000,9 @@ def kernel(X, stride_xm, stride_xn,\n                                                       ('float16', 'float16'),\n                                                       ('float16', 'float32'),\n                                                       ('float32', 'float32')]])\n-def test_dot(M, N, K, num_warps, col_a, col_b, epilogue, allow_tf32, in_dtype, out_dtype, device='cuda'):\n+def test_dot(M, N, K, num_warps, col_a, col_b, epilogue, allow_tf32, in_dtype, out_dtype, device):\n+    check_cuda_only(device)\n+\n     capability = torch.cuda.get_device_capability()\n     if capability[0] < 7:\n         pytest.skip(\"Only test tl.dot() on devices with sm >= 70\")\n@@ -2028,9 +2161,9 @@ def kernel(X, stride_xm, stride_xk,\n \n \n @pytest.mark.parametrize(\"dtype_str\", int_dtypes + float_dtypes + ['bfloat16'])\n-def test_full(dtype_str):\n+def test_full(dtype_str, device):\n     dtype = getattr(torch, dtype_str)\n-    check_type_supported(dtype)  # bfloat16 on cc < 80 will not be tested\n+    check_type_supported(dtype, device)  # bfloat16 on cc < 80 will not be tested\n \n     @triton.jit\n     def kernel_static(out):\n@@ -2045,9 +2178,9 @@ def kernel_dynamic(out, val, dtype: tl.constexpr):\n         tl.store(out_ptr, a)\n \n     kernel_static_patched = patch_kernel(kernel_static, {'GENERATE_TEST_HERE': f\"tl.full((128,), 2, tl.{dtype_str})\"})\n-    out_static = torch.zeros((128), dtype=dtype, device=\"cuda\")\n+    out_static = torch.zeros((128), dtype=dtype, device=device)\n     kernel_static_patched[(1,)](out_static)\n-    out_dynamic = torch.zeros((128), dtype=dtype, device=\"cuda\")\n+    out_dynamic = torch.zeros((128), dtype=dtype, device=device)\n     kernel_dynamic[(1,)](out_dynamic, 2, getattr(triton.language, dtype_str))\n     assert torch.all(out_static == 2)\n     assert torch.all(out_dynamic == 2)\n@@ -2059,43 +2192,42 @@ def kernel_dynamic(out, val, dtype: tl.constexpr):\n                           ('float(\"nan\")', \"f32\"), ('float(\"-nan\")', \"f32\"),\n                           (0., \"f32\"),\n                           (5, \"i32\"), (2**40, \"i64\"),])\n-def test_constexpr(literal, dtype_str):\n+def test_constexpr(literal, dtype_str, device):\n     @triton.jit\n     def kernel(out_ptr):\n         val = GENERATE_TEST_HERE\n         tl.store(out_ptr.to(tl.pointer_type(val.dtype)), val)\n \n     kernel_patched = patch_kernel(kernel, {'GENERATE_TEST_HERE': f\"{literal}\"})\n-    out = torch.zeros((1,), dtype=torch.float32, device=\"cuda\")\n+    out = torch.zeros((1,), dtype=torch.float32, device=device)\n     h = kernel_patched[(1,)](out)\n     assert re.search(r\"arith.constant .* : \" + dtype_str, h.asm[\"ttir\"]) is not None\n \n-# TODO: uncomment once DotOperandEncoding::getElemsPerThread is implemented\n-# @pytest.mark.parametrize(\"dtype_str\", ['float32', 'float16'])\n-# def test_dot_without_load(dtype_str):\n-#     @triton.jit\n-#     def _kernel(out):\n-#         a = GENERATE_TEST_HERE\n-#         b = GENERATE_TEST_HERE\n-#         c = tl.dot(a, b)\n-#         out_ptr = out + tl.arange(0, 32)[:, None] * 32 + tl.arange(0, 32)[None, :]\n-#         tl.store(out_ptr, c)\n-\n-#     kernel = patch_kernel(_kernel, {'GENERATE_TEST_HERE': f\"tl.full((32, 32), 1.0, tl.{dtype_str})\"})\n-#     a = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n-#     b = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n-#     out_ref = torch.matmul(a, b)\n-#     out = torch.zeros((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n-#     kernel[(1,)](out)\n-#     assert torch.all(out == out_ref)\n+\n+@pytest.mark.parametrize(\"dtype_str\", ['float32', 'float16'])\n+def test_dot_without_load(dtype_str, device):\n+    @triton.jit\n+    def _kernel(out):\n+        a = GENERATE_TEST_HERE\n+        b = GENERATE_TEST_HERE\n+        c = tl.dot(a, b)\n+        out_ptr = out + tl.arange(0, 32)[:, None] * 32 + tl.arange(0, 32)[None, :]\n+        tl.store(out_ptr, c)\n+    kernel = patch_kernel(_kernel, {'GENERATE_TEST_HERE': f\"tl.full((32, 32), 1.0, tl.{dtype_str})\"})\n+    a = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=device)\n+    b = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=device)\n+    out_ref = torch.matmul(a, b)\n+    out = torch.zeros((32, 32), dtype=getattr(torch, dtype_str), device=device)\n+    kernel[(1,)](out)\n+    assert torch.all(out == out_ref)\n \n # ---------------\n # test arange\n # ---------------\n \n \n @pytest.mark.parametrize(\"start\", [0, 1, 7, 16])\n-def test_arange(start, device='cuda'):\n+def test_arange(start, device):\n     BLOCK = 128\n     z_tri = torch.empty(BLOCK, dtype=torch.int32, device=device)\n \n@@ -2115,9 +2247,9 @@ def _kernel(z, BLOCK: tl.constexpr,\n \n \n @pytest.mark.parametrize(\"dtype_str, size, size_diff\", [(dtype_str, size, size_diff) for dtype_str in torch_dtypes for size in [128, 512] for size_diff in [0, 1, 2, 3, 4]])\n-def test_masked_load(dtype_str, size, size_diff, device='cuda'):\n+def test_masked_load(dtype_str, size, size_diff, device):\n     dtype = getattr(torch, dtype_str)\n-    check_type_supported(dtype)  # bfloat16 on cc < 80 will not be tested\n+    check_type_supported(dtype, device)  # bfloat16 on cc < 80 will not be tested\n \n     input_size = size - size_diff\n     output_size = size\n@@ -2150,8 +2282,8 @@ def _kernel(in_ptr, out_ptr, in_size: tl.constexpr, out_size: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"dtype\", [torch.bfloat16, torch.float16, torch.float32])\n-def test_masked_load_shared_memory(dtype, device='cuda'):\n-    check_type_supported(dtype)  # bfloat16 on cc < 80 will not be tested\n+def test_masked_load_shared_memory(dtype, device):\n+    check_type_supported(dtype, device)  # bfloat16 on cc < 80 will not be tested\n \n     M = 32\n     N = 32\n@@ -2199,9 +2331,9 @@ def _kernel(in1_ptr, in2_ptr, output_ptr,\n \n \n @pytest.mark.parametrize(\"cache\", [\"\", \".ca\", \".cg\"])\n-def test_load_cache_modifier(cache):\n-    src = torch.empty(128, device='cuda')\n-    dst = torch.empty(128, device='cuda')\n+def test_load_cache_modifier(cache, device):\n+    src = torch.empty(128, device=device)\n+    dst = torch.empty(128, device=device)\n \n     @triton.jit\n     def _kernel(dst, src, CACHE: tl.constexpr):\n@@ -2223,9 +2355,9 @@ def _kernel(dst, src, CACHE: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"N\", [16, 10, 11, 1024])\n-def test_vectorization(N):\n-    src = torch.empty(1024, device='cuda')\n-    dst = torch.empty(1024, device='cuda')\n+def test_vectorization(N, device):\n+    src = torch.empty(1024, device=device)\n+    dst = torch.empty(1024, device=device)\n \n     @triton.jit\n     def _kernel(dst, src, N, BLOCK_SIZE: tl.constexpr):\n@@ -2242,10 +2374,10 @@ def _kernel(dst, src, N, BLOCK_SIZE: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"has_hints\", [False, True])\n-def test_vectorization_hints(has_hints):\n-    src = torch.empty(1024, device='cuda')\n-    dst = torch.empty(1024, device='cuda')\n-    off = torch.zeros(1, device='cuda', dtype=torch.int32)\n+def test_vectorization_hints(has_hints, device):\n+    src = torch.empty(1024, device=device)\n+    dst = torch.empty(1024, device=device)\n+    off = torch.zeros(1, device=device, dtype=torch.int32)\n \n     @triton.jit\n     def _kernel(dst, src, off, N, BLOCK_SIZE: tl.constexpr, HINT: tl.constexpr):\n@@ -2267,7 +2399,7 @@ def _kernel(dst, src, off, N, BLOCK_SIZE: tl.constexpr, HINT: tl.constexpr):\n # ---------------\n \n \n-@pytest.mark.parametrize(\"cache\", [\"\", \".wb\", \".cg\", \".cs\"])\n+@pytest.mark.parametrize(\"cache\", [\"\", \".wb\", \".cg\", \".cs\", \".wt\"])\n def test_store_cache_modifier(cache):\n     src = torch.empty(128, device='cuda')\n     dst = torch.empty(128, device='cuda')\n@@ -2284,18 +2416,27 @@ def _kernel(dst, src, CACHE: tl.constexpr):\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' not in ptx\n+        assert 'st.global.wt' not in ptx\n     if cache == '.wb':\n         assert 'st.global.wb' in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' not in ptx\n+        assert 'st.global.wt' not in ptx\n     if cache == '.cg':\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' in ptx\n         assert 'st.global.cs' not in ptx\n+        assert 'st.global.wt' not in ptx\n     if cache == '.cs':\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' in ptx\n+        assert 'st.global.wt' not in ptx\n+    if cache == '.wt':\n+        assert 'st.global.wb' not in ptx\n+        assert 'st.global.cg' not in ptx\n+        assert 'st.global.cs' not in ptx\n+        assert 'st.global.wt' in ptx\n \n # ---------------\n # test if\n@@ -2320,10 +2461,10 @@ def _impl(value=10):\n     return value\n \n \n-def test_default():\n+def test_default(device):\n     value = 5\n-    ret0 = torch.zeros(1, dtype=torch.int32, device='cuda')\n-    ret1 = torch.zeros(1, dtype=torch.int32, device='cuda')\n+    ret0 = torch.zeros(1, dtype=torch.int32, device=device)\n+    ret1 = torch.zeros(1, dtype=torch.int32, device=device)\n \n     @triton.jit\n     def _kernel(ret0, ret1, value):\n@@ -2339,7 +2480,7 @@ def _kernel(ret0, ret1, value):\n # ----------------\n \n \n-def test_noop(device='cuda'):\n+def test_noop(device):\n     @triton.jit\n     def kernel(x):\n         pass\n@@ -2366,7 +2507,7 @@ def kernel(x):\n     (2**31, 'i64'), (2**32 - 1, 'i64'), (2**32, 'i64'), (2**63 - 1, 'i64'),\n     (-2**63, 'i64'), (2**63, 'u64'), (2**64 - 1, 'u64')\n ])\n-def test_value_specialization(value: int, value_type: str, device='cuda') -> None:\n+def test_value_specialization(value: int, value_type: str, device) -> None:\n     spec_type = None\n \n     def cache_hook(*args, **kwargs):\n@@ -2378,7 +2519,7 @@ def cache_hook(*args, **kwargs):\n     def kernel(VALUE, X):\n         pass\n \n-    x = torch.tensor([3.14159], device='cuda')\n+    x = torch.tensor([3.14159], device=device)\n     pgm = kernel[(1, )](value, x)\n \n     JITFunction.cache_hook = None\n@@ -2393,13 +2534,13 @@ def kernel(VALUE, X):\n     \"value, overflow\",\n     [(2**64 - 1, False), (2**64, True), (-2**63, False), (-2**63 - 1, True)]\n )\n-def test_value_specialization_overflow(value: int, overflow: bool, device='cuda') -> None:\n+def test_value_specialization_overflow(value: int, overflow: bool, device) -> None:\n \n     @triton.jit\n     def kernel(VALUE, X):\n         pass\n \n-    x = torch.tensor([3.14159], device='cuda')\n+    x = torch.tensor([3.14159], device=device)\n \n     if overflow:\n         with pytest.raises(OverflowError):\n@@ -2415,7 +2556,7 @@ def kernel(VALUE, X):\n @pytest.mark.parametrize(\"op\", ['+', '-', '*', '/', '%', '<', '>', '<<', '>>', '&', '^', '|'])\n @pytest.mark.parametrize(\"is_lhs_constexpr\", [False, True])\n @pytest.mark.parametrize(\"is_rhs_constexpr\", [True, False])\n-def test_bin_op_constexpr(op, is_lhs_constexpr, is_rhs_constexpr):\n+def test_bin_op_constexpr(op, is_lhs_constexpr, is_rhs_constexpr, device):\n \n     @triton.jit\n     def kernel(Z, X, Y):\n@@ -2436,34 +2577,34 @@ def kernel(Z, X, Y):\n         y = numpy_random((1,), dtype_str=\"float32\")\n     kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': f\"{x_str} {op} {y_str}\"})\n     z = np.array(eval(f\"{x_str} {op} {y_str}\"))\n-    x_tri = to_triton(x)\n-    y_tri = to_triton(y)\n-    z_tri = to_triton(np.empty((1,), dtype=z.dtype))\n+    x_tri = to_triton(x, device=device)\n+    y_tri = to_triton(y, device=device)\n+    z_tri = to_triton(np.empty((1,), dtype=z.dtype), device=device)\n     kernel[(1,)](z_tri, x_tri, y_tri)\n     np.testing.assert_allclose(z, to_numpy(z_tri))\n \n \n-def test_constexpr_shape():\n+def test_constexpr_shape(device):\n \n     @triton.jit\n     def kernel(X):\n         off = tl.arange(0, 128 + 128)\n         tl.store(X + off, off)\n \n-    x_tri = to_triton(np.empty((256, ), dtype=np.int32))\n+    x_tri = to_triton(np.empty((256, ), dtype=np.int32), device=device)\n     kernel[(1,)](x_tri)\n     np.testing.assert_equal(to_numpy(x_tri), np.arange(0, 256))\n \n \n-def test_constexpr_scalar_shape():\n+def test_constexpr_scalar_shape(device):\n \n     @triton.jit\n     def kernel(X, s):\n         off = tl.arange(0, 256)\n         val = off % (256 // s)\n         tl.store(X + off, val)\n \n-    x_tri = to_triton(np.empty((256, ), dtype=np.int32))\n+    x_tri = to_triton(np.empty((256, ), dtype=np.int32), device=device)\n     kernel[(1,)](x_tri, 32)\n     np.testing.assert_equal(to_numpy(x_tri), np.arange(0, 256) % 8)\n \n@@ -2497,7 +2638,7 @@ def vecmul_kernel(ptr, n_elements, rep, type: tl.constexpr):\n \n \n @pytest.mark.parametrize(\"type\", [\"inline\", \"noinline\"])\n-def test_call(type):\n+def test_call(type, device):\n \n     @triton.jit\n     def kernel(ptr, n_elements, num1, num2, type: tl.constexpr):\n@@ -2506,7 +2647,7 @@ def kernel(ptr, n_elements, num1, num2, type: tl.constexpr):\n \n     size = 1024\n     rand_val = numpy_random((size,), dtype_str=\"float32\")\n-    rand_val_tri = to_triton(rand_val, device='cuda')\n+    rand_val_tri = to_triton(rand_val, device=device)\n     err_msg = \"\"\n     try:\n         kernel[(size // 128,)](rand_val_tri, size, 3, 5, type)\n@@ -2524,8 +2665,8 @@ def kernel(ptr, n_elements, num1, num2, type: tl.constexpr):\n # -------------\n \n \n-@pytest.mark.parametrize(\"if_type\", [\"if\", \"if_exp\", \"if_and_dynamic\", \"if_and_static\"])\n-def test_if(if_type):\n+@pytest.mark.parametrize(\"if_type\", [\"if\", \"if_exp\", \"if_and\"])\n+def test_if(if_type, device):\n \n     @triton.jit\n     def kernel(Cond, XTrue, XFalse, Ret, IfType: tl.constexpr, BoolVar: tl.constexpr, StaticVaue: tl.constexpr):\n@@ -2549,16 +2690,17 @@ def kernel(Cond, XTrue, XFalse, Ret, IfType: tl.constexpr, BoolVar: tl.constexpr\n             else:\n                 tl.store(Ret, tl.load(XFalse))\n \n-    cond = torch.ones(1, dtype=torch.int32, device='cuda')\n-    x_true = torch.tensor([3.14], dtype=torch.float32, device='cuda')\n-    x_false = torch.tensor([1.51], dtype=torch.float32, device='cuda')\n-    ret = torch.empty(1, dtype=torch.float32, device='cuda')\n+    cond = torch.ones(1, dtype=torch.int32, device=device)\n+    x_true = torch.tensor([3.14], dtype=torch.float32, device=device)\n+    x_false = torch.tensor([1.51], dtype=torch.float32, device=device)\n+    ret = torch.empty(1, dtype=torch.float32, device=device)\n+\n     kernel[(1,)](cond, x_true, x_false, ret, if_type, True, 1)\n     assert torch.equal(ret, x_true)\n \n \n-def test_num_warps_pow2():\n-    dst = torch.empty(128, device='cuda')\n+def test_num_warps_pow2(device):\n+    dst = torch.empty(128, device=device)\n \n     @triton.jit\n     def _kernel(dst):\n@@ -2582,7 +2724,7 @@ def _kernel(dst):\n                           ('float32', 'math.pow', tl.math.libdevice_path()),\n                           ('float64', 'math.pow_dtype', tl.math.libdevice_path()),\n                           ('float64', 'math.norm4d', '')])\n-def test_math_tensor(dtype_str, expr, lib_path):\n+def test_math_tensor(dtype_str, expr, lib_path, device):\n \n     @triton.jit\n     def kernel(X, Y, BLOCK: tl.constexpr):\n@@ -2623,9 +2765,9 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n         kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': f'tl.{expr}(x, x, x, x)'})\n         y_ref = np.sqrt(4 * np.power(x, 2))\n \n-    x_tri = to_triton(x)\n+    x_tri = to_triton(x, device=device)\n     # triton result\n-    y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device='cuda')\n+    y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device=device)\n     kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'libdevice': lib_path})\n     # compare\n     if expr == 'math.ffs':\n@@ -2638,7 +2780,7 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n                          [('float32', 'math.pow', ''),\n                           ('float64', 'math.pow_dtype', ''),\n                           ('float64', 'math.pow', tl.math.libdevice_path())])\n-def test_math_scalar(dtype_str, expr, lib_path):\n+def test_math_scalar(dtype_str, expr, lib_path, device):\n \n     @triton.jit\n     def kernel(X, Y, BLOCK: tl.constexpr):\n@@ -2663,8 +2805,8 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n         y_ref[:] = np.power(x, 0.5)\n \n     # triton result\n-    x_tri = to_triton(x)[0].item()\n-    y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device='cuda')\n+    x_tri = to_triton(x, device=device)[0].item()\n+    y_tri = to_triton(numpy_random((shape[0],), dtype_str=dtype_str, rs=rs), device=device)\n     kernel[(1,)](x_tri, y_tri, BLOCK=shape[0], extern_libs={'libdevice': lib_path})\n     # compare\n     np.testing.assert_allclose(y_ref, to_numpy(y_tri), rtol=0.01)\n@@ -2677,7 +2819,7 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n @pytest.mark.parametrize(\"lo, hi, iv\", [(2**35, 2**35 + 20, 1), (2**35, 2**35 + 20, 2), (2**35, 2**35 + 20, 3),\n                                         (15, -16, -1), (15, -16, -2), (15, -16, -3),\n                                         (-18, -22, -1), (22, 18, -1)])\n-def test_for_iv(lo, hi, iv):\n+def test_for_iv(lo, hi, iv, device):\n \n     @triton.jit\n     def kernel(Out, lo, hi, iv: tl.constexpr):\n@@ -2689,12 +2831,12 @@ def kernel(Out, lo, hi, iv: tl.constexpr):\n \n     lo = 2**35\n     hi = 2**35 + 20\n-    out = to_triton(np.zeros((1,), dtype=np.int64), device='cuda')\n+    out = to_triton(np.zeros((1,), dtype=np.int64), device=device)\n     kernel[(1,)](out, lo, hi, iv)\n     assert out[0] == sum(range(lo, hi, iv))\n \n \n-def test_if_else():\n+def test_if_else(device):\n \n     @triton.jit\n     def kernel(Cond, TrueVal, FalseVal, Out):\n@@ -2704,10 +2846,10 @@ def kernel(Cond, TrueVal, FalseVal, Out):\n             val = tl.load(FalseVal)\n         tl.store(Out, val)\n \n-    out = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n-    true_val = to_triton(np.full((1,), 1, dtype=np.int32), device='cuda')\n-    false_val = to_triton(np.full((1,), 2, dtype=np.int32), device='cuda')\n-    cond = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n+    out = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n+    true_val = to_triton(np.full((1,), 1, dtype=np.int32), device=device)\n+    false_val = to_triton(np.full((1,), 2, dtype=np.int32), device=device)\n+    cond = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n     # True\n     cond[0] = True\n     kernel[(1,)](cond, true_val, false_val, out)\n@@ -2719,7 +2861,7 @@ def kernel(Cond, TrueVal, FalseVal, Out):\n \n \n @pytest.mark.parametrize(\"mode\", [\"dynamic\", \"static\"])\n-def test_if_return(mode):\n+def test_if_return(mode, device):\n \n     @triton.jit\n     def kernel(ExitEarly, Out, cond: tl.constexpr, mode: tl.constexpr):\n@@ -2733,8 +2875,8 @@ def kernel(ExitEarly, Out, cond: tl.constexpr, mode: tl.constexpr):\n                 return\n         tl.store(Out, 1)\n \n-    out = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n-    exit_early = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n+    out = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n+    exit_early = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n     # exit early path taken\n     exit_early[0] = 1\n     kernel[(1,)](exit_early, out, True, mode)\n@@ -2779,7 +2921,7 @@ def add_fn_static_cond(x, cond: tl.constexpr):\n @pytest.mark.parametrize(\"call_type\", [\"attribute\", \"attribute_jit\",\n                                        \"jit\", \"jit_if\", \"jit_ifexp\", \"jit_expr\",\n                                        \"jit_static_cond\", \"jit_noinline\", \"jit_extern\"])\n-def test_if_call(call_type):\n+def test_if_call(call_type, device):\n     @triton.jit\n     def kernel(Out, call_type: tl.constexpr):\n         pid = tl.program_id(0)\n@@ -2838,15 +2980,15 @@ def kernel(Out, call_type: tl.constexpr):\n \n         tl.store(Out, o)\n \n-    out = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n+    out = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n     kernel[(1,)](out, call_type)\n     assert to_numpy(out)[0] == 1\n \n \n @pytest.mark.parametrize(\"_cond1\", [True, False])\n @pytest.mark.parametrize(\"_cond2\", [True, False])\n @pytest.mark.parametrize(\"_cond3\", [True, False])\n-def test_nested_if_else_return(_cond1, _cond2, _cond3):\n+def test_nested_if_else_return(_cond1, _cond2, _cond3, device):\n \n     @triton.jit\n     def kernel(Cond1, Cond2, Cond3, Val1, Val2, Val3, Out):\n@@ -2863,13 +3005,13 @@ def kernel(Cond1, Cond2, Cond3, Val1, Val2, Val3, Out):\n                 val = tl.load(Val3)\n         tl.store(Out, val)\n \n-    out = to_triton(np.full((1,), -1, dtype=np.int32), device='cuda')\n-    cond1 = to_triton(np.full((1,), _cond1, dtype=np.int32), device='cuda')\n-    cond2 = to_triton(np.full((1,), _cond2, dtype=np.int32), device='cuda')\n-    cond3 = to_triton(np.full((1,), _cond3, dtype=np.int32), device='cuda')\n-    val1 = to_triton(np.full((1,), 1, dtype=np.int32), device='cuda')\n-    val2 = to_triton(np.full((1,), 2, dtype=np.int32), device='cuda')\n-    val3 = to_triton(np.full((1,), 3, dtype=np.int32), device='cuda')\n+    out = to_triton(np.full((1,), -1, dtype=np.int32), device=device)\n+    cond1 = to_triton(np.full((1,), _cond1, dtype=np.int32), device=device)\n+    cond2 = to_triton(np.full((1,), _cond2, dtype=np.int32), device=device)\n+    cond3 = to_triton(np.full((1,), _cond3, dtype=np.int32), device=device)\n+    val1 = to_triton(np.full((1,), 1, dtype=np.int32), device=device)\n+    val2 = to_triton(np.full((1,), 2, dtype=np.int32), device=device)\n+    val3 = to_triton(np.full((1,), 3, dtype=np.int32), device=device)\n     kernel[(1,)](cond1, cond2, cond3, val1, val2, val3, out)\n     targets = {\n         (True, True, True): val1[0],\n@@ -2884,7 +3026,7 @@ def kernel(Cond1, Cond2, Cond3, Val1, Val2, Val3, Out):\n     assert out[0] == targets[(_cond1, _cond2, _cond3)]\n \n \n-def test_while():\n+def test_while(device):\n \n     @triton.jit\n     def kernel(InitI, Bound, CutOff, OutI, OutJ):\n@@ -2897,16 +3039,16 @@ def kernel(InitI, Bound, CutOff, OutI, OutJ):\n         tl.store(OutI, curr_i)\n         tl.store(OutJ, j)\n \n-    out_i = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n-    out_j = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n-    init_i = to_triton(np.full((1,), 1, dtype=np.int32), device='cuda')\n-    bound = to_triton(np.full((1,), 10, dtype=np.int32), device='cuda')\n-    cut_off = to_triton(np.full((1,), 5, dtype=np.int32), device='cuda')\n+    out_i = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n+    out_j = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n+    init_i = to_triton(np.full((1,), 1, dtype=np.int32), device=device)\n+    bound = to_triton(np.full((1,), 10, dtype=np.int32), device=device)\n+    cut_off = to_triton(np.full((1,), 5, dtype=np.int32), device=device)\n     kernel[(1,)](init_i, bound, cut_off, out_i, out_j)\n     assert out_i[0] == init_i[0] + 1\n     assert out_j[0] == cut_off[0] + 1\n \n-# def test_for_if():\n+# def test_for_if(device):\n \n #     @triton.jit\n #     def kernel(bound, cutoff, M, N):\n@@ -2920,8 +3062,8 @@ def kernel(InitI, Bound, CutOff, OutI, OutJ):\n #         tl.store(M, m)\n #         tl.store(N, n)\n \n-#     m = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n-#     n = to_triton(np.zeros((1,), dtype=np.int32), device='cuda')\n+#     m = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n+#     n = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n #     kernel[(1,)](10, 7, m, n)\n #     print(m[0])\n #     print(n[0])\n@@ -2931,7 +3073,8 @@ def kernel(InitI, Bound, CutOff, OutI, OutJ):\n # -----------------------\n \n \n-def test_globaltimer():\n+def test_globaltimer(device):\n+    check_cuda_only(device)\n \n     @triton.jit\n     def kernel(Out1, Out2):\n@@ -2942,21 +3085,22 @@ def kernel(Out1, Out2):\n         end = tl.extra.cuda.globaltimer()\n         tl.store(Out2, end - start)\n \n-    out1 = to_triton(np.zeros((128,), dtype=np.int64), device='cuda')\n-    out2 = to_triton(np.zeros((1,), dtype=np.int64), device='cuda')\n+    out1 = to_triton(np.zeros((128,), dtype=np.int64), device=device)\n+    out2 = to_triton(np.zeros((1,), dtype=np.int64), device=device)\n     h = kernel[(1,)](out1, out2)\n     assert out2[0] > 0\n     # 2 inlined globaltimers + one extra in the wrapper extern function\n     assert h.asm[\"ptx\"].count(\"%globaltimer\") == 3\n \n \n-def test_smid():\n+def test_smid(device):\n+    check_cuda_only(device)\n \n     @triton.jit\n     def kernel(Out):\n         tl.store(Out + tl.program_id(0), tl.extra.cuda.smid())\n \n-    out = to_triton(np.zeros((1024,), dtype=np.int32), device='cuda')\n+    out = to_triton(np.zeros((1024,), dtype=np.int32), device=device)\n     h = kernel[(out.shape[0],)](out)\n     assert out.sort()[0].unique().shape[0] > 0\n     assert h.asm[\"ptx\"].count(\"%smid\") == 2\n@@ -2994,7 +3138,7 @@ def kernel(Out):\n @pytest.mark.parametrize(\"src_layout\", layouts)\n @pytest.mark.parametrize(\"interm_layout\", intermediate_layouts)\n @pytest.mark.parametrize(\"dst_layout\", layouts)\n-def test_convert2d(dtype, shape, src_layout, interm_layout, dst_layout, device='cuda'):\n+def test_convert2d(dtype, shape, src_layout, interm_layout, dst_layout, device):\n     if str(src_layout) == str(dst_layout):\n         pytest.skip()\n     if 'mma' in str(src_layout) and 'mma' in str(dst_layout):\n@@ -3046,7 +3190,7 @@ def test_convert2d(dtype, shape, src_layout, interm_layout, dst_layout, device='\n }\n \"\"\"\n \n-    x = to_triton(numpy_random(shape, dtype_str=dtype))\n+    x = to_triton(numpy_random(shape, dtype_str=dtype), device=device)\n     z = torch.empty_like(x)\n \n     # write the IR to a temporary file using mkstemp\n@@ -3060,23 +3204,23 @@ def test_convert2d(dtype, shape, src_layout, interm_layout, dst_layout, device='\n     assert torch.equal(z, x)\n \n \n-def test_load_scalar_with_mask():\n+def test_load_scalar_with_mask(device):\n     @triton.jit\n     def kernel(Input, Index, Out, N: int):\n         index = tl.load(Index)\n         scalar = tl.load(Input + index, mask=index < N, other=0)\n         tl.store(Out, scalar, mask=index < N)\n-    Index = torch.tensor([0], dtype=torch.int32, device='cuda')\n-    Input = torch.tensor([0], dtype=torch.int32, device='cuda')\n-    Out = torch.empty_like(Index, device='cuda')\n+    Index = torch.tensor([0], dtype=torch.int32, device=device)\n+    Input = torch.tensor([0], dtype=torch.int32, device=device)\n+    Out = torch.empty_like(Index, device=device)\n     kernel[(1,)](Input, Index, Out, Index.numel())\n     assert Out.data[0] == 0\n \n \n # This test is used to test our own PTX codegen for float16 and int16 conversions\n # maybe delete it later after ptxas has been fixed\n @pytest.mark.parametrize(\"dtype_str\", ['float16', 'int16'])\n-def test_ptx_cast(dtype_str):\n+def test_ptx_cast(dtype_str, device):\n     @triton.jit\n     def kernel(in_ptr0, out_ptr2, xnumel, rnumel, dtype: tl.constexpr, XBLOCK: tl.constexpr, RBLOCK: tl.constexpr):\n         xoffset = tl.program_id(0) * XBLOCK\n@@ -3106,7 +3250,7 @@ def kernel(in_ptr0, out_ptr2, xnumel, rnumel, dtype: tl.constexpr, XBLOCK: tl.co\n         triton_dtype = tl.float32\n \n     s0 = 4\n-    buf11 = -torch.ones((6 * s0, 197, 197), device='cuda', dtype=torch_dtype)\n-    buf14 = -torch.ones((s0, 6, 197, 197), device='cuda', dtype=torch_dtype)\n+    buf11 = -torch.ones((6 * s0, 197, 197), device=device, dtype=torch_dtype)\n+    buf14 = -torch.ones((s0, 6, 197, 197), device=device, dtype=torch_dtype)\n     kernel[(4728,)](buf11, buf14, 1182 * s0, 197, triton_dtype, 1, 256, num_warps=2)\n     assert buf14.to(torch.float32).mean() == -2.0"}, {"filename": "python/test/unit/language/test_random.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -115,7 +115,7 @@ def random_raw(self):\n                          [(size, seed) for size in ['10', '4,53', '10000']\n                           for seed in [0, 42, 124, 54, 0xffffffff, 0xdeadbeefcafeb0ba]]\n                          )\n-def test_randint(size, seed, device='cuda'):\n+def test_randint(size, seed, device):\n     size = list(map(int, size.split(',')))\n \n     @triton.jit\n@@ -141,7 +141,7 @@ def kernel(X, N, seed):\n                          [(size, seed) for size in [1000000]\n                           for seed in [0, 42, 124, 54]]\n                          )\n-def test_rand(size, seed, device='cuda'):\n+def test_rand(size, seed, device):\n     @triton.jit\n     def kernel(X, N, seed):\n         offset = tl.program_id(0) * BLOCK + tl.arange(0, BLOCK)\n@@ -162,7 +162,7 @@ def kernel(X, N, seed):\n                          [(size, seed) for size in [1000000]\n                           for seed in [0, 42, 124, 54]]\n                          )\n-def test_randn(size, seed, device='cuda'):\n+def test_randn(size, seed, device):\n     @triton.jit\n     def kernel(X, N, seed):\n         offset = tl.program_id(0) * BLOCK + tl.arange(0, BLOCK)\n@@ -179,7 +179,7 @@ def kernel(X, N, seed):\n \n # tl.rand() should never produce >=1.0\n \n-def test_rand_limits():\n+def test_rand_limits(device):\n     @triton.jit\n     def kernel(input, output, n: tl.constexpr):\n         idx = tl.arange(0, n)\n@@ -190,8 +190,8 @@ def kernel(input, output, n: tl.constexpr):\n     min_max_int32 = torch.tensor([\n         torch.iinfo(torch.int32).min,\n         torch.iinfo(torch.int32).max,\n-    ], dtype=torch.int32, device='cuda')\n-    output = torch.empty(2, dtype=torch.float32, device='cuda')\n+    ], dtype=torch.int32, device=device)\n+    output = torch.empty(2, dtype=torch.float32, device=device)\n     kernel[(1,)](min_max_int32, output, 2)\n \n     assert output[0] == output[1]"}, {"filename": "python/test/unit/operators/test_matmul.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -91,7 +91,8 @@ def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n                 (128, 256, 16, 1, 8, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n                 (32, 64, 16, 1, 1, 2, 64, 128, 32, AT, BT, ADTYPE, BDTYPE),\n                 (128, 128, 32, 8, 4, 2, 1024, 1024, 1024, AT, BT, ADTYPE, BDTYPE),\n-            ] for ADTYPE, BDTYPE in [(\"float8\", \"float16\")] for AT in [False, True] for BT in [False, True]\n+            ] for ADTYPE, BDTYPE in [(\"float8\", \"float16\"), (\"float16\", \"float32\"), (\"float32\", \"float16\"),\n+                                     (\"bfloat16\", \"float32\"), (\"float32\", \"bfloat16\")] for AT in [False, True] for BT in [False, True]\n         ]\n     ),\n )\n@@ -125,11 +126,12 @@ def get_input(n, m, t, dtype):\n             return f8_to_f16(x)\n         dtype = {\"float16\": torch.float16, \"bfloat16\": torch.bfloat16, \"float32\": torch.float32}[dtype]\n         return .1 * torch.randn((n, m), device=\"cuda\", dtype=dtype)\n+\n     # allocate/transpose inputs\n     a = get_input(M, K, AT, ADTYPE)\n     b = get_input(K, N, BT, BDTYPE)\n     # run test\n-    th_c = torch.matmul(a, b)\n+    th_c = torch.matmul(a.to(torch.float32), b.to(torch.float32))\n     try:\n         tt_c = triton.ops.matmul(a, b)\n         atol, rtol = 1e-2, 0"}, {"filename": "python/triton/common/backend.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -85,10 +85,10 @@ def register_backend(device_type: str, backend_cls: type):\n \n def get_backend(device_type: str):\n     if device_type not in _backends:\n-        device_backend_package_name = f\"triton.third_party.{device_type}\"\n-        if importlib.util.find_spec(device_backend_package_name):\n+        device_backend_package_name = f\"...third_party.{device_type}\"\n+        if importlib.util.find_spec(device_backend_package_name, package=__spec__.name):\n             try:\n-                importlib.import_module(device_backend_package_name)\n+                importlib.import_module(device_backend_package_name, package=__spec__.name)\n             except Exception:\n                 return None\n         else:"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -11,7 +11,6 @@\n from pathlib import Path\n from typing import Any, Tuple\n \n-# import triton\n from .._C.libtriton.triton import (add_external_libs, compile_ptx_to_cubin,\n                                    get_shared_memory_size, ir,\n                                    translate_llvmir_to_hsaco, translate_llvmir_to_ptx,"}, {"filename": "python/triton/interpreter/memory_map.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -2,7 +2,7 @@\n \n import dataclasses\n \n-from triton.interpreter import torch_wrapper\n+from . import torch_wrapper\n \n torch = torch_wrapper.torch\n "}, {"filename": "python/triton/interpreter/tl_lang.py", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "file_content_changes": "@@ -1,6 +1,5 @@\n from __future__ import annotations\n \n-# import triton\n from ..language import core as lcore\n from . import torch_wrapper\n from .core import ExecutionContext\n@@ -624,3 +623,9 @@ def sum(self, input, axis=None):\n     @_tensor_operation\n     def xor_sum(self, input, axis):\n         raise NotImplementedError()\n+\n+    @_tensor_operation\n+    def cumsum(self, input, axis=None):\n+        if axis is None:\n+            return torch.cumsum(input)\n+        return torch.cumsum(input, dim=axis)"}, {"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -18,6 +18,7 @@\n     arange,\n     argmin,\n     argmax,\n+    associative_scan,\n     atomic_add,\n     atomic_and,\n     atomic_cas,\n@@ -33,6 +34,7 @@\n     cat,\n     constexpr,\n     cos,\n+    cumsum,\n     debug_barrier,\n     device_assert,\n     device_print,\n@@ -108,6 +110,7 @@\n     \"arange\",\n     \"argmin\",\n     \"argmax\",\n+    \"associative_scan\",\n     \"atomic_add\",\n     \"atomic_and\",\n     \"atomic_cas\",\n@@ -125,6 +128,7 @@\n     \"cdiv\",\n     \"constexpr\",\n     \"cos\",\n+    \"cumsum\",\n     \"debug_barrier\",\n     \"device_assert\",\n     \"device_print\","}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "file_content_changes": "@@ -6,7 +6,6 @@\n from typing import Callable, List, Sequence, TypeVar\n \n from .._C.libtriton.triton import ir\n-# import triton\n from ..runtime.jit import jit\n from . import semantic\n \n@@ -1503,6 +1502,67 @@ def xor_sum(input, axis=None, _builder=None, _generator=None):\n                   _builder=_builder, _generator=_generator)\n \n \n+# -----------------------\n+# Scans\n+# -----------------------\n+\n+def _add_scan_docstr(name: str, return_indices_arg: str = None, tie_break_arg: str = None) -> Callable[[T], T]:\n+\n+    def _decorator(func: T) -> T:\n+        docstr = \"\"\"\n+    Returns the {name} of all elements in the :code:`input` tensor along the provided :code:`axis`\n+\n+    :param input: the input values\n+    :param axis: the dimension along which the scan should be done\"\"\"\n+        func.__doc__ = docstr.format(name=name)\n+        return func\n+\n+    return _decorator\n+\n+\n+@builtin\n+def associative_scan(input, axis, combine_fn, _builder=None, _generator=None):\n+    \"\"\"Applies the combine_fn to each elements with a carry in :code:`input` tensors along the provided :code:`axis` and update the carry\n+\n+    :param input: the input tensor, or tuple of tensors\n+    :param axis: the dimension along which the reduction should be done\n+    :param combine_fn: a function to combine two groups of scalar tensors (must be marked with @triton.jit)\n+\n+    \"\"\"\n+    if isinstance(input, tensor):\n+        return associative_scan((input,), axis, combine_fn,\n+                                _builder=_builder, _generator=_generator)[0]\n+\n+    def make_combine_region(scan_op):\n+        in_scalar_tys = [t.type.scalar for t in input]\n+        prototype = function_type(in_scalar_tys, in_scalar_tys * 2)\n+\n+        region = scan_op.get_region(0)\n+        with _insertion_guard(_builder):\n+            param_types = [ty.to_ir(_builder) for ty in prototype.param_types]\n+            block = _builder.create_block_with_parent(region, param_types)\n+            args = [tensor(block.arg(i), ty)\n+                    for i, ty in enumerate(prototype.param_types)]\n+            results = _generator.call_JitFunction(combine_fn, args, kwargs={})\n+            if isinstance(results, tensor):\n+                handles = [results.handle]\n+            else:\n+                handles = [r.handle for r in results]\n+            _builder.create_scan_ret(*handles)\n+    axis = _constexpr_to_value(axis)\n+    return semantic.associative_scan(input, axis, make_combine_region, _builder)\n+\n+# cumsum\n+\n+\n+@jit\n+@_add_scan_docstr(\"cumsum\")\n+def cumsum(input, axis=0):\n+    # todo rename this to a generic function name\n+    input = _promote_reduction_input(input)\n+    return associative_scan(input, axis, _sum_combine)\n+\n+\n # -----------------------\n # Compiler Hint Ops\n # -----------------------\n@@ -1639,12 +1699,16 @@ def device_assert(cond, msg=\"\", _builder=None):\n     while hasattr(module, \"__name__\"):\n         frame = frame.f_back\n         module = inspect.getmodule(frame)\n-    func_name = frame.f_code.co_name\n-    file_name = frame.f_back.f_code.co_filename\n-    # TODO: The line number currently indicates the line\n-    # where the triton function is called but not where the\n-    # device_assert is called. Need to enhance this.\n-    lineno = frame.f_back.f_lineno\n+    lineno = 0\n+    func_name = 'unknown'\n+    file_name = 'unknown'\n+    if frame is not None:\n+        func_name = frame.f_code.co_name\n+        file_name = frame.f_back.f_code.co_filename\n+        # TODO: The line number currently indicates the line\n+        # where the triton function is called but not where the\n+        # device_assert is called. Need to enhance this.\n+        lineno = frame.f_back.f_lineno\n     return semantic.device_assert(_to_tensor(cond, _builder), msg, file_name, func_name, lineno, _builder)\n \n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "file_content_changes": "@@ -3,8 +3,8 @@\n from functools import wraps\n from typing import List, Optional, Sequence, Tuple, TypeVar\n \n+from .._C.libtriton.triton import ir\n from . import core as tl\n-from triton._C.libtriton.triton import ir\n \n T = TypeVar('T')\n \n@@ -796,6 +796,8 @@ def _str_to_store_cache_modifier(cache_modifier):\n             cache = ir.CACHE_MODIFIER.CG\n         elif cache_modifier == \".cs\":\n             cache = ir.CACHE_MODIFIER.CS\n+        elif cache_modifier == \".wt\":\n+            cache = ir.CACHE_MODIFIER.WT\n         else:\n             raise ValueError(f\"Cache modifier {cache_modifier} not supported\")\n     return cache\n@@ -1319,6 +1321,32 @@ def wrap_tensor(x, scalar_ty):\n     )\n \n \n+# ===----------------------------------------------------------------------===\n+#                               Associative Scan\n+# ===----------------------------------------------------------------------===\n+\n+\n+def associative_scan(\n+    inputs: Sequence[tl.tensor], axis: int, region_builder_fn, builder: ir.builder\n+) -> Tuple[tl.tensor, ...]:\n+    if len(inputs) != 1:\n+        raise ValueError(\"Current implementation only support single tensor input\")\n+    shape = inputs[0].type.shape\n+\n+    def wrap_tensor(x, scalar_ty):\n+        res_ty = tl.block_type(scalar_ty, shape)\n+        return tl.tensor(x, res_ty)\n+\n+    scan_op = builder.create_scan([t.handle for t in inputs], axis)\n+    region_builder_fn(scan_op)\n+    scan_op.verify()\n+\n+    return tuple(\n+        wrap_tensor(scan_op.get_result(i), inputs[i].type.scalar)\n+        for i in range(len(inputs))\n+    )\n+\n+\n # ===----------------------------------------------------------------------===\n #                               Math\n # ===----------------------------------------------------------------------==="}, {"filename": "python/triton/ops/blocksparse/matmul.py", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "file_content_changes": "@@ -3,9 +3,6 @@\n from ... import cdiv, heuristics, jit\n from ... import language as tl\n \n-# import triton\n-# import language as tl\n-\n # ********************************************************\n # --------------------------------------------------------\n # Sparse = Dense x Dense (SDD)"}, {"filename": "python/triton/ops/blocksparse/softmax.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -1,7 +1,5 @@\n import torch\n \n-# import triton\n-# import language as tl\n from ... import jit\n from ... import language as tl\n from ... import next_power_of_2"}, {"filename": "python/triton/ops/cross_entropy.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -1,7 +1,5 @@\n import torch\n \n-# import triton\n-# import language as tl\n from .. import heuristics, jit\n from .. import language as tl\n from .. import next_power_of_2"}, {"filename": "python/triton/ops/flash_attention.py", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "file_content_changes": "@@ -10,9 +10,6 @@\n from .. import cdiv, jit\n from .. import language as tl\n \n-# import triton\n-# import language as tl\n-\n \n @jit\n def _fwd_kernel("}, {"filename": "python/triton/ops/matmul.py", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "file_content_changes": "@@ -4,8 +4,21 @@\n from .. import language as tl\n from .matmul_perf_model import early_config_prune, estimate_matmul_time\n \n-# import triton\n-# import language as tl\n+_ordered_datatypes = [torch.float16, torch.bfloat16, torch.float32]\n+\n+\n+def get_higher_dtype(a, b):\n+    if a is b:\n+        return a\n+\n+    assert a in _ordered_datatypes\n+    assert b in _ordered_datatypes\n+\n+    for d in _ordered_datatypes:\n+        if a is d:\n+            return b\n+        if b is d:\n+            return a\n \n \n def init_to_zero(name):\n@@ -100,6 +113,8 @@ def _kernel(A, B, C, M, N, K,\n             k_remaining = K - k * (BLOCK_K * SPLIT_K)\n             a = tl.load(A, mask=rk[None, :] < k_remaining, other=0.)\n             b = tl.load(B, mask=rk[:, None] < k_remaining, other=0.)\n+        a = a.to(C.dtype.element_ty)\n+        b = b.to(C.dtype.element_ty)\n         acc += tl.dot(a, b, out_dtype=dot_out_dtype)\n         A += BLOCK_K * SPLIT_K * stride_ak\n         B += BLOCK_K * SPLIT_K * stride_bk\n@@ -134,9 +149,10 @@ def _call(a, b, dot_out_dtype):\n         M, K = a.shape\n         _, N = b.shape\n         # allocates output\n-        c = torch.empty((M, N), device=device, dtype=a.dtype)\n+        c_dtype = get_higher_dtype(a.dtype, b.dtype)\n+        c = torch.empty((M, N), device=device, dtype=c_dtype)\n         if dot_out_dtype is None:\n-            if a.dtype in [torch.float16, torch.float32, torch.bfloat16]:\n+            if c_dtype in [torch.float16, torch.float32, torch.bfloat16]:\n                 dot_out_dtype = tl.float32\n             else:\n                 dot_out_dtype = tl.int32"}, {"filename": "python/triton/ops/matmul_perf_model.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -2,7 +2,6 @@\n \n import torch\n \n-# import triton\n from .. import cdiv\n from .._C.libtriton.triton import runtime\n from ..runtime import driver"}, {"filename": "python/triton/runtime/autotuner.py", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "file_content_changes": "@@ -25,7 +25,7 @@ def __reduce__(self):\n \n \n class Autotuner(KernelInterface):\n-    def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by: Dict = None):\n+    def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by: Dict = None, warmup=25, rep=100):\n         '''\n         :param prune_configs_by: a dict of functions that are used to prune configs, fields:\n             'perf_model': performance model used to predicate running time with different configs, returns running time\n@@ -58,6 +58,8 @@ def _hook(args):\n         self.perf_model, self.configs_top_k = perf_model, top_k\n         self.early_config_prune = early_config_prune\n         self.fn = fn\n+        self.warmup = warmup\n+        self.rep = rep\n \n     def _bench(self, *args, config, **meta):\n         # check for conflicts, i.e. meta-parameters both provided\n@@ -78,7 +80,7 @@ def kernel_call():\n             self.hook(args)\n             self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **current)\n         try:\n-            return do_bench(kernel_call, quantiles=(0.5, 0.2, 0.8))\n+            return do_bench(kernel_call, warmup=self.warmup, rep=self.rep, quantiles=(0.5, 0.2, 0.8))\n         except OutOfResources:\n             return [float('inf'), float('inf'), float('inf')]\n \n@@ -173,7 +175,7 @@ def __str__(self):\n         return ', '.join(res)\n \n \n-def autotune(configs, key, prune_configs_by=None, reset_to_zero=None):\n+def autotune(configs, key, prune_configs_by=None, reset_to_zero=None, warmup=25, rep=100):\n     \"\"\"\n     Decorator for auto-tuning a :code:`triton.jit`'d function.\n \n@@ -204,9 +206,13 @@ def kernel(x_ptr, x_size, **META):\n         'early_config_prune'(optional): a function used to do early prune (eg, num_stages). It takes configs:List[Config] as its input, and returns pruned configs.\n     :param reset_to_zero: a list of argument names whose value will be reset to zero before evaluating any configs.\n     :type reset_to_zero: list[str]\n+    :param warmup: Warmup time (in ms) to pass to benchmarking, defaults to 25.\n+    :type warmup: int\n+    :param rep: Repetition time (in ms) to pass to benchmarking, defaults to 100.\n+    :type rep: int\n     \"\"\"\n     def decorator(fn):\n-        return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, prune_configs_by)\n+        return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, prune_configs_by, warmup, rep)\n \n     return decorator\n "}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "file_content_changes": "@@ -11,8 +11,6 @@\n from typing import (Callable, Generic, Iterable, List, Optional, TypeVar, Union, cast,\n                     overload)\n \n-# import triton\n-# from .. import compile, CompiledKernel\n from ..common.backend import get_backend\n \n TRITON_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n@@ -71,7 +69,7 @@ def visit_Attribute(self, node):\n         lhs = self.visit(node.value)\n         while isinstance(lhs, ast.Attribute):\n             lhs = self.visit(lhs.value)\n-        if lhs is None or getattr(lhs, \"__name__\", \"\") == \"triton\":\n+        if lhs is None or (getattr(lhs, \"__name__\", \"\") == \"triton\" or getattr(lhs, \"__name__\", \"\").endswith(\".triton\")):\n             return None\n         return getattr(lhs, node.attr)\n \n@@ -81,7 +79,7 @@ def visit_Call(self, node):\n             return\n         if inspect.isbuiltin(func):\n             return\n-        if func.__module__ and func.__module__.startswith('triton.'):\n+        if func.__module__ and (func.__module__.startswith('triton.') or '.triton.' in func.__module__):\n             return\n         assert isinstance(func, JITFunction), f\"Function \\\"{func.__name__}\\\" is being called from a Triton function but is not a Triton function itself. Decorate it with @triton.jit to fix this\"\n         if func.hash is None:"}, {"filename": "test/Conversion/triton_ops.mlir", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "file_content_changes": "@@ -187,3 +187,19 @@ tt.func @print_no_arg(%arg0: !tt.ptr<f32>) {\n   tt.store %arg0, %0 {cache = 1 : i32, evict = 1 : i32} : f32\n   tt.return\n }\n+\n+// CHECK-LABEL: scan_op\n+tt.func @scan_op(%ptr: tensor<1x2x4x!tt.ptr<f32>>, %v : tensor<1x2x4xf32>) {\n+  // CHECK: tt.scan\n+  // CHECK-SAME: axis = 1\n+  // CHECK: tt.scan.return\n+  // CHECK-NEXT: (tensor<1x2x4xf32>) -> tensor<1x2x4xf32>\n+  %a = \"tt.scan\"(%v) <{axis = 1 : i32}>({\n+  ^bb0(%arg0: f32, %arg1: f32):\n+    %add = arith.addf %arg0, %arg1 : f32\n+    tt.scan.return %add : f32\n+  }) : (tensor<1x2x4xf32>) -> tensor<1x2x4xf32>\n+  tt.store %ptr, %a : tensor<1x2x4xf32>\n+  tt.return\n+\n+}"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "file_content_changes": "@@ -1159,3 +1159,67 @@ module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n       tt.return\n   }\n }\n+\n+// -----\n+\n+#mma = #triton_gpu.mma<{versionMajor=2, warpsPerCTA=[2, 2]}>\n+#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [1, 0]}>\n+#dot_operand_a = #triton_gpu.dot_op<{opIdx=0, parent=#mma, kWidth=1}>\n+#dot_operand_b = #triton_gpu.dot_op<{opIdx=1, parent=#mma, kWidth=1}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+  // CHECK-LABEL: matmul_tf32_cst_b\n+  tt.func @matmul_tf32_cst_b(%ptr:!tt.ptr<f32> {tt.divisibility = 16 : i32},\n+  %a: tensor<32x16xf32, #dot_operand_a>, %c: tensor<32x32xf32, #mma>) {\n+  // CHECK: %[[CST:.+]] = llvm.mlir.constant(1.000000e+00 : f32) : f32\n+  // CHECK: %[[BC:.+]] = llvm.bitcast %[[CST]] : f32 to i32\n+  // CHECK: %[[SI:.+]] = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>\n+  // CHECK: llvm.insertvalue %[[BC]], %[[SI]][0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>\n+    %b_mat = arith.constant dense<1.000000e+00> : tensor<16x32xf32, #dot_operand_b>\n+    %28 = tt.dot %a, %b_mat, %c {allowTF32 = true, transA = false, transB = false} : tensor<32x16xf32, #dot_operand_a> * tensor<16x32xf32, #dot_operand_b> -> tensor<32x32xf32, #mma>\n+    %38 = triton_gpu.convert_layout %28 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked>\n+    %30 = tt.splat %ptr : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked>\n+    %36 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f32>, #blocked>) -> tensor<32x32x!tt.ptr<f32>, #blocked>\n+    tt.store %36, %38 : tensor<32x32xf32, #blocked>\n+    tt.return\n+  }\n+}\n+\n+// -----\n+\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>\n+#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  // CHECK-LABEL: matmul_f16_cst_operands\n+  tt.func public @matmul_f16_cst_operands(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}) attributes {noinline = false} {\n+    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>\n+  // CHECK: %[[C1f:.+]] = llvm.mlir.constant(1.000000e+00 : f16) : f16\n+  // CHECK: %[[Ci16:.+]] = llvm.bitcast %[[C1f]] : f16 to i16\n+  // CHECK: %[[U:.+]] = llvm.mlir.undef : vector<2xi16>\n+  // CHECK: %[[C0:.+]] = llvm.mlir.constant(0 : i32) : i32\n+  // CHECK: %[[V0:.+]] = llvm.insertelement %[[Ci16]], %[[U]][%[[C0]] : i32] : vector<2xi16>\n+  // CHECK: %[[C1:.+]] = llvm.mlir.constant(1 : i32) : i32\n+  // CHECK: %[[V1:.+]] = llvm.insertelement %[[Ci16]], %[[V0]][%[[C1]] : i32] : vector<2xi16>\n+  // CHECK: %[[BC:.+]] = llvm.bitcast %[[V1]] : vector<2xi16> to i32\n+  // CHECK: %[[SU:.+]] = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>\n+  // CHECK: llvm.insertvalue %[[BC]], %[[SU]][0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>\n+    %cst_0 = arith.constant dense<1.000000e+00> : tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>\n+    %cst_1 = arith.constant dense<1.000000e+00> : tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>\n+    %cst_2 = arith.constant dense<32> : tensor<32x1xi32, #blocked>\n+    %0 = tt.dot %cst_0, %cst_1, %cst {allowTF32 = true} : tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma>\n+    %1 = triton_gpu.convert_layout %0 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked>\n+    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>\n+    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>\n+    %4 = arith.muli %3, %cst_2 : tensor<32x1xi32, #blocked>\n+    %5 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked>\n+    %6 = tt.addptr %5, %4 : tensor<32x1x!tt.ptr<f16>, #blocked>, tensor<32x1xi32, #blocked>\n+    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>\n+    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>\n+    %9 = tt.broadcast %6 : (tensor<32x1x!tt.ptr<f16>, #blocked>) -> tensor<32x32x!tt.ptr<f16>, #blocked>\n+    %10 = tt.broadcast %8 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>\n+    %11 = tt.addptr %9, %10 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>\n+    %12 = arith.truncf %1 : tensor<32x32xf32, #blocked> to tensor<32x32xf16, #blocked>\n+    tt.store %11, %12 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf16, #blocked>\n+    tt.return\n+  }\n+}"}, {"filename": "test/TritonGPU/combine.mlir", "status": "modified", "additions": 298, "deletions": 1, "changes": 299, "file_content_changes": "@@ -1122,7 +1122,7 @@ module attributes {\"triton_gpu.num-warps\" = 2 : i32} {\n \n // -----\n \n-// Check if the SimplifyReduceCvt handles convert_layout lifted from the for loop.\n+// Check if SimplifyReduceCvt handles convert_layout lifted from the for loop.\n // CHECK-LABEL: reduce_cvt2\n // Match the reduction\n // CHECK: tt.reduce\n@@ -1202,3 +1202,300 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     tt.return\n   }\n }\n+\n+// -----\n+\n+// Ensure that RematerializeForward doesn't apply when a convert has multiple uses\n+// CHECK-LABEL: loop_convert_multi_uses\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>\n+#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  tt.func public @loop_convert_multi_uses(%arg0: i32 {tt.divisibility = 16 : i32}, %arg1: i32, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32, %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32, %arg13: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {\n+    %cst = arith.constant dense<0xFF800000> : tensor<16xf32, #blocked>\n+    %c1_i32 = arith.constant 1 : i32\n+    %c0_i32 = arith.constant 0 : i32\n+    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked>\n+    %cst_1 = arith.constant dense<1> : tensor<16xi32, #blocked>\n+    %cst_2 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked1>\n+    %cst_3 = arith.constant dense<1> : tensor<16x1xi32, #blocked1>\n+    %c16_i32 = arith.constant 16 : i32\n+    %0 = tt.get_program_id x : i32\n+    %1 = tt.get_program_id y : i32\n+    %2 = arith.divsi %1, %arg0 : i32\n+    %3 = arith.remsi %1, %arg0 : i32\n+    %4 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked>\n+    %5 = arith.muli %0, %c16_i32 : i32\n+    %6 = tt.splat %5 : (i32) -> tensor<16xi32, #blocked>\n+    %7 = arith.addi %6, %4 : tensor<16xi32, #blocked>\n+    %8 = arith.muli %2, %arg3 : i32\n+    %9 = arith.muli %3, %arg4 : i32\n+    %10 = arith.addi %8, %9 : i32\n+    %11 = triton_gpu.convert_layout %7 : (tensor<16xi32, #blocked>) -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16x1xi32, #blocked2>\n+    %13 = triton_gpu.convert_layout %12 : (tensor<16x1xi32, #blocked2>) -> tensor<16x1xi32, #blocked1>\n+    %14 = tt.splat %arg6 : (i32) -> tensor<16x1xi32, #blocked1>\n+    %15 = arith.muli %13, %14 : tensor<16x1xi32, #blocked1>\n+    %16 = triton_gpu.convert_layout %4 : (tensor<16xi32, #blocked>) -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+    %17 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x16xi32, #blocked3>\n+    %18 = tt.broadcast %15 : (tensor<16x1xi32, #blocked1>) -> tensor<16x16xi32, #blocked1>\n+    %19 = tt.broadcast %17 : (tensor<1x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked3>\n+    %20 = triton_gpu.convert_layout %19 : (tensor<16x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked1>\n+    %21 = arith.addi %18, %20 : tensor<16x16xi32, #blocked1>\n+    %22 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<16x16x!tt.ptr<f16>, #blocked1>\n+    %23 = \"triton_gpu.cmpi\"(%13, %cst_3) <{predicate = 2 : i64}> : (tensor<16x1xi32, #blocked1>, tensor<16x1xi32, #blocked1>) -> tensor<16x1xi1, #blocked1>\n+    %24 = tt.broadcast %23 : (tensor<16x1xi1, #blocked1>) -> tensor<16x16xi1, #blocked1>\n+    %25 = arith.truncf %cst_2 : tensor<16x16xf32, #blocked1> to tensor<16x16xf16, #blocked1>\n+    %26 = arith.muli %2, %arg11 : i32\n+    %27 = arith.muli %3, %arg12 : i32\n+    %28 = arith.addi %26, %27 : i32\n+    %29 = tt.splat %arg10 : (!tt.ptr<f32>) -> tensor<16x!tt.ptr<f32>, #blocked>\n+    %30 = \"triton_gpu.cmpi\"(%7, %cst_1) <{predicate = 2 : i64}> : (tensor<16xi32, #blocked>, tensor<16xi32, #blocked>) -> tensor<16xi1, #blocked>\n+    %31 = arith.muli %2, %arg8 : i32\n+    %32 = arith.muli %3, %arg9 : i32\n+    %33 = arith.addi %31, %32 : i32\n+    %34 = tt.splat %arg7 : (!tt.ptr<f32>) -> tensor<16x!tt.ptr<f32>, #blocked>\n+    %35:3 = scf.for %arg17 = %c0_i32 to %arg1 step %c1_i32 iter_args(%arg18 = %cst_2, %arg19 = %cst_0, %arg20 = %cst) -> (tensor<16x16xf32, #blocked1>, tensor<16xf32, #blocked>, tensor<16xf32, #blocked>)  : i32 {\n+      %60 = arith.muli %arg17, %arg5 : i32\n+      %61 = arith.addi %10, %60 : i32\n+      %62 = tt.splat %61 : (i32) -> tensor<16x16xi32, #blocked1>\n+      %63 = arith.addi %62, %21 : tensor<16x16xi32, #blocked1>\n+      %64 = tt.addptr %22, %63 : tensor<16x16x!tt.ptr<f16>, #blocked1>, tensor<16x16xi32, #blocked1>\n+      %65 = triton_gpu.convert_layout %64 : (tensor<16x16x!tt.ptr<f16>, #blocked1>) -> tensor<16x16x!tt.ptr<f16>, #blocked4>\n+      %66 = triton_gpu.convert_layout %24 : (tensor<16x16xi1, #blocked1>) -> tensor<16x16xi1, #blocked4>\n+      %67 = triton_gpu.convert_layout %25 : (tensor<16x16xf16, #blocked1>) -> tensor<16x16xf16, #blocked4>\n+      %68 = tt.load %65, %66, %67 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf16, #blocked4>\n+      %69 = triton_gpu.convert_layout %68 : (tensor<16x16xf16, #blocked4>) -> tensor<16x16xf16, #blocked1>\n+      %70 = arith.addi %28, %arg17 : i32\n+      %71 = tt.splat %70 : (i32) -> tensor<16xi32, #blocked>\n+      %72 = arith.addi %71, %7 : tensor<16xi32, #blocked>\n+      %73 = tt.addptr %29, %72 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked>\n+      %74 = triton_gpu.convert_layout %73 : (tensor<16x!tt.ptr<f32>, #blocked>) -> tensor<16x!tt.ptr<f32>, #blocked>\n+      %75 = triton_gpu.convert_layout %30 : (tensor<16xi1, #blocked>) -> tensor<16xi1, #blocked>\n+      %76 = triton_gpu.convert_layout %cst_0 : (tensor<16xf32, #blocked>) -> tensor<16xf32, #blocked>\n+      %77 = tt.load %74, %75, %76 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16xf32, #blocked>\n+      %78 = arith.addi %33, %arg17 : i32\n+      %79 = tt.splat %78 : (i32) -> tensor<16xi32, #blocked>\n+      %80 = arith.addi %79, %7 : tensor<16xi32, #blocked>\n+      %81 = tt.addptr %34, %80 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked>\n+      %82 = triton_gpu.convert_layout %81 : (tensor<16x!tt.ptr<f32>, #blocked>) -> tensor<16x!tt.ptr<f32>, #blocked>\n+      %83 = triton_gpu.convert_layout %30 : (tensor<16xi1, #blocked>) -> tensor<16xi1, #blocked>\n+      %84 = triton_gpu.convert_layout %cst_0 : (tensor<16xf32, #blocked>) -> tensor<16xf32, #blocked>\n+      %85 = tt.load %82, %83, %84 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16xf32, #blocked>\n+      %86 = \"triton_gpu.cmpf\"(%arg20, %85) <{predicate = 2 : i64}> : (tensor<16xf32, #blocked>, tensor<16xf32, #blocked>) -> tensor<16xi1, #blocked>\n+      %87 = \"triton_gpu.select\"(%86, %arg20, %85) : (tensor<16xi1, #blocked>, tensor<16xf32, #blocked>, tensor<16xf32, #blocked>) -> tensor<16xf32, #blocked>\n+      %88 = arith.subf %arg20, %87 : tensor<16xf32, #blocked>\n+      %89 = math.exp %88 : tensor<16xf32, #blocked>\n+      %90 = arith.subf %85, %87 : tensor<16xf32, #blocked>\n+      %91 = math.exp %90 : tensor<16xf32, #blocked>\n+      %92 = arith.mulf %89, %arg19 : tensor<16xf32, #blocked>\n+      %93 = arith.mulf %91, %77 : tensor<16xf32, #blocked>\n+      %94 = arith.addf %92, %93 : tensor<16xf32, #blocked>\n+      %95 = arith.divf %91, %94 : tensor<16xf32, #blocked>\n+      %96 = arith.divf %arg19, %94 : tensor<16xf32, #blocked>\n+      %97 = arith.mulf %96, %89 : tensor<16xf32, #blocked>\n+      %98 = triton_gpu.convert_layout %97 : (tensor<16xf32, #blocked>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+      %99 = tt.expand_dims %98 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16x1xf32, #blocked2>\n+      %100 = triton_gpu.convert_layout %99 : (tensor<16x1xf32, #blocked2>) -> tensor<16x1xf32, #blocked1>\n+      %101 = tt.broadcast %100 : (tensor<16x1xf32, #blocked1>) -> tensor<16x16xf32, #blocked1>\n+      %102 = arith.mulf %arg18, %101 : tensor<16x16xf32, #blocked1>\n+      %103 = triton_gpu.convert_layout %95 : (tensor<16xf32, #blocked>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+      %104 = tt.expand_dims %103 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16x1xf32, #blocked2>\n+      %105 = triton_gpu.convert_layout %104 : (tensor<16x1xf32, #blocked2>) -> tensor<16x1xf32, #blocked1>\n+      %106 = tt.broadcast %105 : (tensor<16x1xf32, #blocked1>) -> tensor<16x16xf32, #blocked1>\n+      %107 = arith.extf %69 : tensor<16x16xf16, #blocked1> to tensor<16x16xf32, #blocked1>\n+      %108 = arith.mulf %107, %106 : tensor<16x16xf32, #blocked1>\n+      %109 = arith.addf %102, %108 : tensor<16x16xf32, #blocked1>\n+      scf.yield %109, %94, %87 : tensor<16x16xf32, #blocked1>, tensor<16xf32, #blocked>, tensor<16xf32, #blocked>\n+    }\n+    %36 = arith.muli %2, %arg14 : i32\n+    %37 = arith.muli %3, %arg15 : i32\n+    %38 = arith.addi %36, %37 : i32\n+    %39 = triton_gpu.convert_layout %7 : (tensor<16xi32, #blocked>) -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+    %40 = tt.expand_dims %39 {axis = 1 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16x1xi32, #blocked2>\n+    %41 = triton_gpu.convert_layout %40 : (tensor<16x1xi32, #blocked2>) -> tensor<16x1xi32, #blocked1>\n+    %42 = tt.splat %arg16 : (i32) -> tensor<16x1xi32, #blocked1>\n+    %43 = arith.muli %41, %42 : tensor<16x1xi32, #blocked1>\n+    %44 = triton_gpu.convert_layout %4 : (tensor<16xi32, #blocked>) -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+    %45 = tt.expand_dims %44 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x16xi32, #blocked3>\n+    %46 = tt.broadcast %43 : (tensor<16x1xi32, #blocked1>) -> tensor<16x16xi32, #blocked1>\n+    %47 = tt.broadcast %45 : (tensor<1x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked3>\n+    %48 = triton_gpu.convert_layout %47 : (tensor<16x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked1>\n+    %49 = arith.addi %46, %48 : tensor<16x16xi32, #blocked1>\n+    %50 = tt.splat %38 : (i32) -> tensor<16x16xi32, #blocked1>\n+    %51 = arith.addi %50, %49 : tensor<16x16xi32, #blocked1>\n+    %52 = tt.splat %arg13 : (!tt.ptr<f16>) -> tensor<16x16x!tt.ptr<f16>, #blocked1>\n+    %53 = tt.addptr %52, %51 : tensor<16x16x!tt.ptr<f16>, #blocked1>, tensor<16x16xi32, #blocked1>\n+    %54 = \"triton_gpu.cmpi\"(%41, %cst_3) <{predicate = 2 : i64}> : (tensor<16x1xi32, #blocked1>, tensor<16x1xi32, #blocked1>) -> tensor<16x1xi1, #blocked1>\n+    %55 = tt.broadcast %54 : (tensor<16x1xi1, #blocked1>) -> tensor<16x16xi1, #blocked1>\n+    %56 = arith.truncf %35#0 : tensor<16x16xf32, #blocked1> to tensor<16x16xf16, #blocked1>\n+    %57 = triton_gpu.convert_layout %53 : (tensor<16x16x!tt.ptr<f16>, #blocked1>) -> tensor<16x16x!tt.ptr<f16>, #blocked4>\n+    %58 = triton_gpu.convert_layout %56 : (tensor<16x16xf16, #blocked1>) -> tensor<16x16xf16, #blocked4>\n+    %59 = triton_gpu.convert_layout %55 : (tensor<16x16xi1, #blocked1>) -> tensor<16x16xi1, #blocked4>\n+    tt.store %57, %58, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<16x16xf16, #blocked4>\n+    tt.return\n+  }\n+}\n+\n+// -----\n+\n+// Check if MoveConvertOutOfLoop hangs because of adding additional conversions\n+// CHECK-LABEL: loop_print\n+// CHECK-NOT: triton_gpu.convert_layout\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>\n+#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n+#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>\n+#blocked5 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  tt.func public @loop_print(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {\n+    %c32_i32 = arith.constant 32 : i32\n+    %c31_i32 = arith.constant 31 : i32\n+    %c0_i32 = arith.constant 0 : i32\n+    %c1_i32 = arith.constant 1 : i32\n+    %cst = arith.constant dense<32> : tensor<32x128xi32, #blocked>\n+    %cst_0 = arith.constant dense<32> : tensor<128x32xi32, #blocked1>\n+    %cst_1 = arith.constant 0.000000e+00 : f32\n+    %0 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2>\n+    %1 = triton_gpu.convert_layout %0 : (tensor<128xi32, #blocked2>) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+    %2 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n+    %3 = tt.splat %arg6 : (i32) -> tensor<128x1xi32, #blocked1>\n+    %4 = arith.muli %2, %3 : tensor<128x1xi32, #blocked1>\n+    %5 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked2>\n+    %6 = triton_gpu.convert_layout %5 : (tensor<32xi32, #blocked2>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+    %7 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3>\n+    %8 = tt.broadcast %4 : (tensor<128x1xi32, #blocked1>) -> tensor<128x32xi32, #blocked1>\n+    %9 = tt.broadcast %7 : (tensor<1x32xi32, #blocked3>) -> tensor<128x32xi32, #blocked3>\n+    %10 = triton_gpu.convert_layout %9 : (tensor<128x32xi32, #blocked3>) -> tensor<128x32xi32, #blocked1>\n+    %11 = arith.addi %8, %10 : tensor<128x32xi32, #blocked1>\n+    %12 = triton_gpu.convert_layout %5 : (tensor<32xi32, #blocked2>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>\n+    %14 = triton_gpu.convert_layout %13 : (tensor<32x1xi32, #blocked1>) -> tensor<32x1xi32, #blocked>\n+    %15 = triton_gpu.convert_layout %0 : (tensor<128xi32, #blocked2>) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+    %16 = tt.expand_dims %15 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x128xi32, #blocked3>\n+    %17 = tt.broadcast %14 : (tensor<32x1xi32, #blocked>) -> tensor<32x128xi32, #blocked>\n+    %18 = tt.broadcast %16 : (tensor<1x128xi32, #blocked3>) -> tensor<32x128xi32, #blocked3>\n+    %19 = triton_gpu.convert_layout %18 : (tensor<32x128xi32, #blocked3>) -> tensor<32x128xi32, #blocked>\n+    %20 = arith.addi %17, %19 : tensor<32x128xi32, #blocked>\n+    %21 = arith.addi %arg5, %c31_i32 : i32\n+    %22 = arith.divsi %21, %c32_i32 : i32\n+    %23 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x32x!tt.ptr<f16>, #blocked1>\n+    %24 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x128x!tt.ptr<f16>, #blocked>\n+    %25:3 = scf.for %arg7 = %c0_i32 to %22 step %c1_i32 iter_args(%arg8 = %cst_1, %arg9 = %11, %arg10 = %20) -> (f32, tensor<128x32xi32, #blocked1>, tensor<32x128xi32, #blocked>)  : i32 {\n+      tt.print \"a_offsets: \" : %arg9 : tensor<128x32xi32, #blocked1>\n+      %27 = tt.addptr %23, %arg9 : tensor<128x32x!tt.ptr<f16>, #blocked1>, tensor<128x32xi32, #blocked1>\n+      %28 = triton_gpu.convert_layout %27 : (tensor<128x32x!tt.ptr<f16>, #blocked1>) -> tensor<128x32x!tt.ptr<f16>, #blocked4>\n+      %29 = tt.load %28 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #blocked4>\n+      %30 = triton_gpu.convert_layout %29 : (tensor<128x32xf16, #blocked4>) -> tensor<128x32xf16, #blocked1>\n+      %31 = tt.addptr %24, %arg10 : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked>\n+      %32 = triton_gpu.convert_layout %31 : (tensor<32x128x!tt.ptr<f16>, #blocked>) -> tensor<32x128x!tt.ptr<f16>, #blocked5>\n+      %33 = tt.load %32 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #blocked5>\n+      %34 = triton_gpu.convert_layout %33 : (tensor<32x128xf16, #blocked5>) -> tensor<32x128xf16, #blocked>\n+      %35 = \"tt.reduce\"(%30) <{axis = 0 : i32}> ({\n+      ^bb0(%arg11: f16, %arg12: f16):\n+        %46 = arith.addf %arg11, %arg12 : f16\n+        tt.reduce.return %46 : f16\n+      }) : (tensor<128x32xf16, #blocked1>) -> tensor<32xf16, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n+      %36 = triton_gpu.convert_layout %35 : (tensor<32xf16, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<32xf16, #blocked2>\n+      %37 = \"tt.reduce\"(%36) <{axis = 0 : i32}> ({\n+      ^bb0(%arg11: f16, %arg12: f16):\n+        %46 = arith.addf %arg11, %arg12 : f16\n+        tt.reduce.return %46 : f16\n+      }) : (tensor<32xf16, #blocked2>) -> f16\n+      %38 = \"tt.reduce\"(%34) <{axis = 0 : i32}> ({\n+      ^bb0(%arg11: f16, %arg12: f16):\n+        %46 = arith.addf %arg11, %arg12 : f16\n+        tt.reduce.return %46 : f16\n+      }) : (tensor<32x128xf16, #blocked>) -> tensor<128xf16, #triton_gpu.slice<{dim = 0, parent = #blocked}>>\n+      %39 = triton_gpu.convert_layout %38 : (tensor<128xf16, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<128xf16, #blocked2>\n+      %40 = \"tt.reduce\"(%39) <{axis = 0 : i32}> ({\n+      ^bb0(%arg11: f16, %arg12: f16):\n+        %46 = arith.addf %arg11, %arg12 : f16\n+        tt.reduce.return %46 : f16\n+      }) : (tensor<128xf16, #blocked2>) -> f16\n+      %41 = arith.addf %37, %40 : f16\n+      %42 = arith.extf %41 : f16 to f32\n+      %43 = arith.addf %arg8, %42 : f32\n+      %44 = arith.addi %arg9, %cst_0 : tensor<128x32xi32, #blocked1>\n+      %45 = arith.addi %arg10, %cst : tensor<32x128xi32, #blocked>\n+      scf.yield %43, %44, %45 : f32, tensor<128x32xi32, #blocked1>, tensor<32x128xi32, #blocked>\n+    }\n+    %26 = arith.truncf %25#0 : f32 to f16\n+    tt.store %arg2, %26 {cache = 1 : i32, evict = 1 : i32} : f16\n+    tt.return\n+  }\n+}\n+\n+// -----\n+\n+// Check if SimplifyReduceCvt handles the cvt,reduce->reduce,cvt conversion but not the general push forward conversion\n+// CHECK-LABEL: reduce_cvt3\n+// CHECK: tt.dot\n+// CHECK-NEXT: tt.reduce\n+// CHECK: triton_gpu.convert_layout\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n+#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>\n+#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>\n+#blocked5 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>\n+#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>\n+#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  tt.func public @reduce_cvt3(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {\n+    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked>\n+    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked>\n+    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1>\n+    %1 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+    %2 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xi32, #blocked2>\n+    %3 = triton_gpu.convert_layout %2 : (tensor<32x1xi32, #blocked2>) -> tensor<32x1xi32, #blocked>\n+    %4 = arith.muli %3, %cst_0 : tensor<32x1xi32, #blocked>\n+    %5 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked>\n+    %6 = tt.addptr %5, %4 : tensor<32x1x!tt.ptr<f16>, #blocked>, tensor<32x1xi32, #blocked>\n+    %7 = triton_gpu.convert_layout %0 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3>\n+    %9 = tt.broadcast %6 : (tensor<32x1x!tt.ptr<f16>, #blocked>) -> tensor<32x32x!tt.ptr<f16>, #blocked>\n+    %10 = tt.broadcast %8 : (tensor<1x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked3>\n+    %11 = triton_gpu.convert_layout %10 : (tensor<32x32xi32, #blocked3>) -> tensor<32x32xi32, #blocked>\n+    %12 = tt.addptr %9, %11 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>\n+    %13 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked>\n+    %14 = tt.addptr %13, %4 : tensor<32x1x!tt.ptr<f16>, #blocked>, tensor<32x1xi32, #blocked>\n+    %15 = tt.broadcast %14 : (tensor<32x1x!tt.ptr<f16>, #blocked>) -> tensor<32x32x!tt.ptr<f16>, #blocked>\n+    %16 = tt.addptr %15, %11 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked>\n+    %17 = triton_gpu.convert_layout %12 : (tensor<32x32x!tt.ptr<f16>, #blocked>) -> tensor<32x32x!tt.ptr<f16>, #blocked4>\n+    %18 = tt.load %17 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16, #blocked4>\n+    %19 = triton_gpu.convert_layout %18 : (tensor<32x32xf16, #blocked4>) -> tensor<32x32xf16, #blocked>\n+    %20 = triton_gpu.convert_layout %16 : (tensor<32x32x!tt.ptr<f16>, #blocked>) -> tensor<32x32x!tt.ptr<f16>, #blocked4>\n+    %21 = tt.load %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf16, #blocked4>\n+    %22 = triton_gpu.convert_layout %21 : (tensor<32x32xf16, #blocked4>) -> tensor<32x32xf16, #blocked>\n+    %23 = triton_gpu.convert_layout %22 : (tensor<32x32xf16, #blocked>) -> tensor<32x32xf16, #shared>\n+    %24 = tt.trans %23 : (tensor<32x32xf16, #shared>) -> tensor<32x32xf16, #shared1>\n+    %25 = triton_gpu.convert_layout %24 : (tensor<32x32xf16, #shared1>) -> tensor<32x32xf16, #blocked>\n+    %26 = triton_gpu.convert_layout %19 : (tensor<32x32xf16, #blocked>) -> tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked5}>>\n+    %27 = triton_gpu.convert_layout %25 : (tensor<32x32xf16, #blocked>) -> tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked5}>>\n+    %28 = triton_gpu.convert_layout %cst : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #blocked5>\n+    %29 = tt.dot %26, %27, %28 {allowTF32 = true} : tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked5}>> * tensor<32x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked5}>> -> tensor<32x32xf32, #blocked5>\n+    %30 = triton_gpu.convert_layout %29 : (tensor<32x32xf32, #blocked5>) -> tensor<32x32xf32, #blocked>\n+    %31:2 = \"tt.reduce\"(%30, %11) <{axis = 1 : i32}> ({\n+    ^bb0(%arg3: f32, %arg4: i32, %arg5: f32, %arg6: i32):\n+      %37 = \"triton_gpu.cmpf\"(%arg3, %arg5) <{predicate = 1 : i64}> : (f32, f32) -> i1\n+      %38 = \"triton_gpu.cmpi\"(%arg4, %arg6) <{predicate = 2 : i64}> : (i32, i32) -> i1\n+      %39 = arith.andi %37, %38 : i1\n+      %40 = \"triton_gpu.cmpf\"(%arg3, %arg5) <{predicate = 2 : i64}> : (f32, f32) -> i1\n+      %41 = arith.ori %40, %39 : i1\n+      %42 = arith.select %41, %arg3, %arg5 : f32\n+      %43 = arith.select %41, %arg4, %arg6 : i32\n+      tt.reduce.return %42, %43 : f32, i32\n+    }) : (tensor<32x32xf32, #blocked>, tensor<32x32xi32, #blocked>) -> (tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>)\n+    %32 = triton_gpu.convert_layout %31#1 : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32xi32, #blocked1>\n+    %33 = tt.splat %arg2 : (!tt.ptr<i32>) -> tensor<32x!tt.ptr<i32>, #blocked1>\n+    %34 = tt.addptr %33, %0 : tensor<32x!tt.ptr<i32>, #blocked1>, tensor<32xi32, #blocked1>\n+    %35 = triton_gpu.convert_layout %34 : (tensor<32x!tt.ptr<i32>, #blocked1>) -> tensor<32x!tt.ptr<i32>, #blocked1>\n+    %36 = triton_gpu.convert_layout %32 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #blocked1>\n+    tt.store %35, %36 {cache = 1 : i32, evict = 1 : i32} : tensor<32xi32, #blocked1>\n+    tt.return\n+  }\n+}"}, {"filename": "test/TritonGPU/dot-operands.mlir", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "file_content_changes": "@@ -184,3 +184,42 @@ tt.func @push_convert_both_operands(\n }\n \n }\n+\n+// -----\n+\n+#blockedA = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n+#blockedB = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 4]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+\n+// CHECK: #[[BA:.*]] = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n+// CHECK: #[[BB:.*]] = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>\n+// CHECK: #[[MMA:.*]] = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 4]}>\n+\n+// CHECK: tt.func @update_kwidth_slice\n+// CHECK: %[[CST:.+]] = arith.constant dense<1.000000e+00> : tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: %[[ALOAD:.*]] = tt.load %{{.*}} {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf16, #[[BA]]>\n+// CHECK: %[[ACVT:.*]] = triton_gpu.convert_layout %[[ALOAD]] : (tensor<16x16xf16, #[[BA]]>) -> tensor<16x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: %[[BLOAD:.*]] = tt.load %{{.*}} {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf16, #[[BB]]>\n+// CHECK: %[[BCVT:.*]] = triton_gpu.convert_layout %[[BLOAD]] : (tensor<16x16xf16, #[[BB]]>) -> tensor<16x16xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: %[[AEXT:.*]] = arith.extf %[[ACVT]] : tensor<16x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #[[MMA]], kWidth = 2}>> to tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: %[[BEXT:.*]] = arith.extf %[[BCVT]] : tensor<16x16xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>> to tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: %[[ADD:.+]] = arith.addf %[[BEXT]], %[[CST]] : tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>>\n+// CHECK: tt.dot %[[AEXT]], %[[ADD]], %{{.*}} {allowTF32 = true} : tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #[[MMA]], kWidth = 2}>> * tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #[[MMA]], kWidth = 2}>> -> tensor<16x16xf32, #mma>\n+tt.func @update_kwidth_slice(\n+                   %pa: tensor<16x16x!tt.ptr<f16>, #blockedA> {tt.divisibility=16: i32, tt.contiguity=2 : i32},\n+                   %pb: tensor<16x16x!tt.ptr<f16>, #blockedB> {tt.divisibility=16: i32, tt.contiguity=2 : i32},\n+                   %c: tensor<16x16xf32, #mma>) -> tensor<16x16xf32, #mma>{\n+  %cst = arith.constant dense<1.000000e+00> : tensor<16x16xf32, #blockedB>\n+  %a = tt.load %pa {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf16, #blockedA>\n+  %b = tt.load %pb {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf16, #blockedB>\n+  %ae = arith.extf %a : tensor<16x16xf16, #blockedA> to tensor<16x16xf32, #blockedA>\n+  %be = arith.extf %b : tensor<16x16xf16, #blockedB> to tensor<16x16xf32, #blockedB>\n+  %add = arith.addf %be, %cst : tensor<16x16xf32, #blockedB>\n+  %al = triton_gpu.convert_layout %ae : (tensor<16x16xf32, #blockedA>) -> tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>\n+  %bl = triton_gpu.convert_layout %add : (tensor<16x16xf32, #blockedB>) -> tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>\n+  %r = tt.dot %al, %bl, %c {allowTF32 = true} : tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<16x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<16x16xf32, #mma>\n+  tt.return %r : tensor<16x16xf32, #mma>\n+}\n+\n+}"}, {"filename": "test/TritonGPU/loop-pipeline.mlir", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "file_content_changes": "@@ -432,3 +432,68 @@ tt.func @cross_iter_dep(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32},\n   }\n   tt.return %119#0 : tensor<32x32xf32, #C>\n }\n+\n+// CHECK: tt.func @dep_arg_two_uses\n+// CHECK: tt.expand_dims\n+// CHECK: tt.expand_dims\n+// CHECK: tt.expand_dims %arg5\n+// CHECK-NEXT: tt.expand_dims %arg5\n+// CHECK: %[[PTR0:.*]] = tt.splat %arg6\n+// CHECK: %[[PTR1:.*]] = tt.addptr %[[PTR0]]\n+// CHECK-NEXT: tt.load %[[PTR1]]\n+tt.func @dep_arg_two_uses(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32},\n+                          %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32},\n+                          %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}) -> tensor<128x128xf32, #C> {\n+  %23 = arith.constant 100 : index\n+  %c64 = arith.constant 64 : i64\n+  %56 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+  %57 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+  %58 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #BL}>>\n+  %83 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+  %85 = tt.splat %c64 : (i64) -> tensor<1x32xi64, #AL>\n+  %86 = tt.splat %c64 : (i64) -> tensor<1x32xi64, #AL>\n+  %68 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x32x!tt.ptr<f16>, #AL>\n+  %c32_index = arith.constant 32 : index\n+  %c32_i32 = arith.index_cast %c32_index : index to i32\n+  %80 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<32x128x!tt.ptr<f16>, #BL>\n+  %cst_6 = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #BL>\n+  %88 = arith.truncf %cst_6 : tensor<32x128xf32, #BL> to tensor<32x128xf16, #BL>\n+  %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #C>\n+  %90 = tt.splat %c64 : (i64) -> tensor<32x128xi64, #BL>\n+  %92 = tt.addptr %arg1, %c32_i32 : !tt.ptr<i32>, i32\n+  %c0_index = arith.constant 0 : index\n+  %91:5 = scf.for %arg19 = %c0_index to %23 step %c32_index iter_args(%arg20 = %68, %arg21 = %83, %arg22 = %92, %arg23 = %cst, %arg24 = %80) -> (tensor<128x32x!tt.ptr<f16>, #AL>, tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>, !tt.ptr<i32>, tensor<128x128xf32, #C>, tensor<32x128x!tt.ptr<f16>, #BL>)   {\n+    %1750 = arith.subi %23, %arg19 : index\n+    %175 = arith.index_cast %1750 : index to i32\n+    %176 = tt.splat %175 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+    %177 = tt.splat %175 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #BL}>>\n+    %178 = \"triton_gpu.cmpi\"(%57, %176) <{predicate = 2 : i64}> : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>, tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>) -> tensor<32xi1, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+    %179 = \"triton_gpu.cmpi\"(%58, %177) <{predicate = 2 : i64}> : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #BL}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #BL}>>) -> tensor<32xi1, #triton_gpu.slice<{dim = 1, parent = #BL}>>\n+    %180 = tt.expand_dims %178 {axis = 0 : i32} : (tensor<32xi1, #triton_gpu.slice<{dim = 0, parent = #AL}>>) -> tensor<1x32xi1, #AL>\n+    %181 = tt.expand_dims %179 {axis = 1 : i32} : (tensor<32xi1, #triton_gpu.slice<{dim = 1, parent = #BL}>>) -> tensor<32x1xi1, #BL>\n+    %182 = tt.expand_dims %arg21 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>) -> tensor<1x32xi32, #AL>\n+    %183 = tt.expand_dims %arg21 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>) -> tensor<1x32xi32, #AL>\n+    %184 = arith.extsi %182 : tensor<1x32xi32, #AL> to tensor<1x32xi64, #AL>\n+    %185 = arith.extsi %183 : tensor<1x32xi32, #AL> to tensor<1x32xi64, #AL>\n+    %186 = arith.muli %184, %85 : tensor<1x32xi64, #AL>\n+    %187 = arith.muli %185, %86 : tensor<1x32xi64, #AL>\n+    %188 = tt.broadcast %186 : (tensor<1x32xi64, #AL>) -> tensor<128x32xi64, #AL>\n+    %189 = tt.broadcast %187 : (tensor<1x32xi64, #AL>) -> tensor<128x32xi64, #AL>\n+    %190 = tt.addptr %arg20, %188 : tensor<128x32x!tt.ptr<f16>, #AL>, tensor<128x32xi64, #AL>\n+    %191 = tt.addptr %arg20, %189 : tensor<128x32x!tt.ptr<f16>, #AL>, tensor<128x32xi64, #AL>\n+    %192 = tt.broadcast %180 : (tensor<1x32xi1, #AL>) -> tensor<128x32xi1, #AL>\n+    %193 = tt.load %191, %192 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16, #AL>\n+    %194 = tt.splat %arg22 : (!tt.ptr<i32>) -> tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+    %195 = tt.addptr %194, %56 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 0, parent = #AL}>>, tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+    %196 = tt.load %195 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>\n+    %197 = tt.addptr %arg22, %c32_i32 : !tt.ptr<i32>, i32\n+    %198 = tt.broadcast %181 : (tensor<32x1xi1, #BL>) -> tensor<32x128xi1, #BL>\n+    %199 = tt.load %arg24, %198, %88 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16, #BL>\n+    %200 = triton_gpu.convert_layout %193 : (tensor<128x32xf16, #AL>) -> tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #C, kWidth = 2}>>\n+    %201 = triton_gpu.convert_layout %199 : (tensor<32x128xf16, #BL>) -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #C, kWidth = 2}>>\n+    %202 = tt.dot %200, %201, %arg23 {allowTF32 = true} : tensor<128x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #C, kWidth = 2}>> * tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #C, kWidth = 2}>> -> tensor<128x128xf32, #C>\n+    %203 = tt.addptr %arg24, %90 : tensor<32x128x!tt.ptr<f16>, #BL>, tensor<32x128xi64, #BL>\n+    scf.yield %190, %196, %197, %202, %203 : tensor<128x32x!tt.ptr<f16>, #AL>, tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #AL}>>, !tt.ptr<i32>, tensor<128x128xf32, #C>, tensor<32x128x!tt.ptr<f16>, #BL>\n+  }\n+  tt.return %91#3 : tensor<128x128xf32, #C>\n+}"}, {"filename": "test/TritonGPU/reorder-instructions.mlir", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "file_content_changes": "@@ -0,0 +1,32 @@\n+// RUN: triton-opt %s -split-input-file -tritongpu-reorder-instructions | FileCheck %s\n+\n+// check that we don't hoist convert_layout above its operand definition.\n+// CHECK-LABEL: convert_cannot_hoist\n+//       CHECK:   %[[CVTS:.+]] = triton_gpu.convert_layout\n+//       CHECK:   triton_gpu.convert_layout %[[CVTS]]\n+//       CHECK:   tt.dot\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1]}>\n+#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2]}>\n+#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [0, 1]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  tt.func public @convert_cannot_hoist(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}) attributes {noinline = false} {\n+    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>\n+    %cst_0 = arith.constant dense<1.230000e+02> : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>\n+    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>\n+    %1 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>\n+    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>\n+    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>\n+    %4 = tt.broadcast %1 : (tensor<32x1xi32, #blocked>) -> tensor<32x32xi32, #blocked>\n+    %5 = tt.broadcast %3 : (tensor<1x32xi32, #blocked>) -> tensor<32x32xi32, #blocked>\n+    %6 = arith.addi %4, %5 : tensor<32x32xi32, #blocked>\n+    %7 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x32x!tt.ptr<f32>, #blocked>\n+    %8 = tt.addptr %7, %6 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked>\n+    %9 = tt.load %8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x32xf32, #blocked>\n+    %10 = triton_gpu.convert_layout %9 : (tensor<32x32xf32, #blocked>) -> tensor<32x32xf32, #shared>\n+    %11 = triton_gpu.convert_layout %10 : (tensor<32x32xf32, #shared>) -> tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>\n+    %12 = tt.dot %11, %cst_0, %cst {allowTF32 = true} : tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<32x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<32x32xf32, #mma>\n+    %13 = triton_gpu.convert_layout %12 : (tensor<32x32xf32, #mma>) -> tensor<32x32xf32, #blocked>\n+    tt.store %8, %13 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32, #blocked>\n+    tt.return\n+  }\n+}"}]