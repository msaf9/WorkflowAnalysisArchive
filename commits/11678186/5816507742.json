[{"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "file_content_changes": "@@ -60,7 +60,7 @@ class DependenciesFinder(ast.NodeVisitor):\n \n     def __init__(self, globals, src) -> None:\n         super().__init__()\n-        self.ret = hashlib.md5(src.encode(\"utf-8\")).hexdigest()\n+        self.ret = hashlib.sha1(src.encode(\"utf-8\")).hexdigest()\n         self.globals = globals\n \n     def visit_Name(self, node):\n@@ -90,7 +90,7 @@ def visit_Call(self, node):\n             func.hash = finder.ret\n         noinline = str(getattr(func, 'noinline', False))\n         self.ret = (self.ret + func.hash + noinline).encode(\"utf-8\")\n-        self.ret = hashlib.md5(self.ret).hexdigest()\n+        self.ret = hashlib.sha1(self.ret).hexdigest()\n \n # -----------------------------------------------------------------------------\n # JITFunction\n@@ -103,23 +103,29 @@ def version_key():\n     contents = []\n     # frontend\n     with open(__file__, \"rb\") as f:\n-        contents += [hashlib.md5(f.read()).hexdigest()]\n+        contents += [hashlib.sha1(f.read()).hexdigest()]\n     # compiler\n     compiler_path = os.path.join(TRITON_PATH, 'compiler')\n     for lib in pkgutil.iter_modules([compiler_path]):\n         with open(lib.module_finder.find_spec(lib.name).origin, \"rb\") as f:\n-            contents += [hashlib.md5(f.read()).hexdigest()]\n+            contents += [hashlib.sha1(f.read()).hexdigest()]\n     # backend\n+    libtriton_hash = hashlib.sha1()\n     with open(os.path.join(TRITON_PATH, \"_C/libtriton.so\"), \"rb\") as f:\n-        contents += [hashlib.md5(f.read()).hexdigest()]\n+        while True:\n+            chunk = f.read(1024 ** 2)\n+            if not chunk:\n+                break\n+            libtriton_hash.update(chunk)\n+    contents.append(libtriton_hash.hexdigest())\n     # language\n     language_path = os.path.join(TRITON_PATH, 'language')\n     for lib in pkgutil.iter_modules([language_path]):\n         with open(lib.module_finder.find_spec(lib.name).origin, \"rb\") as f:\n-            contents += [hashlib.md5(f.read()).hexdigest()]\n+            contents += [hashlib.sha1(f.read()).hexdigest()]\n     # ptxas version\n     ptxas = path_to_ptxas()[0]\n-    ptxas_version = hashlib.md5(subprocess.check_output([ptxas, \"--version\"])).hexdigest()\n+    ptxas_version = hashlib.sha1(subprocess.check_output([ptxas, \"--version\"])).hexdigest()\n     return '-'.join(TRITON_VERSION) + '-' + ptxas_version + '-' + '-'.join(contents)\n \n "}]