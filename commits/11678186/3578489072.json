[{"filename": "python/tutorials/flash-attention-master.ptx", "status": "removed", "additions": 0, "deletions": 3111, "changes": 3111, "file_content_changes": "N/A"}, {"filename": "python/tutorials/flash-attention.ptx", "status": "removed", "additions": 0, "deletions": 3436, "changes": 3436, "file_content_changes": "N/A"}, {"filename": "python/tutorials/flash-attention.ttgir", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "file_content_changes": "@@ -1,148 +0,0 @@\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#blocked2 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [4, 1]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func public @_fwd_kernel_0d1d2d34d5d6d7d8d9d10d11c12d13d14d15c16d17d18d19c20d21d22d23c242526d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}, %arg19: i32 {tt.divisibility = 16 : i32}, %arg20: i32, %arg21: i32, %arg22: i32 {tt.divisibility = 16 : i32}) {\n-    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma>\n-    %cst_0 = arith.constant dense<0> : tensor<128x128xi32, #mma>\n-    %cst_1 = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma>\n-    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma>\n-    %c1_i32 = arith.constant 1 : i32\n-    %c0 = arith.constant 0 : index\n-    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %cst_4 = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %c128 = arith.constant 128 : index\n-    %c128_i32 = arith.constant 128 : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = tt.get_program_id {axis = 1 : i32} : i32\n-    %2 = arith.muli %0, %c128_i32 : i32\n-    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked0>\n-    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %6 = tt.splat %2 : (i32) -> tensor<128xi32, #blocked0>\n-    %7 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %8 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %9 = arith.addi %6, %3 : tensor<128xi32, #blocked0>\n-    %10 = arith.muli %1, %arg9 : i32\n-    %11 = arith.addi %8, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %12 = tt.splat %arg10 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %13 = tt.splat %10 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n-    %15 = tt.expand_dims %14 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x64xi32, #blocked1>\n-    %16 = tt.broadcast %15 : (tensor<1x64xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %17 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>\n-    %18 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>\n-    %19 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>) -> tensor<1x128xi32, #mma>\n-    %20 = tt.splat %arg13 : (i32) -> tensor<1x128xi32, #blocked2>\n-    %21 = tt.splat %10 : (i32) -> tensor<1x128xi32, #blocked2>\n-    %22 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %23 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x128xi32, #blocked2>\n-    %24 = arith.muli %23, %20 : tensor<1x128xi32, #blocked2>\n-    %25 = arith.addi %21, %24 : tensor<1x128xi32, #blocked2>\n-    %26 = tt.broadcast %25 : (tensor<1x128xi32, #blocked2>) -> tensor<64x128xi32, #blocked2>\n-    %27 = tt.expand_dims %22 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2>\n-    %28 = tt.broadcast %27 : (tensor<64x1xi32, #blocked2>) -> tensor<64x128xi32, #blocked2>\n-    %29 = arith.addi %26, %28 : tensor<64x128xi32, #blocked2>\n-    %30 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %31 = arith.muli %30, %12 : tensor<128x1xi32, #blocked1>\n-    %32 = arith.addi %13, %31 : tensor<128x1xi32, #blocked1>\n-    %33 = tt.broadcast %32 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %34 = arith.addi %33, %16 : tensor<128x64xi32, #blocked1>\n-    %35 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %36 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<64x128x!tt.ptr<f16>, #blocked2>\n-    %37 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %38 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %39 = arith.muli %38, %12 : tensor<128x1xi32, #blocked1>\n-    %40 = arith.addi %13, %39 : tensor<128x1xi32, #blocked1>\n-    %41 = tt.broadcast %40 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %42 = arith.addi %41, %16 : tensor<128x64xi32, #blocked1>\n-    %43 = tt.addptr %35, %42 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %44 = tt.load %43 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked1>\n-    %45 = arith.addi %0, %c1_i32 : i32\n-    %46 = arith.muli %45, %c128_i32 : i32\n-    %47 = arith.index_cast %46 : i32 to index\n-    %48 = tt.splat %arg3 : (f32) -> tensor<128x128xf32, #mma>\n-    %49 = arith.addi %7, %4 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %50 = tt.expand_dims %49 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xi32, #mma>\n-    %51 = tt.broadcast %50 : (tensor<128x1xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %52 = arith.sitofp %cst_0 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %53 = triton_gpu.convert_layout %44 : (tensor<128x64xf16, #blocked1>) -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>\n-    %54:3 = scf.for %arg23 = %c0 to %47 step %c128 iter_args(%arg24 = %cst_2, %arg25 = %cst_3, %arg26 = %cst_4) -> (tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) {\n-      %75 = arith.index_cast %arg23 : index to i32\n-      %76 = arith.muli %75, %arg13 : i32\n-      %77 = tt.splat %76 : (i32) -> tensor<64x128xi32, #blocked2>\n-      %78 = arith.addi %29, %77 : tensor<64x128xi32, #blocked2>\n-      %79 = tt.addptr %36, %78 : tensor<64x128x!tt.ptr<f16>, #blocked2>\n-      %80 = tt.load %79 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x128xf16, #blocked2>\n-      %81 = triton_gpu.convert_layout %80 : (tensor<64x128xf16, #blocked2>) -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>\n-      %82 = tt.dot %53, %81, %cst {allowTF32 = true, transA = false, transB = false} : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x128xf32, #mma>\n-      %83 = tt.splat %75 : (i32) -> tensor<1x128xi32, #mma>\n-      %84 = arith.addi %83, %19 : tensor<1x128xi32, #mma>\n-      %85 = tt.broadcast %84 : (tensor<1x128xi32, #mma>) -> tensor<128x128xi32, #mma>\n-      %86 = \"triton_gpu.cmpi\"(%51, %85) {predicate = 5 : i64} : (tensor<128x128xi32, #mma>, tensor<128x128xi32, #mma>) -> tensor<128x128xi1, #mma>\n-      %87 = \"triton_gpu.select\"(%86, %52, %cst_1) : (tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma>, tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %88 = arith.mulf %82, %48 : tensor<128x128xf32, #mma>\n-      %89 = arith.addf %88, %87 : tensor<128x128xf32, #mma>\n-      %90 = tt.reduce %89 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %91 = tt.expand_dims %90 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %92 = tt.broadcast %91 : (tensor<128x1xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %93 = arith.subf %89, %92 : tensor<128x128xf32, #mma>\n-      %94 = math.exp %93 : tensor<128x128xf32, #mma>\n-      %95 = tt.reduce %94 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %96 = \"triton_gpu.cmpf\"(%arg26, %90) {predicate = 2 : i64} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %97 = \"triton_gpu.select\"(%96, %arg26, %90) : (tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %98 = arith.subf %90, %97 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %99 = math.exp %98 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %100 = arith.mulf %99, %95 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %101 = arith.subf %arg26, %97 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %102 = math.exp %101 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %103 = arith.mulf %102, %arg25 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %104 = arith.addf %103, %100 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %105 = arith.divf %arg25, %104 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %106 = arith.mulf %105, %102 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %107 = arith.muli %75, %arg16 : i32\n-      %108 = tt.splat %107 : (i32) -> tensor<128x64xi32, #blocked1>\n-      %109 = arith.addi %34, %108 : tensor<128x64xi32, #blocked1>\n-      %110 = tt.addptr %37, %109 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-      %111 = tt.load %110 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked1>\n-      %112 = tt.expand_dims %106 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %113 = tt.broadcast %112 : (tensor<128x1xf32, #mma>) -> tensor<128x64xf32, #mma>\n-      %114 = arith.mulf %arg24, %113 : tensor<128x64xf32, #mma>\n-      %115 = arith.divf %99, %104 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %116 = tt.expand_dims %115 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %117 = tt.broadcast %116 : (tensor<128x1xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %118 = arith.mulf %94, %117 : tensor<128x128xf32, #mma>\n-      %119 = arith.truncf %118 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma>\n-      %120 = triton_gpu.convert_layout %119 : (tensor<128x128xf16, #mma>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>\n-      %121 = triton_gpu.convert_layout %111 : (tensor<128x64xf16, #blocked1>) -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>\n-      %122 = tt.dot %120, %121, %114 {allowTF32 = true, transA = false, transB = false} : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x64xf32, #mma>\n-      scf.yield %122, %104, %97 : tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    }\n-    %55 = triton_gpu.convert_layout %54#2 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #blocked0>\n-    %56 = triton_gpu.convert_layout %54#1 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #blocked0>\n-    %57 = triton_gpu.convert_layout %54#0 : (tensor<128x64xf32, #mma>) -> tensor<128x64xf32, #blocked1>\n-    %58 = arith.muli %1, %arg22 : i32\n-    %59 = tt.addptr %arg5, %58 : !tt.ptr<f32>\n-    %60 = tt.splat %59 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %61 = tt.addptr %60, %9 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    %62 = tt.addptr %arg6, %58 : !tt.ptr<f32>\n-    %63 = tt.splat %62 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %64 = tt.addptr %63, %9 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    tt.store %61, %56 : tensor<128xf32, #blocked0>\n-    tt.store %64, %55 : tensor<128xf32, #blocked0>\n-    %65 = arith.muli %1, %arg18 : i32\n-    %66 = tt.splat %arg19 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %67 = tt.splat %65 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %68 = tt.splat %arg7 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %69 = arith.muli %38, %66 : tensor<128x1xi32, #blocked1>\n-    %70 = arith.addi %67, %69 : tensor<128x1xi32, #blocked1>\n-    %71 = tt.broadcast %70 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %72 = arith.addi %71, %16 : tensor<128x64xi32, #blocked1>\n-    %73 = tt.addptr %68, %72 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %74 = arith.truncf %57 : tensor<128x64xf32, #blocked1> to tensor<128x64xf16, #blocked1>\n-    tt.store %73, %74 : tensor<128x64xf16, #blocked1>\n-    return\n-  }\n-}\n-"}]