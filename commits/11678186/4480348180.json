[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "file_content_changes": "@@ -1963,21 +1963,24 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n # -----------------------\n \n \n-def test_for_iv_int64():\n+@pytest.mark.parametrize(\"lo, hi, iv\", [(2**35, 2**35 + 20, 1), (2**35, 2**35 + 20, 2), (2**35, 2**35 + 20, 3),\n+                                        (15, -16, -1), (15, -16, -2), (15, -16, -3),\n+                                        (-18, -22, -1), (22, 18, -1)])\n+def test_for_iv(lo, hi, iv):\n \n     @triton.jit\n-    def kernel(Out, lo, hi):\n+    def kernel(Out, lo, hi, iv: tl.constexpr):\n         acc = 0\n         acc = acc.to(tl.int64)\n-        for i in range(lo, hi):\n+        for i in range(lo, hi, iv):\n             acc += i\n         tl.store(Out, acc)\n \n     lo = 2**35\n     hi = 2**35 + 20\n     out = to_triton(np.zeros((1,), dtype=np.int64), device='cuda')\n-    kernel[(1,)](out, lo, hi)\n-    assert out[0] == sum(range(lo, hi))\n+    kernel[(1,)](out, lo, hi, iv)\n+    assert out[0] == sum(range(lo, hi, iv))\n \n \n def test_if_else():"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -771,6 +771,7 @@ def visit_For(self, node):\n             iv = for_op.get_induction_var()\n             if negative_step:\n                 iv = self.builder.create_sub(ub, iv)\n+                iv = self.builder.create_add(iv, lb)\n             self.lscope[node.target.id].handle.replace_all_uses_with(iv)\n             self.set_value(node.target.id, triton.language.core.tensor(iv, iv_type))\n "}]