[{"filename": "python/triton/__init__.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "file_content_changes": "@@ -4,10 +4,6 @@\n # ---------------------------------------\n # Note: import order is significant here.\n \n-# TODO: torch needs to be imported first\n-# or pybind11 shows `munmap_chunk(): invalid pointer`\n-import torch  # noqa: F401\n-\n # submodules\n from .runtime import (\n     autotune,"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -11,8 +11,6 @@\n from pathlib import Path\n from typing import Any, Tuple\n \n-import torch\n-\n import triton\n import triton._C.libtriton.triton as _triton\n from ..runtime import driver\n@@ -324,6 +322,10 @@ def _is_cuda(arch):\n \n \n def get_architecture_descriptor(capability):\n+    try:\n+        import torch\n+    except ImportError:\n+        raise ImportError(\"Triton requires PyTorch to be installed\")\n     if capability is None:\n         if torch.version.hip is None:\n             device = triton.runtime.jit.get_current_device()"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -3,8 +3,6 @@\n from functools import wraps\n from typing import List, Optional, Sequence, Tuple, TypeVar\n \n-import torch\n-\n import triton\n from . import core as tl\n from triton._C.libtriton.triton import ir\n@@ -1183,6 +1181,10 @@ def dot(lhs: tl.tensor,\n         allow_tf32: bool,\n         out_dtype: tl.dtype,\n         builder: ir.builder) -> tl.tensor:\n+    try:\n+        import torch\n+    except ImportError:\n+        raise ImportError(\"Triton requires PyTorch to be installed\")\n     if torch.version.hip is None:\n         device = triton.runtime.jit.get_current_device()\n         capability = triton.runtime.jit.get_device_capability(device)"}]