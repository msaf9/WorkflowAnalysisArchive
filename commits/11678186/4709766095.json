[{"filename": "python/src/extra/cuda.ll", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "file_content_changes": "@@ -9,4 +9,9 @@ define i64 @globaltimer() #0 {\n   ret i64 %1\n }\n \n+define i32 @smid() #0 {\n+  %1 = call i32 asm \"mov.u32 $0, %smid;\", \"=r\"() nounwind\n+  ret i32 %1\n+}\n+\n attributes #0 = { alwaysinline nounwind }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "file_content_changes": "@@ -2335,6 +2335,18 @@ def kernel(Out1, Out2):\n     # 2 inlined globaltimers + one extra in the wrapper extern function\n     assert h.asm[\"ptx\"].count(\"%globaltimer\") == 3\n \n+\n+def test_smid():\n+\n+    @triton.jit\n+    def kernel(Out):\n+        tl.store(Out + tl.program_id(0), tl.extra.cuda.smid())\n+\n+    out = to_triton(np.zeros((1024,), dtype=np.int32), device='cuda')\n+    h = kernel[(out.shape[0],)](out)\n+    assert out.sort()[0].unique().shape[0] > 0\n+    assert h.asm[\"ptx\"].count(\"%smid\") == 2\n+\n # -----------------------\n # test layout conversions\n # -----------------------"}, {"filename": "python/triton/language/extra/cuda.bc", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "file_content_changes": "N/A"}, {"filename": "python/triton/language/extra/cuda.py", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "file_content_changes": "@@ -10,3 +10,10 @@ def globaltimer(_builder=None):\n     return core.extern_elementwise(\"cuda\", os.path.join(__path__, \"cuda.bc\"), [],\n                                    {tuple(): (\"globaltimer\", core.dtype(\"int64\")),\n                                     }, is_pure=False, _builder=_builder)\n+\n+\n+@core.extern\n+def smid(_builder=None):\n+    return core.extern_elementwise(\"cuda\", os.path.join(__path__, \"cuda.bc\"), [],\n+                                   {tuple(): (\"smid\", core.dtype(\"int32\")),\n+                                    }, is_pure=True, _builder=_builder)"}]