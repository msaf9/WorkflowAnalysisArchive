[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1501,7 +1501,7 @@ def kernel(x):\n \n @pytest.mark.parametrize(\"value, value_type\", [\n     (-1, 'i32'), (0, 'i32'), (-2**31, 'i32'), (2**31 - 1, 'i32'),\n-    (2**31, 'u32'), (2**32 - 1, 'u32'), (2**32, 'i64'), (2**63 - 1, 'i64'),\n+    (2**31, 'i64'), (2**32 - 1, 'i64'), (2**32, 'i64'), (2**63 - 1, 'i64'),\n     (-2**63, 'i64'), (2**63, 'u64'), (2**64 - 1, 'u64')\n ])\n def test_value_specialization(value: int, value_type: str, device='cuda') -> None:"}, {"filename": "python/test/unit/runtime/test_cache.py", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "file_content_changes": "@@ -107,33 +107,6 @@ def inc_counter(*args, **kwargs):\n     assert counter == target\n \n \n-@pytest.mark.parametrize(\"value, value_type\", [\n-    (-1, 'i32'), (0, 'i32'), (1, 'i32'), (-2**31, 'i32'), (2**31 - 1, 'i32'),\n-    (2**32, 'i64'), (2**63 - 1, 'i64'), (-2**63, 'i64'),\n-    (2**31, 'u32'), (2**32 - 1, 'u32'), (2**63, 'u64'), (2**64 - 1, 'u64')\n-])\n-def test_value_specialization(value: int, value_type: str, device='cuda') -> None:\n-\n-    @triton.jit\n-    def kernel(VALUE, X):\n-        pass\n-\n-    cache_str = None\n-\n-    def get_cache_str(*args, **kwargs):\n-        nonlocal cache_str\n-        cache_str = kwargs[\"repr\"]\n-    triton.JITFunction.cache_hook = get_cache_str\n-    reset_tmp_dir()\n-    x = torch.tensor([3.14159], device='cuda')\n-    kernel[(1, )](value, x)\n-    triton.JITFunction.cache_hook = None\n-\n-    cache_str_match = re.match(r\".*VALUE: (\\w+).*\", cache_str)\n-    spec_type = None if cache_str_match is None else cache_str_match.group(1)\n-    assert spec_type == value_type\n-\n-\n def test_constexpr_not_callable() -> None:\n     @triton.jit\n     def kernel(X, c: tl.constexpr):"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -125,6 +125,8 @@ def _key_of(arg):\n         elif isinstance(arg, int):\n             if -2**31 <= arg and arg <= 2**31 - 1:\n                 return \"i32\"\n+            elif 2**63 <= arg and arg <= 2**64 - 1:\n+                return \"u64\"\n             else:\n                 return \"i64\"\n         elif isinstance(arg, float):"}]