[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 1, "deletions": 205, "changes": 206, "file_content_changes": "@@ -26,7 +26,7 @@ jobs:\n         id: set-matrix\n         run: |\n           if [ x\"${{ github.repository }}\" == x\"openai/triton\" ]; then\n-            echo '::set-output name=matrix-required::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"H100\"]]'\n+            echo '::set-output name=matrix-required::[[\"self-hosted\", \"A100\"]]'\n             echo '::set-output name=matrix-optional::[]'\n           else\n             echo '::set-output name=matrix-required::[\"ubuntu-latest\"]'\n@@ -43,93 +43,6 @@ jobs:\n         runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-required)}}\n \n     steps:\n-      # - name: Checkout\n-      #   uses: actions/checkout@v2\n-\n-      # - name: Set CUDA ENV\n-      #   if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-      #   run: |\n-      #     echo \"BACKEND=CUDA\" >> \"${GITHUB_ENV}\"\n-      #     echo \"ENABLE_TMA=0\" >> \"${GITHUB_ENV}\"\n-      #     echo \"ENABLE_MMA_V3=0\" >> \"${GITHUB_ENV}\"\n-      #     echo \"TRITON_DISABLE_LINE_INFO=1\" >> \"${GITHUB_ENV}\"\n-\n-      # - name: Clear cache\n-      #   run: |\n-      #     rm -rf ~/.triton\n-\n-      # - name: Update PATH\n-      #   run: |\n-      #     echo \"PATH=${HOME}/.local/bin:${PATH}\" >> \"${GITHUB_ENV}\"\n-\n-      # - name: Install Triton\n-      #   if: ${{ env.BACKEND == 'CUDA'}}\n-      #   run: |\n-      #     cd python\n-      #     python3 -m pip install --upgrade pip\n-      #     python3 -m pip install cmake==3.24\n-      #     python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-      #     python3 -m pip install pytest-xdist\n-\n-      # - name: Run lit tests\n-      #   if: ${{ env.BACKEND == 'CUDA'}}\n-      #   run: |\n-      #     python3 -m pip install lit\n-      #     cd python\n-      #     LIT_TEST_DIR=\"build/$(ls build | grep -i cmake)/test\"\n-      #     if [ ! -d \"${LIT_TEST_DIR}\" ]; then\n-      #       echo \"Coult not find '${LIT_TEST_DIR}'\" ; exit -1\n-      #     fi\n-      #     lit -v \"${LIT_TEST_DIR}\"\n-\n-      # - name: Enable MMAV3 and TMA\n-      #   if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'H100')}}\n-      #   run: |\n-      #     echo \"ENABLE_TMA=1\" >> \"${GITHUB_ENV}\"\n-      #     echo \"ENABLE_MMA_V3=1\" >> \"${GITHUB_ENV}\"\n-\n-      # - name: Run python tests on CUDA with ENABLE_TMA=1 and ENABLE_MMA_V3=1\n-      #   if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}\n-      #   run: |\n-      #     cd python/test/unit\n-      #     python3 -m pytest -n 8 --ignore=runtime --ignore=operators --ignore=language/test_line_info.py\n-      #     # run runtime tests serially to avoid race condition with cache handling.\n-      #     python3 -m pytest runtime/\n-      #     # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0\n-      #     TRITON_DISABLE_LINE_INFO=0 python3 -m pytest language/test_line_info.py\n-\n-      # - name: Run python tests on CUDA with ENABLE_TMA=0 and ENABLE_MMA_V3=0\n-      #   if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}\n-      #   run: |\n-      #     cd python/test/unit\n-      #     python3 -m pytest -n 8 --ignore=runtime --ignore=hopper --ignore=operators --ignore=language/test_line_info.py\n-      #     # run runtime tests serially to avoid race condition with cache handling.\n-      #     python3 -m pytest runtime/\n-      #     # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0\n-      #     TRITON_DISABLE_LINE_INFO=0 python3 -m pytest language/test_line_info.py\n-\n-      # - name: Clear cache\n-      #   run: |\n-      #     rm -rf ~/.triton\n-\n-      # - name: Run partial tests on CUDA with ENABLE_TMA=1 and ENABLE_MMA_V3=1\n-      #   if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}\n-      #   run: |\n-      #     cd python/test/unit\n-      #     python3 -m pytest -n 8 operators\n-\n-      # - name: Run partial tests on CUDA with ENABLE_TMA=0 and ENABLE_MMA_V3=0\n-      #   if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}\n-      #   run: |\n-      #     cd python/test/unit\n-      #     python3 -m pytest -n 8 operators\n-\n-      # - name: Create artifacts archive\n-      #   if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-      #   run: |\n-      #     cd ~/.triton\n-      #     tar -czf artifacts.tar.gz cache\n-\n       - name: Save PR number\n         env:\n           PR_NUMBER: ${{ github.event.number }}\n@@ -140,120 +53,3 @@ jobs:\n         with:\n           name: pr_number\n           path: pr/\n-\n-      # - name: Upload artifacts archive\n-      #   if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-      #   uses: actions/upload-artifact@v2\n-      #   with:\n-      #     name: artifacts ${{ matrix.runner[1] }}\n-      #     path: ~/.triton/artifacts.tar.gz\n-\n-      # - name: Upload PR number artifact\n-      #   if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n-      #   uses: actions/upload-artifact@v2\n-      #   with:\n-      #     name: pr-number\n-      #     path: pr-number.txt\n-\n-      # - name: Run CXX unittests\n-      #   if: ${{ env.BACKEND == 'CUDA'}}\n-      #   run: |\n-      #     cd python\n-      #     cd \"build/$(ls build | grep -i cmake)\"\n-      #     ctest\n-\n-      # - name: Regression tests\n-      #   if: ${{ contains(matrix.runner, 'A100') }}\n-      #   run: |\n-      #     python3 -m pip install pytest-rerunfailures\n-      #     cd python/test/regression\n-      #     sudo nvidia-smi -i 0 -pm 1\n-      #     sudo nvidia-smi -i 0 --lock-gpu-clocks=1280,1280\n-      #     python3 -m pytest -vs . --reruns 10\n-      #     sudo nvidia-smi -i 0 -rgc\n-\n-  # Integration-Tests-Third-Party:\n-  #   needs: Runner-Preparation\n-  #   if: false\n-\n-  #   runs-on: ${{ matrix.runner }}\n-\n-  #   strategy:\n-  #     matrix:\n-  #       runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-optional)}}\n-\n-  #   steps:\n-  #     - name: Checkout\n-  #       uses: actions/checkout@v2\n-\n-  #     - name: Set ROCM ENV\n-  #       if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}\n-  #       run: |\n-  #         echo \"BACKEND=ROCM\" >> \"${GITHUB_ENV}\"\n-\n-  #     - name: Set XPU ENV\n-  #       if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'arc770')}}\n-  #       run: |\n-  #         echo \"BACKEND=XPU\" >> \"${GITHUB_ENV}\"\n-\n-  #     - name: Clear cache\n-  #       run: |\n-  #         rm -rf ~/.triton\n-\n-  #     - name: Update PATH\n-  #       run: |\n-  #         echo \"PATH=${HOME}/.local/bin:${PATH}\" >> \"${GITHUB_ENV}\"\n-\n-  #     - name: Check pre-commit\n-  #       if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] != 'arc770') }}\n-  #       run: |\n-  #         python3 -m pip install --upgrade pre-commit\n-  #         python3 -m pre_commit run --all-files --verbose\n-\n-  #     - name: Check pre-commit arc770\n-  #       if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] == 'arc770') }}\n-  #       run: |\n-  #         source ${HOME}/triton_vars.sh\n-  #         source ${HOME}/miniconda3/bin/activate\n-  #         conda activate triton-xpu-ci\n-  #         python3 -m pip install --upgrade pre-commit\n-  #         python3 -m pre_commit run --all-files\n-\n-  #     - name: Install Triton on ROCM\n-  #       if: ${{ env.BACKEND == 'ROCM'}}\n-  #       run: |\n-  #         cd python\n-  #         python3 -m pip install --upgrade pip\n-  #         python3 -m pip install cmake==3.24\n-  #         python3 -m pip install torch==1.13.1 --index-url https://download.pytorch.org/whl/rocm5.2\n-  #         python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n-  #     - name: Install Triton on XPU\n-  #       if: ${{ env.BACKEND == 'XPU'}}\n-  #       run: |\n-  #         source ${HOME}/triton_vars.sh\n-  #         source ${HOME}/miniconda3/bin/activate\n-  #         conda activate triton-xpu-ci\n-  #         git submodule update --init --recursive\n-  #         cd python\n-  #         python3 -m pip install --upgrade pip\n-  #         python3 -m pip install cmake==3.24\n-  #         export TRITON_CODEGEN_INTEL_XPU_BACKEND=1\n-  #         python3 -m pip uninstall -y triton\n-  #         python3 setup.py build\n-  #         python3 -m pip install --no-build-isolation -vvv '.[tests]'\n-\n-  #     - name: Run python tests on ROCM\n-  #       if: ${{ env.BACKEND == 'ROCM'}}\n-  #       run: |\n-  #         cd python/test/unit/language\n-  #         python3 -m pytest --capture=tee-sys -rfs --verbose \"test_core.py::test_empty_kernel\"\n-\n-  #     - name: Run python tests on XPU\n-  #       if: ${{ env.BACKEND == 'XPU'}}\n-  #       run: |\n-  #         source ${HOME}/triton_vars.sh\n-  #         source ${HOME}/miniconda3/bin/activate\n-  #         conda activate triton-xpu-ci\n-  #         cd python/test/backend/third_party_backends\n-  #         python3 -m pytest --capture=tee-sys -rfs --verbose --backend xpu"}]