[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -1523,8 +1523,8 @@ def static_print(*values, sep: str = \" \", end: str = \"\\n\", file=None, flush=Fals\n     '''\n     Print the values at compile time. The parameters are the same as the Python builtin :code:`print`.\n \n-    Calling the Python builtin :code:`print` inside your kernel is the same as calling this.  \n-    \n+    Calling the Python builtin :code:`print` inside your kernel is the same as calling this.\n+\n     .. highlight:: python\n     .. code-block:: python\n \n@@ -1539,7 +1539,7 @@ def static_assert(cond, msg=\"\", _builder=None):\n     '''\n     Assert the condition at compile time.  Does not require that the :code:`TRITON_DEBUG` environment variable\n     is set.\n-    \n+\n     .. highlight:: python\n     .. code-block:: python\n \n@@ -1553,7 +1553,7 @@ def device_print(prefix, *args, _builder=None):\n     '''\n     Print the values at runtime from the device.  String formatting does not work, so you should\n     provide the values you want to print as arguments.\n-    \n+\n     .. highlight:: python\n     .. code-block:: python\n \n@@ -1582,11 +1582,11 @@ def device_assert(cond, msg=\"\", _builder=None):\n     '''\n     Assert the condition at runtime from the device.  Requires that the environment variable :code:`TRITON_DEBUG`\n     is set to a value besides :code:`0` in order for this to have any effect.\n-    \n+\n     Using the Python :code:`assert` statement is the same as calling this function, except that the second argument\n     must be provided and must be a string, e.g. :code:`assert pid == 0, \"pid != 0\"`.  The environment variable must\n     be set for this :code:`assert` statement to have any effect.\n-    \n+\n     .. highlight:: python\n     .. code-block:: python\n "}]