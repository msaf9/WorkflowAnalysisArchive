[{"filename": "python/triton/tools/compile.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -46,6 +46,7 @@\n     args = parser.parse_args()\n \n     # execute python sources and extract functions wrapped in JITFunction\n+    print(\"extract JITFunction\")\n     arg_path = Path(args.path)\n     sys.path.insert(0, str(arg_path.parent))\n     spec = importlib.util.spec_from_file_location(arg_path.stem, arg_path)\n@@ -54,6 +55,7 @@\n     kernel = getattr(mod, args.kernel_name)\n \n     # validate and parse signature\n+    print(\"parse sig\")\n     signature = list(map(lambda s: s.strip(\" \"), args.signature.split(\",\")))\n \n     def constexpr(s):\n@@ -84,6 +86,7 @@ def constexpr(s):\n     arg_names = [kernel.arg_names[i] for i in signature.keys()]\n \n     # dump C stub code\n+    print(\"dump stub\")\n     suffix = kernel_suffix(signature.values(), config)\n     func_name = '_'.join([kernel.__name__, suffix])\n     hex_ = str(binascii.hexlify(ccinfo.asm[\"cubin\"]))[2:-1]\n@@ -101,3 +104,4 @@ def constexpr(s):\n         template_path = Path(__file__).parent / f\"compile.{ext}\"\n         with args.out_path.with_suffix(f\".{suffix}.{ext}\").open(\"w\") as fp:\n             fp.write(Path(template_path).read_text().format(**params))\n+    print(\"done\")"}]