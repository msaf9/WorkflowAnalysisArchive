[{"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "file_content_changes": "@@ -463,33 +463,23 @@ def TT_ScanReturnOp: TT_Op<\"scan.return\",\n //\n // External Elementwise op\n //\n-class TT_ExternElementwiseOpBase<string mnemonic, list<Trait> traits = []> :\n-    TT_Op<mnemonic,\n-         traits # [Elementwise,\n-                   SameOperandsAndResultEncoding,\n-                   SameVariadicOperandSize]> {\n+def TT_ExternElementwiseOp : TT_Op<\"extern_elementwise\", [Elementwise,\n+                                                            SameOperandsAndResultEncoding,\n+                                                            SameVariadicOperandSize,\n+                                                            DeclareOpInterfaceMethods<MemoryEffectsOpInterface>]> {\n \n     let description = [{\n         call an external function $symbol implemented in $libpath/$libname with $args\n         return $libpath/$libname:$symbol($args...)\n     }];\n \n-    let arguments = (ins Variadic<TT_Type>:$args, StrAttr:$libname, StrAttr:$libpath, StrAttr:$symbol);\n+    let arguments = (ins Variadic<TT_Type>:$args, StrAttr:$libname, StrAttr:$libpath, StrAttr:$symbol, BoolAttr:$pure);\n \n     let results = (outs TT_Type:$result);\n \n     let assemblyFormat = \"operands attr-dict `:` functional-type(operands, $result)\";\n }\n \n-def TT_PureExternElementwiseOp : TT_ExternElementwiseOpBase<\"pure_extern_elementwise\", [Pure, Elementwise]> {\n-    let summary = \"FFI for pure element-wise extern LLVM bitcode functions\";\n-}\n-\n-def TT_ImpureExternElementwiseOp : TT_ExternElementwiseOpBase<\"impure_extern_elementwise\", [MemoryEffects<[MemRead]>,\n-                                                                                            MemoryEffects<[MemWrite]>]> {\n-    let summary = \"FFI for impure element-wise extern LLVM bitcode functions\";\n-}\n-\n //\n // Make Range Op\n //"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ElementwiseOpToLLVM.cpp", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "file_content_changes": "@@ -762,15 +762,16 @@ struct CmpFOpConversion\n   }\n };\n \n-template <class T>\n struct ExternElementwiseOpConversion\n-    : public ElementwiseOpConversionBase<T, ExternElementwiseOpConversion<T>> {\n-  using Base = ElementwiseOpConversionBase<T, ExternElementwiseOpConversion<T>>;\n+    : public ElementwiseOpConversionBase<ExternElementwiseOp,\n+                                         ExternElementwiseOpConversion> {\n+  using Base = ElementwiseOpConversionBase<ExternElementwiseOp,\n+                                           ExternElementwiseOpConversion>;\n   using Base::Base;\n   using Adaptor = typename Base::OpAdaptor;\n   typedef typename Base::OpAdaptor OpAdaptor;\n \n-  SmallVector<Value> createDestOps(T op, OpAdaptor adaptor,\n+  SmallVector<Value> createDestOps(ExternElementwiseOp op, OpAdaptor adaptor,\n                                    ConversionPatternRewriter &rewriter,\n                                    Type elemTy, MultipleOperandsRange operands,\n                                    Location loc) const {\n@@ -791,8 +792,9 @@ struct ExternElementwiseOpConversion\n     return LLVM::LLVMFunctionType::get(resultType, operandTypes);\n   }\n \n-  LLVM::LLVMFuncOp appendOrGetFuncOp(ConversionPatternRewriter &rewriter, T op,\n-                                     StringRef funcName, Type funcType) const {\n+  LLVM::LLVMFuncOp appendOrGetFuncOp(ConversionPatternRewriter &rewriter,\n+                                     ExternElementwiseOp op, StringRef funcName,\n+                                     Type funcType) const {\n     using LLVM::LLVMFuncOp;\n \n     auto funcAttr = StringAttr::get(op->getContext(), funcName);\n@@ -1288,11 +1290,7 @@ void populateElementwiseOpToLLVMPatterns(\n \n   patterns.add<FpToFpOpConversion>(typeConverter, benefit);\n \n-  patterns.add<ExternElementwiseOpConversion<triton::PureExternElementwiseOp>>(\n-      typeConverter, benefit);\n-  patterns\n-      .add<ExternElementwiseOpConversion<triton::ImpureExternElementwiseOp>>(\n-          typeConverter, benefit);\n+  patterns.add<ExternElementwiseOpConversion>(typeConverter, benefit);\n   patterns.add<ElementwiseInlineAsmOpConversion>(typeConverter, benefit);\n   // ExpOpConversionApprox will try using ex2.approx if the input type is\n   // FP32. For other input types, ExpOpConversionApprox will return failure and"}, {"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.cpp", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "file_content_changes": "@@ -498,24 +498,6 @@ struct TritonAtomicRMWPattern\n   }\n };\n \n-template <class T>\n-struct TritonExternElementwisePattern : public OpConversionPattern<T> {\n-  using OpConversionPattern<T>::OpConversionPattern;\n-  using OpConversionPattern<T>::typeConverter;\n-  typedef typename OpConversionPattern<T>::OpAdaptor OpAdaptor;\n-\n-  LogicalResult\n-  matchAndRewrite(T op, OpAdaptor adaptor,\n-                  ConversionPatternRewriter &rewriter) const override {\n-    addNamedAttrs(rewriter.replaceOpWithNewOp<T>(\n-                      op, typeConverter->convertType(op.getType()),\n-                      adaptor.getArgs(), adaptor.getLibname(),\n-                      adaptor.getLibpath(), adaptor.getSymbol()),\n-                  adaptor.getAttributes());\n-    return success();\n-  }\n-};\n-\n template <class Op>\n struct TritonGenericPattern : public OpConversionPattern<Op> {\n   using OpConversionPattern<Op>::OpConversionPattern;\n@@ -710,11 +692,9 @@ void populateTritonPatterns(TritonGPUTypeConverter &typeConverter,\n       TritonReduceReturnPattern, TritonScanPattern, TritonScanReturnPattern,\n       TritonTransPattern, TritonExpandDimsPattern, TritonMakeRangePattern,\n       TritonDotPattern, TritonLoadPattern, TritonStorePattern,\n-      TritonExternElementwisePattern<triton::PureExternElementwiseOp>,\n-      TritonExternElementwisePattern<triton::ImpureExternElementwiseOp>,\n-      TritonPrintPattern, TritonAssertPattern, TritonAtomicRMWPattern,\n-      TritonFuncOpPattern, TritonReturnOpPattern, TritonCallOpPattern>(\n-      typeConverter, context);\n+      TritonGenericPattern<triton::ExternElementwiseOp>, TritonPrintPattern,\n+      TritonAssertPattern, TritonAtomicRMWPattern, TritonFuncOpPattern,\n+      TritonReturnOpPattern, TritonCallOpPattern>(typeConverter, context);\n }\n \n //"}, {"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "file_content_changes": "@@ -882,5 +882,17 @@ void ElementwiseInlineAsmOp::getEffects(\n                        SideEffects::DefaultResource::get());\n }\n \n+// -- ElementwiseInlineAsmOp --\n+void ExternElementwiseOp::getEffects(\n+    SmallVectorImpl<SideEffects::EffectInstance<MemoryEffects::Effect>>\n+        &effects) {\n+  if (getPure())\n+    return;\n+  effects.emplace_back(MemoryEffects::Write::get(),\n+                       SideEffects::DefaultResource::get());\n+  effects.emplace_back(MemoryEffects::Read::get(),\n+                       SideEffects::DefaultResource::get());\n+}\n+\n } // namespace triton\n } // namespace mlir"}, {"filename": "lib/Dialect/TritonNvidiaGPU/Transforms/PlanCTA.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -644,9 +644,10 @@ bool CTAPlanner::isElementwiseOp(Operation *op) const {\n                 math::RsqrtOp, math::SqrtOp, math::TanhOp>(op))\n     return true;\n   if (llvm::isa<triton::IntToPtrOp, triton::PtrToIntOp, triton::BitcastOp,\n-                triton::FpToFpOp, triton::AddPtrOp,\n-                triton::PureExternElementwiseOp>(op))\n+                triton::FpToFpOp, triton::AddPtrOp>(op))\n     return true;\n+  if (auto externElementwiseOp = dyn_cast<triton::ExternElementwiseOp>(op))\n+    return externElementwiseOp.getPure();\n   if (llvm::isa<ttg::CmpIOp, ttg::CmpFOp, ttg::SelectOp>(op))\n     return true;\n   return false;"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "file_content_changes": "@@ -1424,12 +1424,8 @@ void init_triton_ir(py::module &&m) {\n               const std::string &libPath, const std::string &symbol,\n               std::vector<mlir::Value> &argList, mlir::Type retType,\n               bool isPure) -> mlir::Value {\n-             if (isPure)\n-               return self.create<mlir::triton::PureExternElementwiseOp>(\n-                   retType, argList, libName, libPath, symbol);\n-             else\n-               return self.create<mlir::triton::ImpureExternElementwiseOp>(\n-                   retType, argList, libName, libPath, symbol);\n+             return self.create<mlir::triton::ExternElementwiseOp>(\n+                 retType, argList, libName, libPath, symbol, isPure);\n            })\n       // Built-in instruction\n       .def(\"create_get_program_id\","}]