[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "file_content_changes": "@@ -337,11 +337,11 @@ static T getLinearIndex(ArrayRef<T> multiDimIndex, ArrayRef<T> shape) {\n \n struct ConvertTritonGPUOpToLLVMPatternBase {\n   static SmallVector<Value>\n-  getElementsFromStruct(Location loc, Value llvmStruct, unsigned elems,\n+  getElementsFromStruct(Location loc, Value llvmStruct,\n                         ConversionPatternRewriter &rewriter) {\n-    SmallVector<Value> results(elems);\n     ArrayRef<Type> types =\n         llvmStruct.getType().cast<LLVM::LLVMStructType>().getBody();\n+    SmallVector<Value> results(types.size());\n     for (unsigned i = 0; i < types.size(); ++i) {\n       Type type = types[i];\n       results[i] = extract_val(type, llvmStruct, rewriter.getI64ArrayAttr(i));\n@@ -716,8 +716,7 @@ struct LoadStoreConversionBase : public ConvertTritonGPUOpToLLVMPatternBase {\n \n     auto shape = value.getType().cast<RankedTensorType>().getShape();\n     // Here, we assume that all inputs should have a blockedLayout\n-    unsigned valueElems = layout.getElemsPerThread(shape);\n-    auto valueVals = getElementsFromStruct(loc, llValue, valueElems, rewriter);\n+    auto valueVals = getElementsFromStruct(loc, llValue, rewriter);\n     return valueVals;\n   }\n \n@@ -978,7 +977,7 @@ struct BroadcastOpConversion\n \n     unsigned srcElems = srcLayout.getElemsPerThread(srcShape);\n     auto elemTy = resultTy.getElementType();\n-    auto srcVals = getElementsFromStruct(loc, src, srcElems, rewriter);\n+    auto srcVals = getElementsFromStruct(loc, src, rewriter);\n     unsigned resultElems = resultLayout.getElemsPerThread(resultShape);\n     SmallVector<Value> resultVals(resultElems);\n     for (unsigned i = 0; i < srcElems; ++i) {\n@@ -1026,8 +1025,7 @@ struct ViewLikeOpConversion : public ConvertTritonGPUOpToLLVMPattern<SourceOp> {\n         this->getTypeConverter()->convertType(resultTy.getElementType());\n     SmallVector<Type> types(elems, elemTy);\n     Type structTy = LLVM::LLVMStructType::getLiteral(this->getContext(), types);\n-    auto vals =\n-        this->getElementsFromStruct(loc, adaptor.src(), elems, rewriter);\n+    auto vals = this->getElementsFromStruct(loc, adaptor.src(), rewriter);\n     Value view = getStructFromElements(loc, vals, rewriter, structTy);\n     rewriter.replaceOp(op, view);\n     return success();\n@@ -1309,9 +1307,8 @@ struct AddPtrOpConversion\n           getTypeConverter()->convertType(resultTensorTy.getElementType());\n       SmallVector<Type> types(elems, elemTy);\n       Type structTy = LLVM::LLVMStructType::getLiteral(getContext(), types);\n-      auto ptrs = getElementsFromStruct(loc, adaptor.ptr(), elems, rewriter);\n-      auto offsets =\n-          getElementsFromStruct(loc, adaptor.offset(), elems, rewriter);\n+      auto ptrs = getElementsFromStruct(loc, adaptor.ptr(), rewriter);\n+      auto offsets = getElementsFromStruct(loc, adaptor.offset(), rewriter);\n       SmallVector<Value> resultVals(elems);\n       for (unsigned i = 0; i < elems; ++i) {\n         resultVals[i] = gep(elemTy, ptrs[i], offsets[i]);\n@@ -1417,9 +1414,9 @@ class BinaryOpConversionBase\n \n     auto *concreteThis = static_cast<const ConcreteT *>(this);\n     auto lhss = this->getElementsFromStruct(loc, concreteThis->getLhs(adaptor),\n-                                            elems, rewriter);\n+                                            rewriter);\n     auto rhss = this->getElementsFromStruct(loc, concreteThis->getRhs(adaptor),\n-                                            elems, rewriter);\n+                                            rewriter);\n     SmallVector<Value> resultVals(elems);\n     for (unsigned i = 0; i < elems; ++i) {\n       resultVals[i] = concreteThis->createDestOp(op, rewriter, elemTy, lhss[i],\n@@ -1762,7 +1759,7 @@ LogicalResult ConvertLayoutOpConversion::lowerDistributedToDistributed(\n   // Potentially we need to store for multiple CTAs in this replication\n   unsigned accumNumReplicates = product<unsigned>(numReplicates);\n   unsigned elems = getElemsPerThread(srcLayout, srcTy.getShape());\n-  auto vals = getElementsFromStruct(loc, adaptor.src(), elems, rewriter);\n+  auto vals = getElementsFromStruct(loc, adaptor.src(), rewriter);\n   unsigned inVec = 0;\n   unsigned outVec = 0;\n   auto paddedRepShape = getScratchConfigForCvtLayout(op, inVec, outVec);\n@@ -1825,7 +1822,7 @@ LogicalResult ConvertLayoutOpConversion::lowerBlockedToShared(\n   unsigned perPhase = dstSharedLayout.getPerPhase();\n   unsigned maxPhase = dstSharedLayout.getMaxPhase();\n   unsigned numElems = getElemsPerThread(srcBlockedLayout, srcShape);\n-  auto inVals = getElementsFromStruct(loc, adaptor.src(), numElems, rewriter);\n+  auto inVals = getElementsFromStruct(loc, adaptor.src(), rewriter);\n   unsigned srcAccumSizeInThreads =\n       product<unsigned>(srcBlockedLayout.getSizePerThread());\n   auto elemTy = srcTy.getElementType();\n@@ -2954,7 +2951,7 @@ struct MMA16816ConversionHelper {\n \n   ValueTable getValuesFromDotOperandLayoutStruct(Value value, int n0, int n1) {\n     auto elems = ConvertTritonGPUOpToLLVMPatternBase::getElementsFromStruct(\n-        loc, value, 2 * n0 * 2 * n1, rewriter);\n+        loc, value, rewriter);\n \n     int offset{};\n     ValueTable vals;"}]