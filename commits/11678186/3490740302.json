[{"filename": "python/tutorials/flash-attn-optimized.ttgir", "status": "removed", "additions": 0, "deletions": 141, "changes": 141, "file_content_changes": "@@ -1,141 +0,0 @@\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [2, 2]}>\n-#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func public @_fwd_kernel_0d1d2d34d5d6d7d8d9d10d11c12d13d14d15c16d17d18d19c20d21d22d23c242526d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}, %arg19: i32 {tt.divisibility = 16 : i32}, %arg20: i32, %arg21: i32, %arg22: i32 {tt.divisibility = 16 : i32}) {\n-    %c128_i32 = arith.constant 128 : i32\n-    %c128 = arith.constant 128 : index\n-    %c0 = arith.constant 0 : index\n-    %c1_i32 = arith.constant 1 : i32\n-    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma>\n-    %cst_0 = arith.constant dense<195948557> : tensor<1x128xi32, #mma>\n-    %cst_1 = arith.constant dense<0> : tensor<128x128xi32, #mma>\n-    %cst_2 = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma>\n-    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %cst_4 = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %cst_5 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma>\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = tt.get_program_id {axis = 1 : i32} : i32\n-    %2 = arith.muli %0, %c128_i32 : i32\n-    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked0>\n-    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %6 = tt.splat %2 : (i32) -> tensor<128xi32, #blocked0>\n-    %7 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %8 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %9 = arith.addi %6, %3 : tensor<128xi32, #blocked0>\n-    %10 = arith.muli %1, %arg9 : i32\n-    %11 = arith.addi %8, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %12 = tt.splat %arg10 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %13 = tt.splat %10 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n-    %15 = tt.expand_dims %14 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x64xi32, #blocked1>\n-    %16 = tt.broadcast %15 : (tensor<1x64xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %17 = tt.splat %arg13 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %18 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %19 = arith.muli %18, %17 : tensor<128x1xi32, #blocked1>\n-    %20 = arith.addi %13, %19 : tensor<128x1xi32, #blocked1>\n-    %21 = tt.broadcast %20 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %22 = arith.addi %21, %16 : tensor<128x64xi32, #blocked1>\n-    %23 = arith.muli %18, %12 : tensor<128x1xi32, #blocked1>\n-    %24 = arith.addi %13, %23 : tensor<128x1xi32, #blocked1>\n-    %25 = tt.broadcast %24 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %26 = arith.addi %25, %16 : tensor<128x64xi32, #blocked1>\n-    %27 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %28 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %29 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %30 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %31 = arith.muli %30, %12 : tensor<128x1xi32, #blocked1>\n-    %32 = arith.addi %13, %31 : tensor<128x1xi32, #blocked1>\n-    %33 = tt.broadcast %32 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %34 = arith.addi %33, %16 : tensor<128x64xi32, #blocked1>\n-    %35 = tt.addptr %27, %34 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %36 = tt.load %35 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked1>\n-    %37 = arith.addi %0, %c1_i32 : i32\n-    %38 = arith.muli %37, %c128_i32 : i32\n-    %39 = arith.index_cast %38 : i32 to index\n-    %40 = tt.splat %arg3 : (f32) -> tensor<128x128xf32, #mma>\n-    %41 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>\n-    %42 = arith.addi %7, %4 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %43 = tt.expand_dims %42 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xi32, #mma>\n-    %44 = tt.expand_dims %41 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>) -> tensor<1x128xi32, #mma>\n-    %45 = arith.addi %44, %cst_0 : tensor<1x128xi32, #mma>\n-    %46 = tt.broadcast %45 : (tensor<1x128xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %47 = tt.broadcast %43 : (tensor<128x1xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %48 = arith.sitofp %cst_1 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %49 = \"triton_gpu.cmpi\"(%47, %46) {predicate = 5 : i64} : (tensor<128x128xi32, #mma>, tensor<128x128xi32, #mma>) -> tensor<128x128xi1, #mma>\n-    %50 = \"triton_gpu.select\"(%49, %48, %cst_2) : (tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma>, tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #mma>\n-    %51 = triton_gpu.convert_layout %36 : (tensor<128x64xf16, #blocked1>) -> tensor<128x64xf16, #shared>\n-    %52:3 = scf.for %arg23 = %c0 to %39 step %c128 iter_args(%arg24 = %cst, %arg25 = %cst_3, %arg26 = %cst_4) -> (tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) {\n-      %73 = arith.index_cast %arg23 : index to i32\n-      %74 = arith.muli %73, %arg13 : i32\n-      %75 = tt.splat %74 : (i32) -> tensor<128x64xi32, #blocked1>\n-      %76 = arith.addi %22, %75 : tensor<128x64xi32, #blocked1>\n-      %77 = tt.addptr %28, %76 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-      %78 = tt.load %77 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked1>\n-      %79 = triton_gpu.convert_layout %78 : (tensor<128x64xf16, #blocked1>) -> tensor<128x64xf16, #shared>\n-      %80 = tt.dot %51, %79, %cst_5 {allowTF32 = true, transA = false, transB = true} : tensor<128x64xf16, #shared> * tensor<128x64xf16, #shared> -> tensor<128x128xf32, #mma>\n-      %81 = arith.mulf %80, %40 : tensor<128x128xf32, #mma>\n-      %82 = arith.addf %81, %50 : tensor<128x128xf32, #mma>\n-      %83 = tt.reduce %82 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %84 = tt.expand_dims %83 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %85 = tt.broadcast %84 : (tensor<128x1xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %86 = arith.subf %82, %85 : tensor<128x128xf32, #mma>\n-      %87 = math.exp %86 : tensor<128x128xf32, #mma>\n-      %88 = tt.reduce %87 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %89 = \"triton_gpu.cmpf\"(%arg26, %83) {predicate = 2 : i64} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %90 = \"triton_gpu.select\"(%89, %arg26, %83) : (tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %91 = arith.subf %83, %90 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %92 = math.exp %91 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %93 = arith.mulf %92, %88 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %94 = arith.subf %arg26, %90 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %95 = math.exp %94 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %96 = arith.mulf %95, %arg25 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %97 = arith.addf %96, %93 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %98 = arith.divf %arg25, %97 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %99 = arith.mulf %98, %95 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %100 = arith.muli %73, %arg16 : i32\n-      %101 = tt.splat %100 : (i32) -> tensor<128x64xi32, #blocked1>\n-      %102 = arith.addi %26, %101 : tensor<128x64xi32, #blocked1>\n-      %103 = tt.addptr %29, %102 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-      %104 = tt.load %103 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked1>\n-      %105 = arith.divf %92, %97 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %106 = tt.expand_dims %105 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %107 = tt.broadcast %106 : (tensor<128x1xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %108 = arith.mulf %87, %107 : tensor<128x128xf32, #mma>\n-      %109 = arith.truncf %108 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma>\n-      %110 = triton_gpu.convert_layout %109 : (tensor<128x128xf16, #mma>) -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>\n-      %111 = triton_gpu.convert_layout %104 : (tensor<128x64xf16, #blocked1>) -> tensor<128x64xf16, #shared>\n-      %112 = tt.expand_dims %99 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %113 = tt.broadcast %112 : (tensor<128x1xf32, #mma>) -> tensor<128x64xf32, #mma>\n-      %114 = arith.mulf %arg24, %113 : tensor<128x64xf32, #mma>\n-      %115 = tt.dot %110, %111, %114 {allowTF32 = true, transA = false, transB = false} : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #shared> -> tensor<128x64xf32, #mma>\n-      scf.yield %115, %97, %90 : tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    }\n-    %53 = triton_gpu.convert_layout %52#2 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #blocked0>\n-    %54 = triton_gpu.convert_layout %52#1 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #blocked0>\n-    %55 = triton_gpu.convert_layout %52#0 : (tensor<128x64xf32, #mma>) -> tensor<128x64xf32, #blocked1>\n-    %56 = arith.muli %1, %arg22 : i32\n-    %57 = tt.addptr %arg5, %56 : !tt.ptr<f32>\n-    %58 = tt.splat %57 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %59 = tt.addptr %58, %9 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    %60 = tt.addptr %arg6, %56 : !tt.ptr<f32>\n-    %61 = tt.splat %60 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %62 = tt.addptr %61, %9 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    tt.store %59, %54 : tensor<128xf32, #blocked0>\n-    tt.store %62, %53 : tensor<128xf32, #blocked0>\n-    %63 = arith.muli %1, %arg18 : i32\n-    %64 = tt.splat %arg19 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %65 = tt.splat %63 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %66 = tt.splat %arg7 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %67 = arith.muli %30, %64 : tensor<128x1xi32, #blocked1>\n-    %68 = arith.addi %65, %67 : tensor<128x1xi32, #blocked1>\n-    %69 = tt.broadcast %68 : (tensor<128x1xi32, #blocked1>) -> tensor<128x64xi32, #blocked1>\n-    %70 = arith.addi %69, %16 : tensor<128x64xi32, #blocked1>\n-    %71 = tt.addptr %66, %70 : tensor<128x64x!tt.ptr<f16>, #blocked1>\n-    %72 = arith.truncf %55 : tensor<128x64xf32, #blocked1> to tensor<128x64xf16, #blocked1>\n-    tt.store %71, %72 : tensor<128x64xf16, #blocked1>\n-    return\n-  }\n-}\n\\ No newline at end of file"}, {"filename": "python/tutorials/flash-attn-tmp.ttgir", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "file_content_changes": "@@ -1,225 +0,0 @@\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>\n-#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [2, 2]}>\n-#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func public @_fwd_kernel_0d1d2d34d5d6d7d8d9d10d11c12d13d14d15c16d17d18d19c20d21d22d23c242526d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}, %arg19: i32 {tt.divisibility = 16 : i32}, %arg20: i32, %arg21: i32, %arg22: i32 {tt.divisibility = 16 : i32}) {\n-    %c128_i32 = arith.constant 128 : i32\n-    %cst = arith.constant dense<0xFF800000> : tensor<128x128xf32, #blocked1>\n-    %cst_0 = arith.constant dense<0> : tensor<128x128xi32, #blocked1>\n-    %c128 = arith.constant 128 : index\n-    %c0 = arith.constant 0 : index\n-    %c1_i32 = arith.constant 1 : i32\n-    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked0>\n-    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma>\n-    %cst_3 = arith.constant dense<195948557> : tensor<1x128xi32, #mma>\n-    %cst_4 = arith.constant dense<0> : tensor<128x128xi32, #mma>\n-    %cst_5 = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma>\n-    %cst_6 = arith.constant dense<0xFF800000> : tensor<128xf32, #blocked0>\n-    %cst_7 = arith.constant dense<195948557> : tensor<1x128xi32, #blocked1>\n-    %cst_8 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma>\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = tt.get_program_id {axis = 1 : i32} : i32\n-    %2 = arith.muli %0, %c128_i32 : i32\n-    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked0>\n-    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %8 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %9 = tt.splat %2 : (i32) -> tensor<128xi32, #blocked0>\n-    %10 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %11 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %12 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %13 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %14 = tt.splat %2 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %15 = arith.addi %9, %3 : tensor<128xi32, #blocked0>\n-    %16 = arith.muli %1, %arg9 : i32\n-    %17 = arith.addi %10, %4 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %18 = arith.addi %13, %7 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %19 = arith.addi %14, %8 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %20 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %21 = tt.splat %arg10 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %22 = tt.splat %arg10 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %23 = tt.splat %16 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %24 = tt.splat %16 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %25 = tt.splat %16 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>\n-    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>\n-    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>\n-    %29 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>\n-    %30 = tt.expand_dims %26 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x64xi32, #blocked2>\n-    %31 = tt.broadcast %30 : (tensor<1x64xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %32 = tt.expand_dims %27 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x64xi32, #blocked2>\n-    %33 = tt.broadcast %32 : (tensor<1x64xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %34 = tt.expand_dims %28 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x64xi32, #blocked2>\n-    %35 = tt.broadcast %34 : (tensor<1x64xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %36 = tt.expand_dims %29 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x64xi32, #blocked2>\n-    %37 = tt.broadcast %36 : (tensor<1x64xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %38 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %39 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n-    %40 = tt.splat %arg13 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %41 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<128x1xi32, #blocked2>\n-    %42 = arith.muli %41, %40 : tensor<128x1xi32, #blocked2>\n-    %43 = arith.addi %24, %42 : tensor<128x1xi32, #blocked2>\n-    %44 = tt.broadcast %43 : (tensor<128x1xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %45 = arith.addi %44, %33 : tensor<128x64xi32, #blocked2>\n-    %46 = tt.expand_dims %39 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<128x1xi32, #blocked2>\n-    %47 = arith.muli %46, %22 : tensor<128x1xi32, #blocked2>\n-    %48 = arith.addi %25, %47 : tensor<128x1xi32, #blocked2>\n-    %49 = tt.broadcast %48 : (tensor<128x1xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %50 = arith.addi %49, %35 : tensor<128x64xi32, #blocked2>\n-    %51 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %52 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %53 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %54 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<128x1xi32, #blocked2>\n-    %55 = arith.muli %54, %21 : tensor<128x1xi32, #blocked2>\n-    %56 = arith.addi %23, %55 : tensor<128x1xi32, #blocked2>\n-    %57 = tt.broadcast %56 : (tensor<128x1xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %58 = arith.addi %57, %31 : tensor<128x64xi32, #blocked2>\n-    %59 = tt.addptr %51, %58 : tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %60 = tt.load %59 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked2>\n-    %61 = arith.addi %0, %c1_i32 : i32\n-    %62 = arith.muli %61, %c128_i32 : i32\n-    %63 = arith.index_cast %62 : i32 to index\n-    %64 = tt.splat %arg3 : (f32) -> tensor<128x128xf32, #blocked1>\n-    %65 = tt.splat %arg3 : (f32) -> tensor<128x128xf32, #mma>\n-    %66 = tt.splat %arg3 : (f32) -> tensor<128x128xf32, #mma>\n-    %67 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n-    %68 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>\n-    %69 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>\n-    %70 = tt.broadcast %20 : (tensor<128x1xi32, #blocked1>) -> tensor<128x128xi32, #blocked1>\n-    %71 = tt.expand_dims %67 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi32, #blocked1>\n-    %72 = arith.addi %71, %cst_7 : tensor<1x128xi32, #blocked1>\n-    %73 = tt.broadcast %72 : (tensor<1x128xi32, #blocked1>) -> tensor<128x128xi32, #blocked1>\n-    %74 = \"triton_gpu.cmpi\"(%70, %73) {predicate = 5 : i64} : (tensor<128x128xi32, #blocked1>, tensor<128x128xi32, #blocked1>) -> tensor<128x128xi1, #blocked1>\n-    %75 = arith.sitofp %cst_0 : tensor<128x128xi32, #blocked1> to tensor<128x128xf32, #blocked1>\n-    %76 = \"triton_gpu.select\"(%74, %75, %cst) : (tensor<128x128xi1, #blocked1>, tensor<128x128xf32, #blocked1>, tensor<128x128xf32, #blocked1>) -> tensor<128x128xf32, #blocked1>\n-    %77 = arith.addi %11, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %78 = tt.expand_dims %77 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xi32, #mma>\n-    %79 = tt.expand_dims %68 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>) -> tensor<1x128xi32, #mma>\n-    %80 = arith.addi %79, %cst_3 : tensor<1x128xi32, #mma>\n-    %81 = tt.broadcast %80 : (tensor<1x128xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %82 = tt.broadcast %78 : (tensor<128x1xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %83 = arith.sitofp %cst_4 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %84 = \"triton_gpu.cmpi\"(%82, %81) {predicate = 5 : i64} : (tensor<128x128xi32, #mma>, tensor<128x128xi32, #mma>) -> tensor<128x128xi1, #mma>\n-    %85 = \"triton_gpu.select\"(%84, %83, %cst_5) : (tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma>, tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #mma>\n-    %86 = arith.addi %12, %6 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %87 = tt.expand_dims %86 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xi32, #mma>\n-    %88 = tt.expand_dims %69 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>) -> tensor<1x128xi32, #mma>\n-    %89 = arith.addi %88, %cst_3 : tensor<1x128xi32, #mma>\n-    %90 = tt.broadcast %89 : (tensor<1x128xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %91 = tt.broadcast %87 : (tensor<128x1xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %92 = arith.sitofp %cst_4 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %93 = \"triton_gpu.cmpi\"(%91, %90) {predicate = 5 : i64} : (tensor<128x128xi32, #mma>, tensor<128x128xi32, #mma>) -> tensor<128x128xi1, #mma>\n-    %94 = \"triton_gpu.select\"(%93, %92, %cst_5) : (tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma>, tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #mma>\n-    %95 = triton_gpu.convert_layout %60 : (tensor<128x64xf16, #blocked2>) -> tensor<128x64xf16, #shared>\n-    %96:3 = scf.for %arg23 = %c0 to %63 step %c128 iter_args(%arg24 = %cst_2, %arg25 = %cst_1, %arg26 = %cst_6) -> (tensor<128x64xf32, #mma>, tensor<128xf32, #blocked0>, tensor<128xf32, #blocked0>) {\n-      %116 = arith.index_cast %arg23 : index to i32\n-      %117 = arith.muli %116, %arg13 : i32\n-      %118 = tt.splat %117 : (i32) -> tensor<128x64xi32, #blocked2>\n-      %119 = arith.addi %45, %118 : tensor<128x64xi32, #blocked2>\n-      %120 = tt.addptr %52, %119 : tensor<128x64x!tt.ptr<f16>, #blocked2>\n-      %121 = tt.load %120 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked2>\n-      %122 = triton_gpu.convert_layout %121 : (tensor<128x64xf16, #blocked2>) -> tensor<128x64xf16, #shared>\n-      %123 = tt.dot %95, %122, %cst_8 {allowTF32 = true, transA = false, transB = true} : tensor<128x64xf16, #shared> * tensor<128x64xf16, #shared> -> tensor<128x128xf32, #mma>\n-      %124 = triton_gpu.convert_layout %123 : (tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #blocked1>\n-      %125 = arith.mulf %124, %64 : tensor<128x128xf32, #blocked1>\n-      %126 = arith.addf %125, %76 : tensor<128x128xf32, #blocked1>\n-      %127 = tt.reduce %126 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32, #blocked1> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %128 = triton_gpu.convert_layout %127 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128xf32, #blocked0>\n-      %129 = arith.mulf %123, %65 : tensor<128x128xf32, #mma>\n-      %130 = arith.addf %129, %85 : tensor<128x128xf32, #mma>\n-      %131 = tt.reduce %130 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %132 = tt.expand_dims %127 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xf32, #blocked1>\n-      %133 = tt.broadcast %132 : (tensor<128x1xf32, #blocked1>) -> tensor<128x128xf32, #blocked1>\n-      %134 = arith.subf %126, %133 : tensor<128x128xf32, #blocked1>\n-      %135 = math.exp %134 : tensor<128x128xf32, #blocked1>\n-      %136 = tt.reduce %135 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32, #blocked1> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %137 = triton_gpu.convert_layout %136 : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128xf32, #blocked0>\n-      %138 = arith.mulf %123, %66 : tensor<128x128xf32, #mma>\n-      %139 = arith.addf %138, %94 : tensor<128x128xf32, #mma>\n-      %140 = tt.reduce %139 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %141 = tt.expand_dims %140 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %142 = tt.broadcast %141 : (tensor<128x1xf32, #mma>) -> tensor<128x128xf32, #mma>\n-      %143 = arith.subf %139, %142 : tensor<128x128xf32, #mma>\n-      %144 = math.exp %143 : tensor<128x128xf32, #mma>\n-      %145 = tt.reduce %144 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32, #mma> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %146 = \"triton_gpu.cmpf\"(%arg26, %128) {predicate = 2 : i64} : (tensor<128xf32, #blocked0>, tensor<128xf32, #blocked0>) -> tensor<128xi1, #blocked0>\n-      %147 = \"triton_gpu.select\"(%146, %arg26, %128) : (tensor<128xi1, #blocked0>, tensor<128xf32, #blocked0>, tensor<128xf32, #blocked0>) -> tensor<128xf32, #blocked0>\n-      %148 = arith.subf %arg26, %147 : tensor<128xf32, #blocked0>\n-      %149 = math.exp %148 : tensor<128xf32, #blocked0>\n-      %150 = arith.subf %128, %147 : tensor<128xf32, #blocked0>\n-      %151 = math.exp %150 : tensor<128xf32, #blocked0>\n-      %152 = arith.mulf %149, %arg25 : tensor<128xf32, #blocked0>\n-      %153 = arith.mulf %151, %137 : tensor<128xf32, #blocked0>\n-      %154 = arith.addf %152, %153 : tensor<128xf32, #blocked0>\n-      %155 = triton_gpu.convert_layout %arg26 : (tensor<128xf32, #blocked0>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %156 = triton_gpu.convert_layout %arg25 : (tensor<128xf32, #blocked0>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %157 = \"triton_gpu.cmpf\"(%155, %127) {predicate = 2 : i64} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %158 = \"triton_gpu.select\"(%157, %155, %127) : (tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %159 = arith.subf %155, %158 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %160 = math.exp %159 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %161 = arith.subf %127, %158 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %162 = arith.mulf %160, %156 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %163 = math.exp %161 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %164 = arith.mulf %163, %136 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %165 = arith.addf %162, %164 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %166 = arith.divf %163, %165 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-      %167 = tt.expand_dims %166 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xf32, #blocked1>\n-      %168 = tt.broadcast %167 : (tensor<128x1xf32, #blocked1>) -> tensor<128x128xf32, #blocked1>\n-      %169 = arith.mulf %135, %168 : tensor<128x128xf32, #blocked1>\n-      %170 = triton_gpu.convert_layout %arg26 : (tensor<128xf32, #blocked0>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %171 = triton_gpu.convert_layout %arg25 : (tensor<128xf32, #blocked0>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %172 = \"triton_gpu.cmpf\"(%170, %131) {predicate = 2 : i64} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %173 = \"triton_gpu.select\"(%172, %170, %131) : (tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %174 = arith.subf %131, %173 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %175 = math.exp %174 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %176 = arith.mulf %175, %145 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %177 = arith.subf %170, %173 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %178 = math.exp %177 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %179 = arith.mulf %178, %171 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %180 = arith.addf %179, %176 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %181 = arith.divf %171, %180 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %182 = arith.mulf %181, %178 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-      %183 = arith.muli %116, %arg16 : i32\n-      %184 = tt.splat %183 : (i32) -> tensor<128x64xi32, #blocked2>\n-      %185 = arith.addi %50, %184 : tensor<128x64xi32, #blocked2>\n-      %186 = tt.addptr %53, %185 : tensor<128x64x!tt.ptr<f16>, #blocked2>\n-      %187 = tt.load %186 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked2>\n-      %188 = arith.truncf %169 : tensor<128x128xf32, #blocked1> to tensor<128x128xf16, #blocked1>\n-      %189 = triton_gpu.convert_layout %188 : (tensor<128x128xf16, #blocked1>) -> tensor<128x128xf16, #triton_gpu.dot_op<{parent=#mma, opIdx=0}>>\n-      %190 = triton_gpu.convert_layout %187 : (tensor<128x64xf16, #blocked2>) -> tensor<128x64xf16, #shared>\n-      %191 = tt.expand_dims %182 {axis = 1 : i32} : (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xf32, #mma>\n-      %192 = tt.broadcast %191 : (tensor<128x1xf32, #mma>) -> tensor<128x64xf32, #mma>\n-      %193 = arith.mulf %arg24, %192 : tensor<128x64xf32, #mma>\n-      %194 = tt.dot %189, %190, %193 {allowTF32 = true, transA = false, transB = false} : tensor<128x128xf16, #triton_gpu.dot_op<{parent=#mma, opIdx=0}>> * tensor<128x64xf16, #shared> -> tensor<128x64xf32, #mma>\n-      scf.yield %194, %154, %147 : tensor<128x64xf32, #mma>, tensor<128xf32, #blocked0>, tensor<128xf32, #blocked0>\n-    }\n-    %97 = triton_gpu.convert_layout %96#0 : (tensor<128x64xf32, #mma>) -> tensor<128x64xf32, #blocked2>\n-    %98 = arith.muli %1, %arg22 : i32\n-    %99 = tt.addptr %arg5, %98 : !tt.ptr<f32>\n-    %100 = tt.splat %99 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %101 = tt.addptr %100, %15 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    %102 = tt.addptr %arg6, %98 : !tt.ptr<f32>\n-    %103 = tt.splat %102 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>, #blocked0>\n-    %104 = tt.addptr %103, %15 : tensor<128x!tt.ptr<f32>, #blocked0>\n-    tt.store %101, %96#1 : tensor<128xf32, #blocked0>\n-    tt.store %104, %96#2 : tensor<128xf32, #blocked0>\n-    %105 = arith.muli %1, %arg18 : i32\n-    %106 = tt.splat %arg19 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %107 = tt.splat %105 : (i32) -> tensor<128x1xi32, #blocked2>\n-    %108 = tt.splat %arg7 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %109 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<128x1xi32, #blocked2>\n-    %110 = arith.muli %109, %106 : tensor<128x1xi32, #blocked2>\n-    %111 = arith.addi %107, %110 : tensor<128x1xi32, #blocked2>\n-    %112 = tt.broadcast %111 : (tensor<128x1xi32, #blocked2>) -> tensor<128x64xi32, #blocked2>\n-    %113 = arith.addi %112, %37 : tensor<128x64xi32, #blocked2>\n-    %114 = tt.addptr %108, %113 : tensor<128x64x!tt.ptr<f16>, #blocked2>\n-    %115 = arith.truncf %97 : tensor<128x64xf32, #blocked2> to tensor<128x64xf16, #blocked2>\n-    tt.store %114, %115 : tensor<128x64xf16, #blocked2>\n-    return\n-  }\n-}\n-"}, {"filename": "python/tutorials/flash-attn-tmp.ttir", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "file_content_changes": "@@ -1,122 +0,0 @@\n-module {\n-  func public @_fwd_kernel_0d1d2d34d5d6d7d8d9d10d11c12d13d14d15c16d17d18d19c20d21d22d23c242526d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}, %arg19: i32 {tt.divisibility = 16 : i32}, %arg20: i32, %arg21: i32, %arg22: i32 {tt.divisibility = 16 : i32}) {\n-    %c128_i32 = arith.constant 128 : i32\n-    %cst = arith.constant dense<0xFF800000> : tensor<128x128xf32>\n-    %cst_0 = arith.constant dense<0> : tensor<128x128xi32>\n-    %cst_1 = arith.constant dense<195948557> : tensor<1x128xi32>\n-    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x128xf32>\n-    %c128 = arith.constant 128 : index\n-    %c0 = arith.constant 0 : index\n-    %c1_i32 = arith.constant 1 : i32\n-    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x64xf32>\n-    %cst_4 = arith.constant dense<0.000000e+00> : tensor<128xf32>\n-    %cst_5 = arith.constant dense<0xFF800000> : tensor<128xf32>\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = tt.get_program_id {axis = 1 : i32} : i32\n-    %2 = arith.muli %0, %c128_i32 : i32\n-    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>\n-    %4 = tt.splat %2 : (i32) -> tensor<128xi32>\n-    %5 = arith.addi %4, %3 : tensor<128xi32>\n-    %6 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>\n-    %7 = arith.muli %1, %arg9 : i32\n-    %8 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>\n-    %9 = tt.splat %arg10 : (i32) -> tensor<128x1xi32>\n-    %10 = arith.muli %8, %9 : tensor<128x1xi32>\n-    %11 = tt.splat %7 : (i32) -> tensor<128x1xi32>\n-    %12 = arith.addi %11, %10 : tensor<128x1xi32>\n-    %13 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>\n-    %14 = tt.broadcast %12 : (tensor<128x1xi32>) -> tensor<128x64xi32>\n-    %15 = tt.broadcast %13 : (tensor<1x64xi32>) -> tensor<128x64xi32>\n-    %16 = arith.addi %14, %15 : tensor<128x64xi32>\n-    %17 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>\n-    %18 = tt.splat %arg13 : (i32) -> tensor<128x1xi32>\n-    %19 = arith.muli %17, %18 : tensor<128x1xi32>\n-    %20 = arith.addi %11, %19 : tensor<128x1xi32>\n-    %21 = tt.broadcast %20 : (tensor<128x1xi32>) -> tensor<128x64xi32>\n-    %22 = arith.addi %21, %15 : tensor<128x64xi32>\n-    %23 = arith.muli %17, %9 : tensor<128x1xi32>\n-    %24 = arith.addi %11, %23 : tensor<128x1xi32>\n-    %25 = tt.broadcast %24 : (tensor<128x1xi32>) -> tensor<128x64xi32>\n-    %26 = arith.addi %25, %15 : tensor<128x64xi32>\n-    %27 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>\n-    %28 = tt.addptr %27, %16 : tensor<128x64x!tt.ptr<f16>>\n-    %29 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>\n-    %30 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>\n-    %31 = tt.load %28 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>\n-    %32 = arith.addi %0, %c1_i32 : i32\n-    %33 = arith.muli %32, %c128_i32 : i32\n-    %34 = arith.index_cast %33 : i32 to index\n-    %35 = tt.splat %arg3 : (f32) -> tensor<128x128xf32>\n-    %36 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>\n-    %37 = arith.addi %36, %cst_1 : tensor<1x128xi32>\n-    %38 = tt.broadcast %8 : (tensor<128x1xi32>) -> tensor<128x128xi32>\n-    %39 = tt.broadcast %37 : (tensor<1x128xi32>) -> tensor<128x128xi32>\n-    %40 = arith.cmpi sge, %38, %39 : tensor<128x128xi32>\n-    %41 = arith.sitofp %cst_0 : tensor<128x128xi32> to tensor<128x128xf32>\n-    %42 = select %40, %41, %cst : tensor<128x128xi1>, tensor<128x128xf32>\n-    %43:3 = scf.for %arg23 = %c0 to %34 step %c128 iter_args(%arg24 = %cst_3, %arg25 = %cst_4, %arg26 = %cst_5) -> (tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>) {\n-      %61 = arith.index_cast %arg23 : index to i32\n-      %62 = arith.muli %61, %arg13 : i32\n-      %63 = tt.splat %62 : (i32) -> tensor<128x64xi32>\n-      %64 = arith.addi %22, %63 : tensor<128x64xi32>\n-      %65 = tt.addptr %29, %64 : tensor<128x64x!tt.ptr<f16>>\n-      %66 = tt.load %65 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>\n-      %67 = tt.dot %31, %66, %cst_2 {allowTF32 = true, transA = false, transB = true} : tensor<128x64xf16> * tensor<128x64xf16> -> tensor<128x128xf32>\n-      %68 = arith.mulf %67, %35 : tensor<128x128xf32>\n-      %69 = arith.addf %68, %42 : tensor<128x128xf32>\n-      %70 = tt.reduce %69 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32> -> tensor<128xf32>\n-      %71 = tt.expand_dims %70 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>\n-      %72 = tt.broadcast %71 : (tensor<128x1xf32>) -> tensor<128x128xf32>\n-      %73 = arith.subf %69, %72 : tensor<128x128xf32>\n-      %74 = math.exp %73 : tensor<128x128xf32>\n-      %75 = tt.reduce %74 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32> -> tensor<128xf32>\n-      %76 = arith.cmpf ogt, %arg26, %70 : tensor<128xf32>\n-      %77 = select %76, %arg26, %70 : tensor<128xi1>, tensor<128xf32>\n-      %78 = arith.subf %arg26, %77 : tensor<128xf32>\n-      %79 = math.exp %78 : tensor<128xf32>\n-      %80 = arith.subf %70, %77 : tensor<128xf32>\n-      %81 = math.exp %80 : tensor<128xf32>\n-      %82 = arith.mulf %79, %arg25 : tensor<128xf32>\n-      %83 = arith.mulf %81, %75 : tensor<128xf32>\n-      %84 = arith.addf %82, %83 : tensor<128xf32>\n-      %85 = arith.divf %81, %84 : tensor<128xf32>\n-      %86 = tt.expand_dims %85 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>\n-      %87 = tt.broadcast %86 : (tensor<128x1xf32>) -> tensor<128x128xf32>\n-      %88 = arith.mulf %74, %87 : tensor<128x128xf32>\n-      %89 = arith.divf %arg25, %84 : tensor<128xf32>\n-      %90 = arith.mulf %89, %79 : tensor<128xf32>\n-      %91 = tt.expand_dims %90 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>\n-      %92 = tt.broadcast %91 : (tensor<128x1xf32>) -> tensor<128x64xf32>\n-      %93 = arith.mulf %arg24, %92 : tensor<128x64xf32>\n-      %94 = arith.muli %61, %arg16 : i32\n-      %95 = tt.splat %94 : (i32) -> tensor<128x64xi32>\n-      %96 = arith.addi %26, %95 : tensor<128x64xi32>\n-      %97 = tt.addptr %30, %96 : tensor<128x64x!tt.ptr<f16>>\n-      %98 = tt.load %97 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>\n-      %99 = arith.truncf %88 : tensor<128x128xf32> to tensor<128x128xf16>\n-      %100 = tt.dot %99, %98, %93 {allowTF32 = true, transA = false, transB = false} : tensor<128x128xf16> * tensor<128x64xf16> -> tensor<128x64xf32>\n-      scf.yield %100, %84, %77 : tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>\n-    }\n-    %44 = arith.muli %1, %arg22 : i32\n-    %45 = tt.addptr %arg5, %44 : !tt.ptr<f32>\n-    %46 = tt.splat %45 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>>\n-    %47 = tt.addptr %46, %5 : tensor<128x!tt.ptr<f32>>\n-    %48 = tt.addptr %arg6, %44 : !tt.ptr<f32>\n-    %49 = tt.splat %48 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>>\n-    %50 = tt.addptr %49, %5 : tensor<128x!tt.ptr<f32>>\n-    tt.store %47, %43#1 : tensor<128xf32>\n-    tt.store %50, %43#2 : tensor<128xf32>\n-    %51 = arith.muli %1, %arg18 : i32\n-    %52 = tt.splat %arg19 : (i32) -> tensor<128x1xi32>\n-    %53 = arith.muli %8, %52 : tensor<128x1xi32>\n-    %54 = tt.splat %51 : (i32) -> tensor<128x1xi32>\n-    %55 = arith.addi %54, %53 : tensor<128x1xi32>\n-    %56 = tt.broadcast %55 : (tensor<128x1xi32>) -> tensor<128x64xi32>\n-    %57 = arith.addi %56, %15 : tensor<128x64xi32>\n-    %58 = tt.splat %arg7 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>\n-    %59 = tt.addptr %58, %57 : tensor<128x64x!tt.ptr<f16>>\n-    %60 = arith.truncf %43#0 : tensor<128x64xf32> to tensor<128x64xf16>\n-    tt.store %59, %60 : tensor<128x64xf16>\n-    return\n-  }\n-}"}]