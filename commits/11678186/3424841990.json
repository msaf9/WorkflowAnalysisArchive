[{"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "file_content_changes": "@@ -146,49 +146,63 @@ def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLO\n     assert_close(c, golden, rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err), check_dtype=False)\n \n \n-# TODO[Superjomn]: Precession bug when rep in k is greater than 1\n @pytest.mark.parametrize('M,N,K,num_warps,block_M,block_N,block_K', [\n-    [32, 32, 16, 1, 32, 32, 16],\n-    [32, 16, 16, 1, 32, 16, 16],\n+    [32, 32, 16, 4, 32, 32, 16],\n+    [32, 16, 16, 4, 32, 32, 16],\n+    [128, 8, 8, 4, 32, 32, 16],\n+    [127, 41, 43, 4, 32, 32, 16],\n ])\n def test_gemm_fmadot(M, N, K, num_warps, block_M, block_N, block_K):\n     @triton.jit\n     def matmul_kernel(\n         a_ptr, b_ptr, c_ptr,\n+        M, N, K,\n         stride_am, stride_ak,\n         stride_bk, stride_bn,\n         stride_cm, stride_cn,\n-        K: tl.constexpr,\n         BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n     ):\n-        offs_m = tl.arange(0, BLOCK_SIZE_M)\n-        offs_n = tl.arange(0, BLOCK_SIZE_N)\n+        pid = tl.program_id(axis=0)\n+        # num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n+        num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n+        pid_m = pid // num_pid_n\n+        pid_n = pid % num_pid_n\n+\n+        offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n+        offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n         offs_k = tl.arange(0, BLOCK_SIZE_K)\n-        a_ptrs = a_ptr + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n-        b_ptrs = b_ptr + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn\n+        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n+        b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n+\n         accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n         for k in range(0, K, BLOCK_SIZE_K):\n-            a = tl.load(a_ptrs)\n-            b = tl.load(b_ptrs)\n+            a_mask = (offs_am[:, None] < M) & (offs_k[None, :] < K)\n+            b_mask = (offs_k[:, None] < K) & (offs_bn[None, :] < N)\n+            a = tl.load(a_ptrs, a_mask)\n+            b = tl.load(b_ptrs, b_mask)\n             # NOTE the allow_tf32 should be false to force the dot op to do fmadot lowering\n             accumulator += tl.dot(a, b, allow_tf32=False)\n             a_ptrs += BLOCK_SIZE_K * stride_ak\n             b_ptrs += BLOCK_SIZE_K * stride_bk\n+            offs_k += BLOCK_SIZE_K\n \n-        c_ptrs = c_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn\n-        tl.store(c_ptrs, accumulator)\n+        offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n+        offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n+        c_ptrs = c_ptr + offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn\n+        c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n+        tl.store(c_ptrs, accumulator, c_mask)\n \n     a = torch.randn((M, K), device='cuda', dtype=torch.float32)\n     b = torch.randn((K, N), device='cuda', dtype=torch.float32)\n     c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n-    grid = lambda META: (1, )\n-    matmul_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,\n+\n+    grid = lambda META: (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)\n+    matmul_kernel[grid](a, b, c,\n+                        M, N, K,\n                         stride_am=a.stride(0), stride_ak=a.stride(1),\n                         stride_bk=b.stride(0), stride_bn=b.stride(1),\n                         stride_cm=c.stride(0), stride_cn=c.stride(1),\n-                        K=a.shape[1], BLOCK_SIZE_M=block_M, BLOCK_SIZE_N=block_N,\n-                        BLOCK_SIZE_K=block_K, num_warps=num_warps)\n+                        BLOCK_SIZE_M=block_M, BLOCK_SIZE_N=block_N, BLOCK_SIZE_K=block_K)\n+\n     golden = torch.matmul(a, b)\n-    print(c)\n-    print(golden)\n     torch.testing.assert_close(c, golden)"}]