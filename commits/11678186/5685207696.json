[{"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -329,8 +329,9 @@ def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_stages=3, e\n     import typing\n     from ..compiler import compile, CompiledKernel\n     sig_key =  {sig_keys},\n+    constexpr_key_args = ({f'{constexpr_keys},' if len(constexpr_keys) > 0 else ()})\n     constexpr_key = []\n-    for arg in ({constexpr_keys}):\n+    for arg in constexpr_key_args:\n         if isinstance(arg, typing.Hashable):\n             constexpr_key.append(arg)\n         else:\n@@ -383,7 +384,7 @@ def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_stages=3, e\n       args = [{args}]\n       all_args = {', '.join([f'{arg}' for arg in self.arg_names])},\n       configs = self._get_config(*all_args),\n-      constants = self._make_constants(({constexpr_keys}))\n+      constants = self._make_constants(constexpr_key_args)\n       constants.update({{i: None for i, arg in enumerate(all_args) if arg is None}})\n       constants.update({{i: 1 for i in configs[0].equal_to_1}})\n       # build kernel signature -- doesn't include specialized arguments"}]