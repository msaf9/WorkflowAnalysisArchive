[{"filename": "lib/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.cpp", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "file_content_changes": "@@ -47,7 +47,7 @@ class NVGPUOpPatternBase : public mlir::RewritePattern {\n         static_cast<const ConcreteT *>(this)->hasSideEffects();\n     PTXBuilder ptxBuilder;\n     auto &ptxInstr = *ptxBuilder.create<PTXInstr>(ptxAsm);\n-    ptxInstr();\n+    ptxInstr({}, /*onlyAttachMLIRArgs=*/true);\n     auto asmReturnTy = void_ty(ctx);\n     ptxBuilder.launch(rewriter, loc, asmReturnTy,\n                       /*hasSideEffects*/ hasSideEffects);\n@@ -65,7 +65,7 @@ class CGABarrierSyncOpPattern\n   using Base::Base;\n   bool hasSideEffects() const { return false; }\n   std::string getPtxAsm(ttn::CGABarrierSyncOp op) const {\n-    return \"barrier.cluster.sync.aligned\";\n+    return \"barrier.cluster.sync.aligned;\";\n   }\n };\n \n@@ -80,9 +80,9 @@ class FenceAsyncSharedOpPattern\n   std::string getPtxAsm(ttn::FenceAsyncSharedOp op) const {\n     auto bCluster = op.getBCluster();\n     if (bCluster)\n-      return \"fence.proxy.async.shared::cluster\";\n+      return \"fence.proxy.async.shared::cluster;\";\n     else\n-      return \"fence.proxy.async.shared::cta\";\n+      return \"fence.proxy.async.shared::cta;\";\n   }\n };\n \n@@ -94,7 +94,7 @@ class WGMMAFenceOpPattern\n \n   bool hasSideEffects() const { return true; }\n   std::string getPtxAsm(ttn::WGMMAFenceOp op) const {\n-    return \"wgmma.fence.sync.aligned\";\n+    return \"wgmma.fence.sync.aligned;\";\n   }\n };\n \n@@ -109,35 +109,23 @@ class WGMMACommitGroupOpPattern\n   bool hasSideEffects() const { return true; }\n \n   std::string getPtxAsm(ttn::WGMMACommitGroupOp op) const {\n-    return \"wgmma.commit_group.sync.aligned\";\n+    return \"wgmma.commit_group.sync.aligned;\";\n   }\n };\n \n-class WGMMAWaitGroupOpPattern : public mlir::RewritePattern {\n+class WGMMAWaitGroupOpPattern\n+    : public NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp,\n+                                WGMMAWaitGroupOpPattern> {\n public:\n-  WGMMAWaitGroupOpPattern(mlir::MLIRContext *context)\n-      : mlir::RewritePattern(ttn::WGMMAWaitGroupOp::getOperationName(), 1,\n-                             context) {}\n-\n-  mlir::LogicalResult\n-  matchAndRewrite(mlir::Operation *op,\n-                  mlir::PatternRewriter &rewriter) const override {\n-    auto ctx = rewriter.getContext();\n-    auto wgmmaWaitGroupOp = llvm::dyn_cast<ttn::WGMMAWaitGroupOp>(op);\n-    if (!wgmmaWaitGroupOp)\n-      return mlir::failure();\n-    auto loc = op->getLoc();\n-    auto pendings = wgmmaWaitGroupOp.getPendings();\n-    PTXBuilder ptxBuilder;\n+  using Base =\n+      NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp, WGMMAWaitGroupOpPattern>;\n+  using Base::Base;\n \n-    auto &ptxInstr =\n-        *ptxBuilder.create<PTXInstr>(\"wgmma.wait_group.sync.aligned\");\n-    ptxInstr(ptxBuilder.newConstantOperand(pendings));\n+  bool hasSideEffects() const { return true; }\n \n-    auto asmReturnTy = void_ty(ctx);\n-    ptxBuilder.launch(rewriter, loc, asmReturnTy, /*hasSideEffect*/ true);\n-    rewriter.eraseOp(op);\n-    return mlir::success();\n+  std::string getPtxAsm(ttn::WGMMAWaitGroupOp op) const {\n+    auto pendings = op.getPendings();\n+    return \"wgmma.wait_group.sync.aligned \" + std::to_string(pendings) + \";\";\n   }\n };\n \n@@ -333,9 +321,9 @@ class ClusterArriveOpPattern\n   std::string getPtxAsm(ttn::ClusterArriveOp op) const {\n     auto relaxed = op.getRelaxed();\n     if (relaxed)\n-      return \"barrier.cluster.arrive.relaxed.aligned\";\n+      return \"barrier.cluster.arrive.relaxed.aligned;\";\n     else\n-      return \"barrier.cluster.arrive.aligned\";\n+      return \"barrier.cluster.arrive.aligned;\";\n   }\n };\n \n@@ -346,7 +334,7 @@ class ClusterWaitOpPattern\n   using Base::Base;\n   bool hasSideEffects() const { return false; }\n   std::string getPtxAsm(ttn::ClusterWaitOp op) const {\n-    return \"barrier.cluster.wait.aligned\";\n+    return \"barrier.cluster.wait.aligned;\";\n   }\n };\n \n@@ -749,7 +737,7 @@ class FenceMBarrierInitOpPattern\n   bool hasSideEffects() const { return true; }\n \n   std::string getPtxAsm(ttn::FenceMBarrierInitOp op) const {\n-    return \"fence.mbarrier_init.release.cluster\";\n+    return \"fence.mbarrier_init.release.cluster;\";\n   }\n };\n \n@@ -822,7 +810,7 @@ class CGABarrierArriveOpPattern\n   using Base::Base;\n   bool hasSideEffects() const { return false; }\n   std::string getPtxAsm(ttn::CGABarrierArriveOp op) const {\n-    return \"barrier.cluster.arrive\";\n+    return \"barrier.cluster.arrive;\";\n   }\n };\n \n@@ -835,7 +823,7 @@ class CGABarrierWaitOpPattern\n   using Base::Base;\n   bool hasSideEffects() const { return false; }\n   std::string getPtxAsm(ttn::CGABarrierWaitOp op) const {\n-    return \"barrier.cluster.wait\";\n+    return \"barrier.cluster.wait;\";\n   }\n };\n "}]