[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -1460,7 +1460,7 @@ def kernel(X, Z, BLOCK: tl.constexpr):\n     (op, 'float32', shape, axis)\n     for op in ['min', 'max', 'sum', 'argmin', 'argmax']\n     for shape in reduce2d_shapes\n-    for axis in [0, 1]\n+    for axis in [0, 1, -1]\n ] + [\n     (op, 'float32', [16, 32], None)\n     for op in ['min', 'max', 'sum']\n@@ -1480,7 +1480,7 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n         z = GENERATE_TEST_HERE\n         if AXIS is None:\n             tl.store(Z, z)\n-        elif AXIS == 1:\n+        elif AXIS != 0:\n             tl.store(Z + range_m, z)\n         else:\n             tl.store(Z + range_n, z)\n@@ -1505,7 +1505,7 @@ def kernel(X, Z, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, AXIS: tl.constexp\n     else:\n         z_ref = numpy_op(x, axis=axis).astype(getattr(np, z_dtype_str))\n     # triton result\n-    ret_numel = 1 if axis is None else shape[1 - axis]\n+    ret_numel = z_ref.size\n     z_tri = to_triton(numpy_random((ret_numel,), dtype_str=z_dtype_str, rs=rs),\n                       device=device, dst_type=z_tri_dtype_str)\n     kernel[(1,)](x_tri, z_tri, BLOCK_M=shape[0], BLOCK_N=shape[1], AXIS=axis)"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -1290,6 +1290,8 @@ def where(condition: tl.tensor,\n def reduction(\n     inputs: Sequence[tl.tensor], axis: int, region_builder_fn, builder: ir.builder\n ) -> Tuple[tl.tensor, ...]:\n+    if axis < 0:\n+        axis = len(inputs[0].shape) + axis\n     if axis is None:\n         new_inputs = []\n         for i in range(len(inputs)):"}]