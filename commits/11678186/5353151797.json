[{"filename": "include/triton/Dialect/Triton/IR/TritonAttrDefs.td", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -12,7 +12,6 @@ def TT_CacheModifierAttr : I32EnumAttr<\n         I32EnumAttrCase<\"CG\", 3, \"cg\">,\n         I32EnumAttrCase<\"WB\", 4, \"wb\">,\n         I32EnumAttrCase<\"CS\", 5, \"cs\">,\n-        I32EnumAttrCase<\"WT\", 6, \"wt\">,\n     ]> {\n     let cppNamespace = \"::mlir::triton\";\n }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -357,7 +357,6 @@ struct StoreOpConversion\n               .o(\"wb\", op.getCache() == triton::CacheModifier::WB)\n               .o(\"cg\", op.getCache() == triton::CacheModifier::CG)\n               .o(\"cs\", op.getCache() == triton::CacheModifier::CS)\n-              .o(\"wt\", op.getCache() == triton::CacheModifier::WT)\n               .o(\"L1::evict_first\",\n                  op.getEvict() == triton::EvictionPolicy::EVICT_FIRST)\n               .o(\"L1::evict_last\","}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -91,7 +91,6 @@ void init_triton_ir(py::module &&m) {\n       .value(\"CG\", mlir::triton::CacheModifier::CG)\n       .value(\"WB\", mlir::triton::CacheModifier::WB)\n       .value(\"CS\", mlir::triton::CacheModifier::CS)\n-      .value(\"WT\", mlir::triton::CacheModifier::WT)\n       .export_values();\n \n   py::enum_<mlir::triton::MemSemantic>(m, \"MEM_SEMANTIC\")"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "file_content_changes": "@@ -2267,7 +2267,7 @@ def _kernel(dst, src, off, N, BLOCK_SIZE: tl.constexpr, HINT: tl.constexpr):\n # ---------------\n \n \n-@pytest.mark.parametrize(\"cache\", [\"\", \".wb\", \".cg\", \".cs\", \".wt\"])\n+@pytest.mark.parametrize(\"cache\", [\"\", \".wb\", \".cg\", \".cs\"])\n def test_store_cache_modifier(cache):\n     src = torch.empty(128, device='cuda')\n     dst = torch.empty(128, device='cuda')\n@@ -2284,27 +2284,18 @@ def _kernel(dst, src, CACHE: tl.constexpr):\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' not in ptx\n-        assert 'st.global.wt' not in ptx\n     if cache == '.wb':\n         assert 'st.global.wb' in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' not in ptx\n-        assert 'st.global.wt' not in ptx\n     if cache == '.cg':\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' in ptx\n         assert 'st.global.cs' not in ptx\n-        assert 'st.global.wt' not in ptx\n     if cache == '.cs':\n         assert 'st.global.wb' not in ptx\n         assert 'st.global.cg' not in ptx\n         assert 'st.global.cs' in ptx\n-        assert 'st.global.wt' not in ptx\n-    if cache == '.wt':\n-        assert 'st.global.wb' not in ptx\n-        assert 'st.global.cg' not in ptx\n-        assert 'st.global.cs' not in ptx\n-        assert 'st.global.wt' in ptx\n \n # ---------------\n # test if"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -796,8 +796,6 @@ def _str_to_store_cache_modifier(cache_modifier):\n             cache = ir.CACHE_MODIFIER.CG\n         elif cache_modifier == \".cs\":\n             cache = ir.CACHE_MODIFIER.CS\n-        elif cache_modifier == \".wt\":\n-            cache = ir.CACHE_MODIFIER.WT\n         else:\n             raise ValueError(f\"Cache modifier {cache_modifier} not supported\")\n     return cache"}]