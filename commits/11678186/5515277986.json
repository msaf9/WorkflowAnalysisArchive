[{"filename": "docs/meetups/07-18-2023.md", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -4,8 +4,9 @@\n 3. Mechanisms for smaller technical discussions: Slack channel per topic? Dedicated meetings for some topics?\n 4. Stability, testing, regressions: Improving CI and conformance/testing for validating new back-ends.\n 5. Language improvements/pain points\n-6. Discussion of known/anticipated design changes for H100\n-7. Some specific more tactical areas:\n+6. Windows Support\n+7. Discussion of known/anticipated design changes for H100\n+8. Some specific more tactical areas:\n    - int8.\n    - A low hanging fruit is to let tl.dot take int8 and leverage mma.\n    - Sm75."}, {"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "file_content_changes": "@@ -31,7 +31,8 @@ class TT_Op<string mnemonic, list<Trait> traits = []> :\n //   fptoui, fptosi, uitofp, sitofp,\n //   extf, tructf,\n //   extui, extsi, tructi\n-def TT_IntToPtrOp : TT_Op<\"int_to_ptr\", [SameOperandsAndResultShape,\n+def TT_IntToPtrOp : TT_Op<\"int_to_ptr\", [Elementwise,\n+                                         SameOperandsAndResultShape,\n                                          SameOperandsAndResultEncoding,\n                                          Pure,\n                                          /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n@@ -44,7 +45,8 @@ def TT_IntToPtrOp : TT_Op<\"int_to_ptr\", [SameOperandsAndResultShape,\n     let assemblyFormat = \"$from attr-dict `:` type($from) `->` type($result)\";\n }\n \n-def TT_PtrToIntOp : TT_Op<\"ptr_to_int\", [SameOperandsAndResultShape,\n+def TT_PtrToIntOp : TT_Op<\"ptr_to_int\", [Elementwise,\n+                                         SameOperandsAndResultShape,\n                                          SameOperandsAndResultEncoding,\n                                          Pure,\n                                          /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n@@ -58,7 +60,8 @@ def TT_PtrToIntOp : TT_Op<\"ptr_to_int\", [SameOperandsAndResultShape,\n }\n \n // arith.bitcast doesn't support pointers\n-def TT_BitcastOp : TT_Op<\"bitcast\", [SameOperandsAndResultShape,\n+def TT_BitcastOp : TT_Op<\"bitcast\", [Elementwise,\n+                                     SameOperandsAndResultShape,\n                                      SameOperandsAndResultEncoding,\n                                      Pure,\n                                      /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n@@ -73,6 +76,7 @@ def TT_BitcastOp : TT_Op<\"bitcast\", [SameOperandsAndResultShape,\n     // TODO: Add verifier\n }\n \n+// FIXME: Not elementwise because scalars are not supported\n def TT_FpToFpOp : TT_Op<\"fp_to_fp\", [SameOperandsAndResultShape,\n                                      SameOperandsAndResultEncoding,\n                                      Pure,\n@@ -99,6 +103,7 @@ def TT_FpToFpOp : TT_Op<\"fp_to_fp\", [SameOperandsAndResultShape,\n //\n def TT_AddPtrOp : TT_Op<\"addptr\",\n                      [Pure,\n+                      Elementwise,\n                       SameOperandsAndResultShape,\n                       SameOperandsAndResultEncoding,\n                       TypesMatchWith<\"result type matches ptr type\",\n@@ -458,7 +463,8 @@ def TT_ScanReturnOp: TT_Op<\"scan.return\",\n //\n class TT_ExternElementwiseOpBase<string mnemonic, list<Trait> traits = []> :\n     TT_Op<mnemonic,\n-         traits # [SameOperandsAndResultEncoding,\n+         traits # [Elementwise,\n+                   SameOperandsAndResultEncoding,\n                    SameVariadicOperandSize]> {\n \n     let description = [{"}, {"filename": "include/triton/Dialect/Triton/Transforms/Passes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -8,6 +8,8 @@ namespace triton {\n \n std::unique_ptr<Pass> createCombineOpsPass();\n \n+std::unique_ptr<Pass> createReorderBroadcastPass();\n+\n std::unique_ptr<Pass>\n createRewriteTensorPointerPass(int computeCapability = 80);\n "}, {"filename": "include/triton/Dialect/Triton/Transforms/Passes.td", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "file_content_changes": "@@ -19,6 +19,15 @@ def TritonCombineOps : Pass</*cli-arg*/\"triton-combine\", /*Op*/\"mlir::ModuleOp\">\n   let dependentDialects = [\"mlir::arith::ArithDialect\"];\n }\n \n+def TritonReorderBroadcast : Pass</*cli-arg*/\"triton-reorder-broadcast\", /*Op*/\"mlir::ModuleOp\"> {\n+  let summary = \"Moves broadcast and splat after elementwise operations\";\n+  let description = [{\n+    elementwise(splat(a), splat(b), ...) => splat(elementwise(a, b, ...))\n+  }];\n+  let constructor = \"mlir::triton::createReorderBroadcastPass()\";\n+  let dependentDialects = [\"mlir::triton::TritonDialect\"];\n+}\n+\n def TritonRewriteTensorPointer : Pass</*cli-arg*/\"triton-rewrite-tensor-pointer\", /*Op*/\"mlir::ModuleOp\"> {\n   let summary = \"Rewrite load/stores with tensor pointers into legacy load/stores\";\n   let description = [{"}, {"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "file_content_changes": "@@ -641,6 +641,31 @@ LogicalResult ExpandDimsOp::canonicalize(ExpandDimsOp op,\n                                                  splat.getOperand());\n     return mlir::success();\n   }\n+  // expand_dims(broadcast) -> broadcast(expand_dims)\n+  //\n+  // On it's own this doesn't do much, but consider\n+  //    broadcast(expand_dims(broadcast))\n+  // -> broadcast(broadcast(expand_dims))\n+  // -> broadcast(expand_dims)\n+  if (auto broadcast = dyn_cast<triton::BroadcastOp>(definingOp)) {\n+    auto src = broadcast.getSrc();\n+    auto srcTy = src.getType().dyn_cast<RankedTensorType>();\n+    auto elemTy = srcTy.getElementType();\n+    auto srcShape = srcTy.getShape();\n+\n+    llvm::SmallVector<int64_t, 4> newExpandShape(srcShape.begin(),\n+                                                 srcShape.end());\n+    newExpandShape.insert(newExpandShape.begin() + op.getAxis(), 1);\n+    auto newExpandTy = RankedTensorType::get(newExpandShape, elemTy);\n+\n+    auto newExpand = rewriter.create<triton::ExpandDimsOp>(\n+        op.getLoc(), newExpandTy, src, op.getAxis());\n+    auto newBroadcast = rewriter.create<triton::BroadcastOp>(\n+        broadcast.getLoc(), op.getType(), newExpand.getResult());\n+    rewriter.replaceOp(op, {newBroadcast.getResult()});\n+    return mlir::success();\n+  }\n+\n   return mlir::failure();\n }\n "}, {"filename": "lib/Dialect/Triton/Transforms/CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -4,6 +4,7 @@ add_public_tablegen_target(TritonCombineIncGen)\n \n add_mlir_dialect_library(TritonTransforms\n   Combine.cpp\n+  ReorderBroadcast.cpp\n   RewriteTensorPointer.cpp\n \n   DEPENDS"}, {"filename": "lib/Dialect/Triton/Transforms/ReorderBroadcast.cpp", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "file_content_changes": "@@ -0,0 +1,242 @@\n+#include \"mlir/IR/BuiltinAttributes.h\"\n+#include \"mlir/IR/Matchers.h\"\n+#include \"mlir/IR/PatternMatch.h\"\n+#include \"mlir/Pass/Pass.h\"\n+#include \"mlir/Support/LogicalResult.h\"\n+#include \"mlir/Transforms/GreedyPatternRewriteDriver.h\"\n+\n+#include \"triton/Dialect/Triton/IR/Dialect.h\"\n+#include \"triton/Dialect/Triton/Transforms/Passes.h\"\n+\n+#include <memory>\n+\n+namespace mlir {\n+#define GEN_PASS_DEF_TRITONREORDERBROADCAST\n+#include \"triton/Dialect/Triton/Transforms/Passes.h.inc\"\n+} // namespace mlir\n+\n+using namespace mlir;\n+\n+namespace {\n+\n+Operation *cloneWithNewArgsAndResultTypes(PatternRewriter &rewriter,\n+                                          Operation *op, ValueRange newOperands,\n+                                          TypeRange newTypes) {\n+  OperationState newElementwiseState(op->getLoc(), op->getName());\n+  newElementwiseState.addOperands(newOperands);\n+  newElementwiseState.addTypes(newTypes);\n+  newElementwiseState.addAttributes(op->getAttrs());\n+  return rewriter.create(newElementwiseState);\n+}\n+\n+bool isSplat(Operation *op) {\n+  if (auto splatOp = llvm::dyn_cast<triton::SplatOp>(op)) {\n+    return true;\n+  }\n+  DenseElementsAttr constAttr;\n+  return (matchPattern(op, m_Constant(&constAttr)) && constAttr.isSplat());\n+}\n+\n+// elementwise(splat(a), splat(b), ...) => splat(elementwise(a, b, ...))\n+struct MoveSplatAfterElementwisePattern\n+    : public mlir::OpTraitRewritePattern<mlir::OpTrait::Elementwise> {\n+\n+  MoveSplatAfterElementwisePattern(mlir::MLIRContext *context)\n+      : OpTraitRewritePattern(context) {}\n+\n+  mlir::LogicalResult match(Operation *op) const override {\n+    if (!isMemoryEffectFree(op)) {\n+      return mlir::failure();\n+    }\n+\n+    for (auto operand : op->getOperands()) {\n+      auto definingOp = operand.getDefiningOp();\n+      if (!definingOp)\n+        return mlir::failure();\n+\n+      if (!isSplat(definingOp)) {\n+        return mlir::failure();\n+      }\n+    }\n+    return mlir::success(op->getNumOperands() > 0);\n+  }\n+\n+  void rewrite(Operation *op, mlir::PatternRewriter &rewriter) const override {\n+    auto loc = op->getLoc();\n+    auto operands = op->getOperands();\n+\n+    llvm::SmallVector<Value, 4> scalarOperands(operands.size());\n+    for (unsigned iOp = 0; iOp < operands.size(); ++iOp) {\n+      auto definingOp = operands[iOp].getDefiningOp();\n+\n+      DenseElementsAttr constAttr;\n+      if (auto splatOp = llvm::dyn_cast<triton::SplatOp>(definingOp)) {\n+        scalarOperands[iOp] = splatOp.getSrc();\n+      } else if (matchPattern(definingOp, m_Constant(&constAttr)) &&\n+                 constAttr.isSplat()) {\n+        auto value = constAttr.getSplatValue<Attribute>();\n+        scalarOperands[iOp] = arith::ConstantOp::materialize(\n+            rewriter, value, constAttr.getElementType(), loc);\n+      } else {\n+        llvm_unreachable(\"Expected a splat\");\n+      }\n+    }\n+\n+    auto resultTypes = op->getResultTypes();\n+    llvm::SmallVector<Type, 4> scalarResultTys;\n+    for (auto resultTy : resultTypes) {\n+      auto elemTy = resultTy.dyn_cast<TensorType>().getElementType();\n+      scalarResultTys.push_back(elemTy);\n+    }\n+\n+    auto newOp = cloneWithNewArgsAndResultTypes(rewriter, op, scalarOperands,\n+                                                scalarResultTys);\n+\n+    for (unsigned iRes = 0; iRes < resultTypes.size(); ++iRes) {\n+      auto newResult = rewriter.create<triton::SplatOp>(loc, resultTypes[iRes],\n+                                                        newOp->getResult(iRes));\n+      rewriter.replaceAllUsesWith(op->getResult(iRes), newResult);\n+    }\n+  }\n+};\n+\n+// elementwise(broadcast(a)) => broadcast(elementwise(a))\n+// This also generalizes to multiple arguments when the rest are splat-like\n+// Not handled: multiple broadcasted arguments\n+struct MoveBroadcastAfterElementwisePattern\n+    : public mlir::OpTraitRewritePattern<mlir::OpTrait::Elementwise> {\n+\n+  MoveBroadcastAfterElementwisePattern(mlir::MLIRContext *context)\n+      : OpTraitRewritePattern(context) {}\n+\n+  mlir::LogicalResult match(Operation *op) const override {\n+    if (!isMemoryEffectFree(op)) {\n+      return mlir::failure();\n+    }\n+\n+    auto operands = op->getOperands();\n+    bool seenBroadcast = false;\n+    for (auto operand : operands) {\n+      auto definingOp = operand.getDefiningOp();\n+      if (!definingOp) {\n+        return mlir::failure();\n+      }\n+\n+      if (auto broadcastOp = llvm::dyn_cast<triton::BroadcastOp>(definingOp)) {\n+        if (seenBroadcast) {\n+          // Only support one broadcasted argument for now\n+          return mlir::failure();\n+        }\n+        seenBroadcast = true;\n+      } else if (!isSplat(definingOp)) {\n+        // Not splat or broadcast\n+        return mlir::failure();\n+      }\n+    }\n+    return mlir::success(seenBroadcast);\n+  }\n+\n+  void rewrite(Operation *op, mlir::PatternRewriter &rewriter) const override {\n+    auto loc = op->getLoc();\n+\n+    // Find broadcast op\n+    auto operands = op->getOperands();\n+    triton::BroadcastOp broadcastOp;\n+    for (auto operand : operands) {\n+      if (broadcastOp = operand.getDefiningOp<triton::BroadcastOp>()) {\n+        break;\n+      }\n+    }\n+\n+    auto src = broadcastOp.getSrc();\n+    auto srcTy = src.getType().dyn_cast<RankedTensorType>();\n+    auto srcShape = srcTy.getShape();\n+    auto srcEncoding = srcTy.getEncoding();\n+\n+    // Reshape operands to match srcShape\n+    llvm::SmallVector<Value, 4> newOperands;\n+    for (auto operand : operands) {\n+      auto definingOp = operand.getDefiningOp();\n+      if (llvm::isa<triton::BroadcastOp>(definingOp)) {\n+        newOperands.push_back(src);\n+        continue;\n+      }\n+      auto elemTy =\n+          operand.getType().dyn_cast<RankedTensorType>().getElementType();\n+      auto newTy = RankedTensorType::get(srcShape, elemTy, srcEncoding);\n+      if (auto splatOp = llvm::dyn_cast<triton::SplatOp>(definingOp)) {\n+        auto newSplat =\n+            rewriter.create<triton::SplatOp>(loc, newTy, splatOp.getSrc());\n+        newOperands.push_back(newSplat);\n+        continue;\n+      }\n+      DenseElementsAttr constAttr;\n+      if (matchPattern(definingOp, m_Constant(&constAttr)) &&\n+          constAttr.isSplat()) {\n+        auto scalarValue = constAttr.getSplatValue<Attribute>();\n+        auto splatValue = SplatElementsAttr::get(newTy, scalarValue);\n+        auto newConstant =\n+            rewriter.create<arith::ConstantOp>(loc, newTy, splatValue);\n+        newOperands.push_back(newConstant);\n+        continue;\n+      }\n+      llvm_unreachable(\"Expected broadcast or splat\");\n+    }\n+\n+    // Reshape results to match srcShape\n+    llvm::SmallVector<Type, 4> newResultTypes;\n+    auto resultTypes = op->getResultTypes();\n+    for (auto resultTy : resultTypes) {\n+      auto elemTy = resultTy.dyn_cast<RankedTensorType>().getElementType();\n+      newResultTypes.push_back(\n+          RankedTensorType::get(srcShape, elemTy, srcEncoding));\n+    }\n+\n+    // Create new op and broadcast results\n+    auto newOp = cloneWithNewArgsAndResultTypes(rewriter, op, newOperands,\n+                                                newResultTypes);\n+    for (unsigned iRes = 0; iRes < newResultTypes.size(); ++iRes) {\n+      auto newResult = rewriter.create<triton::BroadcastOp>(\n+          loc, resultTypes[iRes], newOp->getResult(iRes));\n+      rewriter.replaceAllUsesWith(op->getResult(iRes), newResult);\n+    }\n+  }\n+};\n+\n+template <typename OpType>\n+class CanonicalizePattern : public mlir::OpRewritePattern<OpType> {\n+public:\n+  explicit CanonicalizePattern(mlir::MLIRContext *context)\n+      : mlir::OpRewritePattern<OpType>(context) {}\n+\n+  mlir::LogicalResult\n+  matchAndRewrite(OpType op, mlir::PatternRewriter &rewriter) const override {\n+    return OpType::canonicalize(op, rewriter);\n+  }\n+};\n+\n+class ReorderBroadcastPass\n+    : public mlir::impl::TritonReorderBroadcastBase<ReorderBroadcastPass> {\n+public:\n+  void runOnOperation() override {\n+    mlir::MLIRContext *context = &getContext();\n+    mlir::RewritePatternSet patterns(context);\n+    mlir::ModuleOp m = getOperation();\n+\n+    patterns.add<CanonicalizePattern<triton::BroadcastOp>>(context);\n+    patterns.add<CanonicalizePattern<triton::ExpandDimsOp>>(context);\n+    // elementwise(broadcast(a)) => broadcast(elementwise(a))\n+    patterns.add<MoveBroadcastAfterElementwisePattern>(context);\n+    // elementwise(splat(a), splat(b), ...) => splat(elementwise(a, b, ...))\n+    patterns.add<MoveSplatAfterElementwisePattern>(context);\n+\n+    if (applyPatternsAndFoldGreedily(m, std::move(patterns)).failed())\n+      signalPassFailure();\n+  }\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<mlir::Pass> mlir::triton::createReorderBroadcastPass() {\n+  return std::make_unique<ReorderBroadcastPass>();\n+}"}, {"filename": "lib/Dialect/Triton/Transforms/RewriteTensorPointer.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -470,8 +470,8 @@ class RewriteTensorPointerPass\n \n   void runOnOperation() override {\n     // Only rewrite if the hardware does not support\n-    if (computeCapability >= 90)\n-      return;\n+    // if (computeCapability >= 90)\n+    //   return;\n \n     // NOTES(Chenggang): we don't use `ConversionPatternRewriter`, because\n     // MLIR does not support one-multiple value mapping. For example, if we use"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "file_content_changes": "@@ -643,6 +643,26 @@ void init_triton_ir(py::module &&m) {\n              return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n                  v, self.getBuilder().getI64Type()));\n            })\n+      .def(\"get_uint8\",\n+           [](TritonOpBuilder &self, uint64_t v) -> mlir::Value {\n+             return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n+                 v, self.getBuilder().getI8Type()));\n+           })\n+      .def(\"get_uint16\",\n+           [](TritonOpBuilder &self, uint64_t v) -> mlir::Value {\n+             return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n+                 v, self.getBuilder().getI16Type()));\n+           })\n+      .def(\"get_uint32\",\n+           [](TritonOpBuilder &self, uint64_t v) -> mlir::Value {\n+             return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n+                 v, self.getBuilder().getI32Type()));\n+           })\n+      .def(\"get_uint64\",\n+           [](TritonOpBuilder &self, uint64_t v) -> mlir::Value {\n+             return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n+                 v, self.getBuilder().getI64Type()));\n+           })\n       .def(\"get_bf16\",\n            [](TritonOpBuilder &self, float v) -> mlir::Value {\n              auto type = self.getBuilder().getBF16Type();\n@@ -1541,6 +1561,10 @@ void init_triton_ir(py::module &&m) {\n            [](mlir::PassManager &self) {\n              self.addPass(mlir::triton::createCombineOpsPass());\n            })\n+      .def(\"add_reorder_broadcast_pass\",\n+           [](mlir::PassManager &self) {\n+             self.addPass(mlir::triton::createReorderBroadcastPass());\n+           })\n       .def(\"add_rewrite_tensor_pointer_pass\",\n            [](mlir::PassManager &self, int computeCapability) {\n              self.addPass(mlir::triton::createRewriteTensorPointerPass("}, {"filename": "python/test/regression/test_performance.py", "status": "modified", "additions": 94, "deletions": 40, "changes": 134, "file_content_changes": "@@ -55,37 +55,52 @@ def nvsmi(attrs):\n         (1024, 64, 1024): {'float16': 0.0692},\n         (4096, 64, 4096): {'float16': 0.264},\n         (8192, 64, 8192): {'float16': 0.452},\n+        # Non pow 2 shapes\n+        (1000, 200, 100): {'float16': 0.084},\n+        (1000, 200, 700): {'float16': 0.084},\n+        (994, 136, 402): {'float16': 0.084},\n+        (995, 135, 409): {'float16': 0.084},\n+        (99, 1357, 409): {'float16': 0.084},\n     },\n     # NOTE:\n     # A100 in the CI server is slow-ish for some reason.\n     # On some other servers, we are getting about 90% peak for 8kx8x8k float16\n     'a100': {\n-        (512, 512, 512): {'float16': 0.084, 'float32': 0.13, 'int8': 0.05},\n-        (1024, 1024, 1024): {'float16': 0.332, 'float32': 0.35, 'int8': 0.169},\n-        (2048, 2048, 2048): {'float16': 0.641, 'float32': 0.57, 'int8': 0.34},\n-        (4096, 4096, 4096): {'float16': 0.785, 'float32': 0.75, 'int8': 0.46},\n-        (8192, 8192, 8192): {'float16': 0.805, 'float32': 0.85, 'int8': 0.51},\n+        # square\n+        (512, 512, 512): {'float16': 0.084, 'float32': 0.12, 'int8': 0.05},\n+        (1024, 1024, 1024): {'float16': 0.332, 'float32': 0.352, 'int8': 0.169},\n+        (2048, 2048, 2048): {'float16': 0.635, 'float32': 0.522, 'int8': 0.34},\n+        (4096, 4096, 4096): {'float16': 0.750, 'float32': 0.810, 'int8': 0.46},\n+        (8192, 8192, 8192): {'float16': 0.760, 'float32': 0.760, 'int8': 0.51},\n         # tall-skinny\n-        (16, 1024, 1024): {'float16': 0.0077, 'float32': 0.0127, 'int8': 0.005},\n-        (16, 4096, 4096): {'float16': 0.044, 'float32': 0.0457, 'int8': 0.0259},\n-        (16, 8192, 8192): {'float16': 0.07, 'float32': 0.0648, 'int8': 0.0431},\n-        (64, 1024, 1024): {'float16': 0.028, 'float32': 0.0509, 'int8': 0.0169},\n-        (64, 4096, 4096): {'float16': 0.163, 'float32': 0.162, 'int8': 0.097},\n-        (64, 8192, 8192): {'float16': 0.285, 'float32': 0.257, 'int8': 0.174},\n-        (1024, 64, 1024): {'float16': 0.033, 'float32': 0.0458, 'int8': 0.017},\n-        (4096, 64, 4096): {'float16': 0.16, 'float32': 0.177, 'int8': 0.102},\n-        (8192, 64, 8192): {'float16': 0.254, 'float32': 0.230, 'int8': 0.177},\n+        (16, 1024, 1024): {'float16': 0.008, 'float32': 0.009, 'int8': 0.005},\n+        (16, 4096, 4096): {'float16': 0.036, 'float32': 0.038, 'int8': 0.026},\n+        (16, 8192, 8192): {'float16': 0.056, 'float32': 0.061, 'int8': 0.043},\n+        (64, 1024, 1024): {'float16': 0.020, 'float32': 0.030, 'int8': 0.017},\n+        (64, 4096, 4096): {'float16': 0.160, 'float32': 0.162, 'int8': 0.097},\n+        (64, 8192, 8192): {'float16': 0.280, 'float32': 0.257, 'int8': 0.174},\n+        (1024, 64, 1024): {'float16': 0.040, 'float32': 0.050, 'int8': 0.017},\n+        (4096, 64, 4096): {'float16': 0.160, 'float32': 0.200, 'int8': 0.102},\n+        (8192, 64, 8192): {'float16': 0.250, 'float32': 0.23, 'int8': 0.177},\n+        # Non pow 2 shapes\n+        (1000, 200, 100): {'float16': 0.011, 'float32': 0.017, 'int8': 0.05},\n+        (1000, 200, 700): {'float16': 0.027, 'float32': 0.047, 'int8': 0.05},\n+        (994, 136, 402): {'float16': 0.015, 'float32': 0.024, 'int8': 0.05},\n+        (995, 135, 409): {'float16': 0.015, 'float32': 0.025, 'int8': 0.05},\n+        (99, 1357, 409): {'float16': 0.011, 'float32': 0.036, 'int8': 0.05}\n     }\n }\n \n \n @pytest.mark.parametrize('M, N, K, dtype_str',\n                          [(M, N, K, dtype_str)\n                           for M, N, K in matmul_data[DEVICE_NAME].keys()\n-                          for dtype_str in ['float16']])\n+                          for dtype_str in ['float16', 'float32']])\n def test_matmul(M, N, K, dtype_str):\n     if dtype_str in ['float32', 'int8'] and DEVICE_NAME != 'a100':\n         pytest.skip('Only test float32 & int8 on a100')\n+    if (M, N, K) in [(64, 4096, 4096), (64, 8192, 8192), (8192, 64, 8192)] and dtype_str == 'float32':\n+        pytest.skip('Out of shared memory in float32')\n     dtype = {'float16': torch.float16, 'float32': torch.float32, 'int8': torch.int8}[dtype_str]\n     torch.manual_seed(0)\n     ref_gpu_util = matmul_data[DEVICE_NAME][(M, N, K)][dtype_str]\n@@ -126,32 +141,44 @@ def _add(x_ptr, y_ptr, output_ptr, n_elements,\n \n elementwise_data = {\n     'v100': {\n-        1024 * 16: 0.0219,\n-        1024 * 64: 0.0791,\n-        1024 * 256: 0.243,\n-        1024 * 1024: 0.530,\n-        1024 * 4096: 0.796,\n-        1024 * 16384: 0.905,\n-        1024 * 65536: 0.939,\n+        1024 * 16: {'float16': 0.0219, 'float32': 0.010},\n+        1024 * 64: {'float16': 0.0791, 'float32': 0.010},\n+        1024 * 256: {'float16': 0.243, 'float32': 0.010},\n+        1024 * 1024: {'float16': 0.530, 'float32': 0.010},\n+        1024 * 4096: {'float16': 0.796, 'float32': 0.010},\n+        1024 * 16384: {'float16': 0.905, 'float32': 0.010},\n+        1024 * 65536: {'float16': 0.939, 'float32': 0.010},\n+        # Non pow 2\n+        1020 * 100: {'float16': 0.010, 'float32': 0.010},\n+        995 * 125: {'float16': 0.010, 'float32': 0.010},\n+        10003 * 7007: {'float16': 0.010, 'float32': 0.010},\n     },\n     'a100': {\n-        1024 * 16: 0.010,\n-        1024 * 64: 0.040,\n-        1024 * 256: 0.132,\n-        1024 * 1024: 0.353,\n-        1024 * 4096: 0.605,\n-        1024 * 16384: 0.758,\n-        1024 * 65536: 0.850,\n+        1024 * 16: {'float16': 0.010, 'bfloat16': 0.010, 'float32': 0.020},\n+        1024 * 64: {'float16': 0.040, 'bfloat16': 0.040, 'float32': 0.066},\n+        1024 * 256: {'float16': 0.132, 'bfloat16': 0.132, 'float32': 0.227},\n+        1024 * 1024: {'float16': 0.353, 'bfloat16': 0.353, 'float32': 0.488},\n+        1024 * 4096: {'float16': 0.605, 'bfloat16': 0.605, 'float32': 0.705},\n+        1024 * 16384: {'float16': 0.758, 'bfloat16': 0.750, 'float32': 0.819},\n+        1024 * 65536: {'float16': 0.850, 'bfloat16': 0.850, 'float32': 0.870},\n+        # Non pow 2\n+        1020 * 100: {'float16': 0.051, 'bfloat16': 0.051, 'float32': 0.103},\n+        995 * 125: {'float16': 0.063, 'bfloat16': 0.063, 'float32': 0.126},\n+        10003 * 7007: {'float16': 0.544, 'bfloat16': 0.541, 'float32': 0.861},\n     }\n }\n \n \n @pytest.mark.parametrize('N', elementwise_data[DEVICE_NAME].keys())\n-def test_elementwise(N):\n+@pytest.mark.parametrize(\"dtype_str\", ['float16', 'bfloat16', 'float32'])\n+def test_elementwise(N, dtype_str):\n     torch.manual_seed(0)\n-    ref_gpu_util = elementwise_data[DEVICE_NAME][N]\n+    if dtype_str in ['bfloat16'] and DEVICE_NAME != 'a100':\n+        pytest.skip('Only test bfloat16 on a100')\n+    dtype = {'float16': torch.float16, 'bfloat16': torch.bfloat16, 'float32': torch.float32}[dtype_str]\n+    ref_gpu_util = elementwise_data[DEVICE_NAME][N][dtype_str]\n     max_gpu_perf = get_dram_gbps()\n-    z = torch.empty((N, ), dtype=torch.float16, device='cuda')\n+    z = torch.empty((N, ), dtype=dtype, device='cuda')\n     x = torch.randn_like(z)\n     y = torch.randn_like(z)\n     grid = lambda args: (triton.cdiv(N, args['BLOCK_SIZE']), )\n@@ -169,29 +196,56 @@ def test_elementwise(N):\n \n flash_attention_data = {\n     \"a100\": {\n-        (4, 48, 4096, 64, 'forward', 'float16'): 0.37,\n-        (4, 48, 4096, 64, 'backward', 'float16'): 0.25,\n+        (4, 48, 4096, 64, True, True, 'forward', 'float16'): 0.420,\n+        (4, 48, 4096, 64, True, True, 'backward', 'float16'): 0.202,\n+        (4, 48, 4096, 64, True, True, 'forward', 'bfloat16'): 0.355,\n+        (4, 48, 4096, 64, True, True, 'backward', 'bfloat16'): 0.201,\n+        (4, 48, 1024, 16, True, True, 'forward', 'float32'): 0.099,\n+        (4, 48, 1024, 16, True, True, 'backward', 'float32'): 0.087,\n+        (4, 48, 4096, 64, True, False, 'forward', 'float16'): 0.238,\n+        (4, 48, 4096, 64, True, False, 'backward', 'float16'): 0.135,\n+        (4, 48, 4096, 64, True, False, 'forward', 'bfloat16'): 0.211,\n+        (4, 48, 4096, 64, True, False, 'backward', 'bfloat16'): 0.135,\n+        (4, 48, 1024, 16, True, False, 'forward', 'float32'): 0.062,\n+        (4, 48, 1024, 16, True, False, 'backward', 'float32'): 0.052,\n+        (4, 48, 4096, 64, False, True, 'forward', 'float16'): 0.424,\n+        (4, 48, 4096, 64, False, True, 'backward', 'float16'): 0.262,\n+        (4, 48, 4096, 64, False, True, 'forward', 'bfloat16'): 0.370,\n+        (4, 48, 4096, 64, False, True, 'backward', 'bfloat16'): 0.254,\n+        (4, 48, 1024, 16, False, True, 'forward', 'float32'): 0.099,\n+        (4, 48, 1024, 16, False, True, 'backward', 'float32'): 0.125,\n+        (4, 48, 4096, 64, False, False, 'forward', 'float16'): 0.238,\n+        (4, 48, 4096, 64, False, False, 'backward', 'float16'): 0.158,\n+        (4, 48, 4096, 64, False, False, 'forward', 'bfloat16'): 0.211,\n+        (4, 48, 4096, 64, False, False, 'backward', 'bfloat16'): 0.134,\n+        (4, 48, 1024, 16, False, False, 'forward', 'float32'): 0.062,\n+        (4, 48, 1024, 16, False, False, 'backward', 'float32'): 0.075,\n     }\n }\n \n \n-@pytest.mark.parametrize(\"Z, H, N_CTX, D_HEAD\", [[4, 48, 4096, 64]])\n+@pytest.mark.parametrize(\"dtype_str\", ['float16', 'bfloat16', 'float32'])\n @pytest.mark.parametrize(\"mode\", ['forward', 'backward'])\n-@pytest.mark.parametrize(\"dtype_str\", ['float16'])\n-def test_flash_attention(Z, H, N_CTX, D_HEAD, mode, dtype_str):\n+@pytest.mark.parametrize(\"causal\", [True, False])\n+@pytest.mark.parametrize(\"seq_par\", [True, False])\n+@pytest.mark.parametrize(\"Z, H, N_CTX, D_HEAD\", [[4, 48, 4096, 64]])\n+def test_flash_attention(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str):\n     is_backward = mode == 'backward'\n     capability = torch.cuda.get_device_capability()\n     if capability[0] < 8:\n         pytest.skip(\"Flash attention only supported for compute capability < 80\")\n     torch.manual_seed(20)\n-    dtype = {'float16': torch.float16, 'float32': torch.float32, 'int8': torch.int8}[dtype_str]\n+    dtype = {'float16': torch.float16, 'bfloat16': torch.bfloat16, 'float32': torch.float32}[dtype_str]\n     # init data\n+    if dtype_str == 'float32':\n+        N_CTX = 1024\n+        D_HEAD = 16\n     q = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.1, std=0.2).requires_grad_()\n     k = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.4, std=0.2).requires_grad_()\n     v = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.3, std=0.2).requires_grad_()\n     sm_scale = 0.2\n     # benchmark\n-    fn = lambda: triton.ops.attention(q, k, v, sm_scale)\n+    fn = lambda: triton.ops.attention(q, k, v, causal, sm_scale, seq_par)\n     if is_backward:\n         o = fn()\n         do = torch.randn_like(o)\n@@ -207,6 +261,6 @@ def test_flash_attention(Z, H, N_CTX, D_HEAD, mode, dtype_str):\n     cur_sm_clock = nvsmi(['clocks.current.sm'])[0]\n     max_gpu_perf = get_max_tensorcore_tflops(dtype, clock_rate=cur_sm_clock * 1e3)\n     cur_gpu_util = cur_gpu_perf / max_gpu_perf\n-    ref_gpu_util = flash_attention_data[DEVICE_NAME][(Z, H, N_CTX, D_HEAD, mode, dtype_str)]\n+    ref_gpu_util = flash_attention_data[DEVICE_NAME][(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str)]\n     print_perf(ms, cur_gpu_util, ref_gpu_util)\n     triton.testing.assert_close(cur_gpu_util, ref_gpu_util, atol=0.01, rtol=0.05)"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "file_content_changes": "@@ -2178,9 +2178,13 @@ def kernel(Z, X, Y,\n     assert \"triton_gpu.async_wait {num = 2 : i32}\" in h.asm['ttgir']\n \n \n-@pytest.mark.parametrize(\"dtype_str\", int_dtypes + float_dtypes + ['bfloat16'])\n+@pytest.mark.parametrize(\"dtype_str\", int_dtypes + uint_dtypes + float_dtypes + ['bfloat16'])\n def test_full(dtype_str, device):\n-    dtype = getattr(torch, dtype_str)\n+    if dtype_str in uint_dtypes and not hasattr(torch, dtype_str):\n+        # PyTorch only has unsigned 8, but not 16, 32, or 64\n+        dtype = getattr(torch, dtype_str[1:])  # uintx -> intx\n+    else:\n+        dtype = getattr(torch, dtype_str)\n     check_type_supported(dtype, device)  # bfloat16 on cc < 80 will not be tested\n \n     @triton.jit"}, {"filename": "python/test/unit/operators/test_flash_attention.py", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "file_content_changes": "@@ -10,22 +10,23 @@\n                                                  (4, 48, 1024, 64),\n                                                  (4, 48, 1024, 128)])\n @pytest.mark.parametrize('dtype', [torch.float16, torch.bfloat16])\n-def test_op(Z, H, N_CTX, D_HEAD, dtype):\n+@pytest.mark.parametrize('causal', [True, False])\n+@pytest.mark.parametrize('seq_par', [True, False])\n+def test_op(Z, H, N_CTX, D_HEAD, dtype, causal, seq_par):\n     capability = torch.cuda.get_device_capability()\n     if capability[0] < 8:\n         pytest.skip(\"Flash attention only supported for compute capability < 80\")\n     torch.manual_seed(20)\n-    q = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.1, std=0.2).requires_grad_()\n-    k = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.4, std=0.2).requires_grad_()\n-    v = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.3, std=0.2).requires_grad_()\n-    sm_scale = 0.2\n+    q = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    k = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    v = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    sm_scale = 0.5\n     dout = torch.randn_like(q)\n     # reference implementation\n     M = torch.tril(torch.ones((N_CTX, N_CTX), device=\"cuda\"))\n     p = torch.matmul(q, k.transpose(2, 3)) * sm_scale\n-    for z in range(Z):\n-        for h in range(H):\n-            p[:, :, M == 0] = float(\"-inf\")\n+    if causal:\n+        p[:, :, M == 0] = float(\"-inf\")\n     p = torch.softmax(p.float(), dim=-1).to(dtype)\n     # p = torch.exp(p)\n     ref_out = torch.matmul(p, v)\n@@ -34,7 +35,7 @@ def test_op(Z, H, N_CTX, D_HEAD, dtype):\n     ref_dk, k.grad = k.grad.clone(), None\n     ref_dq, q.grad = q.grad.clone(), None\n     # # triton implementation\n-    tri_out = triton.ops.attention(q, k, v, sm_scale)\n+    tri_out = triton.ops.attention(q, k, v, causal, sm_scale, seq_par)\n     # print(ref_out)\n     # print(tri_out)\n     tri_out.backward(dout)"}, {"filename": "python/test/unit/operators/test_matmul.py", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "file_content_changes": "@@ -8,20 +8,20 @@\n import triton.ops\n \n \n-def f8_to_f16(x):\n+def f8_to_f16(x, dtype):\n \n     @triton.jit\n     def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n         pid = tl.program_id(0)\n         offs = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n         mask = offs < N\n         x = tl.load(X + offs, mask=mask)\n-        y = x.to(tl.float8e5)\n-        tl.store(Y + offs, y, mask=mask)\n+        tl.store(Y + offs, x, mask=mask)\n \n     ret = torch.empty(x.shape, dtype=torch.float16, device=x.device)\n     grid = lambda META: (triton.cdiv(x.numel(), META['BLOCK_SIZE']),)\n-    kernel[grid](ret, triton.reinterpret(x, tl.float8e5), ret.numel(), BLOCK_SIZE=1024)\n+    dtype = getattr(tl, dtype)\n+    kernel[grid](ret, triton.reinterpret(x, dtype), ret.numel(), BLOCK_SIZE=1024)\n     return ret\n \n \n@@ -85,13 +85,17 @@ def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n         # mixed-precision\n         *[\n             [\n-                (16, 16, 16, 1, 1, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n-                (128, 32, 32, 1, 2, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n-                (128, 256, 16, 1, 8, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n-                (32, 64, 16, 1, 1, 2, 64, 128, 32, AT, BT, ADTYPE, BDTYPE),\n+                (32, 32, 32, 1, 1, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n+                (128, 256, 32, 1, 8, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n+                (32, 64, 32, 1, 1, 2, 64, 128, 32, AT, BT, ADTYPE, BDTYPE),\n                 (128, 128, 32, 8, 4, 2, 256, 256, 128, AT, BT, ADTYPE, BDTYPE),\n-            ] for ADTYPE, BDTYPE in [(\"float8\", \"float16\"), (\"float16\", \"float32\"), (\"float32\", \"float16\"),\n-                                     (\"bfloat16\", \"float32\"), (\"float32\", \"bfloat16\")] for AT in [False, True] for BT in [False, True]\n+            ] for ADTYPE, BDTYPE in [(\"float8e4b15\", \"float8e5\"),\n+                                     (\"float8e4\", \"float16\"),\n+                                     (\"float16\", \"float8e5\"),\n+                                     (\"float16\", \"float32\"),\n+                                     (\"float32\", \"float16\"),\n+                                     (\"bfloat16\", \"float32\"),\n+                                     (\"float32\", \"bfloat16\")] for AT in [False, True] for BT in [False, True]\n         ]\n     ),\n )\n@@ -116,22 +120,38 @@ def test_op(BLOCK_M, BLOCK_N, BLOCK_K, SPLIT_K, NWARP, NSTAGE, M, N, K, AT, BT,\n     M = BLOCK_M if M is None else M\n     N = BLOCK_N if N is None else N\n     K = BLOCK_K * SPLIT_K if K is None else K\n+    a_fp8 = \"float8\" in ADTYPE\n+    b_fp8 = \"float8\" in BDTYPE\n \n-    def get_input(n, m, t, dtype):\n+    def maybe_upcast(x, dtype, is_float8):\n+        if is_float8:\n+            return f8_to_f16(x, dtype)\n+        return x\n+\n+    def init_input(n, m, t, dtype, is_float8):\n         if t:\n-            return get_input(m, n, False, dtype).t()\n-        if dtype == \"float8\":\n-            x = torch.randint(10, 50, (n, m), device=\"cuda\", dtype=torch.int8)\n-            return f8_to_f16(x)\n+            return init_input(m, n, False, dtype, is_float8).t()\n+        if is_float8:\n+            return torch.randint(20, 60, (n, m), device=\"cuda\", dtype=torch.int8)\n         dtype = {\"float16\": torch.float16, \"bfloat16\": torch.bfloat16, \"float32\": torch.float32}[dtype]\n         return .1 * torch.randn((n, m), device=\"cuda\", dtype=dtype)\n \n     # allocate/transpose inputs\n-    a = get_input(M, K, AT, ADTYPE)\n-    b = get_input(K, N, BT, BDTYPE)\n+    a = init_input(M, K, AT, ADTYPE, a_fp8)\n+    b = init_input(K, N, BT, BDTYPE, b_fp8)\n     # run test\n-    th_c = torch.matmul(a.to(torch.float32), b.to(torch.float32))\n+    th_a = maybe_upcast(a, ADTYPE, a_fp8).to(torch.float32)\n+    if AT and a_fp8:\n+        th_a = th_a.view(th_a.shape[::-1]).T\n+    th_b = maybe_upcast(b, BDTYPE, b_fp8).to(torch.float32)\n+    if BT and b_fp8:\n+        th_b = th_b.view(th_b.shape[::-1]).T\n+    th_c = torch.matmul(th_a, th_b)\n     try:\n+        if a_fp8:\n+            a = triton.reinterpret(a, getattr(tl, ADTYPE))\n+        if b_fp8:\n+            b = triton.reinterpret(b, getattr(tl, BDTYPE))\n         tt_c = triton.ops.matmul(a, b)\n         atol, rtol = 1e-2, 0\n         if ADTYPE == torch.bfloat16 or BDTYPE == torch.bfloat16:"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -55,6 +55,7 @@ def optimize_ttir(mod, arch):\n     pm.add_inliner_pass()\n     pm.add_triton_combine_pass()\n     pm.add_canonicalizer_pass()\n+    pm.add_reorder_broadcast_pass()\n     pm.add_cse_pass()\n     pm.add_licm_pass()\n     pm.add_symbol_dce_pass()"}, {"filename": "python/triton/ops/flash_attention.py", "status": "modified", "additions": 274, "deletions": 130, "changes": 404, "file_content_changes": "@@ -3,6 +3,9 @@\n ===============\n This is a Triton implementation of the Flash Attention algorithm\n (see: Dao et al., https://arxiv.org/pdf/2205.14135v2.pdf; Rabe and Staats https://arxiv.org/pdf/2112.05682v2.pdf)\n+\n+Sequence Parallel implementation inspired by HazyResearch\n+(see https://github.com/HazyResearch/flash-attention/blob/main/flash_attn/flash_attn_triton.py)\n \"\"\"\n \n import torch\n@@ -23,68 +26,113 @@ def _fwd_kernel(\n     Z, H, N_CTX,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n+    MODE: tl.constexpr,\n ):\n     start_m = tl.program_id(0)\n     off_hz = tl.program_id(1)\n+    qvk_offset = off_hz * stride_qh\n+    Q_block_ptr = tl.make_block_ptr(\n+        base=Q + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_qm, stride_qk),\n+        offsets=(start_m * BLOCK_M, 0),\n+        block_shape=(BLOCK_M, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n+    K_block_ptr = tl.make_block_ptr(\n+        base=K + qvk_offset,\n+        shape=(BLOCK_DMODEL, N_CTX),\n+        strides=(stride_kk, stride_kn),\n+        offsets=(0, 0),\n+        block_shape=(BLOCK_DMODEL, BLOCK_N),\n+        order=(0, 1)\n+    )\n+    V_block_ptr = tl.make_block_ptr(\n+        base=V + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_vk, stride_vn),\n+        offsets=(0, 0),\n+        block_shape=(BLOCK_N, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n+    O_block_ptr = tl.make_block_ptr(\n+        base=Out + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_om, stride_on),\n+        offsets=(start_m * BLOCK_M, 0),\n+        block_shape=(BLOCK_M, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n     # initialize offsets\n     offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n     offs_n = tl.arange(0, BLOCK_N)\n-    offs_d = tl.arange(0, BLOCK_DMODEL)\n-    off_q = off_hz * stride_qh + offs_m[:, None] * stride_qm + offs_d[None, :] * stride_qk\n-    off_k = off_hz * stride_qh + offs_n[None, :] * stride_kn + offs_d[:, None] * stride_kk\n-    off_v = off_hz * stride_qh + offs_n[:, None] * stride_qm + offs_d[None, :] * stride_qk\n-    # Initialize pointers to Q, K, V\n-    q_ptrs = Q + off_q\n-    k_ptrs = K + off_k\n-    v_ptrs = V + off_v\n     # initialize pointer to m and l\n-    m_prev = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n-    l_prev = tl.zeros([BLOCK_M], dtype=tl.float32)\n+    m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n+    l_i = tl.zeros([BLOCK_M], dtype=tl.float32)\n     acc = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n+    # causal check on every loop iteration can be expensive\n+    # and peeling the last iteration of the loop does not work well with ptxas\n+    # so we have a mode to do the causal check in a separate kernel entirely\n+    if MODE == 0:  # entire non-causal attention\n+        lo, hi = 0, N_CTX\n+    if MODE == 1:  # entire causal attention\n+        lo, hi = 0, (start_m + 1) * BLOCK_M\n+    if MODE == 2:  # off band-diagonal\n+        lo, hi = 0, start_m * BLOCK_M\n+    if MODE == 3:  # on band-diagonal\n+        l_ptrs = L + off_hz * N_CTX + offs_m\n+        m_ptrs = M + off_hz * N_CTX + offs_m\n+        m_i = tl.load(m_ptrs)\n+        l_i = tl.load(l_ptrs)\n+        acc += tl.load(O_block_ptr).to(tl.float32)\n+        lo, hi = start_m * BLOCK_M, (start_m + 1) * BLOCK_M\n+    # credits to: Adam P. Goucher (https://github.com/apgoucher):\n+    # scale sm_scale by 1/log_2(e) and use\n+    # 2^x instead of exp in the loop because CSE and LICM\n+    # don't work as expected with `exp` in the loop\n+    qk_scale = sm_scale * 1.44269504\n     # load q: it will stay in SRAM throughout\n-    q = tl.load(q_ptrs)\n+    q = tl.load(Q_block_ptr)\n+    q = (q * qk_scale).to(K.dtype.element_ty)\n     # loop over k, v and update accumulator\n-    for start_n in range(0, (start_m + 1) * BLOCK_M, BLOCK_N):\n+    for start_n in range(lo, hi, BLOCK_N):\n+        start_n = tl.multiple_of(start_n, BLOCK_N)\n         # -- compute qk ----\n-        k = tl.load(k_ptrs)\n+        k = tl.load(tl.advance(K_block_ptr, (0, start_n)))\n         qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n-        qk += tl.dot(q, k)\n-        qk *= sm_scale\n-        qk = tl.where(offs_m[:, None] >= (start_n + offs_n[None, :]), qk, float(\"-inf\"))\n-        # compute new m\n-        m_curr = tl.maximum(tl.max(qk, 1), m_prev)\n-        # correct old l\n-        l_prev *= tl.exp(m_prev - m_curr)\n-        # attention weights\n-        p = tl.exp(qk - m_curr[:, None])\n-        l_curr = tl.sum(p, 1) + l_prev\n-        # rescale operands of matmuls\n-        l_rcp = 1. / l_curr\n-        p *= l_rcp[:, None]\n-        acc *= (l_prev * l_rcp)[:, None]\n+        qk += tl.dot(q, k, allow_tf32=True)\n+        if MODE == 1 or MODE == 3:\n+            qk = tl.where(offs_m[:, None] >= (start_n + offs_n[None, :]), qk, float(\"-inf\"))\n+        # -- compute m_ij, p, l_ij\n+        m_ij = tl.max(qk, 1)\n+        p = tl.math.exp2(qk - m_ij[:, None])\n+        l_ij = tl.sum(p, 1)\n+        # -- update m_i and l_i\n+        m_i_new = tl.maximum(m_i, m_ij)\n+        alpha = tl.math.exp2(m_i - m_i_new)\n+        beta = tl.math.exp2(m_ij - m_i_new)\n+        l_i *= alpha\n+        l_i_new = l_i + beta * l_ij\n+        # scale p\n+        p_scale = beta / l_i_new\n+        p = p * p_scale[:, None]\n+        # scale acc\n+        acc_scale = l_i / l_i_new\n+        acc = acc * acc_scale[:, None]\n         # update acc\n-        p = p.to(Q.dtype.element_ty)\n-        v = tl.load(v_ptrs)\n-        acc += tl.dot(p, v)\n+        v = tl.load(tl.advance(V_block_ptr, (start_n, 0)))\n+        p = p.to(V.dtype.element_ty)\n+        acc += tl.dot(p, v, allow_tf32=True)\n         # update m_i and l_i\n-        l_prev = l_curr\n-        m_prev = m_curr\n-        # update pointers\n-        k_ptrs += BLOCK_N * stride_kn\n-        v_ptrs += BLOCK_N * stride_vk\n-    # rematerialize offsets to save registers\n-    start_m = tl.program_id(0)\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n+        l_i = l_i_new\n+        m_i = m_i_new\n     # write back l and m\n     l_ptrs = L + off_hz * N_CTX + offs_m\n     m_ptrs = M + off_hz * N_CTX + offs_m\n-    tl.store(l_ptrs, l_prev)\n-    tl.store(m_ptrs, m_prev)\n-    # initialize pointers to output\n-    offs_n = tl.arange(0, BLOCK_DMODEL)\n-    off_o = off_hz * stride_oh + offs_m[:, None] * stride_om + offs_n[None, :] * stride_on\n-    out_ptrs = Out + off_o\n-    tl.store(out_ptrs, acc)\n+    tl.store(l_ptrs, l_i)\n+    tl.store(m_ptrs, m_i)\n+    # write back O\n+    tl.store(O_block_ptr, acc.to(K.dtype.element_ty))\n \n \n @jit\n@@ -107,94 +155,168 @@ def _bwd_preprocess(\n     tl.store(Delta + off_m, delta)\n \n \n+@jit\n+def _bwd_kernel_one_col_block(\n+    Q, K, V, sm_scale, qk_scale,\n+    Out, DO,\n+    DQ, DK, DV,\n+    L, M,\n+    D,\n+    stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n+    stride_kz, stride_kh, stride_kn, stride_kk,\n+    stride_vz, stride_vh, stride_vk, stride_vn,\n+    Z, H, N_CTX,\n+    off_hz, start_n, num_block,\n+    BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n+    BLOCK_N: tl.constexpr,\n+    SEQUENCE_PARALLEL: tl.constexpr,\n+    MODE: tl.constexpr,\n+):\n+    if SEQUENCE_PARALLEL:\n+        DQ += stride_dqa.to(tl.int64) * start_n\n+    if MODE == 0:\n+        lo = 0\n+    else:\n+        lo = start_n * BLOCK_M\n+    # initialize row/col offsets\n+    offs_qm = lo + tl.arange(0, BLOCK_M)\n+    offs_n = start_n * BLOCK_M + tl.arange(0, BLOCK_M)\n+    offs_m = tl.arange(0, BLOCK_N)\n+    offs_k = tl.arange(0, BLOCK_DMODEL)\n+    # initialize pointers to value-like data\n+    q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n+    k_ptrs = K + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n+    v_ptrs = V + (offs_n[:, None] * stride_vk + offs_k[None, :] * stride_vn)\n+    do_ptrs = DO + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n+    dq_ptrs = DQ + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n+    # pointer to row-wise quantities in value-like data\n+    D_ptrs = D + off_hz * N_CTX\n+    m_ptrs = M + off_hz * N_CTX\n+    # initialize dv amd dk\n+    dv = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n+    dk = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n+    # k and v stay in SRAM throughout\n+    k = tl.load(k_ptrs)\n+    v = tl.load(v_ptrs)\n+    # loop over rows\n+    for start_m in range(lo, num_block * BLOCK_M, BLOCK_M):\n+        offs_m_curr = start_m + offs_m\n+        # load q, k, v, do on-chip\n+        q = tl.load(q_ptrs)\n+        # recompute p = softmax(qk, dim=-1).T\n+        # NOTE: `do` is pre-divided by `l`; no normalization here\n+        if MODE == 1:\n+            qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), float(0.), float(\"-inf\"))\n+        else:\n+            qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n+        qk += tl.dot(q, tl.trans(k))\n+        qk *= qk_scale\n+        m = tl.load(m_ptrs + offs_m_curr)\n+        p = tl.math.exp2(qk - m[:, None])\n+        # compute dv\n+        do = tl.load(do_ptrs)\n+        dv += tl.dot(tl.trans(p.to(Q.dtype.element_ty)), do, allow_tf32=True)\n+        # compute dp = dot(v, do)\n+        Di = tl.load(D_ptrs + offs_m_curr)\n+        # dp = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) - Di[:, None]\n+        dp = tl.dot(do, tl.trans(v), allow_tf32=True)\n+        # compute ds = p * (dp - delta[:, None])\n+        ds = (p * (dp - Di[:, None]) * sm_scale).to(Q.dtype.element_ty)\n+        # compute dk = dot(ds.T, q)\n+        dk += tl.dot(tl.trans(ds), q, allow_tf32=True)\n+        # compute dq\n+        if not SEQUENCE_PARALLEL:\n+            dq = tl.load(dq_ptrs)\n+            dq += tl.dot(ds, k, allow_tf32=True)\n+            tl.store(dq_ptrs, dq)\n+        elif SEQUENCE_PARALLEL:\n+            # dq = tl.dot(ds, k, allow_tf32=True)\n+            dq = tl.trans(tl.dot(tl.trans(k), tl.trans(ds), allow_tf32=True))\n+            tl.store(dq_ptrs, dq)\n+\n+        # increment pointers\n+        dq_ptrs += BLOCK_M * stride_qm\n+        q_ptrs += BLOCK_M * stride_qm\n+        do_ptrs += BLOCK_M * stride_qm\n+    # write-back\n+    dv_ptrs = DV + (offs_n[:, None] * stride_vk + offs_k[None, :] * stride_vn)\n+    dk_ptrs = DK + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n+    tl.store(dv_ptrs, dv)\n+    tl.store(dk_ptrs, dk)\n+\n+\n @jit\n def _bwd_kernel(\n-    Q, K, V, sm_scale, Out, DO,\n+    # fmt: off\n+    Q, K, V, sm_scale,\n+    Out, DO,\n     DQ, DK, DV,\n     L, M,\n     D,\n-    stride_qz, stride_qh, stride_qm, stride_qk,\n+    stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n     stride_vz, stride_vh, stride_vk, stride_vn,\n     Z, H, N_CTX,\n-    num_block,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n+    SEQUENCE_PARALLEL: tl.constexpr,\n+    MODE: tl.constexpr,\n+    # fmt: on\n ):\n+    qk_scale = sm_scale * 1.44269504\n     off_hz = tl.program_id(0)\n     off_z = off_hz // H\n     off_h = off_hz % H\n     # offset pointers for batch/head\n     Q += off_z * stride_qz + off_h * stride_qh\n-    K += off_z * stride_qz + off_h * stride_qh\n-    V += off_z * stride_qz + off_h * stride_qh\n+    K += off_z * stride_kz + off_h * stride_kh\n+    V += off_z * stride_vz + off_h * stride_vh\n     DO += off_z * stride_qz + off_h * stride_qh\n     DQ += off_z * stride_qz + off_h * stride_qh\n-    DK += off_z * stride_qz + off_h * stride_qh\n-    DV += off_z * stride_qz + off_h * stride_qh\n-    for start_n in range(0, num_block):\n-        lo = start_n * BLOCK_M\n-        # initialize row/col offsets\n-        offs_qm = lo + tl.arange(0, BLOCK_M)\n-        offs_n = start_n * BLOCK_M + tl.arange(0, BLOCK_M)\n-        offs_m = tl.arange(0, BLOCK_N)\n-        offs_k = tl.arange(0, BLOCK_DMODEL)\n-        # initialize pointers to value-like data\n-        q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n-        k_ptrs = K + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n-        v_ptrs = V + (offs_n[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n-        do_ptrs = DO + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n-        dq_ptrs = DQ + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n-        # pointer to row-wise quantities in value-like data\n-        D_ptrs = D + off_hz * N_CTX\n-        m_ptrs = M + off_hz * N_CTX\n-        # initialize dv amd dk\n-        dv = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n-        dk = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n-        # k and v stay in SRAM throughout\n-        k = tl.load(k_ptrs)\n-        v = tl.load(v_ptrs)\n-        # loop over rows\n-        for start_m in range(lo, num_block * BLOCK_M, BLOCK_M):\n-            offs_m_curr = start_m + offs_m\n-            # load q, k, v, do on-chip\n-            q = tl.load(q_ptrs)\n-            # recompute p = softmax(qk, dim=-1).T\n-            # NOTE: `do` is pre-divided by `l`; no normalization here\n-            qk = tl.dot(q, tl.trans(k))\n-            qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), qk, float(\"-inf\"))\n-            m = tl.load(m_ptrs + offs_m_curr)\n-            p = tl.exp(qk * sm_scale - m[:, None])\n-            # compute dv\n-            do = tl.load(do_ptrs)\n-            dv += tl.dot(tl.trans(p.to(Q.dtype.element_ty)), do)\n-            # compute dp = dot(v, do)\n-            Di = tl.load(D_ptrs + offs_m_curr)\n-            dp = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) - Di[:, None]\n-            dp += tl.dot(do, tl.trans(v))\n-            # compute ds = p * (dp - delta[:, None])\n-            ds = p * dp * sm_scale\n-            # compute dk = dot(ds.T, q)\n-            dk += tl.dot(tl.trans(ds.to(Q.dtype.element_ty)), q)\n-            # compute dq\n-            dq = tl.load(dq_ptrs)\n-            dq += tl.dot(ds.to(Q.dtype.element_ty), k)\n-            tl.store(dq_ptrs, dq)\n-            # increment pointers\n-            dq_ptrs += BLOCK_M * stride_qm\n-            q_ptrs += BLOCK_M * stride_qm\n-            do_ptrs += BLOCK_M * stride_qm\n-        # write-back\n-        dv_ptrs = DV + (offs_n[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n-        dk_ptrs = DK + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n-        tl.store(dv_ptrs, dv)\n-        tl.store(dk_ptrs, dk)\n+    DK += off_z * stride_kz + off_h * stride_kh\n+    DV += off_z * stride_vz + off_h * stride_vh\n+\n+    num_block_n = tl.cdiv(N_CTX, BLOCK_N)\n+    if not SEQUENCE_PARALLEL:\n+        for start_n in range(0, num_block_n):\n+            _bwd_kernel_one_col_block(\n+                Q, K, V, sm_scale, qk_scale, Out, DO,\n+                DQ, DK, DV,\n+                L, M,\n+                D,\n+                stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n+                stride_kz, stride_kh, stride_kn, stride_kk,\n+                stride_vz, stride_vh, stride_vk, stride_vn,\n+                Z, H, N_CTX,\n+                off_hz, start_n, num_block_n,\n+                BLOCK_M=BLOCK_M, BLOCK_DMODEL=BLOCK_DMODEL,\n+                BLOCK_N=BLOCK_N,\n+                SEQUENCE_PARALLEL=SEQUENCE_PARALLEL,\n+                MODE=MODE,\n+            )\n+    else:\n+        start_n = tl.program_id(1)\n+        _bwd_kernel_one_col_block(\n+            Q, K, V, sm_scale, qk_scale, Out, DO,\n+            DQ, DK, DV,\n+            L, M,\n+            D,\n+            stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n+            stride_kz, stride_kh, stride_kn, stride_kk,\n+            stride_vz, stride_vh, stride_vk, stride_vn,\n+            Z, H, N_CTX,\n+            off_hz, start_n, num_block_n,\n+            BLOCK_M=BLOCK_M, BLOCK_DMODEL=BLOCK_DMODEL,\n+            BLOCK_N=BLOCK_N,\n+            SEQUENCE_PARALLEL=SEQUENCE_PARALLEL,\n+            MODE=MODE,\n+        )\n \n \n class _attention(torch.autograd.Function):\n \n     @staticmethod\n-    def forward(ctx, q, k, v, sm_scale):\n+    def forward(ctx, q, k, v, causal, sm_scale, sequence_parallel=False):\n         # only support for Ampere now\n         capability = torch.cuda.get_device_capability()\n         if capability[0] < 8:\n@@ -209,58 +331,80 @@ def forward(ctx, q, k, v, sm_scale):\n         L = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n         m = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n         num_warps = 4 if Lk <= 64 else 8\n-\n-        _fwd_kernel[grid](\n-            q, k, v, sm_scale,\n-            L, m,\n-            o,\n-            q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n-            k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n-            v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n-            o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n-            q.shape[0], q.shape[1], q.shape[2],\n-            BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n-            BLOCK_DMODEL=Lk, num_warps=num_warps,\n-            num_stages=2,\n-        )\n+        if causal:\n+            modes = [1] if q.shape[2] <= 2048 else [2, 3]\n+        else:\n+            modes = [0]\n+        for mode in modes:\n+            _fwd_kernel[grid](\n+                q, k, v, sm_scale,\n+                L, m,\n+                o,\n+                q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n+                k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n+                v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n+                o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n+                q.shape[0], q.shape[1], q.shape[2],\n+                BLOCK_M=128, BLOCK_N=BLOCK, BLOCK_DMODEL=Lk,\n+                MODE=mode,\n+                num_warps=num_warps,\n+                num_stages=2)\n \n         ctx.save_for_backward(q, k, v, o, L, m)\n         ctx.grid = grid\n         ctx.sm_scale = sm_scale\n         ctx.BLOCK_DMODEL = Lk\n+        ctx.causal = causal\n+        ctx.sequence_parallel = sequence_parallel\n         return o\n \n     @staticmethod\n     def backward(ctx, do):\n         BLOCK = 128\n         q, k, v, o, l, m = ctx.saved_tensors\n+        sequence_parallel = ctx.sequence_parallel\n+        seq_len_kv = k.shape[2]\n         do = do.contiguous()\n-        dq = torch.zeros_like(q, dtype=torch.float32)\n+        if sequence_parallel:\n+            replicas = cdiv(seq_len_kv, BLOCK)\n+            new_dq_shape = (replicas,) + q.shape\n+            dq = torch.zeros(new_dq_shape, device=q.device, dtype=q.dtype)\n+        else:\n+            dq = torch.zeros_like(q, dtype=torch.float32)\n         dk = torch.empty_like(k)\n         dv = torch.empty_like(v)\n         do_scaled = torch.empty_like(do)\n         delta = torch.empty_like(l)\n+        if ctx.causal:\n+            mode = 1\n+        else:\n+            mode = 0\n         _bwd_preprocess[(ctx.grid[0] * ctx.grid[1], )](\n             o, do, l,\n             do_scaled, delta,\n             BLOCK_M=BLOCK, D_HEAD=ctx.BLOCK_DMODEL,\n         )\n-        _bwd_kernel[(ctx.grid[1],)](\n+        _bwd_kernel[(ctx.grid[1], cdiv(seq_len_kv, BLOCK) if sequence_parallel else 1)](\n             q, k, v, ctx.sm_scale,\n             o, do_scaled,\n             dq, dk, dv,\n             l, m,\n             delta,\n-            q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n+            o.numel(), q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n             k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n             v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n             q.shape[0], q.shape[1], q.shape[2],\n-            ctx.grid[0],\n             BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n-            BLOCK_DMODEL=ctx.BLOCK_DMODEL, num_warps=8,\n+            BLOCK_DMODEL=ctx.BLOCK_DMODEL,\n+            SEQUENCE_PARALLEL=sequence_parallel,\n+            MODE=mode,\n+            num_warps=8,\n             num_stages=1,\n         )\n-        return dq, dk, dv, None\n+\n+        if len(dq.shape) == 5:\n+            dq = dq.sum(dim=0)\n+        return dq, dk, dv, None, None, None\n \n \n attention = _attention.apply"}, {"filename": "python/triton/ops/matmul.py", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "file_content_changes": "@@ -111,8 +111,9 @@ def _kernel(A, B, C, M, N, K,\n             b = tl.load(B)\n         else:\n             k_remaining = K - k * (BLOCK_K * SPLIT_K)\n-            a = tl.load(A, mask=rk[None, :] < k_remaining, other=0.)\n-            b = tl.load(B, mask=rk[:, None] < k_remaining, other=0.)\n+            _0 = tl.zeros((1, 1), dtype=C.dtype.element_ty)\n+            a = tl.load(A, mask=rk[None, :] < k_remaining, other=_0)\n+            b = tl.load(B, mask=rk[:, None] < k_remaining, other=_0)\n         a = a.to(C.dtype.element_ty)\n         b = b.to(C.dtype.element_ty)\n         acc += tl.dot(a, b, out_dtype=dot_out_dtype)\n@@ -149,7 +150,11 @@ def _call(a, b, dot_out_dtype):\n         M, K = a.shape\n         _, N = b.shape\n         # allocates output\n-        c_dtype = get_higher_dtype(a.dtype, b.dtype)\n+        if a.dtype in [tl.float8e4, tl.float8e4b15, tl.float8e5] or\\\n+           b.dtype in [tl.float8e4, tl.float8e4b15, tl.float8e5]:\n+            c_dtype = torch.float16\n+        else:\n+            c_dtype = get_higher_dtype(a.dtype, b.dtype)\n         c = torch.empty((M, N), device=device, dtype=c_dtype)\n         if dot_out_dtype is None:\n             if c_dtype in [torch.float16, torch.float32, torch.bfloat16]:"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -574,10 +574,14 @@ def __init__(self, base, dtype):\n         self.base = base\n         self.is_cuda = base.is_cuda\n         self.device = base.device\n+        self.shape = self.base.shape\n \n     def data_ptr(self):\n         return self.base.data_ptr()\n \n+    def stride(self, i):\n+        return self.base.stride(i)\n+\n     def __str__(self) -> str:\n         return f'TensorWrapper[{self.dtype}]({self.base})'\n "}, {"filename": "python/tutorials/06-fused-attention.py", "status": "modified", "additions": 153, "deletions": 86, "changes": 239, "file_content_changes": "@@ -25,68 +25,113 @@ def _fwd_kernel(\n     Z, H, N_CTX,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n+    MODE: tl.constexpr,\n ):\n     start_m = tl.program_id(0)\n     off_hz = tl.program_id(1)\n+    qvk_offset = off_hz * stride_qh\n+    Q_block_ptr = tl.make_block_ptr(\n+        base=Q + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_qm, stride_qk),\n+        offsets=(start_m * BLOCK_M, 0),\n+        block_shape=(BLOCK_M, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n+    K_block_ptr = tl.make_block_ptr(\n+        base=K + qvk_offset,\n+        shape=(BLOCK_DMODEL, N_CTX),\n+        strides=(stride_kk, stride_kn),\n+        offsets=(0, 0),\n+        block_shape=(BLOCK_DMODEL, BLOCK_N),\n+        order=(0, 1)\n+    )\n+    V_block_ptr = tl.make_block_ptr(\n+        base=V + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_vk, stride_vn),\n+        offsets=(0, 0),\n+        block_shape=(BLOCK_N, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n+    O_block_ptr = tl.make_block_ptr(\n+        base=Out + qvk_offset,\n+        shape=(N_CTX, BLOCK_DMODEL),\n+        strides=(stride_om, stride_on),\n+        offsets=(start_m * BLOCK_M, 0),\n+        block_shape=(BLOCK_M, BLOCK_DMODEL),\n+        order=(1, 0)\n+    )\n     # initialize offsets\n     offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n     offs_n = tl.arange(0, BLOCK_N)\n-    offs_d = tl.arange(0, BLOCK_DMODEL)\n-    off_q = off_hz * stride_qh + offs_m[:, None] * stride_qm + offs_d[None, :] * stride_qk\n-    off_k = off_hz * stride_qh + offs_n[None, :] * stride_kn + offs_d[:, None] * stride_kk\n-    off_v = off_hz * stride_qh + offs_n[:, None] * stride_qm + offs_d[None, :] * stride_qk\n-    # Initialize pointers to Q, K, V\n-    q_ptrs = Q + off_q\n-    k_ptrs = K + off_k\n-    v_ptrs = V + off_v\n     # initialize pointer to m and l\n-    m_prev = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n-    l_prev = tl.zeros([BLOCK_M], dtype=tl.float32)\n+    m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n+    l_i = tl.zeros([BLOCK_M], dtype=tl.float32)\n     acc = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n+    # causal check on every loop iteration can be expensive\n+    # and peeling the last iteration of the loop does not work well with ptxas\n+    # so we have a mode to do the causal check in a separate kernel entirely\n+    if MODE == 0:  # entire non-causal attention\n+        lo, hi = 0, N_CTX\n+    if MODE == 1:  # entire causal attention\n+        lo, hi = 0, (start_m + 1) * BLOCK_M\n+    if MODE == 2:  # off band-diagonal\n+        lo, hi = 0, start_m * BLOCK_M\n+    if MODE == 3:  # on band-diagonal\n+        l_ptrs = L + off_hz * N_CTX + offs_m\n+        m_ptrs = M + off_hz * N_CTX + offs_m\n+        m_i = tl.load(m_ptrs)\n+        l_i = tl.load(l_ptrs)\n+        acc += tl.load(O_block_ptr).to(tl.float32)\n+        lo, hi = start_m * BLOCK_M, (start_m + 1) * BLOCK_M\n+    # credits to: Adam P. Goucher (https://github.com/apgoucher):\n+    # scale sm_scale by 1/log_2(e) and use\n+    # 2^x instead of exp in the loop because CSE and LICM\n+    # don't work as expected with `exp` in the loop\n+    qk_scale = sm_scale * 1.44269504\n     # load q: it will stay in SRAM throughout\n-    q = tl.load(q_ptrs)\n+    q = tl.load(Q_block_ptr)\n+    q = (q * qk_scale).to(tl.float16)\n     # loop over k, v and update accumulator\n-    for start_n in range(0, (start_m + 1) * BLOCK_M, BLOCK_N):\n+    for start_n in range(lo, hi, BLOCK_N):\n+        start_n = tl.multiple_of(start_n, BLOCK_N)\n         # -- compute qk ----\n-        k = tl.load(k_ptrs)\n+        k = tl.load(tl.advance(K_block_ptr, (0, start_n)))\n         qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n         qk += tl.dot(q, k)\n-        qk *= sm_scale\n-        qk = tl.where(offs_m[:, None] >= (start_n + offs_n[None, :]), qk, float(\"-inf\"))\n-        # compute new m\n-        m_curr = tl.maximum(tl.max(qk, 1), m_prev)\n-        # correct old l\n-        l_prev *= tl.exp(m_prev - m_curr)\n-        # attention weights\n-        p = tl.exp(qk - m_curr[:, None])\n-        l_curr = tl.sum(p, 1) + l_prev\n-        # rescale operands of matmuls\n-        l_rcp = 1. / l_curr\n-        p *= l_rcp[:, None]\n-        acc *= (l_prev * l_rcp)[:, None]\n+        if MODE == 1 or MODE == 3:\n+            qk = tl.where(offs_m[:, None] >= (start_n + offs_n[None, :]), qk, float(\"-inf\"))\n+        # -- compute m_ij, p, l_ij\n+        m_ij = tl.max(qk, 1)\n+        p = tl.math.exp2(qk - m_ij[:, None])\n+        l_ij = tl.sum(p, 1)\n+        # -- update m_i and l_i\n+        m_i_new = tl.maximum(m_i, m_ij)\n+        alpha = tl.math.exp2(m_i - m_i_new)\n+        beta = tl.math.exp2(m_ij - m_i_new)\n+        l_i *= alpha\n+        l_i_new = l_i + beta * l_ij\n+        # scale p\n+        p_scale = beta / l_i_new\n+        p = p * p_scale[:, None]\n+        # scale acc\n+        acc_scale = l_i / l_i_new\n+        acc = acc * acc_scale[:, None]\n         # update acc\n-        p = p.to(Q.dtype.element_ty)\n-        v = tl.load(v_ptrs)\n+        v = tl.load(tl.advance(V_block_ptr, (start_n, 0)))\n+        p = p.to(tl.float16)\n         acc += tl.dot(p, v)\n         # update m_i and l_i\n-        l_prev = l_curr\n-        m_prev = m_curr\n-        # update pointers\n-        k_ptrs += BLOCK_N * stride_kn\n-        v_ptrs += BLOCK_N * stride_vk\n-    # rematerialize offsets to save registers\n-    start_m = tl.program_id(0)\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n+        l_i = l_i_new\n+        m_i = m_i_new\n     # write back l and m\n     l_ptrs = L + off_hz * N_CTX + offs_m\n     m_ptrs = M + off_hz * N_CTX + offs_m\n-    tl.store(l_ptrs, l_prev)\n-    tl.store(m_ptrs, m_prev)\n-    # initialize pointers to output\n-    offs_n = tl.arange(0, BLOCK_DMODEL)\n-    off_o = off_hz * stride_oh + offs_m[:, None] * stride_om + offs_n[None, :] * stride_on\n-    out_ptrs = Out + off_o\n-    tl.store(out_ptrs, acc)\n+    tl.store(l_ptrs, l_i)\n+    tl.store(m_ptrs, m_i)\n+    # write back O\n+    tl.store(O_block_ptr, acc.to(tl.float16))\n \n \n @triton.jit\n@@ -122,10 +167,12 @@ def _bwd_kernel(\n     num_block,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n+    MODE: tl.constexpr,\n ):\n     off_hz = tl.program_id(0)\n     off_z = off_hz // H\n     off_h = off_hz % H\n+    qk_scale = sm_scale * 1.44269504\n     # offset pointers for batch/head\n     Q += off_z * stride_qz + off_h * stride_qh\n     K += off_z * stride_qz + off_h * stride_qh\n@@ -135,7 +182,10 @@ def _bwd_kernel(\n     DK += off_z * stride_qz + off_h * stride_qh\n     DV += off_z * stride_qz + off_h * stride_qh\n     for start_n in range(0, num_block):\n-        lo = start_n * BLOCK_M\n+        if MODE == 0:\n+            lo = 0\n+        else:\n+            lo = start_n * BLOCK_M\n         # initialize row/col offsets\n         offs_qm = lo + tl.arange(0, BLOCK_M)\n         offs_n = start_n * BLOCK_M + tl.arange(0, BLOCK_M)\n@@ -163,10 +213,15 @@ def _bwd_kernel(\n             q = tl.load(q_ptrs)\n             # recompute p = softmax(qk, dim=-1).T\n             # NOTE: `do` is pre-divided by `l`; no normalization here\n-            qk = tl.dot(q, tl.trans(k))\n-            qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), qk, float(\"-inf\"))\n+            # if MODE == 1:\n+            if MODE == 1:\n+                qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), float(0.), float(\"-inf\"))\n+            else:\n+                qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n+            qk += tl.dot(q, tl.trans(k))\n+            qk *= qk_scale\n             m = tl.load(m_ptrs + offs_m_curr)\n-            p = tl.exp(qk * sm_scale - m[:, None])\n+            p = tl.math.exp2(qk - m[:, None])\n             # compute dv\n             do = tl.load(do_ptrs)\n             dv += tl.dot(tl.trans(p.to(Q.dtype.element_ty)), do)\n@@ -199,37 +254,42 @@ def _bwd_kernel(\n class _attention(torch.autograd.Function):\n \n     @staticmethod\n-    def forward(ctx, q, k, v, sm_scale):\n+    def forward(ctx, q, k, v, causal, sm_scale):\n         BLOCK = 128\n         # shape constraints\n         Lq, Lk, Lv = q.shape[-1], k.shape[-1], v.shape[-1]\n         assert Lq == Lk and Lk == Lv\n         assert Lk in {16, 32, 64, 128}\n         o = torch.empty_like(q)\n-        grid = (triton.cdiv(q.shape[2], BLOCK), q.shape[0] * q.shape[1], 1)\n+        grid = (triton.cdiv(q.shape[2], 128), q.shape[0] * q.shape[1], 1)\n         L = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n         m = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n-        num_warps = 4 if Lk <= 64 else 8\n \n-        _fwd_kernel[grid](\n-            q, k, v, sm_scale,\n-            L, m,\n-            o,\n-            q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n-            k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n-            v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n-            o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n-            q.shape[0], q.shape[1], q.shape[2],\n-            BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n-            BLOCK_DMODEL=Lk, num_warps=num_warps,\n-            num_stages=2,\n-        )\n-        # print(h.asm[\"ttgir\"])\n+        num_warps = 4 if Lk <= 64 else 8\n+        if causal:\n+            modes = [1] if q.shape[2] <= 2048 else [2, 3]\n+        else:\n+            modes = [0]\n+        for mode in modes:\n+            _fwd_kernel[grid](\n+                q, k, v, sm_scale,\n+                L, m,\n+                o,\n+                q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n+                k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n+                v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n+                o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n+                q.shape[0], q.shape[1], q.shape[2],\n+                BLOCK_M=128, BLOCK_N=BLOCK, BLOCK_DMODEL=Lk,\n+                MODE=mode,\n+                num_warps=num_warps,\n+                num_stages=2)\n \n         ctx.save_for_backward(q, k, v, o, L, m)\n         ctx.grid = grid\n         ctx.sm_scale = sm_scale\n         ctx.BLOCK_DMODEL = Lk\n+        ctx.causal = causal\n         return o\n \n     @staticmethod\n@@ -242,6 +302,10 @@ def backward(ctx, do):\n         dv = torch.empty_like(v)\n         do_scaled = torch.empty_like(do)\n         delta = torch.empty_like(l)\n+        if ctx.causal:\n+            mode = 1\n+        else:\n+            mode = 0\n         _bwd_preprocess[(ctx.grid[0] * ctx.grid[1], )](\n             o, do, l,\n             do_scaled, delta,\n@@ -260,40 +324,38 @@ def backward(ctx, do):\n             ctx.grid[0],\n             BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n             BLOCK_DMODEL=ctx.BLOCK_DMODEL, num_warps=8,\n+            MODE=mode,\n             num_stages=1,\n         )\n-        # print(h.asm[\"ttgir\"])\n-        return dq, dk, dv, None\n+        return dq, dk, dv, None, None\n \n \n attention = _attention.apply\n \n \n-@pytest.mark.parametrize('Z, H, N_CTX, D_HEAD', [(4, 48, 1024, 64)])\n-def test_op(Z, H, N_CTX, D_HEAD, dtype=torch.float16):\n+@pytest.mark.parametrize('Z, H, N_CTX, D_HEAD', [(6, 9, 1024, 64)])\n+@pytest.mark.parametrize('causal', [False, True])\n+def test_op(Z, H, N_CTX, D_HEAD, causal, dtype=torch.float16):\n     torch.manual_seed(20)\n-    q = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.1, std=0.2).requires_grad_()\n-    k = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.4, std=0.2).requires_grad_()\n-    v = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0.3, std=0.2).requires_grad_()\n-    sm_scale = 0.2\n+    q = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    k = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    v = torch.empty((Z, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\").normal_(mean=0., std=0.5).requires_grad_()\n+    sm_scale = 0.5\n     dout = torch.randn_like(q)\n     # reference implementation\n     M = torch.tril(torch.ones((N_CTX, N_CTX), device=\"cuda\"))\n     p = torch.matmul(q, k.transpose(2, 3)) * sm_scale\n-    for z in range(Z):\n-        for h in range(H):\n-            p[:, :, M == 0] = float(\"-inf\")\n+    if causal:\n+        p[:, :, M == 0] = float(\"-inf\")\n     p = torch.softmax(p.float(), dim=-1).half()\n     # p = torch.exp(p)\n     ref_out = torch.matmul(p, v)\n     ref_out.backward(dout)\n     ref_dv, v.grad = v.grad.clone(), None\n     ref_dk, k.grad = k.grad.clone(), None\n     ref_dq, q.grad = q.grad.clone(), None\n-    # # triton implementation\n-    tri_out = attention(q, k, v, sm_scale)\n-    # print(ref_out)\n-    # print(tri_out)\n+    # triton implementation\n+    tri_out = attention(q, k, v, causal, sm_scale).half()\n     tri_out.backward(dout)\n     tri_dv, v.grad = v.grad.clone(), None\n     tri_dk, k.grad = k.grad.clone(), None\n@@ -315,19 +377,19 @@ def test_op(Z, H, N_CTX, D_HEAD, dtype=torch.float16):\n # vary seq length for fixed head and batch=4\n configs = [triton.testing.Benchmark(\n     x_names=['N_CTX'],\n-    x_vals=[2**i for i in range(10, 14)],\n+    x_vals=[2**i for i in range(10, 15)],\n     line_arg='provider',\n     line_vals=['triton'] + (['flash'] if HAS_FLASH else []),\n     line_names=['Triton'] + (['Flash'] if HAS_FLASH else []),\n     styles=[('red', '-'), ('blue', '-')],\n     ylabel='ms',\n     plot_name=f'fused-attention-batch{BATCH}-head{N_HEADS}-d{D_HEAD}-{mode}',\n-    args={'H': N_HEADS, 'BATCH': BATCH, 'D_HEAD': D_HEAD, 'dtype': torch.float16, 'mode': mode}\n-) for mode in ['fwd', 'bwd']]\n+    args={'H': N_HEADS, 'BATCH': BATCH, 'D_HEAD': D_HEAD, 'dtype': torch.float16, 'mode': mode, 'causal': causal}\n+) for mode in ['fwd', 'bwd'] for causal in [False, True]]\n \n \n @triton.testing.perf_report(configs)\n-def bench_flash_attention(BATCH, H, N_CTX, D_HEAD, mode, provider, dtype=torch.float16, device=\"cuda\"):\n+def bench_flash_attention(BATCH, H, N_CTX, D_HEAD, causal, mode, provider, dtype=torch.float16, device=\"cuda\"):\n     assert mode in ['fwd', 'bwd']\n     warmup = 25\n     rep = 100\n@@ -336,13 +398,12 @@ def bench_flash_attention(BATCH, H, N_CTX, D_HEAD, mode, provider, dtype=torch.f\n         k = torch.randn((BATCH, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\", requires_grad=True)\n         v = torch.randn((BATCH, H, N_CTX, D_HEAD), dtype=dtype, device=\"cuda\", requires_grad=True)\n         sm_scale = 1.3\n-        fn = lambda: attention(q, k, v, sm_scale)\n+        fn = lambda: attention(q, k, v, causal, sm_scale)\n         if mode == 'bwd':\n             o = fn()\n             do = torch.randn_like(o)\n             fn = lambda: o.backward(do, retain_graph=True)\n         ms = triton.testing.do_bench(fn, warmup=warmup, rep=rep)\n-        return ms\n     if provider == \"flash\":\n         lengths = torch.full((BATCH,), fill_value=N_CTX, device=device)\n         cu_seqlens = torch.zeros((BATCH + 1,), device=device, dtype=torch.int32)\n@@ -354,7 +415,13 @@ def bench_flash_attention(BATCH, H, N_CTX, D_HEAD, mode, provider, dtype=torch.f\n             do = torch.randn_like(o)\n             fn = lambda: o.backward(do, retain_graph=True)\n         ms = triton.testing.do_bench(fn, warmup=warmup, rep=rep)\n-        return ms\n+    flops_per_matmul = 2. * BATCH * H * N_CTX * N_CTX * D_HEAD\n+    total_flops = 2 * flops_per_matmul\n+    if causal:\n+        total_flops *= 0.5\n+    if mode == 'bwd':\n+        total_flops *= 2.5  # 2.0(bwd) + 0.5(recompute)\n+    return total_flops / ms * 1e-9\n \n \n # only works on post-Ampere GPUs right now"}, {"filename": "test/Triton/combine.mlir", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "file_content_changes": "@@ -152,12 +152,18 @@ tt.func @test_canonicalize_masked_store_fail_pattern(%ptr: tensor<8x!tt.ptr<f32>\n }\n \n // CHECK-LABEL: @test_canonicalize_expand_dims\n-tt.func @test_canonicalize_expand_dims(%arg0: tensor<f32>) -> (tensor<1x8xf32>) {\n+tt.func @test_canonicalize_expand_dims(%arg0: tensor<f32>, %arg1: tensor<1xf32>) -> (tensor<1x8xf32>, tensor<8x8xf32>) {\n     %splat = tt.splat %arg0 : (tensor<f32>) -> tensor<8xf32>\n     // CHECK: %{{.*}} = tt.splat %arg0 : (tensor<f32>) -> tensor<1x8xf32>\n     %ed = tt.expand_dims %splat {axis = 0 : i32} : (tensor<8xf32>) -> tensor<1x8xf32>\n \n-    tt.return %ed : tensor<1x8xf32>\n+    // CHECK-NEXT: %[[ed2:.*]] = tt.expand_dims %arg1 {axis = 0 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>\n+    // CHECK-NEXT: %{{.*}} = tt.broadcast %[[ed2]] : (tensor<1x1xf32>) -> tensor<8x8xf32>\n+    %bc = tt.broadcast %arg1 : (tensor<1xf32>) -> tensor<8xf32>\n+    %ed2 = tt.expand_dims %bc {axis = 0 : i32} : (tensor<8xf32>) -> tensor<1x8xf32>\n+    %bc2 = tt.broadcast %ed2 : (tensor<1x8xf32>) -> tensor<8x8xf32>\n+\n+    tt.return %ed, %bc2 : tensor<1x8xf32>, tensor<8x8xf32>\n }\n \n "}, {"filename": "test/Triton/reorder-broadcast.mlir", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "file_content_changes": "@@ -0,0 +1,40 @@\n+// RUN: triton-opt %s -split-input-file -triton-reorder-broadcast | FileCheck %s\n+\n+// CHECK-LABEL: @test_splat_elementwise_pattern\n+tt.func @test_splat_elementwise_pattern(%arg0: f32) -> (tensor<128x128xf32>, tensor<128x128x!tt.ptr<f32>>) {\n+    // CHECK-DAG: %[[a:.*]] = arith.constant 1.000000e+00 : f32\n+    // CHECK-DAG: %[[c1:.*]] = arith.constant 1 : i64\n+    %c1 = arith.constant 1 : i64\n+    %a = arith.constant dense<1.0> : tensor<128x128xf32>\n+\n+    // CHECK-DAG: %[[add:.*]] = arith.addf %arg0, %[[a]] : f32\n+    // CHECK-NEXT: %[[splat:.*]] = tt.splat %[[add]] : (f32) -> tensor<128x128xf32>\n+    %b = tt.splat %arg0 : (f32) -> tensor<128x128xf32>\n+    %add = arith.addf %a, %b : tensor<128x128xf32>\n+\n+\n+    // CHECK-NEXT: %[[ptr:.*]] = tt.int_to_ptr %[[c1]] : i64 -> !tt.ptr<f32>\n+    // CHECK-NEXT: %{{.*}} = tt.splat %[[ptr]] : (!tt.ptr<f32>) -> tensor<128x128x!tt.ptr<f32>>\n+    %c1_t = tt.splat %c1 : (i64) -> tensor<128x128xi64>\n+    %ptr = tt.int_to_ptr %c1_t : tensor<128x128xi64> -> tensor<128x128x!tt.ptr<f32>>\n+\n+    tt.return %add, %ptr : tensor<128x128xf32>, tensor<128x128x!tt.ptr<f32>>\n+}\n+\n+// CHECK-LABEL: @test_broadcast_elementwise_pattern\n+tt.func @test_broadcast_elementwise_pattern(%arg0: tensor<128x1xf32>) -> (tensor<128x128xf32>, tensor<128x32xf32>) {\n+    // CHECK: %[[one:.*]] = arith.constant dense<1.000000e+00> : tensor<128x1xf32>\n+\n+    // CHECK-NEXT: %[[abs:.*]] = math.absf %arg0 : tensor<128x1xf32>\n+    // CHECK-NEXT: %{{.*}} = tt.broadcast %[[abs]] : (tensor<128x1xf32>) -> tensor<128x128xf32>\n+    %broadcast = tt.broadcast %arg0 : (tensor<128x1xf32>) -> tensor<128x128xf32>\n+    %abs = math.absf %broadcast : tensor<128x128xf32>\n+\n+    // CHECK-NEXT: %[[add:.*]] = arith.addf %arg0, %[[one]] : tensor<128x1xf32>\n+    // CHECK-NEXT: %{{.*}} = tt.broadcast %[[add]] : (tensor<128x1xf32>) -> tensor<128x32xf32>\n+    %broadcast2 = tt.broadcast %arg0 : (tensor<128x1xf32>) -> tensor<128x32xf32>\n+    %one = arith.constant dense<1.0> : tensor<128x32xf32>\n+    %add = arith.addf %one, %broadcast2 : tensor<128x32xf32>\n+\n+    tt.return %abs, %add : tensor<128x128xf32>, tensor<128x32xf32>\n+}"}]