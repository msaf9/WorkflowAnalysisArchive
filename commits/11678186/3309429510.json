[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "file_content_changes": "@@ -2689,11 +2689,7 @@ struct MMA16816ConversionHelper {\n   MmaEncodingAttr mmaLayout;\n   ArrayRef<unsigned int> wpt;\n \n-  // int mmaInstrM{-1}, mmaInstrN{-1}, mmaInstrK{-1};\n-  // int matShapeM{-1}, matShapeN{-1}, matShapeK{-1};\n-  // int numRepM{-1}, numRepN{-1}, numRepK{-1};\n   Value thread, lane, warp, warpMN, warpN, warpM;\n-  // size_t aElemBytes{}, bElemBytes{};\n \n   DotOpConversionHelper helper;\n   ConversionPatternRewriter &rewriter;\n@@ -2711,21 +2707,12 @@ struct MMA16816ConversionHelper {\n         thread(thread) {\n     wpt = mmaLayout.getWarpsPerCTA();\n \n-    // int NK = aShape[1];\n-    // // shape / shape_per_cta\n-    // numRepM = std::max<int>(dShape[0] / (wpt[0] * mmaInstrM), 1);\n-    // numRepN = std::max<int>(dShape[1] / (wpt[1] * mmaInstrN), 1);\n-    // numRepK = std::max<int>(NK / mmaInstrK, 1);\n-\n     Value _32 = i32_val(32);\n     lane = urem(thread, _32);\n     warp = udiv(thread, _32);\n     warpMN = udiv(warp, i32_val(wpt[0]));\n     warpM = urem(warp, i32_val(wpt[0]));\n     warpN = urem(warpMN, i32_val(wpt[1]));\n-\n-    // aElemBytes = aTensorTy.getElementTypeBitWidth() / 8;\n-    // bElemBytes = bTensorTy.getElementTypeBitWidth() / 8;\n   }\n \n   // Get the mmaInstrShape from either $a or $b."}, {"filename": "python/setup.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "file_content_changes": "@@ -125,11 +125,6 @@ def build_extension(self, ext):\n         subprocess.check_call([\"cmake\", self.base_dir] + cmake_args, cwd=self.build_temp, env=env)\n         subprocess.check_call([\"cmake\", \"--build\", \".\"] + build_args, cwd=self.build_temp)\n \n-        # run tests. Note: this depends on llvm-lit\n-        # -DLLVM_EXTERNAL_LIT=<path-to-lit.py>\n-        # Note: get_llvm_lit_path(...) in llvm/cmake/modules/AddLLVM.cmake\n-        subprocess.call([\"cmake\", \"--build\", \".\", \"--target\", \"check-triton\"], cwd=self.build_temp, env=env)\n-\n \n setup(\n     name=\"triton\","}]