[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "file_content_changes": "@@ -44,13 +44,13 @@ def ttir_to_ttgir(mod, num_warps):\n     return mod\n \n \n-def optimize_ttgir(mod, num_stages, compute_capability):\n+def optimize_ttgir(mod, num_stages, arch):\n     pm = _triton.ir.pass_manager(mod.context)\n     pm.enable_debug()\n     pm.add_tritongpu_coalesce_pass()\n     pm.add_tritongpu_remove_layout_conversions_pass()\n-    if isinstance(compute_capability, int):\n-        pm.add_tritongpu_accelerate_matmul_pass(compute_capability)\n+    if isinstance(arch, int):\n+        pm.add_tritongpu_accelerate_matmul_pass(arch)\n     pm.add_tritongpu_remove_layout_conversions_pass()\n     pm.add_tritongpu_optimize_dot_operands_pass()\n     pm.add_tritongpu_pipeline_pass(num_stages)\n@@ -111,7 +111,7 @@ def path_to_ptxas():\n     raise RuntimeError(\"Cannot find ptxas\")\n \n \n-def llir_to_ptx(mod: Any, compute_capability: int, ptx_version: int = None) -> str:\n+def llir_to_ptx(mod: Any, arch: int, ptx_version: int = None) -> str:\n     '''\n     Translate TritonGPU module to PTX code.\n     :param mod: a TritonGPU dialect module\n@@ -120,18 +120,18 @@ def llir_to_ptx(mod: Any, compute_capability: int, ptx_version: int = None) -> s\n     if ptx_version is None:\n         _, cuda_version = path_to_ptxas()\n         ptx_version = ptx_get_version(cuda_version)\n-    return _triton.translate_llvmir_to_ptx(mod, compute_capability, ptx_version)\n+    return _triton.translate_llvmir_to_ptx(mod, arch, ptx_version)\n \n \n-def ptx_to_cubin(ptx: str, compute_capability: int):\n+def ptx_to_cubin(ptx: str, arch: int):\n     '''\n     Compile TritonGPU module to cubin.\n     :param ptx: ptx code\n     :param compute_capability: compute capability\n     :return: str\n     '''\n     ptxas, _ = path_to_ptxas()\n-    return _triton.compile_ptx_to_cubin(ptx, ptxas, compute_capability)\n+    return _triton.compile_ptx_to_cubin(ptx, ptxas, arch)\n \n \n # AMDGCN translation"}, {"filename": "python/triton/tools/aot.py", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "file_content_changes": "@@ -1,9 +1,8 @@\n import argparse\n import sys\n \n-import triton\n import triton._C.libtriton.triton as libtriton\n-import triton.compiler as tc\n+import triton.compiler.compiler as tc\n \n if __name__ == '__main__':\n \n@@ -38,7 +37,7 @@\n     module.context = context\n \n     # optimizer triton-ir\n-    module = triton.compiler.optimize_triton_ir(module)\n+    module = tc.optimize_ttir(module)\n     if args.target == 'triton-ir':\n         print(module.str())\n         sys.exit(0)\n@@ -72,13 +71,13 @@\n \n         # triton-ir -> triton-gpu-ir\n         # use compute_capability == 80\n-        module = triton.compiler.ttir_to_ttgir(module, num_warps=args.num_warps)  # num_stages=3, compute_capability=80)\n-        module = triton.compiler.optimize_ttgir(module, num_stages=3, compute_capability=80)\n+        module = tc.ttir_to_ttgir(module, num_warps=args.num_warps)  # num_stages=3, compute_capability=80)\n+        module = tc.optimize_ttgir(module, num_stages=3, arch=80)\n         # triton-gpu-ir -> llvm-ir\n         # use compute_capability == 80\n-        module = triton.compiler.ttgir_to_llir(module, extern_libs=None, compute_capability=80)\n+        module = tc.ttgir_to_llir(module, extern_libs=None, arch=80)\n         # llvm-ir -> amdgcn asm, hsaco binary\n-        module, hsaco_path = triton.compiler.llir_to_amdgcn_and_hsaco(module, arch_name, arch_triple, arch_features)\n+        module, hsaco_path = tc.llir_to_amdgcn_and_hsaco(module, arch_name, arch_triple, arch_features)\n \n         print(hsaco_path)\n         print(module)\n@@ -88,14 +87,14 @@\n         raise argparse.ArgumentError(None, \"Must specify --sm for PTX compilation\")\n \n     # triton-ir -> triton-gpu-ir\n-    module = triton.compiler.ttir_to_ttgir(module, num_warps=args.num_warps)\n-    module = triton.compiler.optimize_ttgir(module, num_stages=3, compute_capability=args.sm)\n+    module = tc.ttir_to_ttgir(module, num_warps=args.num_warps)\n+    module = tc.optimize_ttgir(module, num_stages=3, arch=args.sm)\n     if args.target == 'triton-gpu-ir':\n         print(module.str())\n         sys.exit(0)\n \n     # triton-gpu-ir -> llvm-ir\n-    module = triton.compiler.ttgir_to_llir(module, extern_libs=None, compute_capability=args.sm)\n+    module = tc.ttgir_to_llir(module, extern_libs=None, arch=args.sm)\n     if args.target == 'llvm-ir':\n         print(module)\n         sys.exit(0)\n@@ -104,12 +103,12 @@\n     if args.target == 'ptx':\n         if not args.ptx_version:\n             raise argparse.ArgumentError(None, \"Must specify --ptx-version for PTX compilation\")\n-        module = triton.compiler.llir_to_ptx(module, compute_capability=args.sm, ptx_version=args.ptx_version)\n+        module = tc.llir_to_ptx(module, arch=args.sm, ptx_version=args.ptx_version)\n \n     # llvm-ir -> amdgcn\n     if args.target == 'amdgcn':\n         if not args.gfx:\n             raise argparse.ArgumentError(None, \"Must specify --gfx for AMDGCN compilation\")\n-        module, hsaco_path = triton.compiler.llir_to_amdgcn_and_hsaco(module, args.gfx)\n+        module, hsaco_path = tc.llir_to_amdgcn_and_hsaco(module, args.gfx)\n \n     print(module)"}]