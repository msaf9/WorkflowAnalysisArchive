[{"filename": "lib/Dialect/TritonGPU/Transforms/Coalesce.cpp", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "file_content_changes": "@@ -107,7 +107,6 @@ struct CoalescePass : public TritonGPUCoalesceBase<CoalescePass> {\n     // Run axis info analysis\n     AxisInfoAnalysis axisInfo(&getContext());\n     axisInfo.run(op);\n-    OpBuilder builder(op);\n \n     // For each memory op that has a layout L1:\n     // 1. Create a coalesced memory layout L2 of the pointer operands\n@@ -117,19 +116,28 @@ struct CoalescePass : public TritonGPUCoalesceBase<CoalescePass> {\n     // 4. Convert the output of this new memory op back to L1\n     // 5. Replace all the uses of the original memory op by the new one\n     op->walk([&](Operation *curr) {\n-      OpBuilder::InsertionGuard g(builder);\n-      builder.setInsertionPoint(curr);\n-      if (auto load = dyn_cast<triton::LoadOp>(curr))\n+      OpBuilder builder(curr);\n+      if (auto load = dyn_cast<triton::LoadOp>(curr)) {\n         coalesceOp<triton::LoadOp>(axisInfo, curr, load.ptr(), builder);\n-      if (auto op = dyn_cast<triton::AtomicRMWOp>(curr))\n+        return;\n+      }\n+      if (auto op = dyn_cast<triton::AtomicRMWOp>(curr)) {\n         coalesceOp<triton::AtomicRMWOp>(axisInfo, curr, op.ptr(), builder);\n-      if (auto op = dyn_cast<triton::AtomicCASOp>(curr))\n+        return;\n+      }\n+      if (auto op = dyn_cast<triton::AtomicCASOp>(curr)) {\n         coalesceOp<triton::AtomicCASOp>(axisInfo, curr, op.ptr(), builder);\n-      if (auto load = dyn_cast<triton::gpu::InsertSliceAsyncOp>(curr))\n+        return;\n+      }\n+      if (auto load = dyn_cast<triton::gpu::InsertSliceAsyncOp>(curr)) {\n         coalesceOp<triton::gpu::InsertSliceAsyncOp>(axisInfo, curr, load.src(),\n                                                     builder);\n-      if (auto store = dyn_cast<triton::StoreOp>(curr))\n+        return;\n+      }\n+      if (auto store = dyn_cast<triton::StoreOp>(curr)) {\n         coalesceOp<triton::StoreOp>(axisInfo, curr, store.ptr(), builder);\n+        return;\n+      }\n     });\n   }\n };"}]