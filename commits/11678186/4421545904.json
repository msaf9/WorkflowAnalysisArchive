[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -334,6 +334,10 @@ class DivOpAxisInfoVisitor final : public BinaryOpVisitorImpl<OpTy> {\n     if (lhs.getConstantValue().has_value() &&\n         lhs.getConstantValue().value() == 0)\n       return lhs.getDivisibility(dim);\n+    // Case 2: rhs is 1\n+    if (rhs.getConstantValue().has_value() &&\n+        rhs.getConstantValue().value() == 1)\n+      return lhs.getDivisibility(dim);\n     // otherwise: return 1\n     return 1;\n   }"}, {"filename": "test/Analysis/test-alignment.mlir", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -82,7 +82,7 @@ func.func @div() {\n   %3 = arith.divui %1, %0 : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [1], divisibility = [64], constancy = [128], constant_value = 64\n   %4 = arith.constant dense<64> : tensor<128xi32>\n-  // CHECK-NEXT: contiguity = [1], divisibility = [16777216], constancy = [64], constant_value = <none>\n+  // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [64], constant_value = <none>\n   %5 = arith.divsi %0, %4 : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [1], constant_value = <none>\n   %6 = arith.divsi %4, %0 : tensor<128xi32>\n@@ -94,11 +94,12 @@ func.func @div() {\n   %9 = arith.divui %0, %8 : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [128], divisibility = [8192], constancy = [1], constant_value = <none>\n   %10 = tt.make_range {end = 8320 : i32, start = 8192 : i32} : tensor<128xi32>\n-  // CHECK-NEXT: contiguity = [1], divisibility = [128], constancy = [64], constant_value = <none>\n+  // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [64], constant_value = <none>\n   %11 = arith.divsi %10, %4 : tensor<128xi32>\n   return\n }\n \n+\n // -----\n \n // CHECK-LABEL: @rem\n@@ -179,11 +180,11 @@ func.func @logic() {\n   %0 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [1], divisibility = [64], constancy = [128], constant_value = 64\n   %1 = arith.constant dense<64> : tensor<128xi32>\n-  // CHECK-NEXT: contiguity = [1], divisibility = [16777216], constancy = [64], constant_value = <none>\n+  // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [64], constant_value = <none>\n   %2 = arith.divsi %0, %1 : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [1], divisibility = [8], constancy = [128], constant_value = 8\n   %3 = arith.constant dense<8> : tensor<128xi32>\n-  // CHECK-NEXT: contiguity = [1], divisibility = [134217728], constancy = [8], constant_value = <none>\n+  // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [8], constant_value = <none>\n   %4 = arith.divsi %0, %3 : tensor<128xi32>\n   // CHECK-NEXT: contiguity = [1], divisibility = [1], constancy = [1], constant_value = <none>\n   %5 = arith.andi %0, %1 : tensor<128xi32>"}]