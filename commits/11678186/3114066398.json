[{"filename": "python/setup.py", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "file_content_changes": "@@ -28,6 +28,20 @@ def get_build_type():\n         return \"Release\"\n \n \n+def check_submodule():\n+    submodule_paths = [\"third-party/pybind11/include/pybind11\"]\n+    if not all([os.path.exists(p) for p in submodule_paths]):\n+        print(\"initializing submodules ...\")\n+        try:\n+            cwd = os.path.abspath(os.path.dirname(__file__))\n+            subprocess.check_call([\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\"], cwd=cwd)\n+            print(\"submodule initialization succeeded\")\n+        except Exception:\n+            print(\"submodule initialization failed\")\n+            print(\" Please run:\\n\\tgit submodule update --init --recursive\")\n+            exit(-1)\n+\n+\n def get_llvm():\n     # tries to find system LLVM\n     versions = ['-11.0', '-11', '-11-64']\n@@ -92,6 +106,7 @@ def run(self):\n             self.build_extension(ext)\n \n     def build_extension(self, ext):\n+        check_submodule()\n         llvm_include_dir, llvm_library_dir = get_llvm()\n         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.path)))\n         # create build directories"}]