[{"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "file_content_changes": "@@ -107,14 +107,19 @@ struct ConvertLayoutOpConversion\n       unsigned dim = sliceLayout.getDim();\n       auto parentEncoding = sliceLayout.getParent();\n       auto parentSizePerThread = getSizePerThread(parentEncoding);\n-      unsigned stride = 1;\n-      if (getOrder(parentEncoding)[0] == dim)\n-        stride = parentSizePerThread[dim];\n       auto parentShape = sliceLayout.paddedShape(shape);\n       auto parentTy = RankedTensorType::get(parentShape, type.getElementType(),\n                                             parentEncoding);\n+      auto offsets = emitOffsetForLayout(layout, type);\n+      auto parentOffset = emitOffsetForLayout(parentEncoding, parentTy);\n+      SmallVector<int> idxs;\n+      for (SmallVector<unsigned> off : offsets) {\n+        off.insert(off.begin() + dim, 0);\n+        auto it = std::find(parentOffset.begin(), parentOffset.end(), off);\n+        idxs.push_back(std::distance(parentOffset.begin(), it));\n+      }\n       auto multiDimOffsetParent = getMultiDimOffset(\n-          parentEncoding, loc, rewriter, elemId * stride, parentTy,\n+          parentEncoding, loc, rewriter, idxs[elemId], parentTy,\n           sliceLayout.paddedShape(multiDimCTAInRepId),\n           sliceLayout.paddedShape(shapePerCTA));\n       SmallVector<Value> multiDimOffset(rank);"}]