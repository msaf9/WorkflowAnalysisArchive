[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "file_content_changes": "@@ -1271,19 +1271,16 @@ def __init__(self, fn_name, so_path, cache_dir, device):\n         self.n_regs = n_regs\n         self.n_spills = n_spills\n \n-    def __getitem__(self, grid):\n-        def runner(*args, stream=None):\n-            if stream is None:\n-                stream = torch.cuda.current_stream().cuda_stream\n-            if CompiledKernel.launch_enter_hook:\n-                hook_ret = CompiledKernel.launch_enter_hook(grid[0], grid[1], grid[2], stream, self)\n-            else:\n-                hook_ret = None\n-            self.c_wrapper(grid[0], grid[1], grid[2], self.num_warps, self.shared, stream, self.cu_function, *args)\n-            if CompiledKernel.launch_exit_hook:\n-                CompiledKernel.launch_exit_hook(grid[0], grid[1], grid[2], stream, self, hook_ret)\n-\n-        return runner\n+    def launch(self, grid, stream=None, *args):\n+        if stream is None:\n+            stream = torch.cuda.current_stream().cuda_stream\n+        if CompiledKernel.launch_enter_hook:\n+            hook_ret = CompiledKernel.launch_enter_hook(grid[0], grid[1], grid[2], stream, self)\n+        else:\n+            hook_ret = None\n+        self.c_wrapper(grid[0], grid[1], grid[2], self.num_warps, self.shared, stream, self.cu_function, *args)\n+        if CompiledKernel.launch_exit_hook:\n+            CompiledKernel.launch_exit_hook(grid[0], grid[1], grid[2], stream, self, hook_ret)\n \n     def get_sass(self, fun=None):\n         if 'sass' in self.asm:"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -254,7 +254,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n     try:\n       bin = cache[key]\n       if not warmup:\n-          bin[(grid_0, grid_1, grid_2)](*args, stream=stream)\n+        bin.launch((grid_0, grid_1, grid_2), stream, *args)\n       return bin\n     # kernel not cached -- compile\n     except KeyError:\n@@ -274,7 +274,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n       if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs):\n         bin = triton.compile(self, signature, device, constants, num_warps, num_stages, extern_libs=extern_libs, configs=configs)\n         if not warmup:\n-            bin[(grid_0, grid_1, grid_2)](*args, stream=stream)\n+            bin.launch((grid_0, grid_1, grid_2), stream, *args)\n         self.cache[key] = bin\n         return bin\n       return None"}]