[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -178,7 +178,7 @@ def visit_compound_statement(self, stmts):\n             if isinstance(stmt, ast.Return):\n                 break\n         return stmts and isinstance(stmt, ast.Return)\n-    \n+\n     def contains_return_op(self, node):\n         if isinstance(node, ast.Return):\n             return True"}, {"filename": "python/triton/language/random.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -18,7 +18,7 @@ def philox_impl(c0, c1, c2, c3, k0, k1, n_rounds: tl.constexpr = N_ROUNDS_DEFAUL\n     Run `n_rounds` rounds of Philox for state (c0, c1, c2, c3) and key (k0, k1).\n     \"\"\"\n     for _ in tl.static_range(n_rounds):\n-    # for _ in range(n_rounds):\n+        # for _ in range(n_rounds):\n         # update random state\n         A = PHILOX_ROUND_A\n         B = PHILOX_ROUND_B"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -746,6 +746,7 @@ def cast(input: tl.tensor,\n #                               Memory Operators\n # ===----------------------------------------------------------------------===//\n \n+\n def str_to_cache_modifier(cache_modifier):\n     cache = ir.CACHE_MODIFIER.NONE  # default\n     if cache_modifier:\n@@ -757,6 +758,7 @@ def str_to_cache_modifier(cache_modifier):\n             raise ValueError(f\"Cache modifier {cache_modifier} not supported\")\n     return cache\n \n+\n def str_to_eviction_policy(eviction_policy):\n     eviction = ir.EVICTION_POLICY.NORMAL  # default\n     if eviction_policy:"}]