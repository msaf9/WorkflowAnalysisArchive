[{"filename": "include/triton/Conversion/TritonGPUToLLVM/GCNAsmFormat.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -41,7 +41,8 @@ class GCNInstrExecution;\n // auto rhs = gcnBuilder.newOperand(operands[1], readConstraint);\n //\n // create inst\n-// auto &mul_inst = gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth);\n+// auto &mul_inst =\n+// gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth);\n //\n // launch insts\n // mul_inst(res, lhs, rhs);\n@@ -63,7 +64,8 @@ class GCNInstrExecution;\n //\n // GCNBuilder builder;\n // auto &rcp = gcnBuilder.create<GCNInstr>(\"v_rcp\")->float_op_type(bitwidth);\n-// auto &mul_inst = gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth);\n+// auto &mul_inst =\n+// gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth);\n //\n // rcp(...);\n // mul_inst(...);\n@@ -72,9 +74,9 @@ class GCNInstrExecution;\n // Similar to a C function, a declared GCNInstr instance can be launched\n // multiple times with different operands, e.g.\n //\n-//   auto &mul_inst = gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth);\n-//   mul_inst(... some operands ...);\n-//   mul_inst(... some different operands ...);\n+//   auto &mul_inst =\n+//   gcnBuilder.create<GCNInstr>(\"v_mul\")->float_op_type(bitwidth); mul_inst(...\n+//   some operands ...); mul_inst(... some different operands ...);\n //\n // Finally, we will get a GCN code with two mov instructions.\n //"}]