[{"filename": "python/src/triton.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "file_content_changes": "@@ -445,7 +445,7 @@ void init_triton_ir(py::module &&m) {\n              auto loc = self.getUnknownLoc();\n              if (auto floatTy = type.dyn_cast<mlir::FloatType>())\n                return self.create<mlir::arith::ConstantFloatOp>(\n-                   loc, mlir::APFloat((double)0.), floatTy);\n+                   loc, mlir::APFloat(floatTy.getFloatSemantics(), 0), floatTy);\n              else if (auto intTy = type.dyn_cast<mlir::IntegerType>())\n                return self.create<mlir::arith::ConstantIntOp>(loc, 0, intTy);\n              else\n@@ -455,10 +455,7 @@ void init_triton_ir(py::module &&m) {\n            [](mlir::OpBuilder &self, mlir::Type type) -> mlir::Value {\n              auto loc = self.getUnknownLoc();\n              uint64_t val = 0xFFFFFFFFFFFFFFFF;\n-             if (auto floatTy = type.dyn_cast<mlir::FloatType>())\n-               return self.create<mlir::arith::ConstantFloatOp>(\n-                   loc, mlir::APFloat(*(double *)(&val)), floatTy);\n-             else if (auto intTy = type.dyn_cast<mlir::IntegerType>())\n+             if (auto intTy = type.dyn_cast<mlir::IntegerType>())\n                return self.create<mlir::arith::ConstantIntOp>(loc, val, intTy);\n              else\n                throw std::runtime_error(\"Not implemented\");"}]