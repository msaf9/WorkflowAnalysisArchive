[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "file_content_changes": "@@ -887,6 +887,12 @@ def broadcast_to(input, shape, _builder=None):\n \n @builtin\n def trans(input, _builder=None):\n+    \"\"\"\n+    Returns a transposed tensor.\n+\n+    :param input: The input tensor.\n+    :type input:\n+    \"\"\"\n     return semantic.trans(input, _builder)\n \n \n@@ -925,6 +931,15 @@ def view(input, shape, _builder=None):\n \n @builtin\n def reshape(input, shape, _builder=None):\n+    \"\"\"\n+    Returns a tensor with the same number of elements as input but with the\n+    provided shape.\n+\n+    :param input: The input tensor.\n+    :type input:\n+    :param shape: The new shape.\n+    :type shape: Tuple[int]\n+    \"\"\"\n     shape = _shape_check_impl(shape)\n     return semantic.reshape(input, shape, _builder)\n \n@@ -1223,13 +1238,30 @@ def where(condition, x, y, _builder=None):\n \n @builtin\n def umulhi(x, y, _builder=None):\n+    \"\"\"\n+    Returns the most significant 32 bits of the product of x and y.\n+\n+    :param x: the input tensor\n+    :type x: int32\n+    :param y: the input tensor\n+    :type y: int32\n+    \"\"\"\n     x = _to_tensor(x, _builder)\n     y = _to_tensor(y, _builder)\n     return semantic.umulhi(x, y, _builder)\n \n \n @builtin\n def fdiv(x, y, ieee_rounding=False, _builder=None):\n+    \"\"\"\n+    Returns a floating-point resultant tensor of dividing x by y.\n+\n+    :param x: the input numerator value.\n+    :param y: the input denominator value.\n+    :param ieee_rounding: To follow IEEE-754 floating point number\n+    rounding mechanism\n+    :type ieee_rounding: bool\n+    \"\"\"\n     ieee_rounding = _constexpr_to_value(ieee_rounding)\n     return semantic.fdiv(x, y, ieee_rounding, _builder)\n "}]