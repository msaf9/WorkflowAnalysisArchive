[{"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "file_content_changes": "@@ -1201,14 +1201,10 @@ void generator::visit_atomic_rmw_inst(ir::atomic_rmw_inst *atom) {\n   if(atom->get_type()->is_block_ty()){\n     int ld = ords_.at(ptr)[0];\n     unsigned alignment = alignment_->get(ptr, ld);\n-    analysis::scanline_layout* scanline = layouts_->get(ptr)->to_scanline();\n-    if(scanline){\n-      vec = std::min<int>(scanline->nts(ld), alignment);\n-      vec = std::min(vec, val->get_type()->get_tile_element_ty()->is_fp16_ty() ? 2 : 1);\n-    }\n+    vec = std::min<int>(layouts_->get(ptr)->to_scanline()->nts(ld), alignment);\n+    vec = std::min(vec, val->get_type()->get_tile_element_ty()->is_fp16_ty() ? 2 : 1);\n   }\n \n-\n   for(int i = 0; i < idxs_.at(val).size(); i += vec){\n     auto idx = idxs_[val][i];\n     Value *rmw_val = UndefValue::get(vec_ty(vals_[val][idx]->getType(), vec));\n@@ -1259,15 +1255,8 @@ void generator::visit_atomic_rmw_inst(ir::atomic_rmw_inst *atom) {\n     // create inline asm\n     InlineAsm *iasm = InlineAsm::get(fn_ty, asm_str, constraint, true);\n     // call asm\n-    if(atom->get_type()->is_block_ty()){\n-      Module *mod = builder_->GetInsertBlock()->getModule();\n-      Value *tid = tgt_->get_local_id(mod, *builder_, 0);\n-      Value* warp = axes_.at(layouts_->get(val)->get_axis(1)).thread_id;\n-      Value* msk = rmw_msk;\n-      msk = and_(msk, icmp_eq(warp, i32(0)));\n-      msk = and_(msk, icmp_eq(urem(tid, i32(4)), i32(0)));\n-      vals_[atom][idx] = call(iasm, (ArrayRef<Value*>{msk, rmw_ptr, rmw_val}));\n-    }\n+    if(atom->get_type()->is_block_ty())\n+      vals_[atom][idx] = call(iasm, (ArrayRef<Value*>{rmw_msk, rmw_ptr, rmw_val}));\n     else{\n       Module *mod = builder_->GetInsertBlock()->getModule();\n       tgt_->add_memfence(mod, *builder_);"}]