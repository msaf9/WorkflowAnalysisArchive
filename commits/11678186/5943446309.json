[{"filename": "python/src/triton.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "file_content_changes": "@@ -54,6 +54,7 @@\n #include <fstream>\n #include <optional>\n #include <pybind11/buffer_info.h>\n+#include <pybind11/embed.h>\n #include <pybind11/functional.h>\n #include <pybind11/pybind11.h>\n #include <pybind11/stl.h>\n@@ -172,6 +173,30 @@ class TritonOpBuilder {\n   bool lineInfoEnabled = !triton::tools::getBoolEnv(\"TRITON_DISABLE_LINE_INFO\");\n };\n \n+static std::string locationToString(mlir::Location loc) {\n+  std::string str;\n+  llvm::raw_string_ostream os(str);\n+  loc.print(os);\n+  os.flush(); // Make sure all the content is dumped into the 'str' string\n+  return str;\n+}\n+\n+static void outputWarning(mlir::Location loc, const std::string &msg) {\n+  std::string locStr = locationToString(loc);\n+\n+  py::exec(\n+      R\"(\n+import warnings\n+\n+def custom_showwarning(message, category, filename, lineno, file=None, line=None):\n+    print(f\"UserWarning: {message}\")\n+\n+warnings.showwarning = custom_showwarning\n+warnings.warn(f\"{loc}: {msg}\")\n+)\",\n+      py::globals(), py::dict(py::arg(\"loc\") = locStr, py::arg(\"msg\") = msg));\n+}\n+\n /*****************************************************************************/\n /* Python bindings for triton::ir                                            */\n /*****************************************************************************/\n@@ -596,6 +621,17 @@ void init_triton_ir(py::module &&m) {\n                  newBlock->erase();\n                }\n              });\n+             // 2. Check if the result of tl.advance is used\n+             self.walk([&](mlir::Operation *op) {\n+               if (mlir::isa<mlir::triton::AdvanceOp>(op) &&\n+                   op->getResult(0).use_empty())\n+                 outputWarning(op->getLoc(), \"The result of tl.advance is not \"\n+                                             \"being used. Note that tl.advance \"\n+                                             \"does not have any side effects. \"\n+                                             \"To move the block pointer, you \"\n+                                             \"need to assign the result of \"\n+                                             \"tl.advance to a variable.\");\n+             });\n            })\n       .def_property_readonly(\"type\", &mlir::triton::FuncOp::getFunctionType)\n       .def(\"reset_type\", &mlir::triton::FuncOp::setType);"}]