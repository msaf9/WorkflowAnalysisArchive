[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "file_content_changes": "@@ -1002,16 +1002,18 @@ def _warmup(self, key, arg_types, device, attributes, constants, num_warps, num_\n             if noop:\n                 return True\n \n-            if binary is None:\n-                binary = self._compile(**compile)\n-            if bin_cache_path:\n-                assert bin_lock_path is not None\n-                with FileLock(bin_lock_path):\n-                    with open(bin_cache_path + \".tmp\", \"wb\") as f:\n-                        pickle.dump({\"binary\": binary, \"key\": key}, f)\n-                    os.rename(bin_cache_path + \".tmp\", bin_cache_path)\n+        if binary is None:\n+            binary = self._compile(**compile)\n+\n+        if bin_cache_path:\n+            assert bin_lock_path is not None\n+            with FileLock(bin_lock_path):\n+                with open(bin_cache_path + \".tmp\", \"wb\") as f:\n+                    pickle.dump({\"binary\": binary, \"key\": key}, f)\n+                os.rename(bin_cache_path + \".tmp\", bin_cache_path)\n \n         self.bin_cache[key] = LoadedBinary(device, binary)\n+        return False\n \n     def _compile(self, arg_types, device, attributes, constants, num_warps, num_stages):\n         # create IR module"}]