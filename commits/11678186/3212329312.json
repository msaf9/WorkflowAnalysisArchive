[{"filename": "python/tutorials/01-vector-add.py", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "file_content_changes": "@@ -20,30 +20,30 @@\n \n @triton.jit\n def add_kernel(\n-    x_ptr,  # *Pointer* to first input vector\n-    y_ptr,  # *Pointer* to second input vector\n-    output_ptr,  # *Pointer* to output vector\n-    n_elements,  # Size of the vector\n-    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n-                 # NOTE: `constexpr` so it can be used as a shape value\n+    x_ptr,  # *Pointer* to first input vector.\n+    y_ptr,  # *Pointer* to second input vector.\n+    output_ptr,  # *Pointer* to output vector.\n+    n_elements,  # Size of the vector.\n+    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n+                 # NOTE: `constexpr` so it can be used as a shape value.\n ):\n-    # There are multiple 'program's processing different data. We identify which program\n-    # we are here\n-    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0\n+    # There are multiple 'programs' processing different data. We identify which program\n+    # we are here:\n+    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n     # This program will process inputs that are offset from the initial data.\n-    # for instance, if you had a vector of length 256 and block_size of 64, the programs\n+    # For instance, if you had a vector of length 256 and block_size of 64, the programs\n     # would each access the elements [0:64, 64:128, 128:192, 192:256].\n-    # Note that offsets is a list of pointers\n+    # Note that offsets is a list of pointers:\n     block_start = pid * BLOCK_SIZE\n     offsets = block_start + tl.arange(0, BLOCK_SIZE)\n-    # Create a mask to guard memory operations against out-of-bounds accesses\n+    # Create a mask to guard memory operations against out-of-bounds accesses.\n     mask = offsets < n_elements\n     # Load x and y from DRAM, masking out any extra elements in case the input is not a\n-    # multiple of the block size\n+    # multiple of the block size.\n     x = tl.load(x_ptr + offsets, mask=mask)\n     y = tl.load(y_ptr + offsets, mask=mask)\n     output = x + y\n-    # Write x + y back to DRAM\n+    # Write x + y back to DRAM.\n     tl.store(output_ptr + offsets, output, mask=mask)\n \n \n@@ -53,18 +53,18 @@ def add_kernel(\n \n \n def add(x: torch.Tensor, y: torch.Tensor):\n-    # We need to preallocate the output\n+    # We need to preallocate the output.\n     output = torch.empty_like(x)\n     assert x.is_cuda and y.is_cuda and output.is_cuda\n     n_elements = output.numel()\n     # The SPMD launch grid denotes the number of kernel instances that run in parallel.\n     # It is analogous to CUDA launch grids. It can be either Tuple[int], or Callable(metaparameters) -> Tuple[int]\n-    # In this case, we use a 1D grid where the size is the number of blocks\n+    # In this case, we use a 1D grid where the size is the number of blocks:\n     grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n     # NOTE:\n-    #  - each torch.tensor object is implicitly converted into a pointer to its first element.\n-    #  - `triton.jit`'ed functions can be index with a launch grid to obtain a callable GPU kernel\n-    #  - don't forget to pass meta-parameters as keywords arguments\n+    #  - Each torch.tensor object is implicitly converted into a pointer to its first element.\n+    #  - `triton.jit`'ed functions can be indexed with a launch grid to obtain a callable GPU kernel.\n+    #  - Don't forget to pass meta-parameters as keywords arguments.\n     add_kernel[grid](x, y, output, n_elements, BLOCK_SIZE=1024)\n     # We return a handle to z but, since `torch.cuda.synchronize()` hasn't been called, the kernel is still\n     # running asynchronously at this point.\n@@ -100,18 +100,18 @@ def add(x: torch.Tensor, y: torch.Tensor):\n \n @triton.testing.perf_report(\n     triton.testing.Benchmark(\n-        x_names=['size'],  # argument names to use as an x-axis for the plot\n+        x_names=['size'],  # Argument names to use as an x-axis for the plot.\n         x_vals=[\n             2 ** i for i in range(12, 28, 1)\n-        ],  # different possible values for `x_name`\n-        x_log=True,  # x axis is logarithmic\n-        line_arg='provider',  # argument name whose value corresponds to a different line in the plot\n-        line_vals=['triton', 'torch'],  # possible values for `line_arg`\n-        line_names=['Triton', 'Torch'],  # label name for the lines\n-        styles=[('blue', '-'), ('green', '-')],  # line styles\n-        ylabel='GB/s',  # label name for the y-axis\n-        plot_name='vector-add-performance',  # name for the plot. Used also as a file name for saving the plot.\n-        args={},  # values for function arguments not in `x_names` and `y_name`\n+        ],  # Different possible values for `x_name`\n+        x_log=True,  # x axis is logarithmic.\n+        line_arg='provider',  # Argument name whose value corresponds to a different line in the plot.\n+        line_vals=['triton', 'torch'],  # Possible values for `line_arg`.\n+        line_names=['Triton', 'Torch'],  # Label name for the lines.\n+        styles=[('blue', '-'), ('green', '-')],  # Line styles.\n+        ylabel='GB/s',  # Label name for the y-axis\n+        plot_name='vector-add-performance',  # Name for the plot. Used also as a file name for saving the plot.\n+        args={},  # Values for function arguments not in `x_names` and `y_name`.\n     )\n )\n def benchmark(size, provider):"}]