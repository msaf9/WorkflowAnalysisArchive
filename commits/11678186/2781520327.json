[{"filename": "python/src/triton.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -558,16 +558,16 @@ void init_triton_codegen(py::module &&m) {\n         }\n         if(backend == CUDA)\n           return cu_compile_ttir(name, ir, device, num_warps, num_stages, asm_map, extern_lib_map);\n-        if(backend == ROCM)\n-          return hip_compile_ttir(name, ir, device, num_warps, num_stages, asm_map, extern_lib_map);\n+        assert(backend == ROCM);\n+        return hip_compile_ttir(name, ir, device, num_warps, num_stages, asm_map, extern_lib_map);\n       },\n       py::return_value_policy::take_ownership);\n   m.def(\"load_binary\", [](backend_t backend, const std::string& name, asm_map_t &asm_map, size_t n_shared_bytes, uint64_t dev){\n \tpy::gil_scoped_release allow_threads;\n         if(backend == CUDA)\n           return cu_load_binary(name, asm_map, n_shared_bytes, dev);\n-        if(backend == ROCM)\n-          return hip_load_binary(name, asm_map, n_shared_bytes, dev);\n+        assert(backend == ROCM);\n+        return hip_load_binary(name, asm_map, n_shared_bytes, dev);\n       }, py::return_value_policy::take_ownership);\n }\n "}]