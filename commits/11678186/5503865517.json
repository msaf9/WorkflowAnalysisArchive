[{"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "file_content_changes": "@@ -1,5 +1,6 @@\n from __future__ import annotations  # remove after python 3.11\n \n+import warnings\n from functools import wraps\n from typing import List, Optional, Sequence, Tuple, TypeVar\n \n@@ -676,6 +677,16 @@ def cast(input: tl.tensor,\n     src_sca_ty = src_ty.scalar\n     dst_sca_ty = dst_ty.scalar\n \n+    if builder.arch < 89 and \\\n+       (src_sca_ty.is_fp8e4() or dst_sca_ty.is_fp8e4()):\n+        warnings.warn(\"Standard tl.float8e4 format will be deprecated on SM < 89. \"\n+                      \"Please use tl.float8e4b15.\", DeprecationWarning)\n+\n+    # Unsupported conversion:\n+    if (src_sca_ty.is_fp8e4b15() and not dst_sca_ty.is_fp16()) or \\\n+       (dst_sca_ty.is_fp8e4b15() and not src_sca_ty.is_fp16()):\n+        raise ValueError('fp8e4b15 can only be converted to/from fp16')\n+\n     # Casting with customized floating types involved: fp8 <=> bf16, fp16, fp32, fp64\n     if (src_sca_ty.is_fp8() and dst_sca_ty.is_floating()) or \\\n        (src_sca_ty.is_floating() and dst_sca_ty.is_fp8()):"}]