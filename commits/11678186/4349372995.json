[{"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "file_content_changes": "@@ -258,7 +258,6 @@ struct StoreOpConversion\n   matchAndRewrite(triton::StoreOp op, OpAdaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n     Value ptr = op.getPtr();\n-    Value mask = op.getMask();\n     Value value = op.getValue();\n \n     Value llPtr = adaptor.getPtr();\n@@ -273,7 +272,7 @@ struct StoreOpConversion\n         typeConverter->convertType(getElementTypeOrSelf(valueTy));\n \n     unsigned vec = getVectorSize(ptr);\n-    unsigned numElems = getElemsPerThread(ptr.getType());\n+    unsigned elemsPerThread = getElemsPerThread(ptr.getType());\n \n     auto ptrElems = getTypeConverter()->unpackLLElements(loc, llPtr, rewriter,\n                                                          ptr.getType());\n@@ -284,6 +283,7 @@ struct StoreOpConversion\n     // Determine the vectorization size\n     SmallVector<Value> maskElems;\n     if (llMask) {\n+      Value mask = op.getMask();\n       maskElems = getTypeConverter()->unpackLLElements(loc, llMask, rewriter,\n                                                        mask.getType());\n       assert(valueElems.size() == maskElems.size());\n@@ -292,12 +292,20 @@ struct StoreOpConversion\n       vec = std::min(vec, maskAlign);\n     }\n \n+    // numElements = 1 for scalar\n+    auto tensorTy = valueTy.dyn_cast<RankedTensorType>();\n+    auto numElems = tensorTy ? tensorTy.getNumElements() : 1;\n+    Value mask = int_val(1, 1);\n+    auto tid = tid_val();\n+    mask = and_(mask,\n+                icmp_slt(mul(tid, i32_val(elemsPerThread)), i32_val(numElems)));\n+\n     const size_t dtsize =\n         std::max<int>(1, valueElemTy.getIntOrFloatBitWidth() / 8);\n     const size_t valueElemNbits = dtsize * 8;\n \n-    const int numVecs = numElems / vec;\n-    for (size_t vecStart = 0; vecStart < numElems; vecStart += vec) {\n+    const int numVecs = elemsPerThread / vec;\n+    for (size_t vecStart = 0; vecStart < elemsPerThread; vecStart += vec) {\n       // TODO: optimization when ptr is AddPtr with constant offset\n       size_t in_off = 0;\n \n@@ -306,7 +314,7 @@ struct StoreOpConversion\n       const size_t width = std::min(totalWidth, maxWordWidth);\n       const size_t nWords = std::max<size_t>(1, totalWidth / width);\n       const size_t wordNElems = width / valueElemNbits;\n-      assert(wordNElems * nWords * numVecs == numElems);\n+      assert(wordNElems * nWords * numVecs == elemsPerThread);\n \n       // TODO(Superjomn) Add cache policy fields to StoreOp.\n       // TODO(Superjomn) Deal with cache policy here.\n@@ -339,7 +347,7 @@ struct StoreOpConversion\n       PTXBuilder ptxBuilder;\n       auto *asmArgList = ptxBuilder.newListOperand(asmArgs);\n \n-      Value maskVal = llMask ? maskElems[vecStart] : int_val(1, 1);\n+      Value maskVal = llMask ? and_(mask, maskElems[vecStart]) : mask;\n \n       auto *asmAddr =\n           ptxBuilder.newAddrOperand(ptrElems[vecStart], \"l\", in_off);\n@@ -392,10 +400,10 @@ struct AtomicCASOpConversion\n     auto valElements = getTypeConverter()->unpackLLElements(\n         loc, llVal, rewriter, op.getVal().getType());\n \n-    auto valueTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n+    auto TensorTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n     Type valueElemTy =\n-        valueTy ? getTypeConverter()->convertType(valueTy.getElementType())\n-                : op.getResult().getType();\n+        TensorTy ? getTypeConverter()->convertType(TensorTy.getElementType())\n+                 : op.getResult().getType();\n     auto tid = tid_val();\n     Value pred = icmp_eq(tid, i32_val(0));\n     PTXBuilder ptxBuilderMemfence;\n@@ -462,7 +470,6 @@ struct AtomicRMWOpConversion\n \n     Value val = op.getVal();\n     Value ptr = op.getPtr();\n-    Value _mask = op.getMask();\n \n     Value llPtr = adaptor.getPtr();\n     Value llVal = adaptor.getVal();\n@@ -472,29 +479,31 @@ struct AtomicRMWOpConversion\n         loc, llVal, rewriter, val.getType());\n     auto ptrElements = getTypeConverter()->unpackLLElements(\n         loc, llPtr, rewriter, ptr.getType());\n-    auto maskElements = getTypeConverter()->unpackLLElements(\n-        loc, llMask, rewriter, _mask.getType());\n+    SmallVector<Value> maskElements;\n+    if (llMask)\n+      maskElements = getTypeConverter()->unpackLLElements(\n+          loc, llMask, rewriter, op.getMask().getType());\n \n-    auto valueTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n+    auto tensorTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n     Type valueElemTy =\n-        valueTy ? getTypeConverter()->convertType(valueTy.getElementType())\n-                : op.getResult().getType();\n+        tensorTy ? getTypeConverter()->convertType(tensorTy.getElementType())\n+                 : op.getResult().getType();\n     const size_t valueElemNbits = valueElemTy.getIntOrFloatBitWidth();\n     auto elemsPerThread = getElemsPerThread(val.getType());\n-    // vec = 1 for scalar\n+    // vec = 1, numElements = 1 for scalar\n     auto vec = getVectorSize(ptr);\n-    Value mask = int_val(1, 1);\n-    auto tid = tid_val();\n+    int numElems = 1;\n     // tensor\n-    if (valueTy) {\n+    if (tensorTy) {\n       auto valTy = val.getType().cast<RankedTensorType>();\n       vec = std::min<unsigned>(vec, valTy.getElementType().isF16() ? 2 : 1);\n       // mask\n-      auto shape = valueTy.getShape();\n-      auto numElements = product(shape);\n-      mask = and_(mask, icmp_slt(mul(tid, i32_val(elemsPerThread)),\n-                                 i32_val(numElements)));\n+      numElems = tensorTy.getNumElements();\n     }\n+    Value mask = int_val(1, 1);\n+    auto tid = tid_val();\n+    mask = and_(mask,\n+                icmp_slt(mul(tid, i32_val(elemsPerThread)), i32_val(numElems)));\n \n     auto vecTy = vec_ty(valueElemTy, vec);\n     SmallVector<Value> resultVals(elemsPerThread);\n@@ -507,8 +516,7 @@ struct AtomicRMWOpConversion\n       }\n \n       Value rmwPtr = ptrElements[i];\n-      Value rmwMask = maskElements[i];\n-      rmwMask = and_(rmwMask, mask);\n+      Value rmwMask = llMask ? and_(mask, maskElements[i]) : mask;\n       std::string sTy;\n       PTXBuilder ptxBuilderAtomicRMW;\n       std::string tyId = valueElemNbits * vec == 64\n@@ -561,7 +569,7 @@ struct AtomicRMWOpConversion\n         return failure();\n       }\n       atom.o(rmwOp).o(sTy);\n-      if (valueTy) {\n+      if (tensorTy) {\n         atom(dstOpr, ptrOpr, valOpr).predicate(rmwMask);\n         auto retType = vec == 1 ? valueElemTy : vecTy;\n         auto ret = ptxBuilderAtomicRMW.launch(rewriter, loc, retType);\n@@ -587,8 +595,8 @@ struct AtomicRMWOpConversion\n         rewriter.replaceOp(op, {ret});\n       }\n     }\n-    if (valueTy) {\n-      Type structTy = getTypeConverter()->convertType(valueTy);\n+    if (tensorTy) {\n+      Type structTy = getTypeConverter()->convertType(tensorTy);\n       Value resultStruct = getTypeConverter()->packLLElements(\n           loc, resultVals, rewriter, structTy);\n       rewriter.replaceOp(op, {resultStruct});"}, {"filename": "lib/Dialect/TritonGPU/Transforms/RemoveLayoutConversions.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -108,7 +108,7 @@ class SimplifyReduceCvt : public mlir::RewritePattern {\n     auto newReduce = rewriter.create<triton::ReduceOp>(\n         op->getLoc(), reduce.getRedOp(), reduceArg.getOperand(),\n         reduce.getAxis());\n-    if (isa<triton::gpu::ConvertLayoutOp>(\n+    if (isa_and_nonnull<triton::gpu::ConvertLayoutOp>(\n             *reduceArg.getOperand().getDefiningOp()))\n       return mlir::failure();\n     Value newRet = newReduce.getResult();\n@@ -217,11 +217,11 @@ class MoveConvertOutOfIf : public mlir::RewritePattern {\n \n     IRMapping mapping;\n     for (size_t i = 0; i < numOps; i++) {\n-      auto thenCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n+      auto thenCvt = dyn_cast_or_null<triton::gpu::ConvertLayoutOp>(\n           thenYield.getOperand(i).getDefiningOp());\n       if (hasElse) {\n         auto elseYield = ifOp.elseYield();\n-        auto elseCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n+        auto elseCvt = dyn_cast_or_null<triton::gpu::ConvertLayoutOp>(\n             elseYield.getOperand(i).getDefiningOp());\n         if (thenCvt && elseCvt &&\n             std::distance(elseCvt->user_begin(), elseCvt->user_end()) == 1 &&"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -798,6 +798,20 @@ def kernel(output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n     assert torch.all(output == ref)\n \n \n+def test_load_store_same_ptr():\n+    @triton.jit()\n+    def kernel(in_out_ptr):\n+        pid = tl.program_id(axis=0)\n+        x = tl.load(in_out_ptr + pid)\n+        out = x * 2\n+        tl.store(in_out_ptr + pid, out)\n+\n+    for _ in range(1000):\n+        x = torch.ones((65536,), device=\"cuda\", dtype=torch.float32)\n+        kernel[(65536,)](x, num_warps=32)\n+        assert torch.all(x == 2)\n+\n+\n @pytest.mark.parametrize(\"dtype\", [torch.float16, torch.bfloat16])\n def test_f8_xf16_roundtrip(dtype):\n     \"\"\"Tests that converting an f8 to f16 and back to f8 doesn't change its value\"\"\""}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1027,7 +1027,7 @@ def where(condition, x, y, _builder=None):\n     If you want to avoid unintended memory operations, use the :code:`mask` arguments in `triton.load` and `triton.store` instead.\n \n     The shape of :code:`x` and :code:`y` are both broadcast to the shape of :code:`condition`.\n-    :code:`x` and :code:`y` must have the data type.\n+    :code:`x` and :code:`y` must have the same data type.\n \n     :param condition: When True (nonzero), yield x, otherwise yield y.\n     :type condition: Block of triton.bool"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "file_content_changes": "@@ -1001,14 +1001,60 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK-LABEL: atomic_add_f32\n   func.func @atomic_add_f32(%arg0 : tensor<256x!tt.ptr<f32>, #blocked0>, %arg1 : tensor<256xi1, #blocked0>, %arg2 : tensor<256xf32, #blocked0>) {\n+    // CHECK: llvm.icmp \"slt\"\n     // CHECK: llvm.inline_asm\n-    // CHECK-SAME: atom.global.gpu.add.f32\n+    // CHECK-SAME: @$3 atom.global.gpu.add.f32\n+    // CHECK: llvm.inline_asm\n+    // CHECK-SAME: @$3 atom.global.gpu.add.f32\n     %0 = \"tt.atomic_rmw\" (%arg0, %arg2, %arg1) {atomic_rmw_op = 5 : i32} : (tensor<256x!tt.ptr<f32>, #blocked0>, tensor<256xf32, #blocked0>, tensor<256xi1, #blocked0>) -> tensor<256xf32, #blocked0>\n     return\n   }\n }\n \n // -----\n+\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+  // CHECK-LABEL: atomic_add_f32_scalar\n+  func.func @atomic_add_f32_scalar(%arg0 : !tt.ptr<f32>, %arg1 : i1, %arg2 : f32) {\n+    // CHECK: llvm.icmp \"eq\"\n+    // CHECK: llvm.inline_asm\n+    // CHECK-SAME: @$3 atom.global.gpu.add.f32\n+    %0 = \"tt.atomic_rmw\" (%arg0, %arg2, %arg1) {atomic_rmw_op = 5 : i32} : (!tt.ptr<f32>, f32, i1) -> f32\n+    return\n+  }\n+}\n+\n+// -----\n+\n+#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+  // CHECK-LABEL: store_f32\n+  func.func @store_f32(%arg0 : tensor<256x!tt.ptr<f32>, #blocked0>, %arg1 : tensor<256xf32, #blocked0>) {\n+    // CHECK: llvm.icmp \"slt\"\n+    // CHECK: llvm.inline_asm\n+    // CHECK-SAME: @$2 st.global.b32\n+    // CHECK: llvm.inline_asm\n+    // CHECK-SAME: @$2 st.global.b32\n+    tt.store %arg0, %arg1 : tensor<256xf32, #blocked0>\n+    return\n+  }\n+}\n+\n+// -----\n+\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+  // CHECK-LABEL: store_f32_scalar\n+  func.func @store_f32_scalar(%arg0 : !tt.ptr<f32>, %arg1 : f32) {\n+    // CHECK: llvm.icmp \"slt\"\n+    // CHECK: llvm.inline_asm\n+    // CHECK-SAME: @$2 st.global.b32\n+    tt.store %arg0, %arg1 : f32\n+    return\n+  }\n+}\n+\n+// -----\n+\n #blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n "}, {"filename": "test/TritonGPU/combine.mlir", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "file_content_changes": "@@ -955,3 +955,30 @@ func.func public @cmp(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !\n   }\n   return\n }\n+\n+\n+// Just make sure it doesn't crash on non-tensor types.\n+// CHECK-LABEL: if_no_tensor\n+func.func public @if_no_tensor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32}) {\n+  // CHECK-NOT: triton_gpu.convert_layout\n+  %c-1_i64 = arith.constant -1 : i64\n+  %cst = arith.constant 0.000000e+00 : f32\n+  %c-1_i32 = arith.constant -1 : i32\n+  %0 = tt.get_program_id {axis = 0 : i32} : i32\n+  %1 = tt.addptr %arg3, %0 : !tt.ptr<i64>, i32\n+  %2 = tt.load %1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i64\n+  %3 = arith.cmpi eq, %2, %c-1_i64 : i64\n+  %4 = arith.select %3, %c-1_i32, %arg2 : i32\n+  %5 = scf.if %3 -> (!tt.ptr<f32>) {\n+    scf.yield %arg0 : !tt.ptr<f32>\n+  } else {\n+    %10 = tt.addptr %arg0, %2 : !tt.ptr<f32>, i64\n+    scf.yield %10 : !tt.ptr<f32>\n+  }\n+  %6 = arith.extsi %4 : i32 to i64\n+  %7 = arith.cmpi slt, %2, %6 : i64\n+  %8 = tt.load %5, %7, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32\n+  %9 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32\n+  tt.store %9, %8 {cache = 1 : i32, evict = 1 : i32} : f32\n+  return\n+}"}]