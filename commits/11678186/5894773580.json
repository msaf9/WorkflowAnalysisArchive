[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "file_content_changes": "@@ -92,7 +92,7 @@ jobs:\n         if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}\n         run: |\n           cd python/test/unit\n-          python3 -m pytest -n 8 --ignore=runtime --ignore=language/test_line_info.py\n+          python3 -m pytest -n 8 --ignore=runtime --ignore=operators --ignore=language/test_line_info.py\n           # run runtime tests serially to avoid race condition with cache handling.\n           python3 -m pytest runtime/\n           # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0\n@@ -102,17 +102,33 @@ jobs:\n         if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}\n         run: |\n           cd python/test/unit\n-          python3 -m pytest -n 8 --ignore=runtime --ignore=hopper --ignore=language/test_line_info.py\n+          python3 -m pytest -n 8 --ignore=runtime --ignore=hopper --ignore=operators --ignore=language/test_line_info.py\n           # run runtime tests serially to avoid race condition with cache handling.\n           python3 -m pytest runtime/\n           # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0\n           TRITON_DISABLE_LINE_INFO=0 python3 -m pytest language/test_line_info.py\n \n+      - name: Clear cache\n+        run: |\n+          rm -rf ~/.triton\n+\n+      - name: Run partial tests on CUDA with ENABLE_TMA=1 and ENABLE_MMA_V3=1\n+        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}\n+        run: |\n+          cd python/test/unit\n+          python3 -m pytest -n 8 operators\n+\n+      - name: Run partial tests on CUDA with ENABLE_TMA=0 and ENABLE_MMA_V3=0\n+        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}\n+        run: |\n+          cd python/test/unit\n+          python3 -m pytest -n 8 operators\n+\n       - name: Create artifacts archive\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n         run: |\n           cd ~/.triton\n-          tar -czvf artifacts.tar.gz cache\n+          tar -czf artifacts.tar.gz cache\n \n       - name: Upload artifacts archive\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}\n@@ -140,6 +156,7 @@ jobs:\n \n   Integration-Tests-Third-Party:\n     needs: Runner-Preparation\n+    if: false\n \n     runs-on: ${{ matrix.runner }}\n \n@@ -320,7 +337,7 @@ jobs:\n       - name: Compare artifacts\n         run: |\n           set +e\n-          python3 python/test/tools/compare_files.py --path1 reference --path2 current --kernels python/test/kernel_comparison/kernels.yml\n+          python3 python/test/tools/compare_files.py --path1 reference --path2 current\n           exit_code=$?\n           set -e\n           echo $exit_code\n@@ -334,7 +351,6 @@ jobs:\n             echo \"Error while comparing artifacts\"\n             echo \"COMPARISON_RESULT=error\" >> $GITHUB_ENV\n           fi\n-          echo \"COMPARISON_RESULT=env.COMPARISON_RESULT\"\n       - name: Check exit code and handle failure\n         if: ${{ env.COMPARISON_RESULT == 'error' }}\n         run: |"}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/Passes.td", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -27,7 +27,7 @@ def ConvertTritonGPUToLLVM : Pass<\"convert-triton-gpu-to-llvm\", \"mlir::ModuleOp\"\n         Option<\"computeCapability\", \"compute-capability\",\n                \"int32_t\", /*default*/\"80\",\n                \"device compute capability\">,\n-        Option<\"TmaMetadata\", \"tma-metadata\",\n+        Option<\"tmaMetadata\", \"tma-metadata\",\n                \"mlir::triton::gpu::TMAMetadataTy*\", /*default*/\"nullptr\",\n                \"tma metadata to the runtime\">,\n         Option<\"isROCM\", \"is-rocm\","}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "file_content_changes": "@@ -14,10 +14,12 @@ template <typename T> class OperationPass;\n \n namespace triton {\n \n-std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass(\n-    int computeCapability = 80,\n-    mlir::triton::gpu::TMAMetadataTy *tmaMetadata = nullptr,\n-    bool isROCM = false);\n+#define GEN_PASS_DECL\n+#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n+\n+std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass();\n+std::unique_ptr<OperationPass<ModuleOp>>\n+createConvertTritonGPUToLLVMPass(const ConvertTritonGPUToLLVMOptions &options);\n \n } // namespace triton\n "}, {"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUAttrDefs.td", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -143,11 +143,11 @@ compared to 1*64 when the hasLeadingOffset is false.\n \n         // ---- begin Ampere ----\n         if (mmaEnc.isAmpere()) {\n-          int perPhase = 128 / (shapePerCTA[order[0]] * 4 / dotOpEnc.getMMAv2kWidth());\n+          int perPhase = 128 / (shapePerCTA[order[0]] * 4 / dotOpEnc.getKWidth());\n           perPhase = std::max<int>(perPhase, 1);\n-          std::vector<size_t> matShape = {8, 8, 4 * dotOpEnc.getMMAv2kWidth()};\n+          std::vector<size_t> matShape = {8, 8, 4 * dotOpEnc.getKWidth()};\n           // for now, disable swizzle when using transposed int8 tensor cores\n-          if ((32 / typeWidthInBit != dotOpEnc.getMMAv2kWidth()) && order[0] == inner)\n+          if ((32 / typeWidthInBit != dotOpEnc.getKWidth()) && order[0] == inner)\n             return get(context, 1, 1, 1, order, CTALayout);\n \n           // --- handle A operand ---\n@@ -655,7 +655,7 @@ section 9.7.13.4.1 for more details.\n     ins\n     \"unsigned\":$opIdx,\n     \"Attribute\":$parent,\n-    \"unsigned\":$MMAv2kWidth\n+    \"unsigned\":$kWidth\n   );\n \n   let builders = ["}, {"filename": "include/triton/Tools/Sys/GetEnv.hpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -24,7 +24,9 @@\n \n #include <algorithm>\n #include <cstdlib>\n+#include <set>\n #include <string>\n+\n namespace triton {\n \n const std::set<std::string> ENV_VARS = {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM/SharedToDotOperandMMAv2.cpp", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "file_content_changes": "@@ -19,7 +19,7 @@ using ::mlir::triton::gpu::SharedEncodingAttr;\n // Data loader for mma.16816 instruction.\n class MMA16816SmemLoader {\n public:\n-  MMA16816SmemLoader(int warpsPerTile, ArrayRef<uint32_t> order,\n+  MMA16816SmemLoader(int nPerWarp, int warpsPerTile, ArrayRef<uint32_t> order,\n                      ArrayRef<uint32_t> warpsPerCTA, uint32_t kOrder,\n                      int kWidth, ArrayRef<Value> smemStrides,\n                      ArrayRef<int64_t> tileShape, ArrayRef<int> instrShape,\n@@ -93,6 +93,8 @@ class MMA16816SmemLoader {\n   int inWarpMatOffset;\n   // Offset in number of matrices to increment on non-k dim across warps\n   int warpMatOffset;\n+\n+  int nPerWarp;\n };\n \n SmallVector<Value>\n@@ -131,10 +133,18 @@ MMA16816SmemLoader::computeLdmatrixMatOffs(Value warpId, Value lane,\n   // address (s0,s1) annotates.\n \n   Value matOff[2];\n-  matOff[kOrder ^ 1] = add(\n-      mul(warpId, i32_val(warpMatOffset)), // warp offset (kOrder=1)\n-      mul(nkMatArr,\n-          i32_val(inWarpMatOffset))); // matrix offset inside a warp (kOrder=1)\n+  // When B's shape(k, n) is (16, 8) and ldmatrix.x4 is used, the shared memory\n+  // access will be out of bound. In the future we should change this case to\n+  // ldmatrix.x2\n+  if (kOrder == 0 && nPerWarp == 8) {\n+    matOff[kOrder ^ 1] = mul(warpId, i32_val(warpMatOffset));\n+  } else {\n+    matOff[kOrder ^ 1] = add(\n+        mul(warpId, i32_val(warpMatOffset)), // warp offset (kOrder=1)\n+        mul(nkMatArr,\n+            i32_val(\n+                inWarpMatOffset))); // matrix offset inside a warp (kOrder=1)\n+  }\n   matOff[kOrder] = kMatArr;\n \n   // Physical offset (before swizzling)\n@@ -390,13 +400,13 @@ MMA16816SmemLoader::loadX4(int mat0, int mat1, ArrayRef<Value> ptrs, Type matTy,\n }\n \n MMA16816SmemLoader::MMA16816SmemLoader(\n-    int warpsPerTile, ArrayRef<uint32_t> order, ArrayRef<uint32_t> warpsPerCTA,\n-    uint32_t kOrder, int kWidth, ArrayRef<Value> smemStrides,\n-    ArrayRef<int64_t> tileShape, ArrayRef<int> instrShape,\n-    ArrayRef<int> matShape, int perPhase, int maxPhase, int elemBytes,\n-    ConversionPatternRewriter &rewriter,\n+    int nPerWarp, int warpsPerTile, ArrayRef<uint32_t> order,\n+    ArrayRef<uint32_t> warpsPerCTA, uint32_t kOrder, int kWidth,\n+    ArrayRef<Value> smemStrides, ArrayRef<int64_t> tileShape,\n+    ArrayRef<int> instrShape, ArrayRef<int> matShape, int perPhase,\n+    int maxPhase, int elemBytes, ConversionPatternRewriter &rewriter,\n     TritonGPUToLLVMTypeConverter *typeConverter, const Location &loc)\n-    : order(order.begin(), order.end()),\n+    : nPerWarp(nPerWarp), order(order.begin(), order.end()),\n       warpsPerCTA(warpsPerCTA.begin(), warpsPerCTA.end()), kOrder(kOrder),\n       kWidth(kWidth), tileShape(tileShape.begin(), tileShape.end()),\n       instrShape(instrShape.begin(), instrShape.end()),\n@@ -490,6 +500,7 @@ std::function<void(int, int)> getLoadMatrixFn(\n     bool isA, TritonGPUToLLVMTypeConverter *typeConverter,\n     ConversionPatternRewriter &rewriter, Location loc) {\n   auto tensorTy = tensor.getType().cast<RankedTensorType>();\n+  auto shapePerCTA = getShapePerCTA(tensorTy);\n   Type eltTy = tensorTy.getElementType();\n   // We assumes that the input operand of Dot should be from shared layout.\n   // TODO(Superjomn) Consider other layouts if needed later.\n@@ -511,13 +522,16 @@ std::function<void(int, int)> getLoadMatrixFn(\n   if (kWidth != (4 / elemBytes))\n     assert(vecPhase == 1 || vecPhase == 4 * kWidth);\n \n+  int nPerWarp =\n+      std::max<int>(shapePerCTA[1] / mmaLayout.getWarpsPerCTA()[1], 8);\n+\n   // (a, b) is the coordinate.\n   auto load = [=, &rewriter, &vals](int a, int b) {\n-    MMA16816SmemLoader loader(\n-        warpsPerTile, sharedLayout.getOrder(), mmaLayout.getWarpsPerCTA(),\n-        kOrder, kWidth, smemObj.strides, tensorTy.getShape() /*tileShape*/,\n-        instrShape, matShape, perPhase, maxPhase, elemBytes, rewriter,\n-        typeConverter, loc);\n+    MMA16816SmemLoader loader(nPerWarp, warpsPerTile, sharedLayout.getOrder(),\n+                              mmaLayout.getWarpsPerCTA(), kOrder, kWidth,\n+                              smemObj.strides, shapePerCTA /*tileShape*/,\n+                              instrShape, matShape, perPhase, maxPhase,\n+                              elemBytes, rewriter, typeConverter, loc);\n     // Offset of a slice within the original tensor in shared memory\n     Value cSwizzleOffset = smemObj.getCSwizzleOffset(order[0]);\n     SmallVector<Value> offs =\n@@ -559,18 +573,16 @@ Value loadArg(ConversionPatternRewriter &rewriter, Location loc, Value tensor,\n               TritonGPUToLLVMTypeConverter *typeConverter, Value thread,\n               bool isA) {\n   auto tensorTy = tensor.getType().cast<RankedTensorType>();\n+  auto shapePerCTA = getShapePerCTA(tensorTy);\n   int bitwidth = tensorTy.getElementTypeBitWidth();\n   auto mmaLayout = encoding.getParent().cast<MmaEncodingAttr>();\n \n-  SmallVector<int64_t> shape(tensorTy.getShape().begin(),\n-                             tensorTy.getShape().end());\n-\n   ValueTable vals;\n   int mmaInstrM = 16, mmaInstrN = 8, mmaInstrK = 4 * 64 / bitwidth;\n   int matShapeM = 8, matShapeN = 8, matShapeK = 2 * 64 / bitwidth;\n \n-  auto numRep = encoding.getMMAv2Rep(tensorTy.getShape(), bitwidth);\n-  int kWidth = encoding.getMMAv2kWidth();\n+  auto numRep = encoding.getMMAv2Rep(shapePerCTA, bitwidth);\n+  int kWidth = encoding.getKWidth();\n \n   auto warpsPerCTA = mmaLayout.getWarpsPerCTA();\n   auto order = triton::gpu::getOrder(mmaLayout);\n@@ -579,14 +591,14 @@ Value loadArg(ConversionPatternRewriter &rewriter, Location loc, Value tensor,\n \n   SmallVector<Value> multiDimWarpId =\n       delinearize(rewriter, loc, warp, warpsPerCTA, order);\n-  Value warpM = urem(multiDimWarpId[0], i32_val(shape[0] / 16));\n-  Value warpN = urem(multiDimWarpId[1], i32_val(shape[1] / 8));\n+  Value warpM = urem(multiDimWarpId[0], i32_val(shapePerCTA[0] / 16));\n+  Value warpN = urem(multiDimWarpId[1], i32_val(shapePerCTA[1] / 8));\n \n   int warpsPerTile;\n   if (isA)\n-    warpsPerTile = std::min<int>(warpsPerCTA[0], shape[0] / 16);\n+    warpsPerTile = std::min<int>(warpsPerCTA[0], shapePerCTA[0] / 16);\n   else\n-    warpsPerTile = std::min<int>(warpsPerCTA[1], shape[1] / 16);\n+    warpsPerTile = std::min<int>(warpsPerCTA[1], shapePerCTA[1] / 16);\n \n   std::function<void(int, int)> loadFn;\n   if (isA)"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ElementwiseOpToLLVM.cpp", "status": "modified", "additions": 46, "deletions": 64, "changes": 110, "file_content_changes": "@@ -10,13 +10,11 @@ using ::mlir::triton::gpu::getTotalElemsPerThread;\n const std::string Fp16_to_Fp8E5M2 =\n     \"{                            \\n\"\n     \".reg .b32 a<2>;              \\n\"\n-    \"and.b32 a0, $1, 0x7fff7fff;  \\n\"           // a0 &= 0x7fff7fff\n-    \"and.b32 a1, $2, 0x7fff7fff;  \\n\"           // (strip sign)\n-    \"add.u32 a0, a0, 0x00800080;  \\n\"           // a0 += 0x00800080\n-    \"add.u32 a1, a1, 0x00800080;  \\n\"           // (round to nearest)\n-    \"lop3.b32 a0, $1, 0x80008000, a0, 0xea; \\n\" // a0 = a0|(0x80008000&in0)\n-    \"lop3.b32 a1, $2, 0x80008000, a1, 0xea; \\n\" // (restore sign)\n-    \"prmt.b32 $0, a0, a1, 0x7531; \\n\\t\"         // output = a1a0\n+    \"and.b32 a0, $1, 0xfffefffe;  \\n\"   // a0 &= 0xfffefffe\n+    \"and.b32 a1, $2, 0xfffefffe;  \\n\"   // (strip lowest bit)\n+    \"add.u32 a0, a0, 0x00800080;  \\n\"   // a0 += 0x00800080\n+    \"add.u32 a1, a1, 0x00800080;  \\n\"   // (round to nearest)\n+    \"prmt.b32 $0, a0, a1, 0x7531; \\n\\t\" // output = a1a0\n     \"}\";\n \n const std::string Fp8E5M2_to_Fp16 = \"{                           \\n\"\n@@ -93,32 +91,27 @@ const std::string Bf16_to_Fp8E5M2 =\n const std::string Fp8E4M3B15_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\"\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\"\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\"\n-    \"lop3.b32 b0, a0, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"lop3.b32 b1, a1, 0x7fff7fff, 0, 0xc0;  \\n\"\n+    \"prmt.b32 a0, 0, $2, 0x5746;            \\n\"\n+    \"and.b32 b0, a0, 0x7f007f00;            \\n\"\n+    \"and.b32 b1, a0, 0x00ff00ff;            \\n\"\n+    \"and.b32 a1, a0, 0x00800080;            \\n\"\n     \"shr.b32  b0, b0, 1;                    \\n\"\n-    \"shr.b32  b1, b1, 1;                    \\n\"\n+    \"add.u32 b1, b1, a1;                    \\n\"\n     \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\"\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\"\n+    \"shl.b32 $1, b1, 7;                     \\n\"\n     \"}                                      \\n\";\n \n const std::string Fp16_to_Fp8E4M3B15 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\"\n-    \".reg .b32 min_val, max_val;            \\n\"\n-    \"mov.b32 min_val, 0xBF80BF80;           \\n\"\n+    \".reg .b32 max_val;                     \\n\"\n     \"mov.b32 max_val, 0x3F803F80;           \\n\"\n-    \"max.f16x2 $1, $1, min_val;             \\n\"\n-    \"min.f16x2 $1, $1, max_val;             \\n\"\n-    \"max.f16x2 $2, $2, min_val;             \\n\"\n-    \"min.f16x2 $2, $2, max_val;             \\n\"\n-    \"shl.b32 a0, $1, 1;                     \\n\"\n-    \"shl.b32 a1, $2, 1;                     \\n\"\n-    \"lop3.b32 a0, a0, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"lop3.b32 a1, a1, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"add.u32 a0, a0, 0x00800080;            \\n\"\n-    \"add.u32 a1, a1, 0x00800080;            \\n\"\n+    \"and.b32 a0, $1, 0x7fff7fff;            \\n\"\n+    \"and.b32 a1, $2, 0x7fff7fff;            \\n\"\n+    \"min.f16x2 a0, a0, max_val;             \\n\"\n+    \"min.f16x2 a1, a1, max_val;             \\n\"\n+    \"mad.lo.u32 a0, a0, 2, 0x00800080;      \\n\"\n+    \"mad.lo.u32 a1, a1, 2, 0x00800080;      \\n\"\n     \"lop3.b32 b0, $1, 0x80008000, a0, 0xea; \\n\"\n     \"lop3.b32 b1, $2, 0x80008000, a1, 0xea; \\n\"\n     \"prmt.b32 $0, b0, b1, 0x7531;           \\n\"\n@@ -137,12 +130,11 @@ const std::string Fp16_to_Fp8E4M3B15 =\n const std::string Fp8E4M3B15x4_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>;                        \\n\"\n-    \"shl.b32 a0, $2, 1;                     \\n\"\n+    \"add.u32 a0, $2, $2;                    \\n\"\n     \"shl.b32 a1, $2, 7;                     \\n\"\n     \"and.b32  $0, a0, 0x80008000;           \\n\"\n     \"lop3.b32 $0, $0, a1, 0x3f803f80, 0xf8; \\n\"\n-    \"and.b32  $1, $2, 0x80008000;           \\n\"\n-    \"lop3.b32 $1, $1, $2, 0x3f803f80, 0xf8; \\n\"\n+    \"and.b32  $1, $2, 0xbf80bf80;           \\n\"\n     \"}\";\n \n // Fp16 -> Fp8E4M3B15 (packed)\n@@ -159,8 +151,7 @@ const std::string Fp16_to_Fp8E4M3B15x4 =\n     \"shr.b32  a1, $1, 7;                     \\n\"\n     \"and.b32  $0,     a0, 0x40004000;        \\n\"\n     \"lop3.b32 $0, $0, a1, 0x007f007f, 0xf8;  \\n\"\n-    \"lop3.b32 $0, $0, $2, 0x80008000, 0xf8;  \\n\"\n-    \"lop3.b32 $0, $0, $2, 0x3f803f80, 0xf8;  \\n\"\n+    \"lop3.b32 $0, $0, $2, 0xbf80bf80, 0xf8;  \\n\"\n     \"}\";\n \n /* ----- FP8E4M3 ------ */\n@@ -172,53 +163,44 @@ const std::string Fp16_to_Fp8E4M3B15x4 =\n const std::string Fp8E4M3_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // if input = 0xf1f2f3f4\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\" // a0 = 0xf300f400\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\" // a1 = 0xf100f200\n-    \"lop3.b32 b0, a0, 0x7fff7fff, 0, 0xc0;  \\n\" // b0 = a0 & 0x7fff7fff\n-    \"lop3.b32 b1, a1, 0x7fff7fff, 0, 0xc0;  \\n\" // (strip sign)\n-    \"shr.b32  b0, b0, 1;                    \\n\" // b0 >>= 1\n-    \"shr.b32  b1, b1, 1;                    \\n\" // shift into fp16 position\n-    \"add.u32  b0, b0, 0x20002000;           \\n\" // b0.exp += 2**4-2**3\n-                                                // exponent compensate = 8\n-    \"add.u32  b1, b1, 0x20002000;           \\n\" // b1 += 8<<10 | 8<<10<<16\n-    \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\" // out0 = b0|(0x80008000&a0)\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\" // (restore sign)\n+    \"prmt.b32 a0, 0, $2, 0x0504;            \\n\" // a0 = 0x00f300f4\n+    \"prmt.b32 a1, 0, $2, 0x0706;            \\n\" // a1 = 0x00f100f2\n+    \"and.b32  b0, a0, 0x00800080;           \\n\" // b0 = a0 & 0x00800080\n+    \"and.b32  b1, a1, 0x00800080;           \\n\" // (extract sign)\n+    \"add.u32  b0, b0, a0;                   \\n\" // b0 = b0 + a0\n+    \"add.u32  b1, b1, a1;                   \\n\" // (move sign to the left)\n+    \"mad.lo.u32 $0, b0, 128, 0x20002000;    \\n\" // out0 = (b0 << 7) + 0x20002000\n+    \"mad.lo.u32 $1, b1, 128, 0x20002000;    \\n\" // (shift into position and bias\n+                                                // exponent)\n     \"}\";\n \n // Fp16 -> Fp8E4M3 (packed)\n const std::string Fp16_to_Fp8E4M3 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // see Fp8E4M3x4ToFp16x4\n-    \"sub.u32 a0, $1, 0x20002000;            \\n\" // a0 = input0 - 0x20002000\n-                                                // (compensate offset)\n-    \"sub.u32 a1, $2, 0x20002000;            \\n\" // a1 = input1 - 0x20002000\n-                                                // (8 << 10 | 8 << 10 << 16)\n-    \"shl.b32 a0, a0, 1;                     \\n\" // a0 <<= 1\n-    \"shl.b32 a1, a1, 1;                     \\n\" // shift into fp8e4 position\n-    \"lop3.b32 a0, a0, 0x7fff7fff, 0, 0xc0;  \\n\" // a0 &= 0x7fff7fff\n-    \"lop3.b32 a1, a1, 0x7fff7fff, 0, 0xc0;  \\n\" // (strip sign)\n-    \"add.u32 a0, a0, 0x00800080;            \\n\" // a0 += 0x00800080\n-    \"add.u32 a1, a1, 0x00800080;            \\n\" // (round to nearest)\n-    \"lop3.b32 b0, $1, 0x80008000, a0, 0xea; \\n\" // b0 = a0|(0x80008000&in0)\n-    \"lop3.b32 b1, $2, 0x80008000, a1, 0xea; \\n\" // (restore sign)\n+    \"and.b32 a0, $1, 0x7fff7fff;            \\n\" // a0 = input0 & 0x7fff7fff\n+    \"and.b32 a1, $2, 0x7fff7fff;            \\n\" // (strip sign)\n+    \"mad.lo.u32 a0, a0, 2, 0x40804080;      \\n\" // shift exponent (<< 1),\n+    \"mad.lo.u32 a1, a1, 2, 0x40804080;      \\n\" // correct bias (0x40004000),\n+                                                // and round to nearest\n+    \"lop3.b32 b0, $1, 0x80008000, a0, 0xe2; \\n\" // b0 = 0x80008000 ? in0 : a0\n+    \"lop3.b32 b1, $2, 0x80008000, a1, 0xe2; \\n\" // (restore sign)\n     \"prmt.b32 $0, b0, b1, 0x7531;           \\n\" // output = b1b0\n     \"}\";\n \n // WARN: subnormal (0bs0000xxx) are not handled\n const std::string Fp8E4M3_to_Bf16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // if input = 0xf1f2f3f4\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\" // a0 = 0xf300f400\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\" // a1 = 0xf100f200\n-    \"and.b32 b0, a0, 0x7fff7fff;            \\n\" // b0 = a0 & 0x7fff7fff\n-    \"and.b32 b1, a1, 0x7fff7fff;            \\n\" // (strip sign)\n-    \"shr.b32 b0, b0, 4;                     \\n\" // b0 >>= 4\n-    \"shr.b32 b1, b1, 4;                     \\n\" // shift into fp16 position\n-    \"add.u32 b0, b0, 0x3c003c00;            \\n\" // b0.exp += 2**7-2**3\n-                                                // exponent compensate = 120\n-    \"add.u32 b1, b1, 0x3c003c00;            \\n\" // b1 += 120<<7 | 120<<7<<16\n-    \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\" // out0 = b0|(0x80008000&a0)\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\" // (restore sign)\n+    \"prmt.b32 a0, 0, $2, 0x0504;            \\n\" // a0 = 0x00f300f4\n+    \"prmt.b32 a1, 0, $2, 0x0706;            \\n\" // a1 = 0x00f100f2\n+    \"and.b32  b0, a0, 0x00800080;           \\n\" // b0 = a0 & 0x00800080\n+    \"and.b32  b1, a1, 0x00800080;           \\n\" // (extract sign)\n+    \"mad.lo.u32 b0, b0, 15, a0;             \\n\" // b0 = b0 * 15 + a0\n+    \"mad.lo.u32 b1, b1, 15, a1;             \\n\" // (move sign to the left)\n+    \"mad.lo.u32 $0, b0, 16, 0x3c003c00;     \\n\" // out0 = (b0 << 4) + 0x3c003c00\n+    \"mad.lo.u32 $1, b1, 16, 0x3c003c00;     \\n\" // (shift into position and bias\n+                                                // exponent)\n     \"}\";\n \n const std::string Bf16_to_Fp8E4M3 ="}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "file_content_changes": "@@ -569,6 +569,28 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n         mask = and_(mask, icmp_slt(mul(threadDim, i32_val(sizePerThread[dim])),\n                                    i32_val(shape[dim])));\n       }\n+      // Do not write duplicated data when multicast is enabled\n+      if (triton::gpu::getNumCTAs(layout) > 1) {\n+        auto _0 = i32_val(0);\n+        auto CTAsPerCGA = triton::gpu::getCTAsPerCGA(layout);\n+        auto CTASplitNum = triton::gpu::getCTASplitNum(layout);\n+        auto CTAOrder = triton::gpu::getCTAOrder(layout);\n+\n+        auto clusterCTAId = getClusterCTAId(rewriter, loc);\n+        auto multiDimClusterCTAId =\n+            delinearize(rewriter, loc, clusterCTAId, CTAsPerCGA, CTAOrder);\n+\n+        for (unsigned dim = 0; dim < rank; ++dim) {\n+          // Skip when multicast is not enabled in this dimension\n+          if (CTAsPerCGA[dim] == CTASplitNum[dim])\n+            continue;\n+          // This wrapping rule must be consistent with emitCTAOffsetForLayout\n+          unsigned splitNum = std::min<unsigned>(shape[dim], CTASplitNum[dim]);\n+          multiDimClusterCTAId[dim] =\n+              urem(multiDimClusterCTAId[dim], i32_val(splitNum));\n+          mask = and_(mask, icmp_eq(multiDimClusterCTAId[dim], _0));\n+        }\n+      }\n     } else {\n       // If the tensor is not ranked, then it is a scalar and only thread 0 can\n       // write"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "file_content_changes": "@@ -40,13 +40,17 @@\n \n #include \"mlir/Dialect/ControlFlow/IR/ControlFlowOps.h\"\n \n+namespace mlir {\n+namespace triton {\n+#define GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM\n+#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n+} // namespace triton\n+} // namespace mlir\n+\n using namespace mlir;\n using namespace mlir::triton;\n namespace ttng = mlir::triton::nvidia_gpu;\n \n-#define GEN_PASS_CLASSES\n-#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n-\n namespace {\n \n // pass ws related named attrs.\n@@ -372,15 +376,10 @@ class TritonLLVMConversionTarget : public ConversionTarget {\n   }\n };\n \n-class ConvertTritonGPUToLLVM\n-    : public ConvertTritonGPUToLLVMBase<ConvertTritonGPUToLLVM> {\n-\n-public:\n-  explicit ConvertTritonGPUToLLVM(int computeCapability,\n-                                  mlir::triton::gpu::TMAMetadataTy *tmaMetadata,\n-                                  bool isROCM)\n-      : computeCapability(computeCapability), tmaMetadata(tmaMetadata),\n-        isROCM(isROCM) {}\n+struct ConvertTritonGPUToLLVM\n+    : public triton::impl::ConvertTritonGPUToLLVMBase<ConvertTritonGPUToLLVM> {\n+  using ConvertTritonGPUToLLVMBase<\n+      ConvertTritonGPUToLLVM>::ConvertTritonGPUToLLVMBase;\n \n   void runOnOperation() override {\n     MLIRContext *context = &getContext();\n@@ -569,10 +568,6 @@ class ConvertTritonGPUToLLVM\n            CacheKeyDenseMapInfo>\n       indexCache;\n \n-  int computeCapability{};\n-  bool isROCM{};\n-  mlir::triton::gpu::TMAMetadataTy *tmaMetadata;\n-\n   void initSharedMemory(ModuleAllocation &allocation,\n                         TritonGPUToLLVMTypeConverter &typeConverter) {\n     ModuleOp mod = getOperation();\n@@ -862,12 +857,12 @@ class ConvertTritonGPUToLLVM\n namespace mlir {\n namespace triton {\n \n+std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass() {\n+  return std::make_unique<ConvertTritonGPUToLLVM>();\n+}\n std::unique_ptr<OperationPass<ModuleOp>>\n-createConvertTritonGPUToLLVMPass(int computeCapability,\n-                                 mlir::triton::gpu::TMAMetadataTy *tmaMetadata,\n-                                 bool isROCM) {\n-  return std::make_unique<::ConvertTritonGPUToLLVM>(computeCapability,\n-                                                    tmaMetadata, isROCM);\n+createConvertTritonGPUToLLVMPass(const ConvertTritonGPUToLLVMOptions &options) {\n+  return std::make_unique<ConvertTritonGPUToLLVM>(options);\n }\n \n } // namespace triton"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "file_content_changes": "@@ -849,11 +849,13 @@ DotOperandEncodingAttr::getElemsPerThread(ArrayRef<int64_t> shape,\n \n unsigned DotOperandEncodingAttr::getTotalElemsPerThread(ArrayRef<int64_t> shape,\n                                                         Type eltTy) const {\n+  auto shapePerCTA = getShapePerCTA(*this, shape);\n   if (auto mmaParent = getParent().dyn_cast<MmaEncodingAttr>()) {\n     int warpsPerCTAM = mmaParent.getWarpsPerCTA()[0];\n     int warpsPerCTAN = mmaParent.getWarpsPerCTA()[1];\n+    // A100\n     if (mmaParent.isAmpere()) {\n-      auto rep = getMMAv2Rep(shape, eltTy.getIntOrFloatBitWidth());\n+      auto rep = getMMAv2Rep(shapePerCTA, eltTy.getIntOrFloatBitWidth());\n       if (getOpIdx() == 0)\n         return 4 * rep[0] * rep[1];\n       if (getOpIdx() == 1)\n@@ -925,8 +927,8 @@ unsigned DotOperandEncodingAttr::getTotalElemsPerThread(ArrayRef<int64_t> shape,\n     auto order = blockedLayout.getOrder();\n     auto sizePerThread = getSizePerThread(blockedLayout);\n \n-    int K = getOpIdx() == 0 ? shape[1] : shape[0];\n-    int otherDim = getOpIdx() == 1 ? shape[1] : shape[0];\n+    int K = getOpIdx() == 0 ? shapePerCTA[1] : shapePerCTA[0];\n+    int otherDim = getOpIdx() == 1 ? shapePerCTA[1] : shapePerCTA[0];\n \n     bool isM = getOpIdx() == 0;\n \n@@ -1256,7 +1258,7 @@ void DotOperandEncodingAttr::print(mlir::AsmPrinter &printer) const {\n   printer << \"<{\"\n           << \"opIdx = \" << getOpIdx() << \", parent = \" << getParent();\n   if (mmaParent && mmaParent.isAmpere())\n-    printer << \", kWidth = \" << getMMAv2kWidth();\n+    printer << \", kWidth = \" << getKWidth();\n   printer << \"}>\";\n }\n \n@@ -1460,9 +1462,10 @@ struct TritonGPUInferLayoutInterface\n     return success();\n   }\n \n-  LogicalResult inferDotOpEncoding(Attribute operandEncoding, unsigned opIdx,\n-                                   Attribute retEncoding,\n-                                   Optional<Location> location) const override {\n+  LogicalResult\n+  inferDotOpEncoding(Attribute operandEncoding, unsigned opIdx,\n+                     Attribute retEncoding,\n+                     std::optional<Location> location) const override {\n     auto mmaRetEncoding = retEncoding.dyn_cast<MmaEncodingAttr>();\n     if (mmaRetEncoding && mmaRetEncoding.isHopper()) {\n       // TODO: support gmma when A/B does not reside in shared memory\n@@ -1493,7 +1496,7 @@ struct TritonGPUInferLayoutInterface\n     // Verify that the encodings are valid.\n     if (!aEncoding || !bEncoding)\n       return op->emitError(\"mismatching encoding between A and B operands\");\n-    if (aEncoding.getMMAv2kWidth() != bEncoding.getMMAv2kWidth())\n+    if (aEncoding.getKWidth() != bEncoding.getKWidth())\n       return op->emitError(\"mismatching kWidth between A and B operands\");\n     return success();\n   }"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Prefetch.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -203,8 +203,8 @@ LogicalResult Prefetcher::initialize() {\n     auto bType = dot.getB().getType().cast<RankedTensorType>();\n     auto aEnc = aType.getEncoding().cast<triton::gpu::DotOperandEncodingAttr>();\n     auto bEnc = bType.getEncoding().cast<triton::gpu::DotOperandEncodingAttr>();\n-    int aKWidth = aEnc.getMMAv2kWidth();\n-    int bKWidth = bEnc.getMMAv2kWidth();\n+    int aKWidth = aEnc.getKWidth();\n+    int bKWidth = bEnc.getKWidth();\n     assert(aKWidth == bKWidth);\n \n     auto kSize = aType.getShape()[1];"}, {"filename": "lib/Dialect/TritonNvidiaGPU/Transforms/PlanCTA.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "file_content_changes": "@@ -325,8 +325,18 @@ bool CTAPlanner::processReduce(triton::FuncOp &funcOp) {\n       }\n     }\n \n+    llvm::SmallVector<unsigned> CTASplitNum = CTAsPerCGA;\n+\n+    // If numCTAs > 1 and the only dimension is the reduced dimension, after the\n+    // above two for-loops, CTAsPerCGA = [0] and remainingCTAs = numCTAs. We set\n+    // CTAsPerCGA[0] = numCTAs and keep CTASplitNum[0] = 1 to ensure that no\n+    // cross-CTA reduction is required, although this will introduce duplicated\n+    // calculation\n+    if (remainingCTAs > 0)\n+      CTAsPerCGA[order[rank - 1]] *= remainingCTAs;\n+\n     auto CTALayout =\n-        ttg::CTALayoutAttr::get(context, CTAsPerCGA, CTAsPerCGA, CTAOrder);\n+        ttg::CTALayoutAttr::get(context, CTAsPerCGA, CTASplitNum, CTAOrder);\n     if (!tiled)\n       setTiling(CTALayout.getCTAsPerCGA());\n     auto newSrcLayout = replaceCTALayout(srcLayout, srcShape, CTALayout);"}, {"filename": "lib/Dialect/TritonNvidiaGPU/Transforms/WSMaterialization.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -30,6 +30,8 @@\n #include \"triton/Dialect/TritonNvidiaGPU/IR/Dialect.h\"\n #include \"triton/Dialect/TritonNvidiaGPU/Transforms/Utility.h\"\n \n+#include <set>\n+\n using namespace mlir;\n namespace ttg = triton::gpu;\n namespace ttng = triton::nvidia_gpu;"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -351,7 +351,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n   pm.addPass(mlir::createConvertSCFToCFPass());\n   pm.addPass(mlir::createConvertIndexToLLVMPass());\n   pm.addPass(\n-      createConvertTritonGPUToLLVMPass(computeCapability, &tmaInfos, isROCM));\n+      createConvertTritonGPUToLLVMPass({computeCapability, &tmaInfos, isROCM}));\n   pm.addPass(createConvertNVGPUToLLVMPass());\n   pm.addPass(mlir::createArithToLLVMConversionPass());\n   pm.addPass(mlir::createCanonicalizerPass());"}, {"filename": "python/setup.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -335,6 +335,7 @@ def build_extension(self, ext):\n             \"matplotlib\",\n             \"pandas\",\n             \"tabulate\",\n+            \"torch\",\n         ],\n     },\n )"}, {"filename": "python/test/tools/compare_files.py", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "file_content_changes": "@@ -9,9 +9,8 @@\n \n \n class ComparisonResult:\n-    def __init__(self, name: str, extension: str, numComparisons: int, diffs: List[str] = None, errors: List[str] = None):\n+    def __init__(self, name: str, numComparisons: int, diffs: List[str] = None, errors: List[str] = None):\n         self.name = name\n-        self.extension = extension\n         self.numComparisons = numComparisons\n         self.diffs = [] if diffs is None else diffs\n         self.errors = [] if errors is None else errors\n@@ -20,7 +19,7 @@ def isSuccess(self) -> bool:\n         return len(self.diffs) == 0 and len(self.errors) == 0\n \n     def __str__(self) -> str:\n-        return f\"name={self.name}, extension={self.extension}, numComparisons={self.numComparisons}, success={self.isSuccess()}\"\n+        return f\"name={self.name}, numComparisons={self.numComparisons}, success={self.isSuccess()}\"\n \n \n def listFilesWithExtension(path: str, extension: str) -> List[str]:\n@@ -143,9 +142,9 @@ def doFilesMatch(path1: str, path2: str) -> bool:\n     return True\n \n \n-def compareMatchingFiles(name: str, extension: str, nameToHashes1: Dict[str, List[str]], nameToHashes2: Dict[str, List[str]], args) -> ComparisonResult:\n+def compareMatchingFiles(name: str, nameToHashes1: Dict[str, List[str]], nameToHashes2: Dict[str, List[str]], args) -> ComparisonResult:\n     \"\"\"\n-        Compare files with the given name/extension in all hashes in both paths\n+        Compare files with the given name in all hashes in both paths\n         Return the first mismatching files as a tuple (file1, file2), otherwise, return an empty tuple\n     \"\"\"\n     hashes1 = nameToHashes1.get(name, [])\n@@ -164,14 +163,14 @@ def compareMatchingFiles(name: str, extension: str, nameToHashes1: Dict[str, Lis\n             if not doFilesMatch(path1, path2):\n                 continue\n             numComparisons += 1\n-            extFile1 = listFilesWithExtension(path1, extension)[0]\n-            extFile2 = listFilesWithExtension(path2, extension)[0]\n+            extFile1 = listFilesWithExtension(path1, \"ptx\")[0]\n+            extFile2 = listFilesWithExtension(path2, \"ptx\")[0]\n             diff = diffFiles(extFile1, extFile2)\n             if len(diff) > 0:\n                 diffs.append(diffFiles(extFile2, extFile1))\n     if numComparisons == 0:\n         errors.append(f\"Did not find any matching files for {name}\")\n-    return ComparisonResult(name=name, extension=extension, numComparisons=numComparisons, diffs=diffs, errors=errors)\n+    return ComparisonResult(name=name, numComparisons=numComparisons, diffs=diffs, errors=errors)\n \n \n def dumpResults(results: List[ComparisonResult], fileName: str):\n@@ -203,20 +202,15 @@ def main(args) -> bool:\n     nameToHashes1 = getNameToHashesDict(args.path1)\n     nameToHashes2 = getNameToHashesDict(args.path2)\n \n-    yamlFilePath = args.kernels\n-    if not os.path.exists(yamlFilePath):\n-        print(f\"Path {yamlFilePath} does not exist!\")\n-        sys.exit(2)\n-    nameAndExtension = loadYamlFile(yamlFilePath)[\"name_and_extension\"]\n+    # Get all kernels that need to be checked\n+    kernelNames = set(nameToHashes1.keys()).union(set(nameToHashes2.keys()))\n \n     results = []\n     # iterate over the kernels that need to be checked\n-    for d in nameAndExtension:\n-        name = d[\"name\"]  # kernel name\n-        extension = d[\"extension\"]  # extension of the file to be compared (e.g. ptx)\n+    for name in kernelNames:\n         # Compare all hashes on path 1 with all hashes on path 2\n         # result is either the mismatching (file1, file2) with \"extension\" or empty tuple if no mismatch\n-        result = compareMatchingFiles(name, extension, nameToHashes1, nameToHashes2, args)\n+        result = compareMatchingFiles(name, nameToHashes1, nameToHashes2, args)\n         print(result)\n         # Otherwise, add it to the mismatches\n         results.append(result)\n@@ -250,12 +244,5 @@ def main(args) -> bool:\n         required=True,\n         help=(\"Path to second cache directory\"),\n     )\n-    parser.add_argument(\n-        \"--kernels\",\n-        type=str,\n-        default=None,\n-        required=True,\n-        help=(\"Path to kernels yaml file\"),\n-    )\n     args = parser.parse_args()\n     main(args)"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "file_content_changes": "@@ -352,6 +352,29 @@ def test_bin_op(dtype_x, dtype_y, op, num_ctas, device):\n             num_ctas=num_ctas)\n \n \n+@pytest.mark.parametrize(\"dtype, order\", [(dtype, order) for dtype in dtypes_with_bfloat16 for order in [0, 1]])\n+def test_addptr(dtype, order, device):\n+    check_type_supported(dtype, device)\n+\n+    @triton.jit\n+    def kernel(x, y, ORDER: tl.constexpr, SIZE: tl.constexpr):\n+        offs = tl.arange(0, SIZE)\n+        if ORDER == 0:\n+            tl.store(y + offs, tl.load(x + offs))\n+        else:\n+            tl.store(offs + y, tl.load(offs + x))\n+\n+    SIZE = 1024\n+    rs = RandomState(17)\n+    x = numpy_random(SIZE, dtype_str=dtype, rs=rs)\n+    y = numpy_random(SIZE, dtype_str=dtype, rs=rs)\n+    x_tri = to_triton(x, dst_type=dtype, device=device)\n+    y_tri = to_triton(y, dst_type=dtype, device=device)\n+    y = x\n+    kernel[1,](x_tri, y_tri, order, SIZE)\n+    np.testing.assert_allclose(y, to_numpy(y_tri))\n+\n+\n @pytest.mark.parametrize(\"dtype_x, dtype_y\",\n                          [(dtype_x, dtype_y) for dtype_x in int_dtypes for dtype_y in int_dtypes] +\n                          [(dtype_x, dtype_y) for dtype_x in uint_dtypes for dtype_y in uint_dtypes]"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -133,6 +133,8 @@ def add(input: tl.tensor,\n     # ptr + offset\n     if other_scalar_ty.is_ptr() and not input_scalar_ty.is_ptr():\n         input, other = other, input\n+        input_scalar_ty = input.type.scalar\n+        other_scalar_ty = other.type.scalar\n     if input_scalar_ty.is_ptr():\n         return tl.tensor(builder.create_addptr(input.handle, other.handle), input.type)\n     # float + float"}]