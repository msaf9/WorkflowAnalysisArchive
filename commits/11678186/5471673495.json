[{"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "file_content_changes": "@@ -479,21 +479,27 @@ struct ConvertLayoutOpConversion\n     unsigned outVec = 0;\n     SmallVector<unsigned> repShape;\n     triton::gpu::SharedEncodingAttr sharedLayout;\n-    if (srcLayout.isa<BlockedEncodingAttr>() &&\n-        dstLayout.isa<MmaEncodingAttr>() && !isDstMmaV1) {\n+    // If either src or dst is mmav1, we need to use padding to avoid bank\n+    // conflict.\n+    if (isSrcMmaV1 || isDstMmaV1) {\n+      repShape = getScratchConfigForCvtLayout(op, inVec, outVec, true);\n+      auto maxVec = std::max(inVec, outVec);\n+      sharedLayout = triton::gpu::SharedEncodingAttr::get(\n+          getContext(), maxVec, 1, 1, getOrder(dstLayout));\n+    } else if (dstLayout.isa<MmaEncodingAttr>()) {\n+      // If dest is mma v2, we use swizzling to avoid bank conflict.\n+      // We rely on shared layout constructor to calculate vec, perPhase, and\n+      // maxPhase\n       repShape = getScratchConfigForCvtLayout(op, inVec, outVec, false);\n       auto dstDotOp = triton::gpu::DotOperandEncodingAttr::get(\n           getContext(), 0, dstLayout, dstTy.getElementType());\n       sharedLayout = triton::gpu::SharedEncodingAttr::get(\n           getContext(), dstDotOp,\n           convertType<int64_t>(ArrayRef<unsigned>(repShape)),\n           getOrder(dstLayout), srcTy.getElementType());\n-    } else if (isSrcMmaV1 || isDstMmaV1) {\n-      repShape = getScratchConfigForCvtLayout(op, inVec, outVec, true);\n-      auto maxVec = std::max(inVec, outVec);\n-      sharedLayout = triton::gpu::SharedEncodingAttr::get(\n-          getContext(), maxVec, 1, 1, getOrder(dstLayout));\n     } else {\n+      // If dest is not mma v2, we use swizzling to avoid bank conflict.\n+      // maxPhase is the repShape[0] in this case\n       repShape = getScratchConfigForCvtLayout(op, inVec, outVec, false);\n       auto maxVec = std::max(inVec, outVec);\n       sharedLayout = triton::gpu::SharedEncodingAttr::get("}]