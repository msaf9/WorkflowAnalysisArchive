[{"filename": "lib/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.cpp", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "file_content_changes": "@@ -34,8 +34,6 @@ class NVGPUOpPatternBase : public mlir::RewritePattern {\n   explicit NVGPUOpPatternBase(mlir::MLIRContext *context)\n       : mlir::RewritePattern(SourceOp::getOperationName(), 1, context) {}\n \n-  virtual bool hasSideEffects() const { return false; }\n-\n   LogicalResult\n   matchAndRewrite(mlir::Operation *op,\n                   mlir::PatternRewriter &rewriter) const override {\n@@ -45,8 +43,7 @@ class NVGPUOpPatternBase : public mlir::RewritePattern {\n     if (!sourceOp)\n       return mlir::failure();\n     auto ptxAsm = static_cast<const ConcreteT *>(this)->getPtxAsm(sourceOp);\n-    auto hasSideEffects =\n-        static_cast<const ConcreteT *>(this)->hasSideEffects();\n+    auto hasSideEffects = !isMemoryEffectFree(sourceOp);\n     PTXBuilder ptxBuilder;\n     auto &ptxInstr = *ptxBuilder.create<PTXInstr>(ptxAsm);\n     ptxInstr({}, /*onlyAttachMLIRArgs=*/true);\n@@ -94,7 +91,6 @@ class WGMMAFenceOpPattern\n   using Base = NVGPUOpPatternBase<ttn::WGMMAFenceOp, WGMMAFenceOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const override { return true; }\n   std::string getPtxAsm(ttn::WGMMAFenceOp op) const {\n     return \"wgmma.fence.sync.aligned;\";\n   }\n@@ -108,8 +104,6 @@ class WGMMACommitGroupOpPattern\n       NVGPUOpPatternBase<ttn::WGMMACommitGroupOp, WGMMACommitGroupOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const override { return true; }\n-\n   std::string getPtxAsm(ttn::WGMMACommitGroupOp op) const {\n     return \"wgmma.commit_group.sync.aligned;\";\n   }\n@@ -123,8 +117,6 @@ class WGMMAWaitGroupOpPattern\n       NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp, WGMMAWaitGroupOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const override { return true; }\n-\n   std::string getPtxAsm(ttn::WGMMAWaitGroupOp op) const {\n     auto pendings = op.getPendings();\n     return \"wgmma.wait_group.sync.aligned \" + std::to_string(pendings) + \";\";\n@@ -333,7 +325,6 @@ class ClusterWaitOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::ClusterWaitOp, ClusterWaitOpPattern>;\n   using Base::Base;\n-\n   std::string getPtxAsm(ttn::ClusterWaitOp op) const {\n     return \"barrier.cluster.wait.aligned;\";\n   }\n@@ -735,8 +726,6 @@ class FenceMBarrierInitOpPattern\n       NVGPUOpPatternBase<ttn::FenceMBarrierInitOp, FenceMBarrierInitOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const override { return true; }\n-\n   std::string getPtxAsm(ttn::FenceMBarrierInitOp op) const {\n     return \"fence.mbarrier_init.release.cluster;\";\n   }\n@@ -809,7 +798,6 @@ class CGABarrierArriveOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::CGABarrierArriveOp, CGABarrierArriveOpPattern>;\n   using Base::Base;\n-\n   std::string getPtxAsm(ttn::CGABarrierArriveOp op) const {\n     return \"barrier.cluster.arrive;\";\n   }\n@@ -822,7 +810,6 @@ class CGABarrierWaitOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::CGABarrierWaitOp, CGABarrierWaitOpPattern>;\n   using Base::Base;\n-\n   std::string getPtxAsm(ttn::CGABarrierWaitOp op) const {\n     return \"barrier.cluster.wait;\";\n   }\n@@ -940,7 +927,7 @@ class RegAllocOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::RegAllocOp, RegAllocOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const override { return true; }\n+\n   std::string getPtxAsm(ttn::RegAllocOp op) const {\n     auto regCount = op.getRegCount();\n     return \"setmaxnreg.inc.sync.aligned.u32 \" + std::to_string(regCount) + \";\";\n@@ -952,7 +939,7 @@ class RegDeallocOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::RegDeallocOp, RegDeallocOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const override { return true; }\n+\n   std::string getPtxAsm(ttn::RegDeallocOp op) const {\n     auto regCount = op.getRegCount();\n     return \"setmaxnreg.dec.sync.aligned.u32 \" + std::to_string(regCount) + \";\";"}]