[{"filename": "lib/Conversion/TritonGPUToLLVM/ElementwiseOpToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -1012,7 +1012,7 @@ struct ExpOpConversionApprox\n };\n \n struct AbsIOpConversion\n-  : ElementwiseOpConversionBase<mlir::math::AbsIOp, AbsIOpConversion> {\n+    : ElementwiseOpConversionBase<mlir::math::AbsIOp, AbsIOpConversion> {\n   using Base =\n       ElementwiseOpConversionBase<mlir::math::AbsIOp, AbsIOpConversion>;\n   using Base::Base;\n@@ -1023,13 +1023,13 @@ struct AbsIOpConversion\n                      ValueRange operands, Location loc) const {\n     auto boolFalse = rewriter.getBoolAttr(false);\n     auto constFalse = rewriter.create<LLVM::ConstantOp>(loc, boolFalse);\n-    return rewriter.create<LLVM::AbsOp>(\n-        loc, elemTy, operands[0], /*is_int_min_poison=*/constFalse);\n+    return rewriter.create<LLVM::AbsOp>(loc, elemTy, operands[0],\n+                                        /*is_int_min_poison=*/constFalse);\n   }\n };\n \n struct AbsFOpConversion\n-  : ElementwiseOpConversionBase<mlir::math::AbsFOp, AbsFOpConversion> {\n+    : ElementwiseOpConversionBase<mlir::math::AbsFOp, AbsFOpConversion> {\n   using Base =\n       ElementwiseOpConversionBase<mlir::math::AbsFOp, AbsFOpConversion>;\n   using Base::Base;"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -1236,6 +1236,7 @@ def abs(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n \n ##\n \n+\n def multiple_of(x: tl.tensor, values: List[int]) -> tl.tensor:\n     if len(x.shape) != len(values):\n         raise ValueError(\"Shape of input to multiple_of does not match the length of values\")"}]