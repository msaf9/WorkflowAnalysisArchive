[{"filename": "lib/Dialect/Triton/Transforms/ReorderBroadcast.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -173,9 +173,10 @@ struct MoveBroadcastAfterElementwisePattern\n       DenseElementsAttr constAttr;\n       if (matchPattern(definingOp, m_Constant(&constAttr)) &&\n           constAttr.isSplat()) {\n-        auto value = constAttr.getSplatValue<Attribute>();\n+        auto scalarValue = constAttr.getSplatValue<Attribute>();\n+        auto splatValue = SplatElementsAttr::get(newTy, scalarValue);\n         auto newConstant =\n-            arith::ConstantOp::materialize(rewriter, value, newTy, loc);\n+            rewriter.create<arith::ConstantOp>(loc, newTy, splatValue);\n         newOperands.push_back(newConstant);\n         continue;\n       }"}, {"filename": "test/Triton/reorder-broadcast.mlir", "status": "renamed", "additions": 9, "deletions": 2, "changes": 11, "file_content_changes": "@@ -22,12 +22,19 @@ tt.func @test_splat_elementwise_pattern(%arg0: f32) -> (tensor<128x128xf32>, ten\n }\n \n // CHECK-LABEL: @test_broadcast_elementwise_pattern\n-tt.func @test_broadcast_elementwise_pattern(%arg0: tensor<128x1xf32>) -> tensor<128x128xf32> {\n+tt.func @test_broadcast_elementwise_pattern(%arg0: tensor<128x1xf32>) -> (tensor<128x128xf32>, tensor<128x32xf32>) {\n+    // CHECK: %[[one:.*]] = arith.constant dense<1.000000e+00> : tensor<128x1xf32>\n \n     // CHECK-NEXT: %[[abs:.*]] = math.absf %arg0 : tensor<128x1xf32>\n     // CHECK-NEXT: %{{.*}} = tt.broadcast %[[abs]] : (tensor<128x1xf32>) -> tensor<128x128xf32>\n     %broadcast = tt.broadcast %arg0 : (tensor<128x1xf32>) -> tensor<128x128xf32>\n     %abs = math.absf %broadcast : tensor<128x128xf32>\n \n-    tt.return %abs : tensor<128x128xf32>\n+    // CHECK-NEXT: %[[add:.*]] = arith.addf %arg0, %[[one]] : tensor<128x1xf32>\n+    // CHECK-NEXT: %{{.*}} = tt.broadcast %[[add]] : (tensor<128x1xf32>) -> tensor<128x32xf32>\n+    %broadcast2 = tt.broadcast %arg0 : (tensor<128x1xf32>) -> tensor<128x32xf32>\n+    %one = arith.constant dense<1.0> : tensor<128x32xf32>\n+    %add = arith.addf %one, %broadcast2 : tensor<128x32xf32>\n+\n+    tt.return %abs, %add : tensor<128x128xf32>, tensor<128x32xf32>\n }"}]