[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -65,7 +65,7 @@ AxisInfo AxisInfo::join(const AxisInfo &lhs, const AxisInfo &rhs) {\n   DimVectorT retContiguity;\n   DimVectorT retDivisibility;\n   DimVectorT retConstancy;\n-  for (size_t d = 0; d < lhs.getRank(); d++) {\n+  for (size_t d = 0; d < lhs.getRank(); ++d) {\n     retContiguity.push_back(gcd(lhs.getContiguity(d), rhs.getContiguity(d)));\n     retDivisibility.push_back(\n         gcd(lhs.getDivisibility(d), rhs.getDivisibility(d)));\n@@ -87,7 +87,7 @@ AxisInfo AxisInfoAnalysis::visitBinaryOp(\n   AxisInfo::DimVectorT newContiguity;\n   AxisInfo::DimVectorT newDivisibility;\n   AxisInfo::DimVectorT newConstancy;\n-  for (size_t d = 0; d < rank; d++) {\n+  for (size_t d = 0; d < rank; ++d) {\n     newContiguity.push_back(getContiguity(lhsInfo, rhsInfo, d));\n     newDivisibility.push_back(getDivisibility(lhsInfo, rhsInfo, d));\n     newConstancy.push_back(getConstancy(lhsInfo, rhsInfo, d));\n@@ -166,7 +166,7 @@ ChangeResult AxisInfoAnalysis::visitOperation(\n     AxisInfo::DimVectorT contiguity;\n     AxisInfo::DimVectorT divisibility;\n     AxisInfo::DimVectorT constancy;\n-    for (size_t d = 0; d < retTy.getRank(); d++) {\n+    for (size_t d = 0; d < retTy.getRank(); ++d) {\n       contiguity.push_back(1);\n       divisibility.push_back(opInfo.getDivisibility(0));\n       constancy.push_back(retTy.getShape()[d]);\n@@ -202,7 +202,7 @@ ChangeResult AxisInfoAnalysis::visitOperation(\n     AxisInfo::DimVectorT contiguity;\n     AxisInfo::DimVectorT divisibility;\n     AxisInfo::DimVectorT constancy;\n-    for (size_t d = 0; d < retTy.getRank(); d++) {\n+    for (size_t d = 0; d < retTy.getRank(); ++d) {\n       contiguity.push_back(opShape[d] == 1 ? 1 : opInfo.getContiguity(d));\n       divisibility.push_back(opInfo.getDivisibility(d));\n       constancy.push_back(opShape[d] == 1 ? retShape[d] : 1);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/PtxAsmFormat.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -12,7 +12,7 @@ std::string strJoin(llvm::ArrayRef<std::string> strs,\n                     llvm::StringRef delimiter) {\n   std::string osStr;\n   llvm::raw_string_ostream os(osStr);\n-  for (size_t i = 0; !strs.empty() && i < strs.size() - 1; i++)\n+  for (size_t i = 0; !strs.empty() && i < strs.size() - 1; ++i)\n     os << strs[i] << delimiter;\n   if (!strs.empty())\n     os << strs.back();\n@@ -85,11 +85,11 @@ mlir::Value PTXBuilder::launch(ConversionPatternRewriter &rewriter,\n       loc, resTy, getAllMLIRArgs(), // operands\n       dump(),                       // asm_string\n       getConstraints(),             // constraints\n-      true,                         // has_side_effects\n-      false,                        // is_align_stack\n+      hasSideEffect,                // has_side_effects\n+      isAlignStack,                 // is_align_stack\n       LLVM::AsmDialectAttr::get(ctx,\n                                 LLVM::AsmDialect::AD_ATT), // asm_dialect\n-      ArrayAttr::get(ctx, {})                              // operand_attrs\n+      ArrayAttr::get(ctx, attrs)                           // operand_attrs\n   );\n \n   return inlineAsm.getRes();"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -58,7 +58,7 @@ Value createIndexConstant(OpBuilder &builder, Location loc,\n }\n \n // Create an integer constant of \\param width bits.\n-Value createLLVMIntegerConstant(OpBuilder &builder, Location loc, int width,\n+Value createLLVMIntegerConstant(OpBuilder &builder, Location loc, short width,\n                                 int64_t value) {\n   Type ty = builder.getIntegerType(width);\n   return builder.create<LLVM::ConstantOp>(loc, ty,"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -433,7 +433,7 @@ mlir::LogicalResult ExtractSliceOp::inferReturnTypes(\n   if (axis < 0 || axis > srcShape.size())\n     return failure();\n   SmallVector<int64_t, 4> dstShape;\n-  for (int i = 0; i < srcShape.size(); i++)\n+  for (int i = 0; i < srcShape.size(); ++i)\n     if (i != axis)\n       dstShape.push_back(srcShape[i]);\n   auto returnType ="}]