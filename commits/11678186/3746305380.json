[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "file_content_changes": "@@ -461,14 +461,18 @@ class FoldConvertAndReduce : public mlir::RewritePattern {\n public:\n   explicit FoldConvertAndReduce(mlir::MLIRContext *context)\n       : mlir::RewritePattern(triton::gpu::ConvertLayoutOp::getOperationName(),\n-                             2, context) {}\n+                             1, context) {}\n \n   mlir::LogicalResult\n   matchAndRewrite(mlir::Operation *cvtOp,\n                   mlir::PatternRewriter &rewriter) const override {\n     auto cvt = dyn_cast<triton::gpu::ConvertLayoutOp>(*cvtOp);\n-    auto srcEncoding =\n+    auto srcEncoding = \n+        cvt.getOperand().getType().cast<RankedTensorType>().getEncoding();\n+    auto dstEncoding =\n         cvt.getResult().getType().cast<RankedTensorType>().getEncoding();\n+    if(srcEncoding.isa<triton::gpu::SliceEncodingAttr>())\n+      return failure();\n     SetVector<Operation *> cvtSlices;\n     auto filter = [&](Operation *op) {\n       return op->getBlock() == cvt->getBlock() &&\n@@ -499,7 +503,7 @@ class FoldConvertAndReduce : public mlir::RewritePattern {\n         llvm::MapVector<Value, Attribute> toConvert;\n         if (argOp && (argOp != cvt) && cvtSlices.count(argOp) == 0 &&\n             failed(simulateBackwardRematerialization(argOp, processed, layout,\n-                                                     toConvert, srcEncoding))) {\n+                                                     toConvert, dstEncoding))) {\n           return failure();\n         }\n       }"}]