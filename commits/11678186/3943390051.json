[{"filename": "CMakeLists.txt", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "file_content_changes": "@@ -188,8 +188,6 @@ add_subdirectory(include)\n add_subdirectory(lib)\n add_subdirectory(bin)\n \n-add_library(triton SHARED ${PYTHON_SRC})\n-\n # find_package(PythonLibs REQUIRED)\n \n set(TRITON_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n@@ -198,37 +196,40 @@ set(TRITON_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\n get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)\n get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)\n \n-target_link_libraries(triton\n-  TritonAnalysis\n-  TritonTransforms\n-  TritonGPUTransforms\n-  TritonLLVMIR\n-  TritonPTX\n-  ${dialect_libs}\n-  ${conversion_libs}\n-  # optimizations\n-  MLIRPass\n-  MLIRTransforms\n-  MLIRLLVMIR\n-  MLIRSupport\n-  MLIRTargetLLVMIRExport\n-  MLIRExecutionEngine\n-  MLIRMathToLLVM\n-  MLIRNVVMToLLVMIRTranslation\n-  MLIRIR\n-)\n-\n-target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\n-\n-if(WIN32)\n-    target_link_libraries(triton PRIVATE ${LLVM_LIBRARIES} dl) # dl is from dlfcn-win32\n-elseif(APPLE)\n-    target_link_libraries(triton ${LLVM_LIBRARIES} z)\n-else()\n-    target_link_libraries(triton ${LLVM_LIBRARIES} z stdc++fs)\n+if(TRITON_BUILD_PYTHON_MODULE)\n+  add_library(triton SHARED ${PYTHON_SRC})\n+\n+  target_link_libraries(triton\n+    TritonAnalysis\n+    TritonTransforms\n+    TritonGPUTransforms\n+    TritonLLVMIR\n+    TritonPTX\n+    ${dialect_libs}\n+    ${conversion_libs}\n+    # optimizations\n+    MLIRPass\n+    MLIRTransforms\n+    MLIRLLVMIR\n+    MLIRSupport\n+    MLIRTargetLLVMIRExport\n+    MLIRExecutionEngine\n+    MLIRMathToLLVM\n+    MLIRNVVMToLLVMIRTranslation\n+    MLIRIR\n+  )\n+\n+  target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\n+\n+  if(WIN32)\n+      target_link_libraries(triton PRIVATE ${LLVM_LIBRARIES} dl) # dl is from dlfcn-win32\n+  elseif(APPLE)\n+      target_link_libraries(triton ${LLVM_LIBRARIES} z)\n+  else()\n+      target_link_libraries(triton ${LLVM_LIBRARIES} z stdc++fs)\n+  endif()\n endif()\n \n-\n if(TRITON_BUILD_PYTHON_MODULE AND NOT WIN32)\n     set(CMAKE_SHARED_LIBRARY_SUFFIX \".so\")\n     # Check if the platform is MacOS"}, {"filename": "bin/CMakeLists.txt", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "file_content_changes": "@@ -26,35 +26,36 @@ target_link_libraries(triton-opt PRIVATE\n mlir_check_all_link_libraries(triton-opt)\n \n \n-# add_llvm_executable(triton-translate triton-translate.cpp PARTIAL_SOURCES_INTENDED)\n-#llvm_update_compile_flags(triton-translate)\n-# target_link_libraries(triton-translate PRIVATE\n-#         TritonAnalysis\n-#         TritonTransforms\n-#         TritonGPUTransforms\n-#         TritonLLVMIR\n-#         TritonDriver\n-#         ${dialect_libs}\n-#         ${conversion_libs}\n-#         # tests\n-#         TritonTestAnalysis\n-\n-#         LLVMCore\n-#         LLVMSupport\n-#         LLVMOption\n-#         LLVMCodeGen\n-#         LLVMAsmParser\n-\n-#         # MLIR core\n-#         MLIROptLib\n-#         MLIRIR\n-#         MLIRPass\n-#         MLIRSupport\n-#         MLIRTransforms\n-#         MLIRExecutionEngine\n-#         MLIRMathToLLVM\n-#         MLIRTransformUtils\n-#         MLIRLLVMToLLVMIRTranslation\n-#         MLIRNVVMToLLVMIRTranslation\n-#         )\n-# mlir_check_all_link_libraries(triton-translate)\n+add_llvm_executable(triton-translate triton-translate.cpp PARTIAL_SOURCES_INTENDED)\n+llvm_update_compile_flags(triton-translate)\n+ target_link_libraries(triton-translate PRIVATE\n+         TritonAnalysis\n+         TritonTransforms\n+         TritonGPUTransforms\n+         TritonLLVMIR\n+         TritonPTX\n+         ${dialect_libs}\n+         ${conversion_libs}\n+         # tests\n+         TritonTestAnalysis\n+\n+         LLVMCore\n+         LLVMSupport\n+         LLVMOption\n+         LLVMCodeGen\n+         LLVMAsmParser\n+\n+         # MLIR core\n+         MLIROptLib\n+         MLIRIR\n+         MLIRLLVMIR\n+         MLIRPass\n+         MLIRSupport\n+         MLIRTransforms\n+         MLIRExecutionEngine\n+         MLIRMathToLLVM\n+         MLIRTransformUtils\n+         MLIRLLVMToLLVMIRTranslation\n+         MLIRNVVMToLLVMIRTranslation\n+         )\n+mlir_check_all_link_libraries(triton-translate)"}, {"filename": "bin/triton-translate.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -15,7 +15,7 @@\n #include \"triton/Dialect/Triton/IR/Dialect.h\"\n #include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n #include \"triton/Target/LLVMIR/LLVMIRTranslation.h\"\n-#include \"triton/driver/llvm.h\"\n+#include \"triton/Target/PTX/PTXTranslation.h\"\n #include \"llvm/IR/LLVMContext.h\"\n #include \"llvm/Support/CommandLine.h\"\n #include \"llvm/Support/InitLLVM.h\"\n@@ -116,8 +116,8 @@ LogicalResult tritonTranslateMain(int argc, char **argv,\n   if (targetKind == \"llvmir\")\n     llvm::outs() << *llvmir << '\\n';\n   else if (targetKind == \"ptx\")\n-    llvm::outs() << ::triton::driver::llir_to_ptx(\n-        llvmir.get(), SMArch.getValue(), ptxVersion.getValue());\n+    llvm::outs() << ::triton::translateLLVMIRToPTX(*llvmir, SMArch.getValue(),\n+                                                   ptxVersion.getValue());\n \n   return success();\n }"}, {"filename": "lib/Target/LLVMIR/CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -7,6 +7,7 @@ add_mlir_translation_library(TritonLLVMIR\n         LINK_LIBS PUBLIC\n         MLIRIR\n         MLIRLLVMIR\n+        MLIRSCFToStandard\n         MLIRSupport\n         MLIRTargetLLVMIRExport\n         )"}, {"filename": "python/triton/tools/aot.py", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -1,4 +1,5 @@\n import argparse\n+import sys\n \n import triton\n import triton._C.libtriton.triton as libtriton\n@@ -24,7 +25,7 @@\n     # check for validity of format arguments\n     if args.target not in VALID_FORMATS:\n         print(\"Invalid target format: \" + args.target)\n-        exit(0)\n+        sys.exit(0)\n \n     # parse source file to MLIR module\n     context = libtriton.ir.context()\n@@ -35,7 +36,7 @@\n     module = triton.compiler.optimize_triton_ir(module)\n     if args.target == 'triton-ir':\n         print(module.str())\n-        exit(0)\n+        sys.exit(0)\n \n     if not args.sm:\n         raise argparse.ArgumentError(None, \"Must specify --sm for PTX compilation\")\n@@ -44,13 +45,13 @@\n     module = triton.compiler.ttir_to_ttgir(module, num_warps=4, num_stages=3, compute_capability=args.sm)\n     if args.target == 'triton-gpu-ir':\n         print(module.str())\n-        exit(0)\n+        sys.exit(0)\n \n     # triton-gpu-ir -> llvm-ir\n     module = triton.compiler.ttgir_to_llir(module, extern_libs=None, compute_capability=args.sm)\n     if args.target == 'llvm-ir':\n         print(module)\n-        exit(0)\n+        sys.exit(0)\n \n     if not args.ptx_version:\n         raise argparse.ArgumentError(None, \"Must specify --ptx-version for PTX compilation\")"}]