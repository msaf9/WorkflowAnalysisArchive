[{"filename": "python/test/unit/runtime/test_cache.py", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "file_content_changes": "@@ -171,29 +171,29 @@ def kernel_add(a, b, o, N: tl.constexpr):\n \n \n @triton.jit\n-def add(a, b, o, N: tl.constexpr):\n+def add_fn(a, b, o, N: tl.constexpr):\n     idx = tl.arange(0, N)\n     tl.store(o + idx, tl.load(a + idx) + tl.load(b + idx))\n \n \n def test_jit_noinline() -> None:\n     @triton.jit\n-    def kernel_add(a, b, o, N: tl.constexpr):\n-        add(a, b, o, N)\n+    def kernel_add_device(a, b, o, N: tl.constexpr):\n+        add_fn(a, b, o, N)\n \n     device = torch.cuda.current_device()\n-    assert len(kernel_add.cache[device]) == 0\n-    kernel_add.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n-    assert len(kernel_add.cache[device]) == 1\n-    bins = list(kernel_add.cache[device].values())\n+    assert len(kernel_add_device.cache[device]) == 0\n+    kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n+    assert len(kernel_add_device.cache[device]) == 1\n+    bins = list(kernel_add_device.cache[device].values())\n     inline_ttir = bins[0].asm['ttir']\n-    add.noinline = True\n-    add.hash = None\n-    kernel_add.hash = None\n-    kernel_add.cache[device] = {}\n-    kernel_add.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n-    assert len(kernel_add.cache[device]) == 1\n-    bins = list(kernel_add.cache[device].values())\n+    add_fn.noinline = True\n+    add_fn.hash = None\n+    kernel_add_device.hash = None\n+    kernel_add_device.cache[device].clear()\n+    kernel_add_device.warmup(torch.float32, torch.float32, torch.float32, 32, grid=(1,))\n+    assert len(kernel_add_device.cache[device]) == 1\n+    bins = list(kernel_add_device.cache[device].values())\n     noinline_ttir = bins[0].asm['ttir']\n     assert inline_ttir != noinline_ttir\n "}]