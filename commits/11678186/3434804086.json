[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -2134,7 +2134,7 @@ struct FpToFpOpConversion\n     auto *o0 = builder.newOperand(\"=r\");\n     auto *o1 = builder.newOperand(\"=r\");\n     auto *i = builder.newOperand(fp8x4Vec, \"r\");\n-    call({}, /* onlyAttachMLIRArgs */ true);\n+    call({o0, o1, i}, /* onlyAttachMLIRArgs */ true);\n \n     auto fp16x2VecTy = vec_ty(f16_ty, 2);\n     auto fp16x2x2StructTy =\n@@ -2186,7 +2186,7 @@ struct FpToFpOpConversion\n     auto *o = builder.newOperand(\"=r\");\n     auto *i0 = builder.newOperand(fp16x2Vec0, \"r\");\n     auto *i1 = builder.newOperand(fp16x2Vec1, \"r\");\n-    call({}, /* onlyAttachMLIRArgs */ true);\n+    call({o, i0, i1}, /* onlyAttachMLIRArgs */ true);\n \n     auto fp8x4VecTy = vec_ty(i8_ty, 4);\n     auto fp8x4Vec = builder.launch(rewriter, loc, fp8x4VecTy, false);\n@@ -2232,7 +2232,7 @@ struct FpToFpOpConversion\n     auto *o0 = builder.newOperand(\"=r\");\n     auto *o1 = builder.newOperand(\"=r\");\n     auto *i = builder.newOperand(fp8x4Vec, \"r\");\n-    call({}, /* onlyAttachMLIRArgs */ true);\n+    call({o0, o1, i}, /* onlyAttachMLIRArgs */ true);\n \n     auto bf16x2VecTy = vec_ty(bf16_ty, 2);\n     auto bf16x2x2StructTy =\n@@ -2308,7 +2308,7 @@ struct FpToFpOpConversion\n     auto *o = builder.newOperand(\"=r\");\n     auto *i0 = builder.newOperand(bf16x2Vec0, \"r\");\n     auto *i1 = builder.newOperand(bf16x2Vec1, \"r\");\n-    call({}, /* onlyAttachMLIRArgs */ true);\n+    call({o, i0, i1}, /* onlyAttachMLIRArgs */ true);\n \n     auto fp8x4VecTy = vec_ty(i8_ty, 4);\n     auto fp8x4Vec = builder.launch(rewriter, loc, fp8x4VecTy, false);"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Coalesce.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -32,7 +32,10 @@ struct CoalescePass : public TritonGPUCoalesceBase<CoalescePass> {\n     // Thread tile size depends on memory alignment\n     SmallVector<unsigned, 4> sizePerThread(rank, 1);\n     PointerType ptrType = origType.getElementType().cast<PointerType>();\n-    unsigned numBits = ptrType.getPointeeType().getIntOrFloatBitWidth();\n+    auto pointeeType = ptrType.getPointeeType();\n+    unsigned numBits =\n+        pointeeType.isa<triton::Float8Type>() ?\n+        8 : pointeeType.getIntOrFloatBitWidth();\n     unsigned maxMultiple = info.getDivisibility(order[0]);\n     unsigned maxContig = info.getContiguity(order[0]);\n     unsigned alignment = std::min(maxMultiple, maxContig);"}]