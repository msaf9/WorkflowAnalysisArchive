[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -183,9 +183,23 @@ def visit_compound_statement(self, stmts):\n                 break\n         return stmts and isinstance(stmt, ast.Return)\n \n+    # TODO: should be its own AST visitor\n     def contains_return_op(self, node):\n         if isinstance(node, ast.Return):\n             return True\n+        elif isinstance(node, ast.Assign):\n+            return self.contains_return_op(node.value)\n+        elif isinstance(node, ast.Module):\n+            pred = lambda s: self.contains_return_op(s)\n+            return any(pred(s) for s in node.body)\n+        elif isinstance(node, ast.FunctionDef):\n+            pred = lambda s: self.contains_return_op(s)\n+            return any(pred(s) for s in node.body)\n+        elif isinstance(node, ast.Call):\n+            fn = self.visit(node.func)\n+            if isinstance(fn, triton.JITFunction):\n+                return self.contains_return_op(fn.parse())\n+            return False\n         elif isinstance(node, ast.If):\n             pred = lambda s: self.contains_return_op(s)\n             ret = any(pred(s) for s in node.body)"}]