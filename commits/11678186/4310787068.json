[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "file_content_changes": "@@ -665,17 +665,24 @@ def visit_For(self, node):\n             step = triton.language.constexpr(-step.value)\n             negative_step = True\n             lb, ub = ub, lb\n+        lb = triton.language.core._to_tensor(lb, self.builder)\n+        ub = triton.language.core._to_tensor(ub, self.builder)\n+        step = triton.language.core._to_tensor(step, self.builder)\n+        # induction variable type\n+        iv_type = triton.language.semantic.integer_promote_impl(lb.dtype, ub.dtype)\n+        iv_type = triton.language.semantic.integer_promote_impl(iv_type, step.dtype)\n+        iv_ir_type = iv_type.to_ir(self.builder)\n         # lb/ub/step might be constexpr, we need to cast them to tensor\n-        lb = triton.language.core._to_tensor(lb, self.builder).handle\n-        ub = triton.language.core._to_tensor(ub, self.builder).handle\n-        step = triton.language.core._to_tensor(step, self.builder).handle\n+        lb = lb.handle\n+        ub = ub.handle\n+        step =step.handle\n         # ForOp can only accept IndexType as lb/ub/step. Cast integer to Index\n         lb = self.builder.create_to_index(lb)\n         ub = self.builder.create_to_index(ub)\n         step = self.builder.create_to_index(step)\n         # Create placeholder for the loop induction variable\n-        iv = self.builder.create_undef(self.builder.get_int64_ty())\n-        self.set_value(node.target.id, triton.language.core.tensor(iv, triton.language.core.int64))\n+        iv = self.builder.create_undef(iv_ir_type)\n+        self.set_value(node.target.id, triton.language.core.tensor(iv, iv_type))\n \n         with enter_sub_region(self) as sr:\n             liveins, insert_block = sr\n@@ -732,11 +739,12 @@ def visit_For(self, node):\n             # update induction variable with actual value, and replace all uses\n             self.builder.set_insertion_point_to_start(for_op.get_body(0))\n             iv = self.builder.create_index_to_si(for_op.get_induction_var())\n+            iv = self.builder.create_int_cast(iv, iv_ir_type, True)\n             if negative_step:\n                 ub_si = self.builder.create_index_to_si(ub)\n                 iv = self.builder.create_sub(ub_si, iv)\n             self.lscope[node.target.id].handle.replace_all_uses_with(iv)\n-            self.set_value(node.target.id, triton.language.core.tensor(iv, triton.language.core.int64))\n+            self.set_value(node.target.id, triton.language.core.tensor(iv, iv_type))\n \n         # update lscope & local_defs (ForOp defines new values)\n         for i, name in enumerate(names):"}]