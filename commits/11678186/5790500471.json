[{"filename": "include/triton/Dialect/NVGPU/IR/NVGPUOps.td", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "file_content_changes": "@@ -344,15 +344,6 @@ def NVGPU_Sts64Op : NVGPU_Op<\"sts64\", [MemoryEffects<[MemWrite]>]> {\n   }];\n }\n \n-def NVGPU_CvtPackOp : NVGPU_Op<\"cvt_pack\", []> {\n-  let arguments = (ins AnyTypeOf<[F16, I16]>:$d0, AnyTypeOf<[F16, I16]>:$d1);\n-  let results = (outs I32:$result);\n-  let assemblyFormat = \"operands attr-dict `:` type(operands) `->` type($result)\";\n-  string llvmBuilder = [{\n-    $result = createCvtPack(builder, $d0, $d1);\n-  }];\n-}\n-\n def NVGPU_ClusterCTAIdOp : NVGPU_Op<\"cluster_id\", [Pure]> {\n   let results = (outs I32:$result);\n   let assemblyFormat = \"attr-dict\";"}, {"filename": "lib/Dialect/NVGPU/ToLLVMIR/NVGPUToLLVMIR.cpp", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "file_content_changes": "@@ -705,26 +705,6 @@ void createSts64(llvm::IRBuilderBase &builder, llvm::Value *offset,\n   return;\n }\n \n-llvm::Value *createCvtPack(llvm::IRBuilderBase &builder, llvm::Value *d0,\n-                           llvm::Value *d1) {\n-  std::string funcName(\"__nv_cvt_pack\");\n-\n-  llvm::Type *retTy = builder.getInt32Ty();\n-  llvm::SmallVector<llvm::Value *> args;\n-  llvm::SmallVector<llvm::Type *> argTys;\n-  auto i16Ty = builder.getInt16Ty();\n-\n-  argTys.push_back(i16Ty);\n-  args.push_back(builder.CreateBitCast(d0, i16Ty));\n-  argTys.push_back(i16Ty);\n-  args.push_back(builder.CreateBitCast(d1, i16Ty));\n-\n-  auto *module = builder.GetInsertBlock()->getModule();\n-  auto *func = dyn_cast<llvm::Function>(\n-      getExternalFuncOP(module, funcName, retTy, argTys).getCallee());\n-  return builder.CreateCall(func, args);\n-}\n-\n static llvm::Value *getSRegValue(llvm::IRBuilderBase &builder,\n                                  llvm::StringRef name) {\n   std::string ptxStr;"}, {"filename": "lib/Hopper/HopperHelpers.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "file_content_changes": "@@ -501,12 +501,3 @@ __nv_offset_of_sts64(uint32_t threadIdx, uint32_t rowOfWarp, int32_t elemIdx,\n \n   return offset;\n }\n-\n-__DEVICE__ __attribute__((__always_inline__)) uint32_t\n-__nv_cvt_pack(uint16_t d0, uint16_t d1) {\n-  uint32_t ret;\n-  asm volatile(\"cvt.pack.sat.u16.s32 %0, %1, %2;\\n\"\n-               : \"=r\"(ret)\n-               : \"r\"(d0), \"r\"(d1));\n-  return ret;\n-}"}]