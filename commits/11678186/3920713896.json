[{"filename": "python/src/triton.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "file_content_changes": "@@ -486,15 +486,16 @@ void init_triton_ir(py::module &&m) {\n              return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n                  loc, v, self.getI64Type()));\n            })\n-      .def(\"get_bf16\",\n-           [](mlir::OpBuilder &self, float v) -> mlir::Value {\n-             auto loc = self.getUnknownLoc();\n-             auto type = self.getBF16Type();\n-             return self.create<mlir::arith::ConstantFloatOp>(\n-                 loc,\n-                 mlir::APFloat(type.getFloatSemantics(), std::to_string(v)),\n-                 type);\n-           })\n+      // bfloat16 cannot be initialized as it is treated as int16 for now\n+      //.def(\"get_bf16\",\n+      //     [](mlir::OpBuilder &self, float v) -> mlir::Value {\n+      //       auto loc = self.getUnknownLoc();\n+      //       auto type = self.getBF16Type();\n+      //       return self.create<mlir::arith::ConstantFloatOp>(\n+      //           loc,\n+      //           mlir::APFloat(type.getFloatSemantics(), std::to_string(v)),\n+      //           type);\n+      //     })\n       .def(\"get_fp16\",\n            [](mlir::OpBuilder &self, float v) -> mlir::Value {\n              auto loc = self.getUnknownLoc();"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1231,7 +1231,7 @@ def kernel(X, stride_xm, stride_xk,\n         assert 'mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32' in ptx\n \n \n-@pytest.mark.parametrize(\"dtype_str\", ['float32', 'float16', 'bfloat16'])\n+@pytest.mark.parametrize(\"dtype_str\", ['float32', 'float16'])\n def test_dot_without_load(dtype_str):\n     @triton.jit\n     def _kernel(out):"}]