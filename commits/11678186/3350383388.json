[{"filename": "python/src/triton.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -170,9 +170,8 @@ void init_triton_ir(py::module &&m) {\n       .def(\"replace_all_uses_with\",\n            [](mlir::Value &self, mlir::Value &newValue) {\n              self.replaceAllUsesWith(newValue);\n-           })\n+           });\n \n-      ;\n   py::class_<mlir::BlockArgument, mlir::Value>(m, \"block_arguement\");\n \n   py::class_<mlir::Region>(m, \"region\")"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "file_content_changes": "@@ -650,17 +650,20 @@ def cast(input: tl.tensor,\n        (src_sca_ty.int_bitwidth != dst_sca_ty.int_bitwidth or src_sca_ty.int_signedness != dst_sca_ty.int_signedness):\n         sign_extend = src_sca_ty.is_int_signed() and not src_sca_ty.is_bool()\n         if dst_sca_ty.is_bool():\n-            return not_equal(input, tl._to_tensor(0, builder), builder)\n+            ty = input.dtype.to_ir(builder)\n+            _0 = tl.tensor(builder.get_null_value(ty), input.dtype)\n+            return not_equal(input, _0, builder)\n         else:\n             return tl.tensor(builder.create_int_cast(input.handle,\n                                                      dst_ty.to_ir(builder), sign_extend),\n                              dst_ty)\n \n     # Float to Int\n     if src_sca_ty.is_floating() and dst_sca_ty.is_int():\n-        # TODO: is this correct?\n         if dst_sca_ty.is_bool():\n-            return not_equal(input, tl._to_tensor(0, builder), builder)\n+            ty = input.dtype.to_ir(builder)\n+            _0 = tl.tensor(builder.get_null_value(ty), input.dtype)\n+            return not_equal(input, _0, builder)\n         elif dst_sca_ty.is_int_signed():\n             return tl.tensor(builder.create_fp_to_si(input.handle,\n                                                      dst_ty.to_ir(builder)),"}]