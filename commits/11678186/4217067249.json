[{"filename": "CMakeLists.txt", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "file_content_changes": "@@ -43,8 +43,8 @@ include_directories(${PYBIND11_INCLUDE_DIR})\n \n if(WIN32)\n     SET(BUILD_SHARED_LIBS OFF)\n-    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/deps/dlfcn-win32/src)\n-    add_subdirectory(deps/dlfcn-win32/src ${CMAKE_BINARY_DIR}/dlfcn-win32)\n+    find_package(dlfcn-win32 REQUIRED)\n+    set(CMAKE_DL_LIBS dlfcn-win32::dl)\n endif()\n \n set(CMAKE_CXX_FLAGS \"${CMAKE_C_FLAGS} -D__STDC_FORMAT_MACROS  -fPIC -std=gnu++17 -fvisibility=hidden -fvisibility-inlines-hidden\")\n@@ -202,8 +202,7 @@ get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)\n \n if(TRITON_BUILD_PYTHON_MODULE)\n   add_library(triton SHARED ${PYTHON_SRC})\n-\n-  target_link_libraries(triton\n+  set(TRITON_LIBRARIES\n     TritonAnalysis\n     TritonTransforms\n     TritonGPUTransforms\n@@ -222,16 +221,21 @@ if(TRITON_BUILD_PYTHON_MODULE)\n     MLIRNVVMToLLVMIRTranslation\n     MLIRIR\n   )\n-\n-  target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\n-\n   if(WIN32)\n-      target_link_libraries(triton PRIVATE ${LLVM_LIBRARIES} dl) # dl is from dlfcn-win32\n+    target_link_libraries(triton PRIVATE ${LLVM_LIBRARIES} ${CMAKE_DL_LIBS}\n+      ${TRITON_LIBRARIES}\n+    )\n   elseif(APPLE)\n-      target_link_libraries(triton ${LLVM_LIBRARIES} z)\n+    target_link_libraries(triton ${LLVM_LIBRARIES} z\n+      ${TRITON_LIBRARIES}\n+    )\n   else()\n-      target_link_libraries(triton ${LLVM_LIBRARIES} z stdc++fs)\n+    target_link_libraries(triton ${LLVM_LIBRARIES} z stdc++fs\n+      ${TRITON_LIBRARIES}\n+    )\n   endif()\n+  \n+  target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\n endif()\n \n if(TRITON_BUILD_PYTHON_MODULE AND NOT WIN32)"}, {"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "file_content_changes": "@@ -6,10 +6,10 @@ include \"triton/Dialect/Triton/IR/TritonTypes.td\"\n include \"triton/Dialect/Triton/IR/TritonAttrDefs.td\"\n include \"triton/Dialect/Triton/IR/TritonInterfaces.td\"\n include \"mlir/IR/OpBase.td\"\n-include \"mlir/Interfaces/SideEffectInterfaces.td\" // NoMemoryEffect\n+include \"mlir/Interfaces/SideEffectInterfaces.td\" // Pure\n include \"mlir/Interfaces/ControlFlowInterfaces.td\" // BranchOpInterface\n include \"mlir/Interfaces/InferTypeOpInterface.td\" // SameOperandsAndResultType\n-include \"mlir/Interfaces/SideEffectInterfaces.td\" // NoMemoryEffect\n+include \"mlir/Interfaces/SideEffectInterfaces.td\" // Pure\n include \"mlir/Interfaces/CastInterfaces.td\" // CastOpInterface\n \n //\n@@ -29,7 +29,7 @@ class TT_Op<string mnemonic, list<Trait> traits = []> :\n //   extui, extsi, tructi\n def TT_IntToPtrOp : TT_Op<\"int_to_ptr\", [SameOperandsAndResultShape,\n                                          SameOperandsAndResultEncoding,\n-                                         NoMemoryEffect,\n+                                         Pure,\n                                          /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n     let summary = \"Cast int64 to pointer\";\n \n@@ -42,7 +42,7 @@ def TT_IntToPtrOp : TT_Op<\"int_to_ptr\", [SameOperandsAndResultShape,\n \n def TT_PtrToIntOp : TT_Op<\"ptr_to_int\", [SameOperandsAndResultShape,\n                                          SameOperandsAndResultEncoding,\n-                                         NoMemoryEffect,\n+                                         Pure,\n                                          /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n     let summary = \"Cast pointer to int64\";\n \n@@ -56,7 +56,7 @@ def TT_PtrToIntOp : TT_Op<\"ptr_to_int\", [SameOperandsAndResultShape,\n // arith.bitcast doesn't support pointers\n def TT_BitcastOp : TT_Op<\"bitcast\", [SameOperandsAndResultShape,\n                                      SameOperandsAndResultEncoding,\n-                                     NoMemoryEffect,\n+                                     Pure,\n                                      /*DeclareOpInterfaceMethods<CastOpInterface>*/]> {\n     let summary = \"Cast between types of the same bitwidth\";\n \n@@ -71,7 +71,7 @@ def TT_BitcastOp : TT_Op<\"bitcast\", [SameOperandsAndResultShape,\n \n def TT_FpToFpOp : TT_Op<\"fp_to_fp\", [SameOperandsAndResultShape,\n                                      SameOperandsAndResultEncoding,\n-                                     NoMemoryEffect,\n+                                     Pure,\n                                      DeclareOpInterfaceMethods<CastOpInterface>]> {\n     let summary = \"Floating point casting for custom types\";\n \n@@ -95,7 +95,7 @@ def TT_FpToFpOp : TT_Op<\"fp_to_fp\", [SameOperandsAndResultShape,\n //\n \n def TT_AddPtrOp : TT_Op<\"addptr\",\n-                     [NoMemoryEffect,\n+                     [Pure,\n                       SameOperandsAndResultShape,\n                       SameOperandsAndResultEncoding,\n                       TypesMatchWith<\"result type matches ptr type\",\n@@ -222,7 +222,7 @@ def TT_AtomicCASOp : TT_Op<\"atomic_cas\", [MemoryEffects<[MemRead]>,\n //\n // Shape Manipulation Ops\n //\n-def TT_SplatOp : TT_Op<\"splat\", [NoMemoryEffect,\n+def TT_SplatOp : TT_Op<\"splat\", [Pure,\n                                  SameOperandsAndResultElementType,\n                                  SameOperandsAndResultEncoding]> {\n     let summary = \"splat\";\n@@ -236,7 +236,7 @@ def TT_SplatOp : TT_Op<\"splat\", [NoMemoryEffect,\n     let hasFolder = 1;\n }\n \n-def TT_ExpandDimsOp : TT_Op<\"expand_dims\", [NoMemoryEffect,\n+def TT_ExpandDimsOp : TT_Op<\"expand_dims\", [Pure,\n                                             DeclareOpInterfaceMethods<InferTypeOpInterface>,\n                                             SameOperandsAndResultElementType]> {\n     let summary = \"expand_dims\";\n@@ -248,6 +248,7 @@ def TT_ExpandDimsOp : TT_Op<\"expand_dims\", [NoMemoryEffect,\n     let assemblyFormat = \"$src attr-dict `:` functional-type(operands, results)\";\n }\n \n+// view is not `pure` because it may reorder elements\n def TT_ViewOp : TT_Op<\"view\", [NoMemoryEffect,\n                                SameOperandsAndResultElementType]> {\n     let summary = \"view\";\n@@ -260,7 +261,7 @@ def TT_ViewOp : TT_Op<\"view\", [NoMemoryEffect,\n \n }\n \n-def TT_BroadcastOp : TT_Op<\"broadcast\", [NoMemoryEffect,\n+def TT_BroadcastOp : TT_Op<\"broadcast\", [Pure,\n                                          SameOperandsAndResultElementType,\n                                          SameOperandsAndResultEncoding]> {\n     let summary = \"broadcast. No left-padding as of now.\";\n@@ -274,6 +275,7 @@ def TT_BroadcastOp : TT_Op<\"broadcast\", [NoMemoryEffect,\n     let hasFolder = 1;\n }\n \n+// cat is not `pure` because it may reorder elements\n def TT_CatOp : TT_Op<\"cat\", [NoMemoryEffect,\n                              SameOperandsAndResultElementType]> {\n     let summary = \"concatenate 2 tensors\";\n@@ -285,7 +287,7 @@ def TT_CatOp : TT_Op<\"cat\", [NoMemoryEffect,\n     let assemblyFormat = \"$lhs `,` $rhs attr-dict `:` functional-type(operands, results)\";\n }\n \n-def TT_TransOp : TT_Op<\"trans\", [NoMemoryEffect,\n+def TT_TransOp : TT_Op<\"trans\", [Pure,\n                                  DeclareOpInterfaceMethods<InferTypeOpInterface>,\n                                  SameOperandsAndResultElementType]> {\n \n@@ -301,15 +303,15 @@ def TT_TransOp : TT_Op<\"trans\", [NoMemoryEffect,\n //\n // SPMD Ops\n //\n-def TT_GetProgramIdOp : TT_Op<\"get_program_id\", [NoMemoryEffect]> {\n+def TT_GetProgramIdOp : TT_Op<\"get_program_id\", [Pure]> {\n     let arguments = (ins I32Attr:$axis);\n \n     let results = (outs I32:$result);\n \n     let assemblyFormat = \"attr-dict `:` type($result)\";\n }\n \n-def TT_GetNumProgramsOp : TT_Op<\"get_num_programs\", [NoMemoryEffect]> {\n+def TT_GetNumProgramsOp : TT_Op<\"get_num_programs\", [Pure]> {\n     let arguments = (ins I32Attr:$axis);\n \n     let results = (outs I32:$result);\n@@ -320,7 +322,7 @@ def TT_GetNumProgramsOp : TT_Op<\"get_num_programs\", [NoMemoryEffect]> {\n //\n // Dot Op\n //\n-def TT_DotOp : TT_Op<\"dot\", [NoMemoryEffect,\n+def TT_DotOp : TT_Op<\"dot\", [Pure,\n                              DeclareOpInterfaceMethods<InferTypeOpInterface>,\n                              TypesMatchWith<\"result's type matches accumulator's type\",\n                                             \"d\", \"c\", \"$_self\">]> {\n@@ -340,7 +342,7 @@ def TT_DotOp : TT_Op<\"dot\", [NoMemoryEffect,\n //\n // Reduce Op\n //\n-def TT_ReduceOp : TT_Op<\"reduce\", [NoMemoryEffect,\n+def TT_ReduceOp : TT_Op<\"reduce\", [Pure,\n                                    DeclareOpInterfaceMethods<InferTypeOpInterface>]> {\n     let summary = \"reduce\";\n \n@@ -364,7 +366,7 @@ def TT_ReduceOp : TT_Op<\"reduce\", [NoMemoryEffect,\n //\n // External elementwise op\n //\n-def TT_ExtElemwiseOp : TT_Op<\"ext_elemwise\", [NoMemoryEffect, Elementwise, SameOperandsAndResultShape,\n+def TT_ExtElemwiseOp : TT_Op<\"ext_elemwise\", [Pure, Elementwise, SameOperandsAndResultShape,\n                                               SameOperandsAndResultEncoding,\n                                               SameVariadicOperandSize]> {\n     let summary = \"ext_elemwise\";\n@@ -386,7 +388,7 @@ def TT_ExtElemwiseOp : TT_Op<\"ext_elemwise\", [NoMemoryEffect, Elementwise, SameO\n // Make Range Op\n //\n // TODO: should have ConstantLike as Trait\n-def TT_MakeRangeOp : TT_Op<\"make_range\", [NoMemoryEffect]> {\n+def TT_MakeRangeOp : TT_Op<\"make_range\", [Pure]> {\n     let summary = \"make range\";\n \n     let description = [{"}, {"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUOps.td", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -7,7 +7,7 @@ include \"mlir/Dialect/Arith/IR/ArithBase.td\"\n include \"triton/Dialect/Triton/IR/TritonTypes.td\"\n include \"triton/Dialect/Triton/IR/TritonAttrDefs.td\"\n include \"mlir/IR/OpBase.td\"\n-include \"mlir/Interfaces/SideEffectInterfaces.td\" // NoMemoryEffect\n+include \"mlir/Interfaces/SideEffectInterfaces.td\" // Pure\n include \"mlir/Interfaces/InferTypeOpInterface.td\" // SameOperandsAndResultType\n \n def ResultsAreSharedEncoding: NativeOpTrait<\"ResultsAreSharedEncoding\">;\n@@ -18,7 +18,7 @@ class TTG_Op<string mnemonic, list<Trait> traits = []> :\n def TTG_ConvertLayoutOp : TTG_Op<\"convert_layout\",\n                                  [SameOperandsAndResultShape,\n                                   SameOperandsAndResultElementType,\n-                                  NoMemoryEffect]> {\n+                                  Pure]> {\n   let summary = \"convert layout\";\n \n   let arguments = (ins TT_Tensor:$src);\n@@ -59,7 +59,7 @@ def TTG_AsyncCommitGroupOp : TTG_Op<\"async_commit_group\"> {\n // This is needed because these ops don't\n // handle encodings\n // e.g., https://github.com/llvm/llvm-project/blob/main/mlir/include/mlir/Dialect/Arith/IR/ArithOps.td#L111\n-def TTG_CmpIOp : TTG_Op<\"cmpi\", [NoMemoryEffect, Elementwise,\n+def TTG_CmpIOp : TTG_Op<\"cmpi\", [Pure, Elementwise,\n                                  SameOperandsAndResultShape, \n                                  SameOperandsAndResultEncoding]> {\n   let summary = \"integer comparison operation\";\n@@ -73,7 +73,7 @@ def TTG_CmpIOp : TTG_Op<\"cmpi\", [NoMemoryEffect, Elementwise,\n   let results = (outs TT_BoolLike:$result);\n }\n \n-def TTG_CmpFOp : TTG_Op<\"cmpf\", [NoMemoryEffect, Elementwise,\n+def TTG_CmpFOp : TTG_Op<\"cmpf\", [Pure, Elementwise,\n                                  SameOperandsAndResultShape, \n                                  SameOperandsAndResultEncoding]> {\n   let summary = \"floating-point comparison operation\";\n@@ -88,7 +88,7 @@ def TTG_CmpFOp : TTG_Op<\"cmpf\", [NoMemoryEffect, Elementwise,\n }\n \n // TODO: migrate to arith::SelectOp on LLVM16\n-def TTG_SelectOp : TTG_Op<\"select\", [NoMemoryEffect, Elementwise,\n+def TTG_SelectOp : TTG_Op<\"select\", [Pure, Elementwise,\n                                      SameOperandsAndResultShape,\n                                      SameOperandsAndResultEncoding]> {\n   let summary = \"select operation\";"}, {"filename": "python/setup.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "file_content_changes": "@@ -65,7 +65,7 @@ def get_llvm_package_info():\n         linux_suffix = 'ubuntu-18.04' if vglibc > 217 else 'centos-7'\n         system_suffix = f\"linux-gnu-{linux_suffix}\"\n     else:\n-        raise RuntimeError(f\"unsupported system: {system}\")\n+        return Package(\"llvm\", \"LLVM-C.lib\", \"\", \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n     use_assert_enabled_llvm = check_env_flag(\"TRITON_USE_ASSERT_ENABLED_LLVM\", \"False\")\n     release_suffix = \"assert\" if use_assert_enabled_llvm else \"release\"\n     name = f'llvm+mlir-17.0.0-x86_64-{system_suffix}-{release_suffix}'\n@@ -159,7 +159,11 @@ def run(self):\n \n     def build_extension(self, ext):\n         lit_dir = shutil.which('lit')\n-        triton_cache_path = os.path.join(os.environ[\"HOME\"], \".triton\")\n+        user_home = os.getenv(\"HOME\") or os.getenv(\"USERPROFILE\") or \\\n+            os.getenv(\"HOMEPATH\") or None\n+        if not user_home:\n+            raise RuntimeError(\"Could not find user home directory\")\n+        triton_cache_path = os.path.join(user_home, \".triton\")\n         # lit is used by the test suite\n         thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)\n         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.path)))"}]