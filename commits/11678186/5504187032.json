[{"filename": "python/test/unit/operators/test_matmul.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -89,8 +89,8 @@ def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n                 (128, 256, 32, 1, 8, 2, None, None, None, AT, BT, ADTYPE, BDTYPE),\n                 (32, 64, 32, 1, 1, 2, 64, 128, 32, AT, BT, ADTYPE, BDTYPE),\n                 (128, 128, 32, 8, 4, 2, 256, 256, 128, AT, BT, ADTYPE, BDTYPE),\n-            ] for ADTYPE, BDTYPE in [(\"float8e5\", \"float8e5\"),\n-                                     (\"float8e5\", \"float16\"),\n+            ] for ADTYPE, BDTYPE in [(\"float8e4b15\", \"float8e5\"),\n+                                     (\"float8e4\", \"float16\"),\n                                      (\"float16\", \"float8e5\"),\n                                      (\"float16\", \"float32\"),\n                                      (\"float32\", \"float16\"),\n@@ -149,9 +149,9 @@ def init_input(n, m, t, dtype, is_float8):\n     th_c = torch.matmul(th_a, th_b)\n     try:\n         if a_fp8:\n-            a = triton.reinterpret(a, tl.float8e5)\n+            a = triton.reinterpret(a, getattr(tl, ADTYPE))\n         if b_fp8:\n-            b = triton.reinterpret(b, tl.float8e5)\n+            b = triton.reinterpret(b, getattr(tl, BDTYPE))\n         tt_c = triton.ops.matmul(a, b)\n         atol, rtol = 1e-2, 0\n         if ADTYPE == torch.bfloat16 or BDTYPE == torch.bfloat16:"}, {"filename": "python/triton/ops/matmul.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -111,8 +111,9 @@ def _kernel(A, B, C, M, N, K,\n             b = tl.load(B)\n         else:\n             k_remaining = K - k * (BLOCK_K * SPLIT_K)\n-            a = tl.load(A, mask=rk[None, :] < k_remaining, other=0.)\n-            b = tl.load(B, mask=rk[:, None] < k_remaining, other=0.)\n+            _0 = tl.zeros((1, 1), dtype=C.dtype.element_ty)\n+            a = tl.load(A, mask=rk[None, :] < k_remaining, other=_0)\n+            b = tl.load(B, mask=rk[:, None] < k_remaining, other=_0)\n         a = a.to(C.dtype.element_ty)\n         b = b.to(C.dtype.element_ty)\n         acc += tl.dot(a, b, out_dtype=dot_out_dtype)"}]