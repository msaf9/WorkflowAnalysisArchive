[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "file_content_changes": "@@ -20,7 +20,7 @@\n # from ..runtime import driver, jit, JITFunction\n # TODO: runtime.errors\n from ..runtime.autotuner import OutOfResources\n-from ..runtime.cache import get_cache_manager\n+from ..runtime.cache import get_cache_manager, get_dump_manager, get_override_manager\n from ..runtime.driver import driver\n from ..runtime.jit import (JITFunction, get_cuda_stream, get_current_device,\n                            get_device_capability, version_key)\n@@ -295,6 +295,9 @@ def make_hash(fn, arch, env_vars, **kwargs):\n         key = f\"{fn.cache_key}-{''.join(signature.values())}-{configs_key}-{constants}-{num_warps}-{num_stages}-{num_ctas}-{num_stages}-{enable_warp_specialization}-{enable_persistent}-{debug}-{arch}-{env_vars_list}\"\n         return hashlib.md5(key.encode(\"utf-8\")).hexdigest()\n     assert isinstance(fn, str)\n+    ignore_version = kwargs.get('ignore_version', False)\n+    if (ignore_version):\n+        return hashlib.md5((Path(fn).read_text()).encode(\"utf-8\")).hexdigest()\n     return hashlib.md5((Path(fn).read_text() + version_key()).encode(\"utf-8\")).hexdigest()\n \n \n@@ -511,6 +514,10 @@ def compile(fn, **kwargs):\n \n     # create cache manager\n     fn_cache_manager = get_cache_manager(make_hash(fn, arch, get_env_vars(), **kwargs))\n+    # managers used to dump and override IR for debugging\n+    fn_override_manager = get_override_manager(make_hash(fn, arch, get_env_vars(), **kwargs, ignore_version=True))\n+    fn_dump_manager = get_dump_manager(make_hash(fn, arch, get_env_vars(), **kwargs, ignore_version=True))\n+\n     # determine name and extension type of provided function\n     if isinstance(fn, JITFunction):\n         name, ext = fn.__name__, \"ast\"\n@@ -571,6 +578,11 @@ def compile(fn, **kwargs):\n                 else:\n                     metadata_group[ir_filename] = fn_cache_manager.put(next_module, ir_filename)\n                     fn_cache_manager.put(next_module, ir_filename)\n+                    fn_dump_manager.put(next_module, ir_filename)\n+                    if (fn_override_manager.has_file(ir_filename)):\n+                        print(f\"\\n-- Overriding {ir_filename}\")\n+                        full_name = fn_override_manager.get_file(ir_filename)\n+                        next_module = parse(full_name)\n             else:\n                 if ir_name == \"amdgcn\":\n                     extra_file_name = f\"{name}.hsaco_path\""}, {"filename": "python/triton/runtime/cache.py", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "file_content_changes": "@@ -10,6 +10,14 @@ def default_cache_dir():\n     return os.path.join(Path.home(), \".triton\", \"cache\")\n \n \n+def default_override_dir():\n+    return os.path.join(Path.home(), \".triton\", \"override\")\n+\n+\n+def default_dump_dir():\n+    return os.path.join(Path.home(), \".triton\", \"dump\")\n+\n+\n class CacheManager(ABC):\n     def __init__(self, key):\n         pass\n@@ -36,17 +44,26 @@ def put_group(self, filename: str, group: Dict[str, str]):\n \n \n class FileCacheManager(CacheManager):\n-    def __init__(self, key):\n+    def __init__(self, key, override=False, dump=False):\n         self.key = key\n         self.lock_path = None\n-        # create cache directory if it doesn't exist\n-        self.cache_dir = os.getenv('TRITON_CACHE_DIR', \"\").strip() or default_cache_dir()\n-        if self.cache_dir:\n+        if (dump):\n+            self.cache_dir = default_dump_dir()\n             self.cache_dir = os.path.join(self.cache_dir, self.key)\n             self.lock_path = os.path.join(self.cache_dir, \"lock\")\n             os.makedirs(self.cache_dir, exist_ok=True)\n+        elif (override):\n+            self.cache_dir = default_override_dir()\n+            self.cache_dir = os.path.join(self.cache_dir, self.key)\n         else:\n-            raise RuntimeError(\"Could not create or locate cache dir\")\n+            # create cache directory if it doesn't exist\n+            self.cache_dir = os.getenv('TRITON_CACHE_DIR', \"\").strip() or default_cache_dir()\n+            if self.cache_dir:\n+                self.cache_dir = os.path.join(self.cache_dir, self.key)\n+                self.lock_path = os.path.join(self.cache_dir, \"lock\")\n+                os.makedirs(self.cache_dir, exist_ok=True)\n+            else:\n+                raise RuntimeError(\"Could not create or locate cache dir\")\n \n     def _make_path(self, filename) -> str:\n         return os.path.join(self.cache_dir, filename)\n@@ -131,3 +148,11 @@ def get_cache_manager(key) -> CacheManager:\n         __cache_cls_nme = user_cache_manager\n \n     return __cache_cls(key)\n+\n+\n+def get_override_manager(key) -> CacheManager:\n+    return __cache_cls(key, override=True)\n+\n+\n+def get_dump_manager(key) -> CacheManager:\n+    return __cache_cls(key, dump=True)"}]