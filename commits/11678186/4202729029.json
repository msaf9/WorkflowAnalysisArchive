[{"filename": "lib/Conversion/TritonGPUToLLVM/DotOpHelpers.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "file_content_changes": "@@ -110,18 +110,18 @@ Value DotOpMmaV1ConversionHelper::loadA(\n   }\n \n   Type elemX2Ty = vec_ty(f16_ty, 2);\n-  Type elemPtrTy = ptr_ty(f16_ty);\n+  Type elemPtrTy = ptr_ty(f16_ty, 3);\n   if (tensorTy.getElementType().isBF16()) {\n     elemX2Ty = vec_ty(i16_ty, 2);\n-    elemPtrTy = ptr_ty(i16_ty);\n+    elemPtrTy = ptr_ty(i16_ty, 3);\n   }\n \n   // prepare arguments\n   SmallVector<Value> ptrA(numPtrA);\n \n   std::map<std::pair<int, int>, std::pair<Value, Value>> has;\n   for (int i = 0; i < numPtrA; i++)\n-    ptrA[i] = gep(ptr_ty(f16_ty), smemBase, offA[i]);\n+    ptrA[i] = gep(ptr_ty(f16_ty, 3), smemBase, offA[i]);\n \n   auto ld = [&](decltype(has) &vals, int m, int k, Value val0, Value val1) {\n     vals[{m, k}] = {val0, val1};\n@@ -224,17 +224,17 @@ Value DotOpMmaV1ConversionHelper::loadB(\n     offB[i] = add(mul(offB0I, strideB0), mul(offB1, strideB1));\n   }\n \n-  Type elemPtrTy = ptr_ty(f16_ty);\n+  Type elemPtrTy = ptr_ty(f16_ty, 3);\n   Type elemX2Ty = vec_ty(f16_ty, 2);\n   if (tensorTy.getElementType().isBF16()) {\n-    elemPtrTy = ptr_ty(i16_ty);\n+    elemPtrTy = ptr_ty(i16_ty, 3);\n     elemX2Ty = vec_ty(i16_ty, 2);\n   }\n \n   SmallVector<Value> ptrB(numPtrB);\n   ValueTable hbs;\n   for (int i = 0; i < numPtrB; ++i)\n-    ptrB[i] = gep(ptr_ty(f16_ty), smem, offB[i]);\n+    ptrB[i] = gep(ptr_ty(f16_ty, 3), smem, offB[i]);\n \n   auto ld = [&](decltype(hbs) &vals, int m, int k, Value val0, Value val1) {\n     vals[{m, k}] = {val0, val1};\n@@ -1292,7 +1292,7 @@ Value DotOpFMAConversionHelper::loadA(\n   }\n   auto elemTy = A.getType().cast<RankedTensorType>().getElementType();\n \n-  Type ptrTy = ptr_ty(elemTy);\n+  Type ptrTy = ptr_ty(elemTy, 3);\n   SmallVector<Value> aPtrs(aNumPtr);\n   for (int i = 0; i < aNumPtr; ++i)\n     aPtrs[i] = gep(ptrTy, aSmem.base, aOff[i]);\n@@ -1355,7 +1355,7 @@ Value DotOpFMAConversionHelper::loadB(\n   }\n   auto elemTy = B.getType().cast<RankedTensorType>().getElementType();\n \n-  Type ptrTy = ptr_ty(elemTy);\n+  Type ptrTy = ptr_ty(elemTy, 3);\n   SmallVector<Value> bPtrs(bNumPtr);\n   for (int i = 0; i < bNumPtr; ++i)\n     bPtrs[i] = gep(ptrTy, bSmem.base, bOff[i]);"}]