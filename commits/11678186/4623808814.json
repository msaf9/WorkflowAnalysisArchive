[{"filename": "python/triton/compiler/make_launcher.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -3,7 +3,7 @@\n import tempfile\n \n from ..common import _build\n-from ..runtime.cache import CacheManager\n+from ..runtime.cache import get_cache_manager\n from ..runtime.jit import version_key\n \n \n@@ -26,19 +26,21 @@ def make_so_cache_key(version_hash, signature, constants):\n def make_stub(name, signature, constants):\n     # name of files that are cached\n     so_cache_key = make_so_cache_key(version_key(), signature, constants)\n-    so_cache_manager = CacheManager(so_cache_key)\n+    so_cache_manager = get_cache_manager(so_cache_key)\n     so_name = f\"{name}.so\"\n     # retrieve stub from cache if it exists\n-    if not so_cache_manager.has_file(so_name):\n+    cache_path = so_cache_manager.get_file(so_name)\n+    if cache_path is None:\n         with tempfile.TemporaryDirectory() as tmpdir:\n             src = generate_launcher(constants, signature)\n             src_path = os.path.join(tmpdir, \"main.c\")\n             with open(src_path, \"w\") as f:\n                 f.write(src)\n             so = _build(name, src_path, tmpdir)\n             with open(so, \"rb\") as f:\n-                so_cache_manager.put(f.read(), so_name, binary=True)\n-    return so_cache_manager.make_path(so_name)\n+                return so_cache_manager.put(f.read(), so_name, binary=True)\n+    else:\n+        return cache_path\n \n # ----- source code generation --------\n "}]