[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "file_content_changes": "@@ -23,26 +23,26 @@\n from .tools.disasm import extract\n \n \n-def mangle_ty(type):\n-    if type.is_ptr():\n-        return 'P' + mangle_ty(type.element_ty)\n-    if type.is_int():\n-        return 'i' + str(type.int_bitwidth)\n-    if type.is_fp8():\n+def mangle_ty(ty):\n+    if ty.is_ptr():\n+        return 'P' + mangle_ty(ty.element_ty)\n+    if ty.is_int():\n+        return 'i' + str(ty.int_bitwidth)\n+    if ty.is_fp8():\n         return 'fp8'\n-    if type.is_fp16():\n+    if ty.is_fp16():\n         return 'fp16'\n-    if type.is_bf16():\n+    if ty.is_bf16():\n         return 'bf16'\n-    if type.is_fp32():\n+    if ty.is_fp32():\n         return 'fp32'\n-    if type.is_fp64():\n+    if ty.is_fp64():\n         return 'fp64'\n-    if type.is_void():\n+    if ty.is_void():\n         return 'V'\n-    if type.is_block():\n-        elt = mangle_ty(type.scalar)\n-        shape = '_'.join(map(str, type.shape))\n+    if ty.is_block():\n+        elt = mangle_ty(ty.scalar)\n+        shape = '_'.join(map(str, ty.shape))\n         return f'{elt}S{shape}S'\n     assert False, \"Unsupport type\"\n \n@@ -71,6 +71,16 @@ def __init__(self, module, builder, gscope)-> None:\n         # bb => {name => phi}\n         self.incomplete_phis = {}\n         self.sealed_blocks: Set[_triton.ir.basic_block] = set()\n+        #\n+        self.builtins = {\n+            'range': range,\n+            'min': triton.language.minimum,\n+            'float': float,\n+            'int': int,\n+            'print': print,\n+            'isinstance': isinstance,\n+            'getattr': getattr,\n+        }\n \n     def get_value(self, name):\n         ''' This function:\n@@ -203,15 +213,7 @@ def __init__(self, context, prototype, gscope, attributes, constants, module=Non\n         self.constants = constants\n         self.last_node = None\n         self.is_kernel = is_kernel\n-        self.builtins = {\n-            'range': range,\n-            'min': triton.language.minimum,\n-            'float': float,\n-            'int': int,\n-            'print': print,\n-            'isinstance': isinstance,\n-            'getattr': getattr,\n-        }\n+        \n         self.value_constructor = ValueConstructor(self.module, self.builder, gscope)\n \n \n@@ -240,7 +242,7 @@ def visit_List(self, node):\n     def visit_Return(self, node):\n         ret = self.visit(node.value)\n         if ret is None:\n-            return triton.language.tensor(None, triton.language.void)\n+            return triton.language.tensor(self.builder.ret_void(), triton.language.void)\n         ret = triton.language.core._to_tensor(ret, self.builder)\n         ret = triton.language.tensor(self.builder.ret(ret.handle), ret.type)\n         return ret\n@@ -540,7 +542,7 @@ def visit_ExtSlice(self, node):\n \n     def visit_For(self, node):\n         iterator = self.visit(node.iter.func)\n-        if iterator != self.builtins['range']:\n+        if iterator != self.value_constructor.builtins['range']:\n             raise RuntimeError('Only `range` iterator currently supported')\n         # static for loops: all iterator arguments are constexpr\n         iter_args = [self.visit(arg) for arg in node.iter.args]\n@@ -650,7 +652,7 @@ def visit_Call(self, node):\n         # built-in function\n         if sys.modules[fn.__module__] is triton.language.core:\n             ret = fn(*args, _builder=self.builder, **kws)\n-        if fn in self.builtins.values():\n+        if fn in self.value_constructor.builtins.values():\n             args = [arg.value if isinstance(arg, triton.language.constexpr) else arg\n                     for arg in args]\n             ret = fn(*args, **kws)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -139,7 +139,7 @@ def is_bool(self):\n         return self.is_int1()\n \n     def is_void(self):\n-        raise RuntimeError(\"Not implemented\")\n+        return self.name == 'void'\n \n     def is_block(self):\n         return False"}]