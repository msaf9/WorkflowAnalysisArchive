[{"filename": "CMakeLists.txt", "status": "modified", "additions": 64, "deletions": 61, "changes": 125, "file_content_changes": "@@ -49,7 +49,8 @@ endif()\n ##########\n # LLVM\n ##########\n-if(\"${LLVM_LIBRARY_DIR}\" STREQUAL \"\")\n+if (NOT MLIR_DIR)\n+  if(NOT LLVM_LIBRARY_DIR)\n     if(WIN32)\n       find_package(LLVM 13 REQUIRED COMPONENTS nvptx amdgpu)\n \n@@ -68,66 +69,67 @@ if(\"${LLVM_LIBRARY_DIR}\" STREQUAL \"\")\n     if(APPLE)\n       set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.14\")\n     endif()\n-# sometimes we don't want to use llvm-config, since it may have been downloaded for some specific linux distros\n-else()\n+  # sometimes we don't want to use llvm-config, since it may have been downloaded for some specific linux distros\n+  else()\n     set(LLVM_LDFLAGS \"-L${LLVM_LIBRARY_DIR}\")\n     set(LLVM_LIBRARIES\n-libLLVMNVPTXCodeGen.a\n-libLLVMNVPTXDesc.a\n-libLLVMNVPTXInfo.a\n-libLLVMAMDGPUDisassembler.a\n-libLLVMMCDisassembler.a\n-libLLVMAMDGPUCodeGen.a\n-libLLVMMIRParser.a\n-libLLVMGlobalISel.a\n-libLLVMSelectionDAG.a\n-libLLVMipo.a\n-libLLVMInstrumentation.a\n-libLLVMVectorize.a\n-libLLVMLinker.a\n-libLLVMIRReader.a\n-libLLVMAsmParser.a\n-libLLVMFrontendOpenMP.a\n-libLLVMAsmPrinter.a\n-libLLVMDebugInfoDWARF.a\n-libLLVMCodeGen.a\n-libLLVMTarget.a\n-libLLVMScalarOpts.a\n-libLLVMInstCombine.a\n-libLLVMAggressiveInstCombine.a\n-libLLVMTransformUtils.a\n-libLLVMBitWriter.a\n-libLLVMAnalysis.a\n-libLLVMProfileData.a\n-libLLVMObject.a\n-libLLVMTextAPI.a\n-libLLVMBitReader.a\n-libLLVMAMDGPUAsmParser.a\n-libLLVMMCParser.a\n-libLLVMAMDGPUDesc.a\n-libLLVMAMDGPUUtils.a\n-libLLVMMC.a\n-libLLVMDebugInfoCodeView.a\n-libLLVMDebugInfoMSF.a\n-libLLVMCore.a\n-libLLVMRemarks.a\n-libLLVMBitstreamReader.a\n-libLLVMBinaryFormat.a\n-libLLVMAMDGPUInfo.a\n-libLLVMSupport.a\n-libLLVMDemangle.a\n-libLLVMPasses.a\n-libLLVMAnalysis.a\n-libLLVMTransformUtils.a\n-libLLVMScalarOpts.a\n-libLLVMTransformUtils.a\n-libLLVMipo.a\n-libLLVMObjCARCOpts.a\n-libLLVMCoroutines.a\n-libLLVMAnalysis.a\n-)\n+      libLLVMNVPTXCodeGen.a\n+      libLLVMNVPTXDesc.a\n+      libLLVMNVPTXInfo.a\n+      libLLVMAMDGPUDisassembler.a\n+      libLLVMMCDisassembler.a\n+      libLLVMAMDGPUCodeGen.a\n+      libLLVMMIRParser.a\n+      libLLVMGlobalISel.a\n+      libLLVMSelectionDAG.a\n+      libLLVMipo.a\n+      libLLVMInstrumentation.a\n+      libLLVMVectorize.a\n+      libLLVMLinker.a\n+      libLLVMIRReader.a\n+      libLLVMAsmParser.a\n+      libLLVMFrontendOpenMP.a\n+      libLLVMAsmPrinter.a\n+      libLLVMDebugInfoDWARF.a\n+      libLLVMCodeGen.a\n+      libLLVMTarget.a\n+      libLLVMScalarOpts.a\n+      libLLVMInstCombine.a\n+      libLLVMAggressiveInstCombine.a\n+      libLLVMTransformUtils.a\n+      libLLVMBitWriter.a\n+      libLLVMAnalysis.a\n+      libLLVMProfileData.a\n+      libLLVMObject.a\n+      libLLVMTextAPI.a\n+      libLLVMBitReader.a\n+      libLLVMAMDGPUAsmParser.a\n+      libLLVMMCParser.a\n+      libLLVMAMDGPUDesc.a\n+      libLLVMAMDGPUUtils.a\n+      libLLVMMC.a\n+      libLLVMDebugInfoCodeView.a\n+      libLLVMDebugInfoMSF.a\n+      libLLVMCore.a\n+      libLLVMRemarks.a\n+      libLLVMBitstreamReader.a\n+      libLLVMBinaryFormat.a\n+      libLLVMAMDGPUInfo.a\n+      libLLVMSupport.a\n+      libLLVMDemangle.a\n+      libLLVMPasses.a\n+      libLLVMAnalysis.a\n+      libLLVMTransformUtils.a\n+      libLLVMScalarOpts.a\n+      libLLVMTransformUtils.a\n+      libLLVMipo.a\n+      libLLVMObjCARCOpts.a\n+      libLLVMCoroutines.a\n+      libLLVMAnalysis.a\n+    )\n+  endif()\n+  set (MLIR_DIR ${LLVM_LIBRARY_DIR}/cmake/mlir)\n endif()\n-include_directories(${LLVM_INCLUDE_DIRS})\n \n # Python module\n if(TRITON_BUILD_PYTHON_MODULE)\n@@ -152,17 +154,18 @@ endif()\n \n \n # MLIR\n-find_package(MLIR REQUIRED CONFIG PATHS ${LLVM_LIBRARY_DIR}/cmake/mlir)\n+find_package(MLIR REQUIRED CONFIG PATHS ${MLIR_DIR})\n \n-list(APPEND CMAKE_MODULE_PATH ${LLVM_LIBRARY_DIR}/cmake/llvm)\n-list(APPEND CMAKE_MODULE_PATH ${LLVM_LIBRARY_DIR}/cmake/mlir)\n+list(APPEND CMAKE_MODULE_PATH \"${MLIR_CMAKE_DIR}\")\n+list(APPEND CMAKE_MODULE_PATH \"${LLVM_CMAKE_DIR}\")\n \n include(TableGen) # required by AddMLIR\n include(AddLLVM)\n include(AddMLIR)\n # include(HandleLLVMOptions) # human-friendly error message\n \n include_directories(${MLIR_INCLUDE_DIRS})\n+include_directories(${LLVM_INCLUDE_DIRS})\n include_directories(${PROJECT_SOURCE_DIR}/include)\n include_directories(${PROJECT_BINARY_DIR}/include) # Tablegen'd files\n # link_directories(${LLVM_LIBRARY_DIR})"}]