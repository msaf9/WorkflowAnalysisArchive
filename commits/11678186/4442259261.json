[{"filename": "python/test/unit/runtime/test_cache.py", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "file_content_changes": "@@ -196,3 +196,14 @@ def kernel_sub(a, b, o, N: tl.constexpr):\n     proc.start()\n     proc.join()\n     assert proc.exitcode == 0\n+\n+def test_memory_leak() -> None:\n+    @triton.jit\n+    def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):\n+        xnumel = 10\n+        xoffset = tl.program_id(0) * XBLOCK\n+        xindex = xoffset + tl.arange(0, XBLOCK)[:]\n+        xmask = xindex < xnumel\n+        x0 = xindex\n+        tmp0 = tl.load(in_ptr0 + (x0), xmask)\n+        tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp0, xmask)\n\\ No newline at end of file"}, {"filename": "python/test/unit/runtime/test_launch.py", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "file_content_changes": "@@ -0,0 +1,32 @@\n+import torch\n+import triton\n+import triton.language as tl\n+import tracemalloc\n+import gc\n+\n+def test_memory_leak() -> None:\n+\n+    @triton.jit\n+    def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):\n+        xnumel = 10\n+        xoffset = tl.program_id(0) * XBLOCK\n+        xindex = xoffset + tl.arange(0, XBLOCK)[:]\n+        xmask = xindex < xnumel\n+        x0 = xindex\n+        tmp0 = tl.load(in_ptr0 + (x0), xmask)\n+        tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK], tl.int32)), tmp0, xmask)\n+\n+    tracemalloc.start()\n+    try:\n+        inp = torch.randn(10, device='cuda')\n+        out = torch.randn(10, device='cuda')\n+        kernel[(10,)](inp, out, 10, XBLOCK=16)\n+        gc.collect()\n+        begin, _ = tracemalloc.get_traced_memory()\n+        for _ in range(100):\n+            kernel[(10,)](inp, out, 10, XBLOCK=16)\n+        gc.collect()\n+        end, _ = tracemalloc.get_traced_memory()\n+        assert end - begin < 1000\n+    finally:\n+        tracemalloc.stop()"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -1276,6 +1276,7 @@ def format_of(ty):\n         ptr_info.valid = false;\n     }}\n     ptr_info.dev_ptr = dev_ptr;\n+    Py_DECREF(ret);  // Thanks ChatGPT!\n     return ptr_info;\n   }}\n   PyErr_SetString(PyExc_TypeError, \"Pointer argument must be either uint64 or have data_ptr method\");"}]