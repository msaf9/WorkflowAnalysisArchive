[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -7,12 +7,11 @@\n import pytest\n import torch\n from numpy.random import RandomState\n-from triton.code_gen import JITFunction\n \n import triton\n import triton._C.libtriton.triton as _triton\n import triton.language as tl\n-from triton.code_gen import TensorWrapper, reinterpret\n+from triton.code_gen import JITFunction, TensorWrapper, reinterpret\n \n int_dtypes = ['int8', 'int16', 'int32', 'int64']\n uint_dtypes = ['uint8', 'uint16', 'uint32', 'uint64']"}, {"filename": "python/triton/code_gen.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -204,8 +204,8 @@ def _try_remove_trivial_phi(self, phi: triton.language.tensor) -> triton.languag\n \n class CodeGenerator(ast.NodeVisitor):\n \n-    def __init__(self, context, prototype, gscope, attributes, constants, module=None, is_kernel=False):\n-        self.prototypes = dict()\n+    def __init__(self, context, prototype, gscope, attributes, constants, prototypes=None, module=None, is_kernel=False):\n+        self.prototypes = dict() if prototypes is None else prototypes\n         self.builder = _triton.ir.builder(context)\n         self.module = _triton.ir.module('', self.builder) if module is None else module\n         self.prototype = prototype\n@@ -262,6 +262,7 @@ def visit_FunctionDef(self, node):\n             self.visit(init_node)\n         # initialize function\n         fn_name = mangle_fn(node.name, self.prototype.param_types, self.constants)\n+        self.prototypes[fn_name] = self.prototype\n         fn = self.module.get_or_insert_function(fn_name, self.prototype.to_ir(self.builder))\n         fn.set_is_kernel(self.is_kernel)\n         arg_values = []\n@@ -641,9 +642,8 @@ def visit_Call(self, node):\n                 ret_type = triton.language.void\n                 prototype = triton.language.function_type(ret_type, arg_types)\n                 gscope = sys.modules[fn.fn.__module__].__dict__\n-                generator = CodeGenerator(self.builder.context, prototype, gscope, attributes, constants, module=self.module)\n+                generator = CodeGenerator(self.builder.context, prototype, gscope, attributes, constants, prototypes=self.prototypes, module=self.module)\n                 generator.visit(fn.parse())\n-                self.prototypes[fn_name] = prototype\n             symbol = self.module.get_function(fn_name)\n             ret = self.builder.call(symbol, arg_vals)\n             if not ret.type.is_void():"}]