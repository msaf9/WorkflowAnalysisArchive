[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "file_content_changes": "@@ -9,6 +9,7 @@\n \n T = TypeVar('T')\n \n+\n def _to_tensor(x, builder):\n     if isinstance(x, bool):\n         return tensor(builder.get_int1(x), int1)\n@@ -348,6 +349,9 @@ def __rsub__(self, other):\n     def __mul__(self, other):\n         return constexpr(self.value * other.value)\n \n+    def __mod__(self, other):\n+        return constexpr(self.value % other.value)\n+\n     def __rmul__(self, other):\n         return constexpr(other.value * self.value)\n \n@@ -726,10 +730,12 @@ def broadcast_to(input, shape, _builder=None):\n     \"\"\"\n     return semantic.broadcast_impl_shape(input, shape, _builder)\n \n+\n @builtin\n def trans(input, _builder=None):\n     return semantic.trans(input, _builder)\n \n+\n @builtin\n def cat(input, other, can_reorder=False, _builder=None):\n     \"\"\"\n@@ -762,6 +768,7 @@ def view(input, shape, _builder=None):\n     shape = [x.value for x in shape]\n     return semantic.view(input, shape, _builder)\n \n+\n @builtin\n def reshape(input, shape, _builder=None):\n     # TODO: should be more than just a view"}]