[{"filename": "python/triton/compiler/__init__.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1,4 +1,4 @@\n-from .compiler import CompiledKernel, compile, instance_descriptor\n+from .compiler import CompiledKernel, compile, instance_descriptor, get_architecture_num_warps, get_architecture_num_stages\n from .errors import CompilationError\n \n-__all__ = [\"compile\", \"instance_descriptor\", \"CompiledKernel\", \"CompilationError\"]\n+__all__ = [\"compile\", \"instance_descriptor\", \"CompiledKernel\", \"CompilationError\", \"get_architecture_num_warps\", \"get_architecture_num_stages\"]"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "file_content_changes": "@@ -368,6 +368,35 @@ def get_architecture_descriptor(capability):\n     return capability\n \n \n+def get_architecture_num_warps(device_type, capability=None):\n+    if device_type in [\"cuda\", \"hip\"]:\n+        arch = get_architecture_descriptor(capability)\n+    else:\n+        _device_backend = get_backend(device_type)\n+        assert _device_backend\n+        arch = _device_backend.get_architecture_descriptor(device_type=device_type, capability=capability)\n+\n+    is_cuda = device_type == \"cuda\" and _is_cuda(arch)\n+    is_hip = device_type in [\"cuda\", \"hip\"] and not is_cuda\n+    num_warps = 4 if is_cuda or is_hip else arch[\"num_warps\"]\n+\n+    return num_warps\n+\n+\n+def get_architecture_num_stages(device_type, capability=None):\n+    if device_type in [\"cuda\", \"hip\"]:\n+        arch = get_architecture_descriptor(capability)\n+    else:\n+        _device_backend = get_backend(device_type)\n+        assert _device_backend\n+        arch = _device_backend.get_architecture_descriptor(device_type=device_type, capability=capability)\n+\n+    is_cuda = device_type == \"cuda\" and _is_cuda(arch)\n+    num_stages = 3 if is_cuda and arch >= 75 else 2\n+\n+    return num_stages\n+\n+\n def add_rocm_stages(arch, extern_libs, stages):\n     extern_libs.update(get_amdgcn_bitcode_paths(arch))\n \n@@ -396,10 +425,11 @@ def add_cuda_stages(arch, extern_libs, stages):\n def compile(fn, **kwargs):\n     # Get device type to decide which backend should be used\n     device_type = kwargs.get(\"device_type\", \"cuda\")\n+    capability = kwargs.get(\"cc\", None)\n     _device_backend = get_backend(device_type)\n \n     if device_type in [\"cuda\", \"hip\"]:\n-        arch = get_architecture_descriptor(kwargs.get(\"cc\", None))\n+        arch = get_architecture_descriptor(capability)\n     else:\n         _device_backend = get_backend(device_type)\n         assert _device_backend\n@@ -409,9 +439,10 @@ def compile(fn, **kwargs):\n     is_hip = device_type in [\"cuda\", \"hip\"] and not is_cuda\n     context = ir.context()\n     constants = kwargs.get(\"constants\", dict())\n-    num_warps = kwargs.get(\"num_warps\", 4)\n+    num_warps = kwargs.get(\"num_warps\", get_architecture_num_warps(device_type, capability))\n+    assert num_warps > 0 and (num_warps & (num_warps - 1)) == 0, \"num_warps must be a power of 2\"\n     num_ctas = kwargs.get(\"num_ctas\", 1)\n-    num_stages = kwargs.get(\"num_stages\", 3 if is_cuda and arch >= 75 else 2)\n+    num_stages = kwargs.get(\"num_stages\", get_architecture_num_stages(device_type, capability))\n     # TODO[shuhaoj]: Default should be to enable warp specialization once possible\n     enable_warp_specialization = kwargs.get(\"enable_warp_specialization\", False)\n     # TODO[shuhaoj]: persistent can be decoupled with warp specialization\n@@ -445,6 +476,8 @@ def compile(fn, **kwargs):\n     elif is_hip:\n         add_rocm_stages(arch, extern_libs, stages)\n     else:\n+        arch[\"num_warps\"] = num_warps\n+        arch[\"num_stages\"] = num_stages\n         _device_backend.add_stages(arch, extern_libs, stages)\n \n     # find out the signature of the function"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "file_content_changes": "@@ -362,14 +362,11 @@ def _make_launcher(self):\n         args_signature = args_signature + ', ' if len(args_signature) > 0 else ''\n \n         src = f\"\"\"\n-def {self.fn.__name__}({args_signature}grid=None, num_warps=4, num_ctas=1, num_stages=3, enable_warp_specialization=False, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n-    from ..compiler import compile, CompiledKernel\n+def {self.fn.__name__}({args_signature}grid=None, num_warps=None, num_ctas=1, num_stages=None, enable_warp_specialization=False, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n+    from ..compiler import compile, CompiledKernel, get_architecture_num_warps, get_architecture_num_stages\n     sig_key = {f'{sig_keys},' if len(sig_keys) > 0 else ()}\n     constexpr_key = {f'{constexpr_keys},' if len(constexpr_keys) > 0 else ()}\n     spec_key = {f'{spec_keys},' if len(spec_keys) > 0 else ()}\n-    key = (version_key, sig_key, constexpr_key, spec_key, num_warps, num_ctas, num_stages, enable_warp_specialization, self.debug)\n-    if not extern_libs is None:\n-      key = (key, tuple(extern_libs.items()))\n     assert num_warps > 0 and (num_warps & (num_warps - 1)) == 0, \"num_warps must be a power of 2\"\n     assert num_ctas > 0\n     assert grid is not None\n@@ -389,6 +386,15 @@ def {self.fn.__name__}({args_signature}grid=None, num_warps=4, num_ctas=1, num_s\n         device_backend = get_backend(device_type)\n         if device_backend is None:\n             raise ValueError('Cannot find backend for ' + device_type)\n+    \n+    if num_warps is None:\n+        num_warps = get_architecture_num_warps(device_type)\n+    if num_stages is None:\n+        num_stages = get_architecture_num_stages(device_type)\n+    \n+    key = (version_key, sig_key, constexpr_key, spec_key, num_warps, num_ctas, num_stages, enable_warp_specialization, self.debug)\n+    if not extern_libs is None:\n+      key = (key, tuple(extern_libs.items()))\n \n     if device is None:\n         if device_type in ['cuda', 'hip']:"}]