[{"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "file_content_changes": "@@ -11,7 +11,9 @@\n #include <numeric>\n \n using ::mlir::triton::gpu::BlockedEncodingAttr;\n+using ::mlir::triton::gpu::getOrder;\n using ::mlir::triton::gpu::getShapePerCTA;\n+using ::mlir::triton::gpu::getSizePerThread;\n using ::mlir::triton::gpu::MmaEncodingAttr;\n using ::mlir::triton::gpu::SharedEncodingAttr;\n using ::mlir::triton::gpu::SliceEncodingAttr;\n@@ -34,28 +36,16 @@ getScratchConfigForCvtLayout(triton::gpu::ConvertLayoutOp op, unsigned &inVec,\n          \"Unexpect layout in getScratchConfigForCvtLayout()\");\n   unsigned rank = dstTy.getRank();\n   SmallVector<unsigned> paddedRepShape(rank);\n-  if (auto srcSliceLayout = srcLayout.dyn_cast<SliceEncodingAttr>())\n-    srcLayout = srcSliceLayout.getParent();\n-  if (auto dstSliceLayout = dstLayout.dyn_cast<SliceEncodingAttr>())\n-    dstLayout = dstSliceLayout.getParent();\n   auto srcBlockedLayout = srcLayout.dyn_cast<BlockedEncodingAttr>();\n   auto srcMmaLayout = srcLayout.dyn_cast<MmaEncodingAttr>();\n   auto dstBlockedLayout = dstLayout.dyn_cast<BlockedEncodingAttr>();\n   auto dstMmaLayout = dstLayout.dyn_cast<MmaEncodingAttr>();\n-  assert((srcBlockedLayout || srcMmaLayout) &&\n-         \"Unexpected srcLayout in getScratchConfigForCvtLayout\");\n-  assert((dstBlockedLayout || dstMmaLayout) &&\n-         \"Unexpected dstLayout in getScratchConfigForCvtLayout\");\n   assert(!(srcMmaLayout && dstMmaLayout) &&\n          \"Unexpected mma -> mma layout conversion\");\n-  auto inOrd =\n-      srcMmaLayout ? dstBlockedLayout.getOrder() : srcBlockedLayout.getOrder();\n-  auto outOrd =\n-      dstMmaLayout ? srcBlockedLayout.getOrder() : dstBlockedLayout.getOrder();\n-  unsigned srcContigPerThread =\n-      srcBlockedLayout ? srcBlockedLayout.getSizePerThread()[inOrd[0]] : 2;\n-  unsigned dstContigPerThread =\n-      dstBlockedLayout ? dstBlockedLayout.getSizePerThread()[outOrd[0]] : 2;\n+  auto inOrd = srcMmaLayout ? getOrder(dstLayout) : getOrder(srcLayout);\n+  auto outOrd = dstMmaLayout ? getOrder(srcLayout) : getOrder(dstLayout);\n+  unsigned srcContigPerThread = getSizePerThread(srcLayout)[inOrd[0]];\n+  unsigned dstContigPerThread = getSizePerThread(dstLayout)[outOrd[0]];\n   // TODO: Fix the legacy issue that ourOrd[0] == 0 always means\n   //       that we cannot do vectorization.\n   inVec = outOrd[0] == 0 ? 1 : inOrd[0] == 0 ? 1 : srcContigPerThread;\n@@ -70,6 +60,8 @@ getScratchConfigForCvtLayout(triton::gpu::ConvertLayoutOp op, unsigned &inVec,\n         std::max(std::min<unsigned>(srcTy.getShape()[d], srcShapePerCTA[d]),\n                  std::min<unsigned>(dstTy.getShape()[d], dstShapePerCTA[d]));\n   }\n+  if (rank == 1)\n+    return paddedRepShape;\n   unsigned paddedDim = 1;\n   if (auto dstBlockedLayout = dstLayout.dyn_cast<BlockedEncodingAttr>()) {\n     paddedDim = dstBlockedLayout.getOrder()[0];"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -1199,7 +1199,7 @@ struct BroadcastOpConversion\n         broadcastDims.push_back(d);\n         srcLogicalShape[d] = 1;\n         srcLogicalShape[d + rank] =\n-            std::max(unsigned(1), srcLayout.getSizePerThread()[d]);\n+            std::max<unsigned>(1, srcLayout.getSizePerThread()[d]);\n       } else {\n         srcLogicalShape[d] = numCtas;\n         srcLogicalShape[d + rank] = resultLayout.getSizePerThread()[d];\n@@ -2234,6 +2234,7 @@ LogicalResult ConvertLayoutOpConversion::lowerDistributedToDistributed(\n     }\n     barrier();\n     if (dstLayout.isa<BlockedEncodingAttr>() ||\n+        dstLayout.isa<SliceEncodingAttr>() ||\n         dstLayout.isa<MmaEncodingAttr>()) {\n       processReplica(loc, rewriter, /*stNotRd*/ false, dstTy, outNumCTAsEachRep,\n                      multiDimRepId, outVec, paddedRepShape, outOrd, outVals,"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "file_content_changes": "@@ -68,18 +68,7 @@ SmallVector<unsigned> getSizePerThread(Attribute layout) {\n     return SmallVector<unsigned>(blockedLayout.getSizePerThread().begin(),\n                                  blockedLayout.getSizePerThread().end());\n   } else if (auto sliceLayout = layout.dyn_cast<SliceEncodingAttr>()) {\n-    unsigned dim = sliceLayout.getDim();\n-    auto parent = sliceLayout.getParent();\n-    if (auto blockedParent = parent.dyn_cast<BlockedEncodingAttr>()) {\n-      SmallVector<unsigned> sizePerThread(\n-          blockedParent.getSizePerThread().begin(),\n-          blockedParent.getSizePerThread().end());\n-      sizePerThread.erase(sizePerThread.begin() + dim);\n-      return sizePerThread;\n-    } else {\n-      assert(0 && \"SliceEncodingAttr with parent other than \"\n-                  \"BlockedEncodingAttr not implemented\");\n-    }\n+    return getSizePerThread(sliceLayout.getParent());\n   } else if (auto mmaLayout = layout.dyn_cast<MmaEncodingAttr>()) {\n     assert(mmaLayout.getVersion() == 2 &&\n            \"mmaLayout version = 1 is not implemented yet\");\n@@ -144,6 +133,19 @@ SmallVector<unsigned> getOrder(const Attribute &layout) {\n                                  blockedLayout.getOrder().end());\n   } else if (auto mmaLayout = layout.dyn_cast<MmaEncodingAttr>()) {\n     return SmallVector<unsigned>{1, 0};\n+  } else if (auto sliceLayout = layout.dyn_cast<SliceEncodingAttr>()) {\n+    SmallVector<unsigned> parentOrder = getOrder(sliceLayout.getParent());\n+    unsigned dim = sliceLayout.getDim();\n+    SmallVector<unsigned> order;\n+    for (unsigned d : parentOrder) {\n+      if (d == dim)\n+        continue;\n+      else if (d > dim)\n+        order.push_back(d - 1);\n+      else\n+        order.push_back(d);\n+    }\n+    return order;\n   } else if (auto sharedLayout = layout.dyn_cast<SharedEncodingAttr>()) {\n     return SmallVector<unsigned>(sharedLayout.getOrder().begin(),\n                                  sharedLayout.getOrder().end());"}, {"filename": "python/tests/test_core.py", "status": "modified", "additions": 58, "deletions": 54, "changes": 112, "file_content_changes": "@@ -493,61 +493,65 @@ def make_ptr_str(name, shape):\n \n \n # TODO: handle `%4 = triton_gpu.convert_layout %3 : (tensor<32xi32, #blocked0>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>``\n-# @pytest.mark.parametrize(\"expr, dtype_str\", [\n-#     (f'x[{s}]', d)\n-#     for s in ['None, :', ':, None', 'None, :, :', ':, :, None']\n-#     for d in ['int32', 'uint32', 'uint16']\n-# ])\n-# def test_index1d(expr, dtype_str, device='cuda'):\n-#     rank_x = expr.count(':')\n-#     rank_y = expr.count(',') + 1\n-#     shape_x = [32 for _ in range(rank_x)]\n-#     shape_z = [32 for _ in range(rank_y)]\n-#     shape_z_rank_mismatch = [32 for _ in range(rank_y + 1)]\n-#     shape_z_dim_mismatch = [64 for _ in range(rank_y)]\n-\n-#     # Triton kernel\n-#     @triton.jit\n-#     def kernel(Z, X, SIZE: tl.constexpr):\n-#         m = tl.arange(0, SIZE)\n-#         n = tl.arange(0, SIZE)\n-#         x = tl.load(X_PTR_EXPR)\n-#         z = GENERATE_TEST_HERE\n-#         tl.store(Z_PTR_EXPR, z)\n-\n-#     def generate_kernel(shape_x, shape_z):\n-#         to_replace = {\n-#             'X_PTR_EXPR': make_ptr_str('X', shape_x),\n-#             'Z_PTR_EXPR': make_ptr_str('Z', shape_z),\n-#             'GENERATE_TEST_HERE': expr,\n-#         }\n-#         return patch_kernel(kernel, to_replace)\n-\n-#     kernel_match = generate_kernel(shape_x, shape_z)\n-#     kernel_dim_mismatch = generate_kernel(shape_x, shape_z_dim_mismatch)\n-#     kernel_rank_mismatch = generate_kernel(shape_x, shape_z_rank_mismatch)\n+@pytest.mark.parametrize(\"expr, dtype_str\", [\n+    (f'x[{s}]', d)\n+    for s in ['None, :', ':, None',\n+              # TODO: 3D\n+              #  'None, :, :',\n+              #  ':, :, None'\n+              ]\n+    for d in ['int32', 'uint32', 'uint16']\n+])\n+def test_index1d(expr, dtype_str, device='cuda'):\n+    rank_x = expr.count(':')\n+    rank_y = expr.count(',') + 1\n+    shape_x = [32 for _ in range(rank_x)]\n+    shape_z = [32 for _ in range(rank_y)]\n+    shape_z_rank_mismatch = [32 for _ in range(rank_y + 1)]\n+    shape_z_dim_mismatch = [64 for _ in range(rank_y)]\n+\n+    # Triton kernel\n+    @triton.jit\n+    def kernel(Z, X, SIZE: tl.constexpr):\n+        m = tl.arange(0, SIZE)\n+        n = tl.arange(0, SIZE)\n+        x = tl.load(X_PTR_EXPR)\n+        z = GENERATE_TEST_HERE\n+        tl.store(Z_PTR_EXPR, z)\n \n-#     # torch result\n-#     x = numpy_random(shape_x, dtype_str=dtype_str)\n-#     y = np.zeros(shape_z, dtype=getattr(np, dtype_str))\n-#     z_ref = eval(expr) + y\n-#     # triton result\n-#     z_tri = to_triton(np.empty_like(z_ref), device=device)\n-#     x_tri = to_triton(x)\n-#     kernel_match[(1, )](z_tri, x_tri, num_warps=1, SIZE=shape_x[0])\n-#     # compare\n-#     assert (z_ref == to_numpy(z_tri)).all()\n-\n-#     def catch_compilation_error(kernel):\n-#         try:\n-#             kernel[(1, )](z_tri, x_tri, num_warps=1, SIZE=shape_x[0])\n-#         except triton.CompilationError as e:\n-#             np.testing.assert_(True)\n-#         except BaseException:\n-#             np.testing.assert_(False)\n-\n-#     catch_compilation_error(kernel_dim_mismatch)\n-#     catch_compilation_error(kernel_rank_mismatch)\n+    def generate_kernel(shape_x, shape_z):\n+        to_replace = {\n+            'X_PTR_EXPR': make_ptr_str('X', shape_x),\n+            'Z_PTR_EXPR': make_ptr_str('Z', shape_z),\n+            'GENERATE_TEST_HERE': expr,\n+        }\n+        return patch_kernel(kernel, to_replace)\n+\n+    kernel_match = generate_kernel(shape_x, shape_z)\n+    kernel_dim_mismatch = generate_kernel(shape_x, shape_z_dim_mismatch)\n+    kernel_rank_mismatch = generate_kernel(shape_x, shape_z_rank_mismatch)\n+\n+    # torch result\n+    x = numpy_random(shape_x, dtype_str=dtype_str)\n+    y = np.zeros(shape_z, dtype=getattr(np, dtype_str))\n+    z_ref = eval(expr) + y\n+    # triton result\n+    z_tri = to_triton(np.empty_like(z_ref), device=device)\n+    x_tri = to_triton(x)\n+    kernel_match[(1, )](z_tri, x_tri, num_warps=1, SIZE=shape_x[0])\n+    # compare\n+    assert (z_ref == to_numpy(z_tri)).all()\n+\n+    def catch_compilation_error(kernel):\n+        try:\n+            kernel[(1, )](z_tri, x_tri, num_warps=1, SIZE=shape_x[0])\n+        except triton.CompilationError as e:\n+            np.testing.assert_(True)\n+        except BaseException:\n+            np.testing.assert_(False)\n+\n+    catch_compilation_error(kernel_dim_mismatch)\n+    catch_compilation_error(kernel_rank_mismatch)\n \n \n # # ---------------"}, {"filename": "python/tests/test_math_ops.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -13,8 +13,8 @@ def math_kernel(x1_ptr, x2_ptr, x3_ptr, x4_ptr, n, BLOCK_SIZE: tl.constexpr):\n \n     y1 = tl.sin(x1)\n     y2 = tl.libdevice.sin(x2)\n-    y3 = tl.libdevice.fdiv_rn(x3, x3)\n-    y4 = tl.libdevice.fmaf_rd(x4, x4, x4)\n+    y3 = tl.libdevice.div_rn(x3, x3)\n+    y4 = tl.libdevice.fma_rd(x4, x4, x4)\n \n     tl.store(x1_ptr + offsets, y1, mask=offsets < n)\n     tl.store(x2_ptr + offsets, y2, mask=offsets < n)"}, {"filename": "python/triton/language/libdevice.py", "status": "modified", "additions": 167, "deletions": 303, "changes": 470, "file_content_changes": "@@ -58,13 +58,7 @@ def mulhi(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mulhi\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umulhi\", core.dtype(\"uint32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def mul64hi(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n+                               (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n                                (core.dtype(\"uint64\"), core.dtype(\"uint64\"),): (\"__nv_umul64hi\", core.dtype(\"uint64\")),\n                                }, _builder)\n \n@@ -157,262 +151,138 @@ def saturatef(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def fmaf_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n @extern.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fast_fdividef(arg0, arg1, _builder=None):\n+def fast_dividef(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_fdividef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rn(arg0, arg1, _builder=None):\n+def div_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rz(arg0, arg1, _builder=None):\n+def div_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rd(arg0, arg1, _builder=None):\n+def div_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_ru(arg0, arg1, _builder=None):\n+def div_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rn(arg0, _builder=None):\n+def rcp_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rz(arg0, _builder=None):\n+def rcp_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rd(arg0, _builder=None):\n+def rcp_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_ru(arg0, _builder=None):\n+def rcp_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rn(arg0, _builder=None):\n+def sqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rz(arg0, _builder=None):\n+def sqrt_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rd(arg0, _builder=None):\n+def sqrt_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_ru(arg0, _builder=None):\n+def sqrt_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -425,114 +295,66 @@ def sqrt(arg0, _builder=None):\n \n \n @extern.extern\n-def dadd_rn(arg0, arg1, _builder=None):\n+def add_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rn\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rz(arg0, arg1, _builder=None):\n+def add_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rz\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rd(arg0, arg1, _builder=None):\n+def add_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rd\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_ru(arg0, arg1, _builder=None):\n+def add_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_ru\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rn(arg0, arg1, _builder=None):\n+def mul_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rn\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rz(arg0, arg1, _builder=None):\n+def mul_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rz\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rd(arg0, arg1, _builder=None):\n+def mul_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rd\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_ru(arg0, arg1, _builder=None):\n+def mul_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -624,7 +446,13 @@ def double2uint_ru(arg0, _builder=None):\n def int2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2double_rn\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -688,31 +516,55 @@ def float2uint_ru(arg0, _builder=None):\n def int2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rn\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rz\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rd\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_ru\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -853,71 +705,118 @@ def double2ull_ru(arg0, _builder=None):\n def ll2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rn\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rz\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rd\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_ru\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rn\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rz\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rd\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_ru\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def int_as_float(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int_as_float\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -928,6 +827,13 @@ def float_as_int(arg0, _builder=None):\n                                }, _builder)\n \n \n+@extern.extern\n+def uint_as_float(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n @extern.extern\n def float_as_uint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n@@ -1006,11 +912,9 @@ def fast_log10f(arg0, _builder=None):\n \n \n @extern.extern\n-def pow(arg0, arg1, _builder=None):\n+def fast_powf(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_powf\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_pow\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -1031,35 +935,39 @@ def rhadd(arg0, arg1, _builder=None):\n \n \n @extern.extern\n-def fsub_rn(arg0, arg1, _builder=None):\n+def sub_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rz(arg0, arg1, _builder=None):\n+def sub_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rd(arg0, arg1, _builder=None):\n+def sub_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_ru(arg0, arg1, _builder=None):\n+def sub_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frsqrt_rn(arg0, _builder=None):\n+def rsqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frsqrt_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n@@ -1098,16 +1006,18 @@ def nearbyint(arg0, _builder=None):\n \n \n @extern.extern\n-def isnanf(arg0, _builder=None):\n+def isnan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isnanf\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def signbitf(arg0, _builder=None):\n+def signbit(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_signbitf\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n@@ -1127,9 +1037,10 @@ def finitef(arg0, _builder=None):\n \n \n @extern.extern\n-def isinff(arg0, _builder=None):\n+def isinf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isinff\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n@@ -1550,10 +1461,12 @@ def fma(arg0, arg1, arg2, _builder=None):\n \n \n @extern.extern\n-def powi(arg0, arg1, _builder=None):\n+def pow(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_powif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_powi\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_pow\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -1605,57 +1518,8 @@ def logb(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def signbitd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n @extern.extern\n def isfinited(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_isfinited\", core.dtype(\"int32\")),\n                                }, _builder)\n-\n-\n-@extern.extern\n-def isinfd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def isnand(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)"}, {"filename": "python/triton/tools/build_extern.py", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "file_content_changes": "@@ -0,0 +1,348 @@\n+import argparse\n+import subprocess\n+from abc import ABC, abstractmethod\n+\n+\n+class Symbol:\n+    def __init__(self, name: str, op_name: str, ret_type: str, arg_names: list, arg_types: list) -> None:\n+        '''\n+        A symbol is a function declaration.\n+        :param name: name of the symbol\n+        :param op_name: name of the operation\n+        :param ret_type: return type of the operation\n+        :param arg_names: names of the arguments\n+        :param arg_types: types of the arguments\n+        '''\n+        self._name = name\n+        self._op_name = op_name\n+        self._ret_type = ret_type\n+        self._arg_names = arg_names\n+        self._arg_types = arg_types\n+\n+    @property\n+    def name(self):\n+        return self._name\n+\n+    @property\n+    def op_name(self):\n+        return self._op_name\n+\n+    @property\n+    def ret_type(self):\n+        return self._ret_type\n+\n+    @property\n+    def arg_names(self):\n+        return self._arg_names\n+\n+    @property\n+    def arg_types(self):\n+        return self._arg_types\n+\n+\n+def convert_type(type_str):\n+    if type_str == \"i32\":\n+        return \"int32\"\n+    elif type_str == \"u32\":\n+        return \"uint32\"\n+    elif type_str == \"i64\":\n+        return \"int64\"\n+    elif type_str == \"u64\":\n+        return \"uint64\"\n+    elif type_str == \"float\":\n+        return \"fp32\"\n+    elif type_str == \"double\":\n+        return \"fp64\"\n+    else:\n+        # ignore other types, such as pointer types\n+        return None\n+\n+\n+def to_unsigned(type_str):\n+    if type_str == \"int32\":\n+        return \"uint32\"\n+    elif type_str == \"int64\":\n+        return \"uint64\"\n+    else:\n+        return type_str\n+\n+\n+class ExternLibrary(ABC):\n+    def __init__(self, name: str, path: str, format: bool = True, grouping: bool = True) -> None:\n+        '''\n+        Abstract class for extern library.\n+        :param name: name of the library\n+        :param path: path of the library\n+        :param format: whether to format the generated stub file\n+        '''\n+        self._name = name\n+        self._path = path\n+        self._symbols = {}\n+        self._format = True\n+        self._grouping = grouping\n+\n+    @property\n+    def name(self):\n+        return self._name\n+\n+    @property\n+    def path(self):\n+        return self._path\n+\n+    @property\n+    def symbols(self):\n+        return self._symbols\n+\n+    @property\n+    def grouping(self):\n+        return self._grouping\n+\n+    @abstractmethod\n+    def parse_symbols(self, input_file):\n+        pass\n+\n+    @abstractmethod\n+    def _output_stubs(self) -> str:\n+        pass\n+\n+    def generate_stub_file(self, output_dir):\n+        file_str = self._output_stubs()\n+        if file_str is None or len(file_str) == 0:\n+            raise Exception(\"file_str is empty\")\n+\n+        output_file = f\"{output_dir}/{self._name}.py\"\n+        with open(output_file, \"w\") as f:\n+            f.write(file_str)\n+            f.close()\n+            if self._format:\n+                subprocess.Popen([\"autopep8\", \"-a\", \"-r\", \"-i\", output_file],\n+                                 stdout=subprocess.PIPE).communicate()\n+                subprocess.Popen([\"isort\", output_file], stdout=subprocess.PIPE).communicate()\n+\n+\n+class Libdevice(ExternLibrary):\n+    def __init__(self, path) -> None:\n+        '''\n+        Constructor for Libdevice.\n+        :param path: path of the libdevice library\n+        '''\n+        super().__init__(\"libdevice\", path)\n+        self._symbol_groups = {}\n+\n+    def _extract_symbol(self, line):\n+        # Extract symbols from line in the following format:\n+        # \"define [internal] <ret_type> @<name>(<arg_types>,)\"\n+        entries = line.split(\"@\")\n+        ret_str = entries[0]\n+        func_str = entries[1]\n+        # Get ret_type, skip internal symbols\n+        ret_strs = ret_str.split()\n+        if ret_strs[1] == \"internal\":\n+            return None\n+        ret_type = convert_type(ret_strs[1])\n+        if ret_type is None:\n+            return None\n+        # Get function name\n+        func_strs = func_str.split(\"(\")\n+        func_name = func_strs[0].replace(\"@\", \"\")\n+        op_name = func_name.replace(\"__nv_\", \"\")\n+        if 'ieee' in op_name:\n+            return None\n+        # Get arg_types\n+        arg_strs = func_strs[1].split(\",\")\n+        arg_types = []\n+        arg_names = []\n+        for i, arg_str in enumerate(arg_strs):\n+            arg_type = convert_type(arg_str.split()[0])\n+            if arg_type is None:\n+                return None\n+            arg_name = 'arg' + str(i)\n+            arg_types.append(arg_type)\n+            arg_names.append(arg_name)\n+        if op_name == \"sad\":\n+            # Special case for sad, where the last argument is an unsigned int\n+            arg_types[-1] = to_unsigned(arg_types[-1])\n+        elif op_name.startswith(\"u\"):\n+            # LLVM does not differentiate between signed and unsigned integer type.\n+            # We have to convert the types to unsigned\n+            ret_type = to_unsigned(ret_type)\n+            for i, arg_type in enumerate(arg_types):\n+                arg_types[i] = to_unsigned(arg_type)\n+        return Symbol(func_name, op_name, ret_type, arg_names, arg_types)\n+\n+    def _group_symbols(self):\n+        symbol_set = {}\n+        for symbol in self._symbols.values():\n+            op_name = symbol.op_name\n+            symbol_set[op_name] = symbol\n+\n+        # Group functions together by renaming.\n+        renaming = {\n+            'llabs': 'abs', 'acosf': 'acos', 'acoshf': 'acosh',\n+            'dadd_rd': 'add_rd', 'fadd_rd': 'add_rd', 'dadd_rn': 'add_rn',\n+            'fadd_rn': 'add_rn', 'dadd_ru': 'add_ru', 'fadd_ru': 'add_ru',\n+            'dadd_rz': 'add_rz', 'fadd_rz': 'add_rz', 'asinf': 'asin',\n+            'asinhf': 'asinh', 'atanf': 'atan', 'atan2f': 'atan2',\n+            'atanhf': 'atanh', 'brevll': 'brev', 'cbrtf': 'cbrt',\n+            'ceilf': 'ceil', 'clzll': 'clz', 'copysignf': 'copysign',\n+            'cosf': 'cos', 'coshf': 'cosh', 'cospif': 'cospi',\n+            'cyl_bessel_i0f': 'cyl_bessel_i0', 'cyl_bessel_i1f': 'cyl_bessel_i1',\n+            'fdiv_rd': 'div_rd', 'ddiv_rd': 'div_rd', 'fdiv_rn': 'div_rn',\n+            'ddiv_rn': 'div_rn', 'fdiv_ru': 'div_ru', 'ddiv_ru': 'div_ru',\n+            'fdiv_rz': 'div_rz', 'ddiv_rz': 'div_rz', 'erff': 'erf',\n+            'erfcf': 'erfc', 'erfcinvf': 'erfcinv', 'erfcxf': 'erfcx',\n+            'erfinvf': 'erfinv', 'expf': 'exp', 'exp10f': 'exp10',\n+            'exp2f': 'exp2', 'expm1f': 'expm1', 'fabsf': 'abs',\n+            'fabs': 'abs', 'fast_fdividef': 'fast_dividef',\n+            'fdimf': 'fdim', 'ffsll': 'ffs', 'floorf': 'floor',\n+            'fmaf': 'fma', 'fmaf_rd': 'fma_rd', 'fmaf_rn': 'fma_rn',\n+            'fmaf_ru': 'fma_ru', 'fmaf_rz': 'fma_rz', 'fmodf': 'fmod',\n+            'uhadd': 'hadd', 'hypotf': 'hypot', 'ilogbf': 'ilogb',\n+            'isinff': 'isinf', 'isinfd': 'isinf', 'isnanf': 'isnan',\n+            'isnand': 'isnan', 'j0f': 'j0', 'j1f': 'j1', 'jnf': 'jn',\n+            'ldexpf': 'ldexp', 'lgammaf': 'lgamma', 'llrintf': 'llrint',\n+            'llroundf': 'llround', 'logf': 'log', 'log10f': 'log10',\n+            'log1pf': 'log1p', 'log2f': 'log2', 'logbf': 'logb',\n+            'umax': 'max', 'llmax': 'max', 'ullmax': 'max', 'fmaxf': 'max',\n+            'fmax': 'max', 'umin': 'min', 'llmin': 'min', 'ullmin': 'min',\n+            'fminf': 'min', 'fmin': 'min', 'dmul_rd': 'mul_rd', 'fmul_rd': 'mul_rd',\n+            'dmul_rn': 'mul_rn', 'fmul_rn': 'mul_rn', 'dmul_ru': 'mul_ru',\n+            'fmul_ru': 'mul_ru', 'dmul_rz': 'mul_rz', 'fmul_rz': 'mul_rz',\n+            'umul24': 'mul24', 'umulhi': 'mulhi', 'mul64hi': 'mulhi',\n+            'umul64hi': 'mulhi', 'nearbyintf': 'nearbyint', 'nextafterf': 'nextafter',\n+            'norm3df': 'norm3d', 'norm4df': 'norm4d', 'normcdff': 'normcdf',\n+            'normcdfinvf': 'normcdfinv', 'popcll': 'popc', 'powif': 'pow', 'powi': 'pow',\n+            'powf': 'pow', 'rcbrtf': 'rcbrt', 'frcp_rd': 'rcp_rd', 'drcp_rd': 'rcp_rd',\n+            'frcp_rn': 'rcp_rn', 'drcp_rn': 'rcp_rn', 'frcp_ru': 'rcp_ru',\n+            'drcp_ru': 'rcp_ru', 'frcp_rz': 'rcp_rz', 'drcp_rz': 'rcp_rz',\n+            'remainderf': 'remainder', 'urhadd': 'rhadd', 'rhypotf': 'rhypot',\n+            'rintf': 'rint', 'rnorm3df': 'rnorm3d', 'rnorm4df': 'rnorm4d',\n+            'roundf': 'round', 'rsqrtf': 'rsqrt', 'frsqrt_rn': 'rsqrt_rn',\n+            'usad': 'sad', 'scalbnf': 'scalbn', 'signbitf': 'signbit',\n+            'signbitd': 'signbit', 'sinf': 'sin', 'sinhf': 'sinh',\n+            'sinpif': 'sinpi', 'sqrtf': 'sqrt', 'fsqrt_rd': 'sqrt_rd',\n+            'dsqrt_rd': 'sqrt_rd', 'fsqrt_rn': 'sqrt_rn', 'dsqrt_rn': 'sqrt_rn',\n+            'fsqrt_ru': 'sqrt_ru', 'dsqrt_ru': 'sqrt_ru', 'fsqrt_rz': 'sqrt_rz',\n+            'dsqrt_rz': 'sqrt_rz', 'fsub_rd': 'sub_rd', 'dsub_rd': 'sub_rd',\n+            'fsub_rn': 'sub_rn', 'dsub_rn': 'sub_rn', 'fsub_ru': 'sub_ru',\n+            'dsub_ru': 'sub_ru', 'fsub_rz': 'sub_rz', 'dsub_rz': 'sub_rz',\n+            'tanf': 'tan', 'tanhf': 'tanh', 'tgammaf': 'tgamma', 'truncf': 'trunc',\n+            'y0f': 'y0', 'y1f': 'y1', 'ynf': 'yn'\n+        }\n+\n+        for symbol in self._symbols.values():\n+            op_name = symbol.op_name\n+            if op_name in renaming:\n+                op_name = renaming[op_name]\n+                symbol._op_name = op_name\n+            if op_name in self._symbol_groups:\n+                self._symbol_groups[op_name].append(symbol)\n+            else:\n+                self._symbol_groups[op_name] = [symbol]\n+\n+    def parse_symbols(self, input_file):\n+        if len(self.symbols) > 0:\n+            return\n+        output = subprocess.check_output([\"grep\", \"define\", input_file]).decode().splitlines()\n+        for line in output:\n+            symbol = self._extract_symbol(line)\n+            if symbol is None:\n+                continue\n+            self._symbols[symbol.name] = symbol\n+\n+        self._group_symbols()\n+\n+    def _output_stubs(self):\n+        # Generate python functions in the following format:\n+        # @extern.extern\n+        # def <op_name>(<args>, _builder=None):\n+        #   arg_type_symbol_dict = {[arg_type]: {(symbol, ret_type)}}\n+        #   return extern.dispatch(\"libdevice\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n+        import_str = \"from . import core, extern\\n\"\n+        import_str += \"import os\\n\"\n+        header_str = \"LIBDEVICE_PATH = os.path.dirname(\\n\\tos.path.abspath(__file__)) + \\\"/libdevice.10.bc\\\"\\n\"\n+        func_str = \"\"\n+        for symbols in self._symbol_groups.values():\n+            func_str += \"@extern.extern\\n\"\n+            func_name_str = f\"def {symbols[0].op_name}(\"\n+            for arg_name in symbols[0].arg_names:\n+                func_name_str += f\"{arg_name}, \"\n+            func_name_str += \"_builder=None):\\n\"\n+\n+            return_str = f\"\\treturn extern.elementwise(\\\"{self._name}\\\", LIBDEVICE_PATH, [\"\n+            for arg_name in symbols[0].arg_names:\n+                return_str += f\"{arg_name}, \"\n+            return_str += \"], \\n\"\n+\n+            arg_type_symbol_dict_str = \"{\"\n+            for symbol in symbols:\n+                arg_type_symbol_dict_str += \"(\"\n+                for arg_type in symbol.arg_types:\n+                    arg_type_symbol_dict_str += f'core.dtype(\"{arg_type}\"),'\n+                ret_type = f'core.dtype(\"{symbol.ret_type}\")'\n+                arg_type_symbol_dict_str += \"): (\\\"\" + symbol.name + \"\\\", \" + ret_type + \"),\\n\"\n+            arg_type_symbol_dict_str += \"}\"\n+\n+            return_str += arg_type_symbol_dict_str\n+            return_str += \", _builder)\\n\"\n+\n+            func_str += func_name_str + return_str + \"\\n\"\n+        file_str = import_str + header_str + func_str\n+\n+        return file_str\n+\n+\n+class LLVMDisassembler:\n+    def __init__(self, path):\n+        '''\n+        Invoke llvm-dis to disassemble the given file.\n+        :param path: path to llvm-dis\n+        '''\n+        self._path = path\n+        self._ll_file = \"/tmp/extern_lib.ll\"\n+\n+    def disasm(self, lib_path):\n+        subprocess.Popen([self._path, lib_path, \"-o\", self.ll_file],\n+                         stdout=subprocess.PIPE).communicate()\n+\n+    @property\n+    def ll_file(self):\n+        return self._ll_file\n+\n+    @property\n+    def path(self):\n+        return self._path\n+\n+\n+extern_libs = [\"libdevice\"]\n+\n+\n+def build(llvm_dis_path, lib_path, lib_name, output_dir):\n+    '''\n+      Interface function to build the library file.\n+      :param llvm_dis_path: path to the llvm-dis binary\n+      :param lib_path: path to the external library file\n+      :param lib_name: name of the library\n+      :param output_dir: path to the output directory\n+    '''\n+    if lib_name == \"libdevice\":\n+        extern_lib = Libdevice(lib_path)\n+    else:\n+        raise Exception(f\"Unknown extern library: {lib_name}\")\n+\n+    llvm_disassembler = LLVMDisassembler(llvm_dis_path)\n+    llvm_disassembler.disasm(lib_path)\n+\n+    extern_lib.parse_symbols(llvm_disassembler.ll_file)\n+    extern_lib.generate_stub_file(output_dir)\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"--llvm-dis\", dest=\"llvm_dis_path\", help=\"Path to llvm-dis\", default=\"llvm-dis\")\n+    parser.add_argument(\"--lib-path\", dest=\"lib_path\", help=\"Path to the extern library\")\n+    parser.add_argument(\"--lib-name\", dest=\"lib_name\", help=\"Name of the extern library\")\n+    parser.add_argument(\"--output\", dest=\"output_dir\", help=\"Output file path\", default=\"/tmp/\")\n+    args = parser.parse_args()\n+\n+    build(args.llvm_dis_path, args.lib_path, args.lib_name, args.output_dir)"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "file_content_changes": "@@ -715,6 +715,32 @@ module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n   }\n }\n \n+// -----\n+#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>\n+module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n+  // CHECK-LABEL: convert_blocked1d_to_slice0\n+  func @convert_blocked1d_to_slice0(%src:tensor<32xi32, #blocked0>) {\n+    // CHECK-COUNT-4: llvm.load {{.*}} : !llvm.ptr<vector<1xi32>, 3>\n+    %cvt = triton_gpu.convert_layout %src : (tensor<32xi32, #blocked0>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n+    return\n+  }\n+}\n+\n+\n+// -----\n+#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>\n+module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n+  // CHECK-LABEL: convert_blocked1d_to_slice1\n+  func @convert_blocked1d_to_slice1(%src:tensor<32xi32, #blocked0>) {\n+    // CHECK-COUNT-32: llvm.load {{.*}} : !llvm.ptr<vector<1xi32>, 3>\n+    %cvt = triton_gpu.convert_layout %src : (tensor<32xi32, #blocked0>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+    return\n+  }\n+}\n+\n+\n // -----\n #blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [1, 0]}>\n #shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>"}]