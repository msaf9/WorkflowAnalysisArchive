[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPU.cpp", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "file_content_changes": "@@ -242,10 +242,17 @@ struct TritonLoadPattern : public OpConversionPattern<triton::LoadOp> {\n   LogicalResult\n   matchAndRewrite(triton::LoadOp op, OpAdaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n-    rewriter.replaceOpWithNewOp<triton::LoadOp>(\n-        op, typeConverter->convertType(op.getType()), adaptor.ptr(),\n-        adaptor.mask(), adaptor.other(), adaptor.cache(), adaptor.evict(),\n-        adaptor.isVolatile());\n+    if (op.getNumOperands() == 2) { // ptr & mask\n+      rewriter.replaceOpWithNewOp<triton::LoadOp>(\n+          op, typeConverter->convertType(op.getType()), adaptor.ptr(),\n+          adaptor.getOperands()[1], adaptor.other(), adaptor.cache(), adaptor.evict(),\n+          adaptor.isVolatile());\n+    } else {\n+      rewriter.replaceOpWithNewOp<triton::LoadOp>(\n+          op, typeConverter->convertType(op.getType()), adaptor.ptr(),\n+          adaptor.mask(), adaptor.other(), adaptor.cache(), adaptor.evict(),\n+          adaptor.isVolatile());\n+    }\n     return success();\n   }\n };"}]