[{"filename": "CMakeLists.txt", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "file_content_changes": "@@ -1,5 +1,7 @@\n-cmake_minimum_required(VERSION 3.6)\n+cmake_minimum_required(VERSION 3.20)\n \n+# Introduced in cmake 3.20\n+# https://cmake.org/cmake/help/latest/policy/CMP0116.html\n cmake_policy(SET CMP0116 OLD)\n \n include(ExternalProject)\n@@ -10,6 +12,7 @@ set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n project(triton)\n include(CTest)\n+\n if(NOT WIN32)\n   list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n endif()\n@@ -19,7 +22,7 @@ option(TRITON_BUILD_TUTORIALS \"Build C++ Triton tutorials\" ON)\n option(TRITON_BUILD_PYTHON_MODULE \"Build Python Triton bindings\" OFF)\n \n # Ensure Python3 vars are set correctly\n-#  used conditionally in this file and by lit tests\n+# used conditionally in this file and by lit tests\n \n # Customized release build type with assertions: TritonRelBuildWithAsserts\n set(CMAKE_C_FLAGS_TRITONRELBUILDWITHASSERTS \"-O2 -g\")\n@@ -32,7 +35,7 @@ if(NOT CMAKE_BUILD_TYPE)\n endif()\n \n if(NOT WIN32)\n-    find_library(TERMINFO_LIBRARY tinfo)\n+  find_library(TERMINFO_LIBRARY tinfo)\n endif()\n \n # Compiler flags\n@@ -42,22 +45,21 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n include_directories(${PYBIND11_INCLUDE_DIR})\n \n if(WIN32)\n-    SET(BUILD_SHARED_LIBS OFF)\n-    find_package(dlfcn-win32 REQUIRED)\n-    set(CMAKE_DL_LIBS dlfcn-win32::dl)\n+  SET(BUILD_SHARED_LIBS OFF)\n+  find_package(dlfcn-win32 REQUIRED)\n+  set(CMAKE_DL_LIBS dlfcn-win32::dl)\n endif()\n \n set(CMAKE_CXX_FLAGS \"${CMAKE_C_FLAGS} -D__STDC_FORMAT_MACROS  -fPIC -std=gnu++17 -fvisibility=hidden -fvisibility-inlines-hidden\")\n+\n if(APPLE)\n   set(CMAKE_OSX_DEPLOYMENT_TARGET 11.6)\n endif()\n \n-\n-\n-##########\n+# #########\n # LLVM\n-##########\n-if (NOT MLIR_DIR)\n+# #########\n+if(NOT MLIR_DIR)\n   if(NOT LLVM_LIBRARY_DIR)\n     if(WIN32)\n       find_package(LLVM 13 REQUIRED COMPONENTS nvptx amdgpu)\n@@ -73,12 +75,16 @@ if (NOT MLIR_DIR)\n     else()\n       find_package(LLVM 11 REQUIRED COMPONENTS \"nvptx;amdgpu\")\n     endif()\n+\n     message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\n+\n     # FindLLVM outputs LLVM_LIBRARY_DIRS but we expect LLVM_LIBRARY_DIR here\n     set(LLVM_LIBRARY_DIR ${LLVM_LIBRARY_DIRS})\n+\n     if(APPLE)\n       set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.14\")\n     endif()\n+\n   # sometimes we don't want to use llvm-config, since it may have been downloaded for some specific linux distros\n   else()\n     set(LLVM_LDFLAGS \"-L${LLVM_LIBRARY_DIR}\")\n@@ -138,37 +144,38 @@ if (NOT MLIR_DIR)\n       libLLVMAnalysis.a\n     )\n   endif()\n-  set (MLIR_DIR ${LLVM_LIBRARY_DIR}/cmake/mlir)\n+\n+  set(MLIR_DIR ${LLVM_LIBRARY_DIR}/cmake/mlir)\n endif()\n \n # Python module\n if(TRITON_BUILD_PYTHON_MODULE)\n-    message(STATUS \"Adding Python module\")\n-    set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n-    set(PYTHON_SRC ${PYTHON_SRC_PATH}/main.cc ${PYTHON_SRC_PATH}/triton.cc)\n-    include_directories(\".\" ${PYTHON_SRC_PATH})\n-    if (PYTHON_INCLUDE_DIRS)\n-      include_directories(${PYTHON_INCLUDE_DIRS})\n-    else()\n-      find_package(Python3 REQUIRED COMPONENTS Development Interpreter)\n-      include_directories(${Python3_INCLUDE_DIRS})\n-      link_directories(${Python3_LIBRARY_DIRS})\n-      link_libraries(${Python3_LIBRARIES})\n-      add_link_options(${Python3_LINK_OPTIONS})\n-    endif()\n+  message(STATUS \"Adding Python module\")\n+  set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n+  set(PYTHON_SRC ${PYTHON_SRC_PATH}/main.cc ${PYTHON_SRC_PATH}/triton.cc)\n+  include_directories(\".\" ${PYTHON_SRC_PATH})\n+\n+  if(PYTHON_INCLUDE_DIRS)\n+    include_directories(${PYTHON_INCLUDE_DIRS})\n+  else()\n+    find_package(Python3 REQUIRED COMPONENTS Development Interpreter)\n+    include_directories(${Python3_INCLUDE_DIRS})\n+    link_directories(${Python3_LIBRARY_DIRS})\n+    link_libraries(${Python3_LIBRARIES})\n+    add_link_options(${Python3_LINK_OPTIONS})\n+  endif()\n endif()\n \n # # Triton\n # file(GLOB_RECURSE LIBTRITON_SRC lib/*.cc)\n # if (WIN32 AND TRITON_BUILD_PYTHON_MODULE)\n-#     Python3_add_library(triton SHARED ${LIBTRITON_SRC} ${PYTHON_SRC})\n-#     set_target_properties(triton PROPERTIES SUFFIX \".pyd\")\n-#     set_target_properties(triton PROPERTIES PREFIX \"lib\")\n+# Python3_add_library(triton SHARED ${LIBTRITON_SRC} ${PYTHON_SRC})\n+# set_target_properties(triton PROPERTIES SUFFIX \".pyd\")\n+# set_target_properties(triton PROPERTIES PREFIX \"lib\")\n # else()\n-#     add_library(triton SHARED ${LIBTRITON_SRC} ${PYTHON_SRC})\n+# add_library(triton SHARED ${LIBTRITON_SRC} ${PYTHON_SRC})\n # endif()\n \n-\n # MLIR\n find_package(MLIR REQUIRED CONFIG PATHS ${MLIR_DIR})\n \n@@ -186,14 +193,13 @@ include_directories(${MLIR_INCLUDE_DIRS})\n include_directories(${LLVM_INCLUDE_DIRS})\n include_directories(${PROJECT_SOURCE_DIR}/include)\n include_directories(${PROJECT_BINARY_DIR}/include) # Tablegen'd files\n-# link_directories(${LLVM_LIBRARY_DIR})\n \n+# link_directories(${LLVM_LIBRARY_DIR})\n add_subdirectory(include)\n add_subdirectory(lib)\n add_subdirectory(bin)\n \n # find_package(PythonLibs REQUIRED)\n-\n set(TRITON_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n set(TRITON_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\n \n@@ -210,6 +216,7 @@ if(TRITON_BUILD_PYTHON_MODULE)\n     TritonPTX\n     ${dialect_libs}\n     ${conversion_libs}\n+\n     # optimizations\n     MLIRPass\n     MLIRTransforms\n@@ -221,6 +228,7 @@ if(TRITON_BUILD_PYTHON_MODULE)\n     MLIRNVVMToLLVMIRTranslation\n     MLIRIR\n   )\n+\n   if(WIN32)\n     target_link_libraries(triton PRIVATE ${LLVM_LIBRARIES} ${CMAKE_DL_LIBS}\n       ${TRITON_LIBRARIES}\n@@ -234,21 +242,23 @@ if(TRITON_BUILD_PYTHON_MODULE)\n       ${TRITON_LIBRARIES}\n     )\n   endif()\n-  \n+\n   target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\n endif()\n \n-if (UNIX AND NOT APPLE)\n+if(UNIX AND NOT APPLE)\n   set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--exclude-libs,ALL\")\n endif()\n \n if(TRITON_BUILD_PYTHON_MODULE AND NOT WIN32)\n-    set(CMAKE_SHARED_LIBRARY_SUFFIX \".so\")\n-    # Check if the platform is MacOS\n-    if(APPLE)\n-        set(PYTHON_LDFLAGS \"-undefined dynamic_lookup -flto\")\n-    endif()\n-    target_link_libraries(triton ${CUTLASS_LIBRARIES} ${PYTHON_LDFLAGS})\n+  set(CMAKE_SHARED_LIBRARY_SUFFIX \".so\")\n+\n+  # Check if the platform is MacOS\n+  if(APPLE)\n+    set(PYTHON_LDFLAGS \"-undefined dynamic_lookup -flto\")\n+  endif()\n+\n+  target_link_libraries(triton ${CUTLASS_LIBRARIES} ${PYTHON_LDFLAGS})\n endif()\n \n add_subdirectory(test)"}, {"filename": "README.md", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "file_content_changes": "@@ -25,7 +25,7 @@ You can install the latest stable release of Triton from pip:\n ```bash\n pip install triton\n ```\n-Binary wheels are available for CPython 3.6-3.9 and PyPy 3.6-3.7.\n+Binary wheels are available for CPython 3.6-3.11 and PyPy 3.7-3.9.\n \n And the latest nightly release:\n \n@@ -44,12 +44,11 @@ pip install -e .\n \n # Changelog\n \n-Version 1.1 is out! New features include:\n+Version 2.0 is out! New features include:\n - Many, many bugfixes\n-- More documentation\n-- Automatic on-disk caching of compiled binary objects\n-- Random Number Generation\n-- Faster (up to 2x on A100), cleaner blocksparse ops\n+- Performance improvements\n+- Backend rewritten to use MLIR\n+- Support for kernels that contain back-to-back matmuls (e.g., flash attention)\n \n # Contributing\n \n@@ -66,7 +65,3 @@ Supported Platforms:\n Supported Hardware:\n   * NVIDIA GPUs (Compute Capability 7.0+)\n   * Under development: AMD GPUs, CPUs\n-\n-# Disclaimer\n-\n-Triton is a fairly recent project, and it is under active development. We expect it to be pretty useful in a wide variety of cases, but don't be surprised if it's a bit rough around the edges :)"}, {"filename": "python/setup.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -208,14 +208,14 @@ def build_extension(self, ext):\n \n setup(\n     name=\"triton\",\n-    version=\"2.0.0\",\n+    version=\"2.1.0\",\n     author=\"Philippe Tillet\",\n     author_email=\"phil@openai.com\",\n     description=\"A language and compiler for custom Deep Learning operations\",\n     long_description=\"\",\n     packages=[\"triton\", \"triton/_C\", \"triton/language\", \"triton/tools\", \"triton/impl\", \"triton/ops\", \"triton/runtime\", \"triton/ops/blocksparse\"],\n     install_requires=[\n-        \"cmake\",\n+        \"cmake>=3.20\",\n         \"filelock\",\n         \"torch\",\n         \"lit\","}]