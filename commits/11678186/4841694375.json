[{"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -620,10 +620,10 @@ struct ConvertLayoutOpConversion\n       // is implemented\n       SmallVector<Value> reorderedVals;\n       for (unsigned i = 0; i < vecVals.size(); i += 4) {\n-        reorderedVals.push_back(vecVals[i]);\n-        reorderedVals.push_back(vecVals[i + 2]);\n-        reorderedVals.push_back(vecVals[i + 1]);\n-        reorderedVals.push_back(vecVals[i + 3]);\n+        reorderedVals.push_back(bitcast(vecVals[i], i32_ty));\n+        reorderedVals.push_back(bitcast(vecVals[i + 2], i32_ty));\n+        reorderedVals.push_back(bitcast(vecVals[i + 1], i32_ty));\n+        reorderedVals.push_back(bitcast(vecVals[i + 3], i32_ty));\n       }\n \n       Value view = getTypeConverter()->packLLElements(loc, reorderedVals,"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "file_content_changes": "@@ -574,23 +574,9 @@ scf::ForOp LoopPipeliner::createNewForOp() {\n   DenseSet<Value> isModified;\n   for (Operation &op : forOp.getBody()->without_terminator()) {\n     // is modified\n-    bool preserveTypes =\n-        std::any_of(op.operand_begin(), op.operand_end(), [&](Value v) {\n-          return !mapping.contains(v) ||\n-                 v.getType() == mapping.lookup(v).getType();\n-        });\n     auto it = std::find(loads.begin(), loads.end(), op.getOperand(0));\n     if (it == loads.end()) {\n-      // if (isModified.contains(op.getResult(0)))\n-      if (preserveTypes)\n-        builder.clone(op, mapping);\n-      else\n-        Operation *newOp = cloneWithInferType(builder, &op, mapping);\n-      // else\n-      //   builder.clone(op, mapping);\n-      // llvm::outs() << \"PRINT    :   \" << op.getResult(0) << \" \"\n-      //              << isModified.contains(op.getResult(0)) << \" \"\n-      //              << mapping.lookup(op.getResult(0)) << \"\\n\";\n+      Operation *newOp = cloneWithInferType(builder, &op, mapping);\n       continue;\n     }\n "}, {"filename": "lib/Dialect/TritonGPU/Transforms/Utility.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "file_content_changes": "@@ -209,6 +209,15 @@ int simulateBackwardRematerialization(\n Operation *cloneWithInferType(mlir::OpBuilder &rewriter, Operation *op,\n                               IRMapping &mapping) {\n   Operation *newOp = rewriter.clone(*op, mapping);\n+  // if input types haven't changed, we're done\n+  bool preserveTypes =\n+      std::all_of(op->operand_begin(), op->operand_end(), [&](Value v) {\n+        return !mapping.contains(v) ||\n+               v.getType() == mapping.lookup(v).getType();\n+      });\n+  if (preserveTypes)\n+    return newOp;\n+\n   if (newOp->getNumResults() == 0)\n     return newOp;\n   auto origType = op->getResult(0).getType().dyn_cast<RankedTensorType>();"}]