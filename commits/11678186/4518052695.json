[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -88,15 +88,15 @@ jobs:\n         run: |\n           cd python\n           pip3 install cmake==3.24\n-          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -e '.[tests]'\n+          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -vvv -e '.[tests]'\n \n       - name: Install Triton on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n           cd python\n           pip3 uninstall --yes torch torchvision torchaudio\n           pip3 install --no-cache-dir --force-reinstall torch==1.13.1 --extra-index-url https://download.pytorch.org/whl/rocm5.2\n-          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -e '.[tests]'\n+          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -vvv -e '.[tests]'\n \n       - name: Run lit tests\n         if: ${{ env.BACKEND != 'ROCM'}}\n@@ -114,7 +114,7 @@ jobs:\n         run: |\n           cd python/test/unit/\n           pytest\n-      \n+\n       - name: Run python tests on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |"}, {"filename": "python/pyproject.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1,3 +1,3 @@\n [build-system]\n-requires = [\"setuptools\", \"packaging\", \"cmake>=3.20\", \"lit\"]\n+requires = [\"setuptools\", \"cmake>=3.20\", \"lit\"]\n build-backend = \"setuptools.build_meta\""}, {"filename": "python/setup.py", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "file_content_changes": "@@ -153,12 +153,9 @@ def run(self):\n                 \"CMake must be installed to build the following extensions: \" + \", \".join(e.name for e in self.extensions)\n             )\n \n-        import packaging.version\n-\n-        cmake_version = packaging.version.parse(\n-            re.search(r\"version\\s*(?P<version>[\\d.]+)\", out.decode()).group(\"version\")\n-        )\n-        if cmake_version < packaging.version.parse(\"3.18.0\"):\n+        match = re.search(r\"version\\s*(?P<major>\\d+)\\.(?P<minor>\\d+)([\\d.]+)?\", out.decode())\n+        cmake_major, cmake_minor = int(match.group(\"major\")), int(match.group(\"minor\"))\n+        if (cmake_major, cmake_minor) < (3, 18):\n             raise RuntimeError(\"CMake >= 3.18.0 is required\")\n \n         for ext in self.extensions:"}]