[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "file_content_changes": "@@ -4604,9 +4604,8 @@ struct PrintfOpConversion\n \n     auto *context = rewriter.getContext();\n \n-    SmallVector<Type> argsType{\n-        LLVM::LLVMPointerType::get(IntegerType::get(context, 8)),\n-        LLVM::LLVMPointerType::get(IntegerType::get(context, 8))};\n+    SmallVector<Type> argsType{ptr_ty(IntegerType::get(context, 8)),\n+                               ptr_ty(IntegerType::get(context, 8))};\n     auto funcType = LLVM::LLVMFunctionType::get(i32_ty, argsType);\n \n     ConversionPatternRewriter::InsertionGuard guard(rewriter);\n@@ -4650,7 +4649,7 @@ struct PrintfOpConversion\n                 ConversionPatternRewriter &rewriter) const {\n     static const char formatStringPrefix[] = \"printfFormat_\";\n     assert(!msg.empty() && \"printf with empty string not support\");\n-    Type int8Ptr = LLVM::LLVMPointerType::get(i8_ty);\n+    Type int8Ptr = ptr_ty(i8_ty);\n \n     auto *context = rewriter.getContext();\n     auto moduleOp =\n@@ -4706,18 +4705,17 @@ struct PrintfOpConversion\n       }\n \n       Type structTy = LLVM::LLVMStructType::getLiteral(context, argTypes);\n-      auto allocated = rewriter.create<LLVM::AllocaOp>(\n-          UnknownLoc::get(context), LLVM::LLVMPointerType::get(structTy), one,\n-          /*alignment=*/0);\n+      auto allocated = rewriter.create<LLVM::AllocaOp>(UnknownLoc::get(context),\n+                                                       ptr_ty(structTy), one,\n+                                                       /*alignment=*/0);\n \n       for (const auto &entry : llvm::enumerate(newArgs)) {\n         auto index = rewriter.create<LLVM::ConstantOp>(\n             UnknownLoc::get(context), i32_ty,\n             rewriter.getI32IntegerAttr(entry.index()));\n         auto fieldPtr = rewriter.create<LLVM::GEPOp>(\n-            UnknownLoc::get(context),\n-            LLVM::LLVMPointerType::get(argTypes[entry.index()]), allocated,\n-            ArrayRef<Value>{zero, index});\n+            UnknownLoc::get(context), ptr_ty(argTypes[entry.index()]),\n+            allocated, ArrayRef<Value>{zero, index});\n         rewriter.create<LLVM::StoreOp>(UnknownLoc::get(context), entry.value(),\n                                        fieldPtr);\n       }"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -1190,7 +1190,6 @@ void init_triton_ir(py::module &&m) {\n            [](mlir::OpBuilder &self, const std::string &prefix,\n               const std::vector<mlir::Value> &values) -> void {\n              auto loc = self.getUnknownLoc();\n-             // llvm::StringRef prefixRef(prefix);\n              self.create<mlir::triton::PrintfOp>(\n                  loc,\n                  mlir::StringAttr::get(self.getContext(),"}]