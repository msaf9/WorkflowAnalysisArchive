[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "file_content_changes": "@@ -151,7 +151,6 @@ def visit_FunctionDef(self, node):\n         fn.set_is_kernel(self.is_kernel)\n         arg_values = []\n         idx = 0\n-        print(fn_name, self.is_kernel, self.constants)\n         for i, arg_name in enumerate(arg_names):\n             if i in self.constants:\n                 cst = self.constants[i]\n@@ -531,9 +530,9 @@ def visit_Call(self, node):\n             constexprs = [i for i, arg in enumerate(args) if isinstance(arg, triton.language.constexpr)]\n             constants = {i: args[i] for i in constexprs}\n             # generate call\n-            args = [arg for i, arg in enumerate(args) if i not in constexprs]\n-            arg_vals = [arg.handle for arg in args]\n-            arg_types = [arg.handle.type for i, arg in enumerate(args) if i not in constexprs]\n+            args = [None if i in constexprs else arg for i, arg in enumerate(args)]\n+            arg_vals = [arg.handle for arg in args if arg is not None]\n+            arg_types = [arg.type for arg in arg_vals]\n             fn_name = mangle_fn(fn.__name__, arg_types, constants)\n             # generate function def if necessary\n             if not self.module.has_function(fn_name):\n@@ -549,24 +548,28 @@ def visit_Call(self, node):\n         if hasattr(fn, '__self__') and self.is_triton_object(fn.__self__) or \\\n             sys.modules[fn.__module__] is triton.language.core:\n             ret = fn(*args, _builder=self.builder, **kws)\n+        if fn in self.builtins.values():\n+            args = [arg.value if isinstance(arg, triton.language.constexpr) else arg\n+                    for arg in args]\n+            ret = fn(*args, **kws)\n         # special case: dynamic parallelism\n         # in this case the core primitive returns a proxy\n-        if isinstance(ret, triton.language.core.LaunchProxy):\n-            ret_type  = _triton.ir.type.get_void(self.builder.context)\n-            arg_tys = [x.type for x in ret.args]\n-            prototype = _triton.ir.type.make_function(ret_type, arg_tys)\n-            gscope = sys.modules[ret.fn.fn.__module__].__dict__\n-            constants = ret.constants\n-            fn_name = mangle_fn(ret.fn.__name__, arg_tys, ret.constants)\n-            # TODO: clean-up attributes handling in function\n-            if not self.module.has_function(fn_name):\n-                attributes = {i: list(arg.parent.get_attrs(arg))[0].value for i, arg in enumerate(ret.args) \\\n-                        if isinstance(arg, _triton.ir.argument) and arg.parent.has_attr(i + 1) }\n-                generator = CodeGenerator(self.builder.context, prototype, gscope, attributes, constants, module=self.module, is_kernel=True)\n-                generator.visit(ret.fn.parse())\n-            symbol = self.module.get_function(fn_name)\n-            # TODO: should ret.args not include any constants ?\n-            ret = self.builder.launch(symbol, ret.args, ret.grid, ret.num_warps)\n+        # if isinstance(ret, triton.language.core.LaunchProxy):\n+        #     ret_type  = _triton.ir.type.get_void(self.builder.context)\n+        #     arg_tys = [x.type for x in ret.args]\n+        #     prototype = _triton.ir.type.make_function(ret_type, arg_tys)\n+        #     gscope = sys.modules[ret.fn.fn.__module__].__dict__\n+        #     constants = ret.constants\n+        #     fn_name = mangle_fn(ret.fn.__name__, arg_tys, ret.constants)\n+        #     # TODO: clean-up attributes handling in function\n+        #     if not self.module.has_function(fn_name):\n+        #         attributes = {i: list(arg.parent.get_attrs(arg))[0].value for i, arg in enumerate(ret.args) \\\n+        #                 if isinstance(arg, _triton.ir.argument) and arg.parent.has_attr(i + 1) }\n+        #         generator = CodeGenerator(self.builder.context, prototype, gscope, attributes, constants, module=self.module, is_kernel=True)\n+        #         generator.visit(ret.fn.parse())\n+        #     symbol = self.module.get_function(fn_name)\n+        #     # TODO: should ret.args not include any constants ?\n+        #     ret = self.builder.launch(symbol, ret.args, ret.grid, ret.num_warps)\n         return ret\n         # return fn(*args, **kws)\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -875,7 +875,7 @@ def sigmoid(x):\n \n @triton.jit\n @_add_math_1arg_docstr(\"softmax\")\n-def softmax(x, ieee_rounding=False):\n+def softmax(x, ieee_rounding: constexpr=False):\n     z = x - triton.language.max(x, 0)\n     num = triton.language.exp(z)\n     den = triton.language.sum(num, 0)"}]