[{"filename": "lib/Conversion/TritonGPUToLLVM/DotOpHelpers.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "file_content_changes": "@@ -100,20 +100,20 @@ struct DotOpMmaV1ConversionHelper {\n \n   static ArrayRef<unsigned> getMmaInstrShape() { return instrShape; }\n \n-  static Type getMatType(TensorType operand) {\n-    auto *ctx = operand.getContext();\n-    Type fp16Ty = type::f16Ty(ctx);\n-    Type vecTy = vec_ty(fp16Ty, 2);\n-    return struct_ty(SmallVector<Type>{vecTy});\n-  }\n-\n   static Type getMmaRetType(TensorType operand) {\n     auto *ctx = operand.getContext();\n     Type fp32Ty = type::f32Ty(ctx);\n     // f16*f16+f32->f32\n     return struct_ty(SmallVector<Type>{8, fp32Ty});\n   }\n \n+  static Type getMatType(TensorType operand) {\n+    auto *ctx = operand.getContext();\n+    Type fp16Ty = type::f16Ty(ctx);\n+    Type vecTy = vec_ty(fp16Ty, 2);\n+    return struct_ty(SmallVector<Type>{vecTy});\n+  }\n+\n   // Get the number of fp16x2 elements for $a.\n   unsigned getNumM(int M, bool isARow, bool isAVec4) const {\n     AParam param(isARow, isAVec4);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ViewOpToLLVM.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "file_content_changes": "@@ -92,7 +92,19 @@ struct SplatOpConversion\n           numElems =\n               helper.numElemsPerThreadB(shape, isBRow, isBVec4, bParam.vec);\n         }\n+        matTy = helper.getMatType(tensorTy);\n       }\n+\n+      auto numPackedElems = matTy.cast<LLVM::LLVMStructType>()\n+                                .getBody()[0]\n+                                .cast<VectorType>()\n+                                .getNumElements();\n+      retTy = vec_ty(elemType, numPackedElems);\n+      retVal = undef(retTy);\n+      for (auto i = 0; i < numPackedElems; ++i) {\n+        retVal = insert_element(retTy, retVal, constVal, i32_val(i));\n+      }\n+\n     } else if (auto blockedLayout = parent.dyn_cast<BlockedEncodingAttr>()) {\n       numElems = DotOpFMAConversionHelper::getNumElemsPerThread(shape, layout);\n     } else {"}, {"filename": "lib/Dialect/TritonGPU/Transforms/UpdateMmaForVolta.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -102,8 +102,8 @@ class CollectMmaToUpdateForVolta : public mlir::RewritePattern {\n     // TODO[Superjomn]: Share code with\n     // DotOpMmaV1ConversionHelper::AParam/BParam, since same code to compute the\n     // rep,spw and fpw.\n-    SmallVector<unsigned, 2> wpt({1, 1});\n-    SmallVector<unsigned, 2> wpt_nm1;\n+    SmallVector<unsigned> wpt({1, 1});\n+    SmallVector<unsigned> wpt_nm1;\n \n     SmallVector<int, 2> rep(2), spw(2);\n     std::array<int, 3> fpw{{2, 2, 1}};"}]