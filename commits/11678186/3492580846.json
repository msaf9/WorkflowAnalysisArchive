[{"filename": "python/src/triton.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -1294,9 +1294,9 @@ void init_triton_ir(py::module &&m) {\n void init_triton_translation(py::module &m) {\n   using ret = py::return_value_policy;\n \n-  m.def(\"get_shared_memory_size\", [](mlir::ModuleOp module) {\n-    mlir::Allocation allocation(module);\n-    return allocation.getSharedMemorySize();\n+  m.def(\"get_shared_memory_size\", [](mlir::ModuleOp mod) {\n+    auto shared = mod->getAttrOfType<mlir::IntegerAttr>(\"triton_gpu.shared\");\n+    return shared.getInt();\n   });\n \n   m.def("}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "file_content_changes": "@@ -1411,20 +1411,21 @@ def compile(fn, **kwargs):\n     for ir, (parse, compile) in list(stages.items())[first_stage:]:\n       path = fn_cache_manager._make_path(f\"{name}.{ir}\")\n       if ir == ext:\n-        module = parse(fn)\n+        next_module = parse(fn)\n       elif os.path.exists(path) and\\\n            os.path.getctime(path) == metadata[\"ctime\"][ir]:\n-        module = parse(path)\n+        next_module = parse(path)\n       else:\n-        module = compile(module)\n-        fn_cache_manager.put(module, f\"{name}.{ir}\")\n+        next_module = compile(module)\n+        fn_cache_manager.put(next_module, f\"{name}.{ir}\")\n       if os.path.exists(path):\n         metadata[\"ctime\"][ir] = os.path.getctime(path)\n-      asm[ir] = module if ir == \"cubin\" else str(module)\n-      if ir == \"ttgir\":\n+      asm[ir] = next_module if ir == \"cubin\" else str(next_module)\n+      if ir == \"llir\":\n         metadata[\"shared\"] = _triton.get_shared_memory_size(module)\n       if ir == \"ptx\":\n-        metadata[\"name\"] = ptx_get_kernel_name(module)\n+        metadata[\"name\"] = ptx_get_kernel_name(next_module)\n+      module = next_module\n     # write-back metadata\n     fn_cache_manager.put(json.dumps(metadata), f\"{name}.json\", binary=False)\n     # return handle to compiled kernel"}]