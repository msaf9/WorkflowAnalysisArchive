[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "file_content_changes": "@@ -117,24 +117,15 @@ struct FuncOpConversion : public FuncOpConversionBase {\n \n     auto ctx = funcOp->getContext();\n \n-    if (isROCM()) {\n-      // Set an attribute to indicate this function is a kernel entry.\n-      newFuncOp->setAttr(\"rocdl.kernel\",\n-                         rewriter.getIntegerAttr(type::u1Ty(ctx), 1));\n-\n-      // Set an attribute for maxntidx, it could be used in latter LLVM codegen\n-      newFuncOp->setAttr(\"rocdl.maxntid\",\n-                         rewriter.getIntegerAttr(i32_ty, 32 * numWarps));\n-    } else {\n-      // Set an attribute to indicate this function is a kernel entry.\n-      newFuncOp->setAttr(\"nvvm.kernel\",\n-                         rewriter.getIntegerAttr(type::u1Ty(ctx), 1));\n-\n-      // Set an attribute for maxntidx, it could be used in latter LLVM codegen\n-      // for `nvvm.annotation` metadata.\n-      newFuncOp->setAttr(\"nvvm.maxntid\",\n-                         rewriter.getIntegerAttr(i32_ty, 32 * numWarps));\n-    }\n+    // Set an attribute to indicate this function is a kernel entry.\n+    newFuncOp->setAttr(\"nvvm.kernel\",\n+                       rewriter.getIntegerAttr(type::u1Ty(ctx), 1));\n+    // if (!isROCM()) {\n+    // Set an attribute for maxntidx, it could be used in latter LLVM codegen\n+    // for `nvvm.annotation` metadata.\n+    newFuncOp->setAttr(\"nvvm.maxntid\",\n+                        rewriter.getIntegerAttr(i32_ty, 32 * numWarps));\n+    // }\n \n     rewriter.eraseOp(funcOp);\n     return success();"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -2,6 +2,8 @@\n \n module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK: llvm.func @test_empty_kernel(%arg0: i64, %arg1: !llvm.ptr<f16, 1>)\n+  // Here the 128 comes from the 4 in module attribute multiples 32\n+  // CHECK:  attributes {nvvm.kernel = 1 : ui1, nvvm.maxntid = [128 : i32]} {{.*}}\n   func.func @test_empty_kernel(%lb : index, %A : !tt.ptr<f16>) {\n     // CHECK:  llvm.return\n     return"}]