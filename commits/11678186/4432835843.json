[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "file_content_changes": "@@ -164,54 +164,16 @@ class MakeRangeOpAxisInfoVisitor final\n   }\n };\n \n-class ConstantOpAxisInfoVisitor final\n-    : public AxisInfoVisitorImpl<arith::ConstantOp> {\n-public:\n-  using AxisInfoVisitorImpl<arith::ConstantOp>::AxisInfoVisitorImpl;\n-\n-  AxisInfo\n-  getAxisInfo(arith::ConstantOp op,\n-              ArrayRef<const dataflow::Lattice<AxisInfo> *> operands) override {\n-    auto intAttr = op.getValue().dyn_cast<IntegerAttr>();\n-    auto boolAttr = op.getValue().dyn_cast<BoolAttr>();\n-    if (intAttr || boolAttr) {\n-      int64_t value{};\n-      if (intAttr)\n-        value = intAttr.getValue().getZExtValue();\n-      else\n-        value = boolAttr.getValue() ? 1 : 0;\n-      return AxisInfo(/*contiguity=*/{1},\n-                      /*divisibility=*/{highestPowOf2Divisor(value)},\n-                      /*constancy=*/{1},\n-                      /*knownConstantValue=*/{value});\n-    }\n-    // TODO: generalize to dense attr\n-    auto splatAttr = op.getValue().dyn_cast<SplatElementsAttr>();\n-    if (splatAttr && splatAttr.getElementType().isIntOrIndex()) {\n-      int64_t value = splatAttr.getSplatValue<APInt>().getZExtValue();\n-      TensorType ty = splatAttr.getType().cast<TensorType>();\n-      return AxisInfo(\n-          /*contiguity=*/AxisInfo::DimVectorT(ty.getRank(), 1),\n-          /*divisibility=*/\n-          AxisInfo::DimVectorT(ty.getRank(), highestPowOf2Divisor(value)),\n-          /*constancy=*/\n-          AxisInfo::DimVectorT(ty.getShape().begin(), ty.getShape().end()),\n-          /*knownConstantValue=*/{value});\n-    }\n-    return AxisInfo();\n-  }\n-};\n-\n-class LLVMConstantOpAxisInfoVisitor final\n-    : public AxisInfoVisitorImpl<LLVM::ConstantOp> {\n+template <typename OpTy>\n+class ConstantOpAxisInfoVisitor final : public AxisInfoVisitorImpl<OpTy> {\n public:\n-  using AxisInfoVisitorImpl<LLVM::ConstantOp>::AxisInfoVisitorImpl;\n+  using AxisInfoVisitorImpl<OpTy>::AxisInfoVisitorImpl;\n \n   AxisInfo\n-  getAxisInfo(LLVM::ConstantOp op,\n+  getAxisInfo(OpTy op,\n               ArrayRef<const dataflow::Lattice<AxisInfo> *> operands) override {\n-    auto intAttr = op.getValue().dyn_cast<IntegerAttr>();\n-    auto boolAttr = op.getValue().dyn_cast<BoolAttr>();\n+    auto intAttr = op.getValue().template dyn_cast<IntegerAttr>();\n+    auto boolAttr = op.getValue().template dyn_cast<BoolAttr>();\n     if (intAttr || boolAttr) {\n       int64_t value{};\n       if (intAttr)\n@@ -224,10 +186,10 @@ class LLVMConstantOpAxisInfoVisitor final\n                       /*knownConstantValue=*/{value});\n     }\n     // TODO: generalize to dense attr\n-    auto splatAttr = op.getValue().dyn_cast<SplatElementsAttr>();\n+    auto splatAttr = op.getValue().template dyn_cast<SplatElementsAttr>();\n     if (splatAttr && splatAttr.getElementType().isIntOrIndex()) {\n-      int64_t value = splatAttr.getSplatValue<APInt>().getZExtValue();\n-      TensorType ty = splatAttr.getType().cast<TensorType>();\n+      int64_t value = splatAttr.template getSplatValue<APInt>().getZExtValue();\n+      TensorType ty = splatAttr.getType().template cast<TensorType>();\n       return AxisInfo(\n           /*contiguity=*/AxisInfo::DimVectorT(ty.getRank(), 1),\n           /*divisibility=*/\n@@ -851,8 +813,11 @@ AxisInfoAnalysis::AxisInfoAnalysis(DataFlowSolver &solver)\n                   CastOpAxisInfoVisitor<triton::gpu::ConvertLayoutOp>,\n                   CastOpAxisInfoVisitor<mlir::UnrealizedConversionCastOp>,\n                   CastOpAxisInfoVisitor<triton::BitcastOp>>();\n+  // TODO: Remove rules for LLVM::ConstantOp, LLVM::AddOp\n+  // when scf.for supports integers induction variable\n   visitors.append<MakeRangeOpAxisInfoVisitor>();\n-  visitors.append<ConstantOpAxisInfoVisitor, LLVMConstantOpAxisInfoVisitor>();\n+  visitors.append<ConstantOpAxisInfoVisitor<arith::ConstantOp>,\n+                  ConstantOpAxisInfoVisitor<LLVM::ConstantOp>>();\n   visitors.append<AddSubOpAxisInfoVisitor<triton::AddPtrOp>,\n                   AddSubOpAxisInfoVisitor<arith::AddIOp>,\n                   AddSubOpAxisInfoVisitor<arith::SubIOp>,"}]