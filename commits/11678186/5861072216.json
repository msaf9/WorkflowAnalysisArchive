[{"filename": "include/triton/Conversion/TritonGPUToLLVM/Passes.td", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -27,7 +27,7 @@ def ConvertTritonGPUToLLVM : Pass<\"convert-triton-gpu-to-llvm\", \"mlir::ModuleOp\"\n         Option<\"computeCapability\", \"compute-capability\",\n                \"int32_t\", /*default*/\"80\",\n                \"device compute capability\">,\n-        Option<\"TmaMetadata\", \"tma-metadata\",\n+        Option<\"tmaMetadata\", \"tma-metadata\",\n                \"mlir::triton::gpu::TMAMetadataTy*\", /*default*/\"nullptr\",\n                \"tma metadata to the runtime\">,\n         Option<\"isROCM\", \"is-rocm\","}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "file_content_changes": "@@ -14,10 +14,12 @@ template <typename T> class OperationPass;\n \n namespace triton {\n \n-std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass(\n-    int computeCapability = 80,\n-    mlir::triton::gpu::TMAMetadataTy *tmaMetadata = nullptr,\n-    bool isROCM = false);\n+#define GEN_PASS_DECL\n+#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n+\n+std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass();\n+std::unique_ptr<OperationPass<ModuleOp>>\n+createConvertTritonGPUToLLVMPass(const ConvertTritonGPUToLLVMOptions &options);\n \n } // namespace triton\n "}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "file_content_changes": "@@ -40,13 +40,17 @@\n \n #include \"mlir/Dialect/ControlFlow/IR/ControlFlowOps.h\"\n \n+namespace mlir {\n+namespace triton {\n+#define GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM\n+#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n+} // namespace triton\n+} // namespace mlir\n+\n using namespace mlir;\n using namespace mlir::triton;\n namespace ttng = mlir::triton::nvidia_gpu;\n \n-#define GEN_PASS_CLASSES\n-#include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n-\n namespace {\n \n // pass ws related named attrs.\n@@ -372,15 +376,10 @@ class TritonLLVMConversionTarget : public ConversionTarget {\n   }\n };\n \n-class ConvertTritonGPUToLLVM\n-    : public ConvertTritonGPUToLLVMBase<ConvertTritonGPUToLLVM> {\n-\n-public:\n-  explicit ConvertTritonGPUToLLVM(int computeCapability,\n-                                  mlir::triton::gpu::TMAMetadataTy *tmaMetadata,\n-                                  bool isROCM)\n-      : computeCapability(computeCapability), tmaMetadata(tmaMetadata),\n-        isROCM(isROCM) {}\n+struct ConvertTritonGPUToLLVM\n+    : public triton::impl::ConvertTritonGPUToLLVMBase<ConvertTritonGPUToLLVM> {\n+  using ConvertTritonGPUToLLVMBase<\n+      ConvertTritonGPUToLLVM>::ConvertTritonGPUToLLVMBase;\n \n   void runOnOperation() override {\n     MLIRContext *context = &getContext();\n@@ -569,10 +568,6 @@ class ConvertTritonGPUToLLVM\n            CacheKeyDenseMapInfo>\n       indexCache;\n \n-  int computeCapability{};\n-  bool isROCM{};\n-  mlir::triton::gpu::TMAMetadataTy *tmaMetadata;\n-\n   void initSharedMemory(ModuleAllocation &allocation,\n                         TritonGPUToLLVMTypeConverter &typeConverter) {\n     ModuleOp mod = getOperation();\n@@ -862,12 +857,12 @@ class ConvertTritonGPUToLLVM\n namespace mlir {\n namespace triton {\n \n+std::unique_ptr<OperationPass<ModuleOp>> createConvertTritonGPUToLLVMPass() {\n+  return std::make_unique<ConvertTritonGPUToLLVM>();\n+}\n std::unique_ptr<OperationPass<ModuleOp>>\n-createConvertTritonGPUToLLVMPass(int computeCapability,\n-                                 mlir::triton::gpu::TMAMetadataTy *tmaMetadata,\n-                                 bool isROCM) {\n-  return std::make_unique<::ConvertTritonGPUToLLVM>(computeCapability,\n-                                                    tmaMetadata, isROCM);\n+createConvertTritonGPUToLLVMPass(const ConvertTritonGPUToLLVMOptions &options) {\n+  return std::make_unique<ConvertTritonGPUToLLVM>(options);\n }\n \n } // namespace triton"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -351,7 +351,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n   pm.addPass(mlir::createConvertSCFToCFPass());\n   pm.addPass(mlir::createConvertIndexToLLVMPass());\n   pm.addPass(\n-      createConvertTritonGPUToLLVMPass(computeCapability, &tmaInfos, isROCM));\n+      createConvertTritonGPUToLLVMPass({computeCapability, &tmaInfos, isROCM}));\n   pm.addPass(createConvertNVGPUToLLVMPass());\n   pm.addPass(mlir::createArithToLLVMConversionPass());\n   pm.addPass(mlir::createCanonicalizerPass());"}]