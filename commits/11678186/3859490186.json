[{"filename": "include/triton/Target/LLVMIR/LLVMIRTranslation.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -31,6 +31,10 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n std::unique_ptr<llvm::Module>\n translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module);\n \n+// Link against an external library\n+bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n+                   llvm::StringRef path);\n+\n } // namespace triton\n } // namespace mlir\n "}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -132,8 +132,8 @@ static void linkLibdevice(llvm::Module &module) {\n   module.addModuleFlag(reflect);\n }\n \n-static bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n-                          llvm::StringRef path) {\n+bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n+                   llvm::StringRef path) {\n   llvm::SMDiagnostic err;\n   auto &ctx = module.getContext();\n "}, {"filename": "lib/Target/PTX/PTXTranslation.cpp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "file_content_changes": "@@ -31,7 +31,37 @@ static bool findAndReplace(std::string &str, const std::string &begin,\n   return true;\n }\n \n+// When using the Math Dialect, it is possible that some ops (e.g., log) are\n+// lowered to a function call. In this case, we need to link the libdevice\n+// TODO(Keren): handle external linkage other than libdevice?\n+static void linkExternal(llvm::Module &module) {\n+  bool hasExternal = false;\n+  for (auto &func : module) {\n+    if (func.hasExternalLinkage()) {\n+      hasExternal = true;\n+      break;\n+    }\n+  }\n+\n+  if (hasExternal) {\n+    namespace fs = std::filesystem;\n+    // Using the default libdevice path:\n+    // [triton root dir]/python/triton/language/libdevice.10.bc\n+    static const fs::path libdevice = fs::path(__FILE__)\n+                                          .parent_path()\n+                                          .parent_path()\n+                                          .parent_path()\n+                                          .parent_path() /\n+                                      \"python\" / \"triton\" / \"language\" /\n+                                      \"libdevice.10.bc\";\n+    if (mlir::triton::linkExternLib(module, \"libdevice\", libdevice.string()))\n+      llvm::errs() << \"link failed for libdevice at path: \"\n+                   << libdevice.string();\n+  }\n+}\n+\n std::string translateLLVMIRToPTX(llvm::Module &module, int cc, int version) {\n+  linkExternal(module);\n   // LLVM version in use may not officially support target hardware\n   int maxNNVMCC = 75;\n   // options"}]