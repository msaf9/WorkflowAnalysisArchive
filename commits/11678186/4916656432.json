[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -2619,7 +2619,7 @@ def kernel(Out, call_type: tl.constexpr):\n             if call_type == \"attribute\":\n                 # call attribute\n                 a = o + 1\n-                a = a.to(tl.int32)\n+                a = a.to(tl.int32).to(tl.int32)\n                 o = a\n             else:\n                 a = o"}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "file_content_changes": "@@ -168,12 +168,21 @@ def contains_return_op(self, node):\n             pred = lambda s: self.contains_return_op(s)\n             return any(pred(s) for s in node.body)\n         elif isinstance(node, ast.Call):\n-            if isinstance(node.func, ast.Attribute):\n+            def check_undefined_name(cur_node):\n                 # Check if name is an undefined local variable,\n                 # which can only be a tensor or a constexpr\n-                name = node.func.value.id\n-                if name not in self.lscope and name not in self.gscope:\n-                    return False\n+                if isinstance(cur_node.func, ast.Attribute):\n+                    if isinstance(cur_node.func.value, ast.Name):\n+                        name = cur_node.func.value.id\n+                        if name not in self.lscope and name not in self.gscope:\n+                            return True\n+                        return False\n+                    # chain of calls\n+                    # e.g., tl.load(a).to(tl.float32)\n+                    return check_undefined_name(cur_node.func.value)\n+                return False\n+            if check_undefined_name(node):\n+                return False\n             fn = self.visit(node.func)\n             if isinstance(fn, JITFunction) and fn.noinline is False:\n                 old_gscope = self.gscope"}]