[{"filename": "python/test/unit/runtime/test_cache.py", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "file_content_changes": "@@ -1,7 +1,5 @@\n-import multiprocessing\n import os\n import shutil\n-from collections import namedtuple\n \n import pytest\n import torch\n@@ -198,72 +196,6 @@ def kernel_add_device(a, b, o, N: tl.constexpr):\n     assert inline_ttir != noinline_ttir\n \n \n-instance_descriptor = namedtuple(\"instance_descriptor\", [\"divisible_by_16\", \"equal_to_1\"])\n-\n-\n-def compile_fn(config, cc):\n-    @triton.jit\n-    def kernel_sub(a, b, o, N: tl.constexpr):\n-        idx = tl.arange(0, N)\n-        tl.store(o + idx, tl.load(a + idx) - tl.load(b + idx) * 777)\n-    triton.compile(\n-        fn=kernel_sub,\n-        signature={0: \"*fp32\", 1: \"*fp32\", 2: \"*fp32\"},\n-        device=0,\n-        constants={3: 32},\n-        configs=[config],\n-        warm_cache_only=True,\n-        cc=cc,\n-    )\n-\n-\n-def test_compile_in_subproc() -> None:\n-    major, minor = torch.cuda.get_device_capability(0)\n-    cc = major * 10 + minor\n-    config = instance_descriptor(tuple(range(4)), ())\n-\n-    multiprocessing.set_start_method('fork')\n-    proc = multiprocessing.Process(\n-        target=compile_fn,\n-        args=(config, cc))\n-    proc.start()\n-    proc.join()\n-    assert proc.exitcode == 0\n-\n-\n-def compile_fn_dot(config, cc):\n-    @triton.jit\n-    def kernel_dot(Z):\n-        offs = tl.arange(0, 16)[:, None] * 16 + tl.arange(0, 16)[None, :]\n-        z = tl.load(Z + offs)\n-        z = tl.dot(z, z)\n-        tl.store(Z + offs, z)\n-\n-    triton.compile(\n-        fn=kernel_dot,\n-        signature={0: \"*fp32\"},\n-        device=0,\n-        configs=[config],\n-        warm_cache_only=True,\n-        cc=cc,\n-    )\n-\n-\n-def test_compile_in_forked_subproc() -> None:\n-    reset_tmp_dir()\n-    major, minor = torch.cuda.get_device_capability(0)\n-    cc = major * 10 + minor\n-    config = instance_descriptor(tuple(range(1)), ())\n-\n-    assert multiprocessing.get_start_method() == 'fork'\n-    proc = multiprocessing.Process(\n-        target=compile_fn_dot,\n-        args=(config, cc))\n-    proc.start()\n-    proc.join()\n-    assert proc.exitcode == 0\n-\n-\n def test_memory_leak() -> None:\n     @triton.jit\n     def kernel(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.constexpr):"}, {"filename": "python/test/unit/runtime/test_subproc.py", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "file_content_changes": "@@ -0,0 +1,83 @@\n+import multiprocessing\n+import os\n+import shutil\n+from collections import namedtuple\n+\n+import torch\n+\n+import triton\n+import triton.language as tl\n+\n+tmpdir = \".tmp\"\n+\n+\n+def reset_tmp_dir():\n+    os.environ[\"TRITON_CACHE_DIR\"] = tmpdir\n+    if os.path.exists(tmpdir):\n+        shutil.rmtree(tmpdir)\n+\n+\n+instance_descriptor = namedtuple(\"instance_descriptor\", [\"divisible_by_16\", \"equal_to_1\"])\n+\n+\n+def compile_fn(config, cc):\n+    @triton.jit\n+    def kernel_sub(a, b, o, N: tl.constexpr):\n+        idx = tl.arange(0, N)\n+        tl.store(o + idx, tl.load(a + idx) - tl.load(b + idx) * 777)\n+    triton.compile(\n+        fn=kernel_sub,\n+        signature={0: \"*fp32\", 1: \"*fp32\", 2: \"*fp32\"},\n+        device=0,\n+        constants={3: 32},\n+        configs=[config],\n+        warm_cache_only=True,\n+        cc=cc,\n+    )\n+\n+\n+def test_compile_in_subproc() -> None:\n+    major, minor = torch.cuda.get_device_capability(0)\n+    cc = major * 10 + minor\n+    config = instance_descriptor(tuple(range(4)), ())\n+\n+    multiprocessing.set_start_method('fork')\n+    proc = multiprocessing.Process(\n+        target=compile_fn,\n+        args=(config, cc))\n+    proc.start()\n+    proc.join()\n+    assert proc.exitcode == 0\n+\n+\n+def compile_fn_dot(config, cc):\n+    @triton.jit\n+    def kernel_dot(Z):\n+        offs = tl.arange(0, 16)[:, None] * 16 + tl.arange(0, 16)[None, :]\n+        z = tl.load(Z + offs)\n+        z = tl.dot(z, z)\n+        tl.store(Z + offs, z)\n+\n+    triton.compile(\n+        fn=kernel_dot,\n+        signature={0: \"*fp32\"},\n+        device=0,\n+        configs=[config],\n+        warm_cache_only=True,\n+        cc=cc,\n+    )\n+\n+\n+def test_compile_in_forked_subproc() -> None:\n+    reset_tmp_dir()\n+    major, minor = torch.cuda.get_device_capability(0)\n+    cc = major * 10 + minor\n+    config = instance_descriptor(tuple(range(1)), ())\n+\n+    assert multiprocessing.get_start_method() == 'fork'\n+    proc = multiprocessing.Process(\n+        target=compile_fn_dot,\n+        args=(config, cc))\n+    proc.start()\n+    proc.join()\n+    assert proc.exitcode == 0"}]