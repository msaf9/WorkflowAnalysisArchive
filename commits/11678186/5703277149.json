[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1976,7 +1976,7 @@ def var_mean_kernel(X, out_mean, out_var, BLOCK: tl.constexpr):\n def test_permute(dtype_str, shape, perm, device):\n     check_type_supported(dtype_str, device)  # bfloat16 on cc < 80 will not be tested\n     if is_hip():\n-        pytest.skip(f\"test_permute Not supported: memory out of resource on HIP.\")\n+        pytest.skip(f\"test_permute is not supported in HIP\")\n \n     # triton kernel\n     @triton.jit"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -268,9 +268,12 @@ def add_cuda_stages(arch, context, num_warps, num_stages, extern_libs, stages):\n def compile(fn, **kwargs):\n     # Get device type to decide which backend should be used\n     device_type = kwargs.get(\"device_type\", \"cuda\")\n-    _device_backend = get_backend(device_type)\n+    if is_hip():\n+        device_type = \"hip\"\n \n     if device_type == \"cuda\":\n+        _device_backend = get_backend(device_type)\n+        assert _device_backend\n         arch = get_architecture_descriptor(kwargs.get(\"cc\", None))\n     elif device_type == \"hip\":\n         _device_backend = get_backend(device_type)"}]