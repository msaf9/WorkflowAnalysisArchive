[{"filename": "CMakeLists.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -1,8 +1,10 @@\n-cmake_minimum_required(VERSION 3.20)\n+cmake_minimum_required(VERSION 3.18)\n \n+if(POLICY CMP0116)\n # Introduced in cmake 3.20\n # https://cmake.org/cmake/help/latest/policy/CMP0116.html\n-cmake_policy(SET CMP0116 OLD)\n+  cmake_policy(SET CMP0116 OLD)\n+endif()\n \n include(ExternalProject)\n "}, {"filename": "bin/CMakeLists.txt", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "file_content_changes": "@@ -1,10 +1,3 @@\n-add_custom_target(copy-FileCheck ALL\n-    COMMAND ${CMAKE_COMMAND} -E copy\n-        \"${LLVM_LIBRARY_DIR}/../bin/FileCheck\"\n-        \"${CMAKE_CURRENT_BINARY_DIR}/FileCheck\"\n-    COMMENT \"Copying FileCheck to the current directory\"\n-)\n-\n get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)\n get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)\n "}, {"filename": "python/setup.py", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "file_content_changes": "@@ -9,6 +9,7 @@\n import tempfile\n import urllib.request\n from distutils.version import LooseVersion\n+from pathlib import Path\n from typing import NamedTuple\n \n from setuptools import Extension, setup\n@@ -38,7 +39,6 @@ class Package(NamedTuple):\n     package: str\n     name: str\n     url: str\n-    test_file: str\n     include_flag: str\n     lib_flag: str\n     syspath_var_name: str\n@@ -49,7 +49,7 @@ class Package(NamedTuple):\n def get_pybind11_package_info():\n     name = \"pybind11-2.10.0\"\n     url = \"https://github.com/pybind/pybind11/archive/refs/tags/v2.10.0.tar.gz\"\n-    return Package(\"pybind11\", name, url, \"include/pybind11/pybind11.h\", \"PYBIND11_INCLUDE_DIR\", \"\", \"PYBIND11_SYSPATH\")\n+    return Package(\"pybind11\", name, url, \"PYBIND11_INCLUDE_DIR\", \"\", \"PYBIND11_SYSPATH\")\n \n # llvm\n \n@@ -65,12 +65,13 @@ def get_llvm_package_info():\n         linux_suffix = 'ubuntu-18.04' if vglibc > 217 else 'centos-7'\n         system_suffix = f\"linux-gnu-{linux_suffix}\"\n     else:\n-        return Package(\"llvm\", \"LLVM-C.lib\", \"\", \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n+        return Package(\"llvm\", \"LLVM-C.lib\", \"\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n     use_assert_enabled_llvm = check_env_flag(\"TRITON_USE_ASSERT_ENABLED_LLVM\", \"False\")\n     release_suffix = \"assert\" if use_assert_enabled_llvm else \"release\"\n     name = f'llvm+mlir-17.0.0-x86_64-{system_suffix}-{release_suffix}'\n-    url = f\"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-17.0.0-8e5a41e8271f/{name}.tar.xz\"\n-    return Package(\"llvm\", name, url, \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n+    version = \"llvm-17.0.0-8e5a41e8271f\"\n+    url = f\"https://github.com/ptillet/triton-llvm-releases/releases/download/{version}/{name}.tar.xz\"\n+    return Package(\"llvm\", name, url, \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n \n \n def get_thirdparty_packages(triton_cache_path):\n@@ -81,8 +82,9 @@ def get_thirdparty_packages(triton_cache_path):\n         package_dir = os.path.join(package_root_dir, p.name)\n         if p.syspath_var_name in os.environ:\n             package_dir = os.environ[p.syspath_var_name]\n-        test_file_path = os.path.join(package_dir, p.test_file)\n-        if not os.path.exists(test_file_path):\n+        version_file_path = os.path.join(package_dir, \"version.txt\")\n+        if not os.path.exists(version_file_path) or\\\n+           Path(version_file_path).read_text() != p.url:\n             try:\n                 shutil.rmtree(package_root_dir)\n             except Exception:\n@@ -92,6 +94,9 @@ def get_thirdparty_packages(triton_cache_path):\n             ftpstream = urllib.request.urlopen(p.url)\n             file = tarfile.open(fileobj=ftpstream, mode=\"r|*\")\n             file.extractall(path=package_root_dir)\n+            # write version url to package_dir\n+            with open(os.path.join(package_dir, \"version.txt\"), \"w\") as f:\n+                f.write(p.url)\n         if p.include_flag:\n             thirdparty_cmake_args.append(f\"-D{p.include_flag}={package_dir}/include\")\n         if p.lib_flag:"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "file_content_changes": "@@ -683,6 +683,22 @@ def kernel(Z, X, AXIS: tl.constexpr, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr)\n     np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=1e-4)\n \n \n+def test_tensor_atomic_rmw_block(device=\"cuda\"):\n+    shape = (8, 8)\n+\n+    @triton.jit\n+    def kernel(X, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr):\n+        off0 = tl.arange(0, SHAPE0)\n+        off1 = tl.arange(0, SHAPE1)\n+        offs = off0[:, None] * SHAPE1 + off1[None, :]\n+        val = offs.to(tl.float32)\n+        x = X + offs\n+        tl.atomic_min(x, val)\n+    x = torch.ones((8, 8), device=device, dtype=torch.float32)\n+    kernel[(2,)](x, shape[0], shape[1])\n+    assert torch.min(x).item() == 0.0\n+\n+\n def test_atomic_cas():\n     # 1. make sure that atomic_cas changes the original value (Lock)\n     @triton.jit"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -1725,6 +1725,8 @@ def _init_handles(self):\n         if self.shared > max_shared:\n             raise OutOfResources(self.shared, max_shared, \"shared memory\")\n         mod, func, n_regs, n_spills = cuda_utils.load_binary(self.metadata[\"name\"], self.asm[\"cubin\"], self.shared, device)\n+        self.n_spills = n_spills\n+        self.n_regs = n_regs\n         self.cu_module = mod\n         self.cu_function = func\n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "file_content_changes": "@@ -641,7 +641,7 @@ def bitcast(input: tl.tensor,\n             builder: ir.builder) -> tl.tensor:\n     src_ty = input.type\n     if src_ty.is_block():\n-        dst_ty = tl.block_type(dst_ty, input.type.get_block_shapes())\n+        dst_ty = tl.block_type(dst_ty.scalar, input.type.get_block_shapes())\n     if src_ty == dst_ty:\n         return input\n     src_sca_ty = src_ty.scalar\n@@ -665,7 +665,7 @@ def cast(input: tl.tensor,\n     if isinstance(dst_ty, tl.constexpr):\n         dst_ty = dst_ty.value\n     if src_ty.is_block():\n-        dst_ty = tl.block_type(dst_ty, input.type.get_block_shapes())\n+        dst_ty = tl.block_type(dst_ty.scalar, input.type.get_block_shapes())\n     if src_ty == dst_ty:\n         return input\n \n@@ -1133,6 +1133,10 @@ def reduce_impl(input: tl.tensor, axis: int, builder: ir.builder, name: str,\n \n     # get result type\n     shape = input.type.shape\n+\n+    rank = len(shape)\n+    assert 0 <= axis < rank, f\"axis (v={axis}) is out of range, should be within [0, {rank})\"\n+\n     ret_shape = []\n     for i, s in enumerate(shape):\n         if i != axis:"}, {"filename": "test/CMakeLists.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -13,11 +13,13 @@ configure_lit_site_cfg(\n \n set(TRITON_TEST_DEPENDS\n   triton-opt\n-  copy-FileCheck\n )\n \n+set(FILECHECK_PATH \"${LLVM_LIBRARY_DIR}/../bin/FileCheck\")\n+set(LIT_ARGS \"-Dfilecheck=${FILECHECK_PATH}\")\n add_lit_testsuite(check-triton-lit-tests \"Running the triton regression tests\"\n   ${CMAKE_CURRENT_BINARY_DIR}\n+  ARGS ${LIT_ARGS}\n   DEPENDS ${TRITON_TEST_DEPENDS}\n   )\n "}]