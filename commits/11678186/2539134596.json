[{"filename": "include/triton/codegen/analysis/layout.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -258,7 +258,8 @@ class shared_layout: public data_layout {\n                 const std::vector<unsigned>& shapes,\n                 const std::vector<ir::value *> &values_,\n                 ir::type *ty,\n-                analysis::align* align, target *tgt);\n+                analysis::align* align, target *tgt,\n+                bool is_tmp = false);\n   void accept(layout_visitor* vst) { vst->visit_layout_shared(this); }\n   // accessors\n   size_t get_size()                         { return size_; }\n@@ -276,6 +277,7 @@ class shared_layout: public data_layout {\n   int  get_mma_strided()                    { return mma_strided_; }\n   bool allow_swizzle() const                { return allow_swizzle_; }\n   data_layout* get_arg_layout()             { return arg_layout_; }\n+  bool is_tmp() const                       { return is_tmp_; }\n \n private:\n   size_t size_;\n@@ -290,6 +292,7 @@ class shared_layout: public data_layout {\n   int mma_strided_;\n   bool allow_swizzle_ = true;\n   target *tgt_;\n+  bool is_tmp_;\n };\n \n "}, {"filename": "lib/codegen/analysis/layout.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -439,8 +439,8 @@ shared_layout::shared_layout(data_layout *arg,\n                                  const std::vector<unsigned>& shape,\n                                  const std::vector<ir::value *> &values,\n                                  ir::type *ty,\n-                                 analysis::align* align, target *tgt)\n-    : data_layout(SHARED, axes, shape, values, align), ty_(ty), tgt_(tgt) {\n+                                 analysis::align* align, target *tgt, bool is_tmp)\n+    : data_layout(SHARED, axes, shape, values, align), ty_(ty), tgt_(tgt), is_tmp_(is_tmp){\n \n   size_ = 0;\n   arg_layout_ = arg;\n@@ -628,7 +628,7 @@ void layouts::create_tmp_layout(size_t id, data_layout *arg,\n                                 ir::instruction *i, bool is_index) {\n   ir::type *ty = is_index ? ir::type::get_int32_ty(i->get_type()->get_context())\n                           : i->get_type()->get_scalar_ty();\n-  layouts_[id] = new shared_layout(arg, axes, shape, {i}, ty, align_, tgt_);\n+  layouts_[id] = new shared_layout(arg, axes, shape, {i}, ty, align_, tgt_, true);\n   if (is_index) {\n     tmp_index_[i] = id;\n   } else {"}, {"filename": "lib/codegen/analysis/liveness.cc", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "file_content_changes": "@@ -17,7 +17,7 @@ void liveness::run(ir::module &mod) {\n   std::map<ir::value*, std::set<shared_layout*>> layouts_map;\n   for(auto &x: layouts_->get_all()){\n     shared_layout* layout = x.second->to_shared();\n-    if(!layout)\n+    if(!layout || layout->is_tmp())\n       continue;\n     for(ir::value* v:layout->get_values()){\n       layouts_map[v].insert(layout);\n@@ -26,10 +26,10 @@ void liveness::run(ir::module &mod) {\n \n \n \n-  std::map<ir::user*, std::set<shared_layout*>> live_out;\n   std::map<ir::user*, std::set<shared_layout*>> live_in;\n   while(true){\n     bool changed = false;\n+    ir::instruction* last_inst = nullptr;\n     ir::for_each_instruction_backward(mod, [&](ir::instruction* i){\n       // gen\n       std::set<shared_layout*> gen;\n@@ -45,27 +45,37 @@ void liveness::run(ir::module &mod) {\n         gen.insert(layouts_->get(layouts_->tmp(i))->to_shared());\n         kill.insert(layouts_->get(layouts_->tmp(i))->to_shared());\n       }\n+      // live-out\n+      std::set<shared_layout*> live_out;\n+      std::vector<ir::instruction*> succs = {last_inst};\n+      if(i == i->get_parent()->get_inst_list().back())\n+        for(ir::basic_block* succ: i->get_parent()->get_successors())\n+          succs.push_back(succ->get_inst_list().front());\n+      for(ir::instruction* succ: succs)\n+      for(shared_layout* layout: live_in[succ])\n+      if(!layout->is_tmp())\n+        live_out.insert(layout);\n \n       // new sets\n       std::set<shared_layout*> live_out_minus_kill;\n-      std::set_difference(live_out[i].begin(), live_out[i].end(), kill.begin(), kill.end(), \n+      std::set_difference(live_out.begin(), live_out.end(), kill.begin(), kill.end(), \n                           std::inserter(live_out_minus_kill, live_out_minus_kill.end()));\n       std::set<shared_layout*> new_live_in;\n       std::set_union(gen.begin(), gen.end(), live_out_minus_kill.begin(), live_out_minus_kill.end(),\n                       std::inserter(new_live_in, new_live_in.end()));\n-      std::set<shared_layout*> new_live_out;\n-      for(ir::user* u: i->get_users())\n-      for(shared_layout* layout: live_in[u])\n-        new_live_out.insert(layout);\n       \n-      changed = changed || (new_live_out != live_out[i]);\n       changed = changed || (new_live_in != live_in[i]);\n-      live_out[i] = new_live_out;\n       live_in[i] = new_live_in;\n+      last_inst = i;\n     });\n     if(!changed)\n       break;\n   }\n+    \n+  // ir::for_each_instruction(mod, [&](ir::instruction* i){\n+  //   i->print(std::cout);\n+  //   std::cout << \" live_in: \" << live_in[i].size() << std::endl;\n+  // });\n \n \n \n@@ -98,6 +108,7 @@ void liveness::run(ir::module &mod) {\n     shared_layout* layout = x.second->to_shared();\n     if(!layout)\n       continue;\n+    // std::cout << intervals_[layout].start << \" \" << intervals_[layout].end << std::endl;\n   }\n \n   "}, {"filename": "lib/codegen/pass.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -88,12 +88,12 @@ std::unique_ptr<llvm::Module> add_passes_to_emit_bin(ir::module &ir, llvm::LLVMC\n   // std::cout << \"---\" << std::endl;\n   // ir.print(std::cout);\n   // std::cout << \"---\" << std::endl;\n+  ir.print(std::cout);\n   liveness.run(ir);\n   allocation.run(ir);\n   prefetch_s.run(ir);\n   barriers.run(ir);\n   // exit(1);\n-  // ir.print(std::cout);\n   isel.visit(ir, *llvm);\n   shared_static = allocation.allocated_size();\n   return llvm;"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -846,7 +846,7 @@ def test_dot(epilogue, allow_tf32, dtype, device='cuda'):\n \n     M, N, K = 128, 128, 128\n     num_warps = 8\n-    trans_a, trans_b = True, False\n+    trans_a, trans_b = False, False\n \n     # triton kernel\n     @triton.jit"}]