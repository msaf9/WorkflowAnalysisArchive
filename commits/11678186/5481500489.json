[{"filename": "python/src/triton.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -72,6 +72,7 @@ void init_triton_runtime(py::module &&m) {\n       .export_values();\n }\n \n+// A custom op builder that keeps track of the last location\n class TritonOpBuilder {\n public:\n   TritonOpBuilder(mlir::MLIRContext *context) {\n@@ -132,7 +133,7 @@ class TritonOpBuilder {\n     return builder->create<OpTy>(loc, std::forward<Args>(args)...);\n   }\n \n-  /// Overload to create or fold a single result operation.\n+  // Overload to create or fold a single result operation.\n   template <typename OpTy, typename... Args>\n   std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::OneResult>(),\n                    mlir::Value>\n@@ -141,7 +142,7 @@ class TritonOpBuilder {\n     return builder->createOrFold<OpTy>(loc, std::forward<Args>(args)...);\n   }\n \n-  /// Overload to create or fold a zero result operation.\n+  // Overload to create or fold a zero result operation.\n   template <typename OpTy, typename... Args>\n   std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::ZeroResults>(), OpTy>\n   createOrFold(Args &&...args) {"}]