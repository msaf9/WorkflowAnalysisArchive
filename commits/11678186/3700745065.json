[{"filename": "lib/Conversion/TritonGPUToLLVM/DotHelpers.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -1319,6 +1319,7 @@ struct DotOpFMAConversionHelper {\n     int K = dotOpLayout.getOpIdx() == 0 ? shape[1] : shape[0];\n     int otherDim = dotOpLayout.getOpIdx() == 1 ? shape[1] : shape[0];\n \n+\n     bool isM = dotOpLayout.getOpIdx() == 0;\n     int shapePerCTAMN = getShapePerCTAForMN(blockedLayout, isM);\n     int sizePerThreadMN = getSizePerThreadForMN(blockedLayout, isM);\n@@ -1704,7 +1705,7 @@ Value DotOpFMAConversionHelper::loadA(\n     aPtrs[i] = gep(ptrTy, aSmem.base, aOff[i]);\n \n   ValueTable has;\n-  int M = aShape[aOrder[1]];\n+  int M = aShape[0];\n \n   int mShapePerCTA = getShapePerCTAForMN(dLayout, true /*isM*/);\n   int mSizePerThread = getSizePerThreadForMN(dLayout, true /*isM*/);\n@@ -1769,7 +1770,7 @@ Value DotOpFMAConversionHelper::loadB(\n   for (int i = 0; i < bNumPtr; ++i)\n     bPtrs[i] = gep(ptrTy, bSmem.base, bOff[i]);\n \n-  int N = bShape[bOrder[0]];\n+  int N = bShape[1];\n   ValueTable hbs;\n \n   int nShapePerCTA = getShapePerCTAForMN(dLayout, false /*isM*/);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -3692,6 +3692,7 @@ DotOpConversion::convertFMADot(triton::DotOp op, OpAdaptor adaptor,\n   int nSizePerThread =\n       order[0] == 0 ? sizePerThread[order[1]] : sizePerThread[order[0]];\n \n+\n   auto has = helper.getValueTableFromStruct(llA, K, M, mShapePerCTA,\n                                             mSizePerThread, rewriter, loc);\n   auto hbs = helper.getValueTableFromStruct(llB, K, N, nShapePerCTA,"}]