[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -65,13 +65,13 @@ def to_triton(x: np.ndarray, device='cuda', dst_type=None) -> Union[TensorWrappe\n           If dst_type is None, we infer dst_type from x.\n     '''\n     t = x.dtype.name\n-    if 'float8' in dst_type:\n-        return reinterpret(torch.tensor(x, device=device), getattr(tl, dst_type))\n-    elif t in uint_dtypes:\n+    if t in uint_dtypes:\n         signed_type_name = t.lstrip('u')  # e.g. \"uint16\" -> \"int16\"\n         x_signed = x.astype(getattr(np, signed_type_name))\n         return reinterpret(torch.tensor(x_signed, device=device), getattr(tl, t))\n     else:\n+        if dst_type and 'float8' in dst_type:\n+            return reinterpret(torch.tensor(x, device=device), getattr(tl, dst_type))\n         if t == 'float32' and dst_type == 'bfloat16':\n             return torch.tensor(x, device=device).bfloat16()\n         return torch.tensor(x, device=device)"}]