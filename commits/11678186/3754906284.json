[{"filename": "lib/Conversion/TritonGPUToLLVM/ViewOpToLLVM.cpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "file_content_changes": "@@ -62,28 +62,28 @@ struct SplatOpConversion\n     auto tensorTy = resType.cast<RankedTensorType>();\n     auto shape = tensorTy.getShape();\n     auto parent = layout.getParent();\n-    int fcSize{};\n+    int numElems{};\n     if (auto mmaLayout = parent.dyn_cast<MmaEncodingAttr>()) {\n       if (mmaLayout.isAmpere()) {\n-        fcSize = layout.getOpIdx() == 0\n-                     ? MMA16816ConversionHelper::getANumElemsPerThread(\n-                           tensorTy, mmaLayout.getWarpsPerCTA()[0])\n-                     : MMA16816ConversionHelper::getBNumElemsPerThread(\n-                           tensorTy, mmaLayout.getWarpsPerCTA()[1]);\n+        numElems = layout.getOpIdx() == 0\n+                       ? MMA16816ConversionHelper::getANumElemsPerThread(\n+                             tensorTy, mmaLayout.getWarpsPerCTA()[0])\n+                       : MMA16816ConversionHelper::getBNumElemsPerThread(\n+                             tensorTy, mmaLayout.getWarpsPerCTA()[1]);\n       } else if (mmaLayout.isVolta()) {\n         DotOpMmaV1ConversionHelper helper(mmaLayout);\n-        fcSize = layout.getOpIdx() == 0\n-                     ? helper.numElemsPerThreadA(shape, {0, 1})\n-                     : helper.numElemsPerThreadB(shape, {0, 1});\n+        numElems = layout.getOpIdx() == 0\n+                       ? helper.numElemsPerThreadA(shape, {0, 1})\n+                       : helper.numElemsPerThreadB(shape, {0, 1});\n       }\n     } else if (auto blockedLayout = parent.dyn_cast<BlockedEncodingAttr>()) {\n-      fcSize = DotOpFMAConversionHelper::getNumElemsPerThread(shape, layout);\n+      numElems = DotOpFMAConversionHelper::getNumElemsPerThread(shape, layout);\n     } else {\n       assert(false && \"Unsupported layout found\");\n     }\n     auto structTy = LLVM::LLVMStructType::getLiteral(\n-        rewriter.getContext(), SmallVector<Type>(fcSize, elemType));\n-    return getStructFromElements(loc, SmallVector<Value>(fcSize, constVal),\n+        rewriter.getContext(), SmallVector<Type>(numElems, elemType));\n+    return getStructFromElements(loc, SmallVector<Value>(numElems, constVal),\n                                  rewriter, structTy);\n   }\n "}]