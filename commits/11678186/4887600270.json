[{"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "file_content_changes": "@@ -399,13 +399,13 @@ struct AtomicCASOpConversion\n     auto valElements = getTypeConverter()->unpackLLElements(\n         loc, llVal, rewriter, op.getVal().getType());\n \n-    auto TensorTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n+    auto valueTy = op.getResult().getType();\n+    auto TensorTy = valueTy.dyn_cast<RankedTensorType>();\n     Type valueElemTy =\n         TensorTy ? getTypeConverter()->convertType(TensorTy.getElementType())\n-                 : op.getResult().getType();\n+                 : valueTy;\n     auto valueElemNBits = valueElemTy.getIntOrFloatBitWidth();\n-    auto tid = tid_val();\n-    Value pred = icmp_eq(tid, i32_val(0));\n+    Value mask = getMask(valueTy, rewriter, loc);\n     PTXBuilder ptxBuilderMemfence;\n     auto memfence = ptxBuilderMemfence.create<PTXInstr>(\"membar\")->o(\"gl\");\n     memfence();\n@@ -425,7 +425,7 @@ struct AtomicCASOpConversion\n     auto *valOpr = ptxBuilderAtomicCAS.newOperand(casVal, \"r\");\n     auto &atom = *ptxBuilderAtomicCAS.create<PTXInstr>(\"atom\");\n     atom.global().o(\"cas\").o(\"b32\");\n-    atom(dstOpr, ptrOpr, cmpOpr, valOpr).predicate(pred);\n+    atom(dstOpr, ptrOpr, cmpOpr, valOpr).predicate(mask);\n     auto old = ptxBuilderAtomicCAS.launch(rewriter, loc, valueElemTy);\n     barrier();\n \n@@ -434,7 +434,7 @@ struct AtomicCASOpConversion\n     auto *valOprStore = ptxBuilderStore.newOperand(old, \"r\");\n     auto &st = *ptxBuilderStore.create<PTXInstr>(\"st\");\n     st.shared().o(\"b32\");\n-    st(dstOprStore, valOprStore).predicate(pred);\n+    st(dstOprStore, valOprStore).predicate(mask);\n     ptxBuilderStore.launch(rewriter, loc, ASMReturnTy);\n     ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n     barrier();\n@@ -499,10 +499,7 @@ struct AtomicRMWOpConversion\n       // mask\n       numElems = tensorTy.getNumElements();\n     }\n-    Value mask = int_val(1, 1);\n-    auto tid = tid_val();\n-    mask = and_(mask,\n-                icmp_slt(mul(tid, i32_val(elemsPerThread)), i32_val(numElems)));\n+    Value mask = getMask(valueTy, rewriter, loc);\n \n     auto vecTy = vec_ty(valueElemTy, vec);\n     SmallVector<Value> resultVals(elemsPerThread);\n@@ -582,7 +579,6 @@ struct AtomicRMWOpConversion\n         memfenc();\n         auto ASMReturnTy = void_ty(ctx);\n         ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n-        rmwMask = and_(rmwMask, icmp_eq(tid, i32_val(0)));\n         atom(dstOpr, ptrOpr, valOpr).predicate(rmwMask);\n         auto old = ptxBuilderAtomicRMW.launch(rewriter, loc, valueElemTy);\n         Value atomPtr = getSharedMemoryBase(loc, rewriter, op.getOperation());"}]