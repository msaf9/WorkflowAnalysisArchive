[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -312,8 +312,8 @@ struct TritonCatPattern : public OpConversionPattern<triton::CatOp> {\n                   ConversionPatternRewriter &rewriter) const override {\n     // The cat op satisfy two conditions:\n     // 1. output.numel = lhs.numel + rhs.numel\n-    // 2. output.total_elems_per_thread = lhs.total_elems_per_thread +\n-    // rhs.total_elems_per_thread\n+    // 2. output.total_elems_per_thread =\n+    // next_power_of_2(lhs.total_elems_per_thread + rhs.total_elems_per_thread)\n     // For now, this behaves like generic, but this\n     // will evolve when we add support for `can_reorder=False`.\n     auto retType = this->getTypeConverter()"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Utility.cpp", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "file_content_changes": "@@ -124,10 +124,11 @@ bool expensiveToRemat(Operation *op, Attribute &targetEncoding) {\n   return false;\n }\n \n-bool canFoldConversion(Operation *op) {\n+bool canFoldConversion(Operation *op, Attribute &targetEncoding) {\n+  if (isa<triton::CatOp>(op))\n+    return !triton::gpu::expensiveCat(cast<triton::CatOp>(op), targetEncoding);\n   return isa<triton::gpu::ConvertLayoutOp, arith::ConstantOp,\n-             triton::MakeRangeOp, triton::SplatOp, triton::ViewOp,\n-             triton::CatOp>(*op);\n+             triton::MakeRangeOp, triton::SplatOp, triton::ViewOp>(op);\n }\n \n int simulateBackwardRematerialization(\n@@ -175,12 +176,8 @@ int simulateBackwardRematerialization(\n         continue;\n       // If the conversion can be folded into opArgI then\n       // we don't count this conversion as expensive\n-      if (canFoldConversion(opArgI)) {\n-        if (isa<triton::CatOp>(opArgI) &&\n-            triton::gpu::expensiveCat(cast<triton::CatOp>(opArgI), newEncoding))\n-          return INT_MAX;\n+      if (canFoldConversion(opArgI, newEncoding))\n         continue;\n-      }\n \n       // We add one expensive conversion for the current operand\n       numCvts += 1;"}]