[{"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "file_content_changes": "@@ -307,8 +307,10 @@ struct ReduceOpConversion\n     Operation *yield = block->getTerminator();\n     Operation *reduceOp = yield->getOperand(0).getDefiningOp();\n     if (!reduceOp || reduceOp->getNumOperands() != 2 ||\n-        reduceOp->getNumResults() != 1 ||\n-        !reduceOp->getResultTypes()[0].isInteger(32))\n+        reduceOp->getNumResults() != 1)\n+      return std::nullopt;\n+    auto intType = reduceOp->getResultTypes()[0].dyn_cast<IntegerType>();\n+    if (!intType || intType.getWidth() > 32)\n       return std::nullopt;\n     if (reduceOp->getOperand(0) != block->getArgument(0) ||\n         reduceOp->getOperand(1) != block->getArgument(1))\n@@ -382,8 +384,19 @@ struct ReduceOpConversion\n           mask = shl(i32_val(bitmask),\n                      and_(laneId, i32_val(~(numLaneToReduce - 1))));\n         }\n-        acc[0] = rewriter.create<NVVM::ReduxOp>(loc, acc[0].getType(), acc[0],\n-                                                *kind, mask);\n+        for (unsigned i = 0; i < acc.size(); ++i) {\n+          unsigned bitwidth = acc[i].getType().cast<IntegerType>().getWidth();\n+          if (bitwidth < 32) {\n+            if (*kind == NVVM::ReduxKind::MIN || *kind == NVVM::ReduxKind::MAX)\n+              acc[i] = sext(i32_ty, acc[i]);\n+            else\n+              acc[i] = zext(i32_ty, acc[i]);\n+          }\n+          acc[i] = rewriter.create<NVVM::ReduxOp>(loc, acc[i].getType(), acc[0],\n+                                                  *kind, mask);\n+          if (bitwidth < 32)\n+            acc[i] = trunc(int_ty(bitwidth), acc[i]);\n+        }\n         return;\n       }\n     }"}, {"filename": "python/test/regression/test_performance.py", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "file_content_changes": "@@ -225,3 +225,59 @@ def test_flash_attention(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str):\n     ref_gpu_util = flash_attention_data[DEVICE_NAME][(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str)]\n     print_perf(ms, cur_gpu_util, ref_gpu_util)\n     triton.testing.assert_close(cur_gpu_util, ref_gpu_util, atol=0.02, rtol=0.01)\n+\n+\n+#######################\n+# Reduction\n+#######################\n+\n+\n+@triton.jit\n+def _sum(x_ptr, y_ptr, output_ptr, n_elements,\n+         BLOCK_SIZE: tl.constexpr):\n+    pid = tl.program_id(axis=0)\n+    block_start = pid * BLOCK_SIZE\n+    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n+    mask = offsets < n_elements\n+    x = tl.load(x_ptr + offsets, mask=mask)\n+    y = tl.load(y_ptr + offsets, mask=mask)\n+    # run in a loop to only to make it compute bound.\n+    for i in range(100):\n+        x = tl.sum(x, axis=0) + y\n+\n+    tl.store(output_ptr + offsets, x, mask=mask)\n+\n+\n+elementwise_data = {\n+    'a100': {\n+        1024 * 16384: {'float16': 0.016, 'float32': 0.031, 'int16': 0.015, 'int32': 0.031},\n+        1024 * 65536: {'float16': 0.016, 'float32': 0.032, 'int16': 0.015, 'int32': 0.032},\n+    }\n+}\n+\n+\n+@pytest.mark.parametrize('N', elementwise_data[DEVICE_NAME].keys())\n+@pytest.mark.parametrize(\"dtype_str\", ['float16', 'float32', 'int16', 'int32'])\n+def test_reductions(N, dtype_str):\n+    stream = torch.cuda.Stream()\n+    torch.cuda.set_stream(stream)\n+    torch.manual_seed(0)\n+    dtype = {'float16': torch.float16, 'float32': torch.float32, 'int16': torch.int16, 'int32': torch.int32}[dtype_str]\n+    ref_gpu_util = elementwise_data[DEVICE_NAME][N][dtype_str]\n+    cur_sm_clock = nvsmi(['clocks.current.sm'])[0]\n+    max_gpu_perf = get_max_tensorcore_tflops(dtype, clock_rate=cur_sm_clock * 1e3)\n+    z = torch.empty((N, ), dtype=dtype, device='cuda')\n+    if dtype == torch.float16 or dtype == torch.float32:\n+        x = torch.randn_like(z)\n+        y = torch.randn_like(z)\n+    else:\n+        info = torch.iinfo(dtype)\n+        x = torch.randint(info.min, info.max, (N,), dtype=dtype, device='cuda')\n+        y = torch.randint(info.min, info.max, (N,), dtype=dtype, device='cuda')\n+    grid = lambda args: (triton.cdiv(N, args['BLOCK_SIZE']), )\n+    fn = lambda: _sum[grid](x, y, z, N, BLOCK_SIZE=1024)\n+    ms = triton.testing.do_bench_cudagraph(fn)\n+    cur_gpu_perf = 100. * 2. * N / ms * 1e-9\n+    cur_gpu_util = cur_gpu_perf / max_gpu_perf\n+    print_perf(ms, cur_gpu_util, ref_gpu_util)\n+    triton.testing.assert_close(cur_gpu_util, ref_gpu_util, atol=0.02, rtol=0.01)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "file_content_changes": "@@ -1351,11 +1351,6 @@ def make_combine_region(reduce_op):\n @builtin\n def _promote_reduction_input(t, _builder=None):\n     scalar_ty = t.type.scalar\n-    # input is extended to 32-bits if necessary\n-    # this increases numerical accuracy and can be done pretty much for free\n-    # on GPUs\n-    if scalar_ty.is_int() and scalar_ty.int_bitwidth < 32:\n-        return t.to(int32, _builder=_builder)\n \n     # hardware doesn't support FMAX, FMIN, CMP for bfloat16\n     if scalar_ty is bfloat16:"}, {"filename": "python/triton/testing.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -377,9 +377,9 @@ def get_max_tensorcore_tflops(dtype, backend=None, device=None, clock_rate=None)\n         assert dtype == torch.float16\n         ops_per_sub_core = 256  # 2 4x4x4 Tensor Cores\n     else:\n-        if dtype == torch.float32:\n+        if dtype in [torch.float32, torch.int32]:\n             ops_per_sub_core = 256\n-        elif dtype in [torch.float16, torch.bfloat16]:\n+        elif dtype in [torch.float16, torch.bfloat16, torch.int16]:\n             ops_per_sub_core = 512\n         elif dtype in [torch.int8, tl.float8e4, tl.float8e4b15, tl.float8e5]:\n             ops_per_sub_core = 1024"}]