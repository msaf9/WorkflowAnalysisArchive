[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "file_content_changes": "@@ -1883,22 +1883,26 @@ def kernel(ptr, n_elements, num1, num2):\n # -------------\n \n \n-def test_if():\n+@pytest.mark.parametrize(\"if_type\", [\"if\", \"if_exp\"])\n+def test_if(if_type):\n \n     @triton.jit\n-    def kernel(Cond, XTrue, XFalse, Ret):\n+    def kernel(Cond, XTrue, XFalse, Ret, IfType: tl.constexpr):\n         pid = tl.program_id(0)\n         cond = tl.load(Cond)\n-        if pid % 2:\n-            tl.store(Ret, tl.load(XTrue))\n+        if IfType == \"if\":\n+            if pid % 2:\n+                tl.store(Ret, tl.load(XTrue))\n+            else:\n+                tl.store(Ret, tl.load(XFalse))\n         else:\n-            tl.store(Ret, tl.load(XFalse))\n+            tl.store(Ret, tl.load(XTrue)) if pid % 2 else tl.store(Ret, tl.load(XFalse))\n \n     cond = torch.ones(1, dtype=torch.int32, device='cuda')\n     x_true = torch.tensor([3.14], dtype=torch.float32, device='cuda')\n     x_false = torch.tensor([1.51], dtype=torch.float32, device='cuda')\n     ret = torch.empty(1, dtype=torch.float32, device='cuda')\n-    kernel[(1,)](cond, x_true, x_false, ret)\n+    kernel[(1,)](cond, x_true, x_false, ret, if_type)\n \n \n def test_num_warps_pow2():"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -548,7 +548,9 @@ def visit_If(self, node):\n \n     def visit_IfExp(self, node):\n         cond = self.visit(node.test)\n-        if cond.value:\n+        if _is_triton_tensor(cond):\n+            cond = cond.to(triton.language.int1, _builder=self.builder)\n+        if _unwrap_if_constexpr(cond):\n             return self.visit(node.body)\n         else:\n             return self.visit(node.orelse)"}]