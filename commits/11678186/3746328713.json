[{"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -8,14 +8,12 @@ using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n using ::mlir::LLVM::getStridesFromShapeAndOrder;\n using ::mlir::LLVM::getStructFromElements;\n using ::mlir::LLVM::MMA16816ConversionHelper;\n-using ::mlir::LLVM::MMA16816ConversionHelper;\n using ::mlir::triton::gpu::DotOperandEncodingAttr;\n using ::mlir::triton::gpu::getElemsPerThread;\n using ::mlir::triton::gpu::getOrder;\n using ::mlir::triton::gpu::getShapePerCTA;\n using ::mlir::triton::gpu::getSizePerThread;\n using ::mlir::triton::gpu::SharedEncodingAttr;\n-using ::mlir::triton::gpu::SharedEncodingAttr;\n \n bool isMmaToDotShortcut(MmaEncodingAttr &mmaLayout,\n                         DotOperandEncodingAttr &dotOperandLayout) {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -9,11 +9,9 @@ using namespace mlir::triton;\n \n using ::mlir::LLVM::getElementsFromStruct;\n using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n-using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n using ::mlir::LLVM::getStructFromElements;\n using ::mlir::triton::gpu::getElemsPerThread;\n using ::mlir::triton::gpu::SharedEncodingAttr;\n-using ::mlir::triton::gpu::SharedEncodingAttr;\n \n // Contains some helper functions for both Load and Store conversions.\n struct LoadStoreConversionBase : public ConvertTritonGPUOpToLLVMPatternBase {"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "file_content_changes": "@@ -1,7 +1,6 @@\n # flake8: noqa: F821,F841\n import itertools\n import os\n-import os\n import re\n from typing import Optional, Union\n \n@@ -493,9 +492,9 @@ def make_ptr_str(name, shape):\n @pytest.mark.parametrize(\"expr, dtype_str\", [\n     (f'x[{s}]', d)\n     for s in ['None, :', ':, None']\n-              # FIXME: 3d indexing doesn't work\n-              #'None, :, :',\n-              #':, :, None']\n+    # FIXME: 3d indexing doesn't work\n+    #'None, :, :',\n+    # ':, :, None']\n     for d in ['int32', 'uint32', 'uint16']\n ])\n def test_index1d(expr, dtype_str, device='cuda'):"}]