[{"filename": "include/triton/Dialect/Triton/Transforms/Passes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -8,7 +8,7 @@ namespace triton {\n \n std::unique_ptr<Pass> createCombineOpsPass();\n \n-std::unique_ptr<Pass> createDelayBroadcastPass();\n+std::unique_ptr<Pass> createReorderBroadcastPass();\n \n std::unique_ptr<Pass>\n createRewriteTensorPointerPass(int computeCapability = 80);"}, {"filename": "include/triton/Dialect/Triton/Transforms/Passes.td", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -19,12 +19,12 @@ def TritonCombineOps : Pass</*cli-arg*/\"triton-combine\", /*Op*/\"mlir::ModuleOp\">\n   let dependentDialects = [\"mlir::arith::ArithDialect\"];\n }\n \n-def TritonDelayBroadcast : Pass</*cli-arg*/\"triton-delay-broadcast\", /*Op*/\"mlir::ModuleOp\"> {\n+def TritonReorderBroadcast : Pass</*cli-arg*/\"triton-reorder-broadcast\", /*Op*/\"mlir::ModuleOp\"> {\n   let summary = \"Moves broadcast and splat after elementwise operations\";\n   let description = [{\n     elementwise(splat(a), splat(b), ...) => splat(elementwise(a, b, ...))\n   }];\n-  let constructor = \"mlir::triton::createDelayBroadcastPass()\";\n+  let constructor = \"mlir::triton::createReorderBroadcastPass()\";\n   let dependentDialects = [\"mlir::triton::TritonDialect\"];\n }\n "}, {"filename": "lib/Dialect/Triton/Transforms/CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -4,7 +4,7 @@ add_public_tablegen_target(TritonCombineIncGen)\n \n add_mlir_dialect_library(TritonTransforms\n   Combine.cpp\n-  DelayBroadcast.cpp\n+  ReorderBroadcast.cpp\n   RewriteTensorPointer.cpp\n \n   DEPENDS"}, {"filename": "lib/Dialect/Triton/Transforms/ReorderBroadcast.cpp", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -11,7 +11,7 @@\n #include <memory>\n \n namespace mlir {\n-#define GEN_PASS_DEF_TRITONDELAYBROADCAST\n+#define GEN_PASS_DEF_TRITONREORDERBROADCAST\n #include \"triton/Dialect/Triton/Transforms/Passes.h.inc\"\n } // namespace mlir\n \n@@ -214,8 +214,8 @@ class CanonicalizePattern : public mlir::OpRewritePattern<OpType> {\n   }\n };\n \n-class DelayBroadcastPass\n-    : public mlir::impl::TritonDelayBroadcastBase<DelayBroadcastPass> {\n+class ReorderBroadcastPass\n+    : public mlir::impl::TritonReorderBroadcastBase<ReorderBroadcastPass> {\n public:\n   void runOnOperation() override {\n     mlir::MLIRContext *context = &getContext();\n@@ -236,6 +236,6 @@ class DelayBroadcastPass\n \n } // namespace\n \n-std::unique_ptr<mlir::Pass> mlir::triton::createDelayBroadcastPass() {\n-  return std::make_unique<DelayBroadcastPass>();\n+std::unique_ptr<mlir::Pass> mlir::triton::createReorderBroadcastPass() {\n+  return std::make_unique<ReorderBroadcastPass>();\n }"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1534,9 +1534,9 @@ void init_triton_ir(py::module &&m) {\n            [](mlir::PassManager &self) {\n              self.addPass(mlir::triton::createCombineOpsPass());\n            })\n-      .def(\"add_delay_broadcast_pass\",\n+      .def(\"add_reorder_broadcast_pass\",\n            [](mlir::PassManager &self) {\n-             self.addPass(mlir::triton::createDelayBroadcastPass());\n+             self.addPass(mlir::triton::createReorderBroadcastPass());\n            })\n       .def(\"add_rewrite_tensor_pointer_pass\",\n            [](mlir::PassManager &self, int computeCapability) {"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -56,7 +56,7 @@ def optimize_ttir(mod, arch):\n     pm.add_inliner_pass()\n     pm.add_triton_combine_pass()\n     pm.add_canonicalizer_pass()\n-    pm.add_delay_broadcast_pass()\n+    pm.add_reorder_broadcast_pass()\n     pm.add_cse_pass()\n     pm.add_licm_pass()\n     pm.add_symbol_dce_pass()"}, {"filename": "test/Triton/delay-broadcast.mlir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1,4 +1,4 @@\n-// RUN: triton-opt %s -split-input-file -triton-delay-broadcast | FileCheck %s\n+// RUN: triton-opt %s -split-input-file -triton-reorder-broadcast | FileCheck %s\n \n // CHECK-LABEL: @test_splat_elementwise_pattern\n tt.func @test_splat_elementwise_pattern(%arg0: f32) -> (tensor<128x128xf32>, tensor<128x128x!tt.ptr<f32>>) {"}]