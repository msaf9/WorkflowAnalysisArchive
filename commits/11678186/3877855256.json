[{"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -198,7 +198,7 @@ def _make_constants(self, constexpr_key):\n         constants = {i: k for i, k in zip(self.constexprs, constexpr_key)}\n         return constants\n \n-    def _call_hook(self, key, signature, device, constants, num_warps, num_stages, extern_libs, configs):\n+    def _call_hook(self, key, signature, device, constants, num_warps, num_stages, extern_libs, configs, args):\n         if JITFunction.cache_hook is None:\n             return False\n         name = self.fn.__name__\n@@ -217,7 +217,7 @@ def __init__(self, module, name):\n                       num_warps=num_warps, num_stages=num_stages, extern_libs=extern_libs,\n                       configs=configs)\n \n-        return JITFunction.cache_hook(key=key, repr=repr, fn=LegacyCompiler(module, name), compile={\"key\": key, **kwargs}, is_manual_warmup=False, already_compiled=False)\n+        return JITFunction.cache_hook(key=key, repr=repr, fn=LegacyCompiler(module, name), compile={\"key\": key, **kwargs}, is_manual_warmup=False, already_compiled=False, args=args, arg_names=self.arg_names)\n \n     def _make_launcher(self):\n         regular_args = [f'{arg}' for i, arg in enumerate(self.arg_names) if i not in self.constexprs]\n@@ -277,7 +277,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n       for i, arg in constants.items():\n         if callable(arg):\n           raise TypeError(f\"Callable constexpr at index {{i}} is not supported\")\n-      if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs):\n+      if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs, args):\n         bin = triton.compile(self, signature=signature, device=device, constants=constants, num_warps=num_warps, num_stages=num_stages, extern_libs=extern_libs, configs=configs)\n         if not warmup:\n             bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, triton.compiler.CompiledKernel.launch_enter_hook, triton.compiler.CompiledKernel.launch_exit_hook, bin, *args)"}]