[{"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "file_content_changes": "@@ -31,13 +31,12 @@ def matmul_no_scf_kernel(\n @pytest.mark.parametrize('SHAPE,NUM_WARPS,TRANS_A,TRANS_B', [\n     (shape, num_warps, trans_a, trans_b)\n     for shape in [\n-        # [128, 256, 32],\n-        # [256, 128, 16],\n-        # [128, 16, 32],\n-        # [32, 128, 64],\n-        # [128, 128, 64],\n-        # [64, 128, 128],\n-        [16, 16, 32]\n+        [128, 256, 32],\n+        [256, 128, 16],\n+        [128, 16, 32],\n+        [32, 128, 64],\n+        [128, 128, 64],\n+        [64, 128, 128],\n     ]\n     for num_warps in [2, 4]\n     for trans_a in [False, True]\n@@ -169,32 +168,30 @@ def get_proper_err(a, b, golden):\n \n @pytest.mark.parametrize('SIZE_M,SIZE_N,SIZE_K,NUM_WARPS,BLOCK_SIZE_M,BLOCK_SIZE_N,BLOCK_SIZE_K,TRANS_A,TRANS_B', [\n     # Non-forloop\n-    # [64, 32, 64, 4, 64, 32, 64, False, False],\n-    # [128, 64, 128, 4, 128, 64, 128, False, False],\n-    # [16, 16, 16, 16, 16, 16, 16, False, False],  # wpt overflow issue\n-    # # K-Forloop\n-    # [32, 32, 64, 4, 32, 32, 32, False, False], # Single shared encoding\n-    # [16, 16, 128, 4, 16, 16, 16, False, False], # Single shared encoding and small k\n-    # [64, 32, 128, 4, 64, 32, 64, False, False],\n-    # [128, 16, 128, 4, 128, 16, 32, False, False],\n-    # [32, 16, 128, 4, 32, 16, 32, False, False],\n-    # [32, 64, 128, 4, 32, 64, 32, False, False],\n-    # [32, 128, 256, 4, 32, 128, 64, False, False],\n-    # [64, 128, 64, 4, 64, 128, 32, False, False],\n-    # [64, 64, 128, 4, 64, 64, 32, False, False],\n-    # [128, 128, 64, 4, 128, 128, 32, False, False],\n-    # [128, 128, 128, 4, 128, 128, 32, False, False],\n-    # [128, 128, 256, 4, 128, 128, 64, False, False],\n-    # [128, 256, 128, 4, 128, 256, 32, False, False],\n-    # [256, 128, 64, 4, 256, 128, 16, False, False],\n-    # [128, 64, 128, 4, 128, 64, 32, False, False],\n-    # [16, 16, 64, 4, 16, 16, 16, False, False],\n-    # [32, 32, 64, 4, 32, 32, 32, False, False],\n-    # # trans\n-    # [128, 64, 128, 4, 128, 64, 32, True, False],\n-    # [128, 64, 128, 4, 128, 64, 32, False, True],\n-    [16, 16, 32, 4, 16, 16, 32, transa, transb] for transa in \n-        [False, True] for transb in [False, True]\n+    [64, 32, 64, 4, 64, 32, 64, False, False],\n+    [128, 64, 128, 4, 128, 64, 128, False, False],\n+    [16, 16, 16, 16, 16, 16, 16, False, False],  # wpt overflow issue\n+    # K-Forloop\n+    [32, 32, 64, 4, 32, 32, 32, False, False], # Single shared encoding\n+    [16, 16, 128, 4, 16, 16, 16, False, False], # Single shared encoding and small k\n+    [64, 32, 128, 4, 64, 32, 64, False, False],\n+    [128, 16, 128, 4, 128, 16, 32, False, False],\n+    [32, 16, 128, 4, 32, 16, 32, False, False],\n+    [32, 64, 128, 4, 32, 64, 32, False, False],\n+    [32, 128, 256, 4, 32, 128, 64, False, False],\n+    [64, 128, 64, 4, 64, 128, 32, False, False],\n+    [64, 64, 128, 4, 64, 64, 32, False, False],\n+    [128, 128, 64, 4, 128, 128, 32, False, False],\n+    [128, 128, 128, 4, 128, 128, 32, False, False],\n+    [128, 128, 256, 4, 128, 128, 64, False, False],\n+    [128, 256, 128, 4, 128, 256, 32, False, False],\n+    [256, 128, 64, 4, 256, 128, 16, False, False],\n+    [128, 64, 128, 4, 128, 64, 32, False, False],\n+    [16, 16, 64, 4, 16, 16, 16, False, False],\n+    [32, 32, 64, 4, 32, 32, 32, False, False],\n+    # trans\n+    [128, 64, 128, 4, 128, 64, 32, True, False],\n+    [128, 64, 128, 4, 128, 64, 32, False, True],\n ])\n def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, TRANS_A, TRANS_B):\n     if (TRANS_A):"}, {"filename": "python/triton/ops/blocksparse/matmul.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -109,7 +109,7 @@ def sdd_matmul(a, b, trans_a, trans_b, trans_c, spdims, block, lut, widths, out=\n         b.stride(0), b.stride(1), b.stride(3 if trans_b else 2), b.stride(2 if trans_b else 3),\n         c.stride(0), c.stride(1), c.stride(2), c.stride(3),\n         Ka, 0, lut,\n-        TILE_M=block, TILE_N=block, TILE_K=32, BLOCK=block, num_stages=2,\n+        TILE_M=block, TILE_N=block, TILE_K=32, BLOCK=block, num_stages=4,\n         num_warps=4,\n     )\n     return c"}]