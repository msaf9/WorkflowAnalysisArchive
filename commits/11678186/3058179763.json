[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "file_content_changes": "@@ -5,12 +5,32 @@ on:\n   pull_request:\n     branches:\n       - main\n+      - triton-mlir\n \n jobs:\n \n+  Runner-Preparation:\n+    runs-on: ubuntu-latest\n+    outputs:\n+      matrix: ${{ steps.set-matrix.outputs.matrix }}\n+    steps:\n+    - name: Prepare runner matrix\n+      id: set-matrix\n+      run: |\n+        if [ x\"${{ github.repository }}\" == x\"openai/triton\" ]; then\n+          echo '::set-output name=matrix::[[\"self-hosted\", \"A10\"], \"macos-latest\"]'\n+        else\n+          echo '::set-output name=matrix::[\"ubuntu-latest\", \"macos-latest\"]'\n+        fi\n+\n   Integration-Tests:\n+    needs: Runner-Preparation\n+\n+    runs-on: ${{ matrix.runner }}\n \n-    runs-on: self-hosted\n+    strategy:\n+      matrix:\n+        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix)}}\n \n     steps:\n \n@@ -19,26 +39,29 @@ jobs:\n \n       - name: Clear cache\n         run: |\n-          rm -r ~/.triton/cache/\n-        continue-on-error: true\n+          rm -rf ~/.triton/cache/\n \n       - name: Check imports\n+        if: ${{ matrix.runner != 'macos-latest' }}\n         run: |\n           pip install isort\n           isort -c ./python || ( echo '::error title=Imports not sorted::Please run \\\"isort ./python\\\"' ; exit 1 )\n \n       - name: Check python style\n+        if: ${{ matrix.runner != 'macos-latest' }}\n         run: |\n           pip install autopep8\n           autopep8 -a -r -d --exit-code ./python || ( echo '::error title=Style issues::Please run \\\"autopep8 -a -r -i ./python\\\"' ; exit 1 )\n \n       - name: Check cpp style\n+        if: ${{ matrix.runner != 'macos-latest' }}\n         run: |\n           sudo apt-get install -y clang-format\n           find . -regex '.*\\.\\(cpp\\|hpp\\|h\\|cc\\)' -not -path \"./python/build/*\" -not -path \"./include/triton/external/*\" -print0 | xargs -0 -n1 clang-format -style=file --dry-run -Werror -i ||\n           (echo '::error title=Style issues:: Please run `find . -regex \".*\\.\\(cpp\\|hpp\\|h\\|cc\\)\" -not -path \"./python/build/*\" -not -path \"./include/triton/external/*\" -print0 | xargs -0 -n1 clang-format -style=file -i`' ; exit 1)\n \n       - name: Flake8\n+        if: ${{ matrix.runner != 'macos-latest' }}\n         run: |\n           pip install flake8\n           flake8 --config ./python/setup.cfg ./python || ( echo '::error::Flake8 failed; see logs for errors.' ; exit 1 )\n@@ -59,6 +82,7 @@ jobs:\n           lit -v \"$LIT_TEST_DIR\"\n \n       - name: Run python tests\n+        if: ${{ matrix.runner[0] == 'self-hosted' }}\n         run: |\n           cd python/tests\n           pytest"}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/PtxAsmFormat.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -123,7 +123,7 @@ struct PTXBuilder {\n \n   Operand *newAddrOperand(mlir::Value addr, StringRef constraint, int off = 0);\n \n-  llvm::SmallVector<Operand *> getAllArgs() const;\n+  llvm::SmallVector<Operand *, 4> getAllArgs() const;\n \n   llvm::SmallVector<Value, 4> getAllMLIRArgs() const;\n "}, {"filename": "include/triton/driver/dispatch.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "file_content_changes": "@@ -48,8 +48,15 @@ class dispatch {\n     initializer();\n     if (cache == nullptr) {\n       cache = dlsym(lib_h, name);\n-      if (cache == 0)\n+      if (cache == 0) {\n+#ifdef __EXCEPTIONS\n         throw std::runtime_error(\"dlsym unable to load function\");\n+#else\n+        std::cerr << \"Triton: dlsym unable to load function `\" << name << \"`\"\n+                  << std::endl;\n+        std::abort();\n+#endif\n+      }\n     }\n     FunPtrT fptr;\n     *reinterpret_cast<void **>(&fptr) = cache;"}, {"filename": "lib/Conversion/TritonGPUToLLVM/PtxAsmFormat.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -66,7 +66,7 @@ llvm::SmallVector<Value, 4> PTXBuilder::getAllMLIRArgs() const {\n   return res;\n }\n \n-SmallVector<PTXBuilder::Operand *> PTXBuilder::getAllArgs() const {\n+SmallVector<PTXBuilder::Operand *, 4> PTXBuilder::getAllArgs() const {\n   llvm::SmallVector<Operand *, 4> res;\n   for (auto &x : argArchive)\n     if (!x->isList())"}]