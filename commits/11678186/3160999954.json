[{"filename": "lib/codegen/analysis/layout.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "file_content_changes": "@@ -367,12 +367,16 @@ void shared_layout::extract_double_bufferable(ir::value *v, std::shared_ptr<doub\n     res.reset(new double_buffer_info_t{value_1, value_0, phi});\n }\n \n-static bool is_smem(ir::value* v) {\n-  if (dynamic_cast<ir::copy_to_shared_inst*>(v) ||\n-      dynamic_cast<ir::masked_load_async_inst*>(v))\n-    return true;\n-  else\n-    return false;\n+static bool is_smem_in(ir::value* v, const ir::basic_block* bb) {\n+  if (ir::instruction *instr = dynamic_cast<ir::instruction*>(v)) {\n+    if (instr->get_parent() != bb)\n+      return false;\n+    if (dynamic_cast<ir::copy_to_shared_inst*>(v) ||\n+        dynamic_cast<ir::masked_load_async_inst*>(v)) {\n+      return true;\n+    }\n+  }\n+  return false;\n }\n \n /// param:\n@@ -387,14 +391,14 @@ static bool is_multistage_pipe_phi(ir::phi_node* phi, ir::basic_block* bb0, ir::\n     ir::basic_block *cbb0 = cphi->get_incoming_block(0);\n     ir::basic_block *cbb1 = cphi->get_incoming_block(1);\n \n-    if (is_smem(c0)) {\n+    if (is_smem_in(c0, cbb0)) {\n       assert(cbb0 == bb0);\n       values_0.push_back(c0);\n       if (auto phi1 = dynamic_cast<ir::phi_node*>(c1)) {\n         next = phi1;\n         continue;\n       } else {\n-        if (is_smem(c1)) {\n+        if (is_smem_in(c1, cbb1)) {\n           value_1 = c1;\n           assert(cbb1 == bb1);\n           return true;"}]