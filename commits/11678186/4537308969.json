[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "file_content_changes": "@@ -12,6 +12,9 @@ concurrency:\n   group: ${{ github.ref }}\n   cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}\n \n+env:\n+  TRITON_USE_ASSERT_ENABLED_LLVM: 'TRUE'\n+\n jobs:\n   Runner-Preparation:\n     runs-on: ubuntu-latest\n@@ -43,20 +46,20 @@ jobs:\n       - name: Set CUDA ENV\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100')}}\n         run: |\n-          echo \"BACKEND=CUDA\" >> $GITHUB_ENV\n+          echo \"BACKEND=CUDA\" >> \"${GITHUB_ENV}\"\n \n       - name: Set ROCM ENV\n         if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}\n         run: |\n-          echo \"BACKEND=ROCM\" >> $GITHUB_ENV\n+          echo \"BACKEND=ROCM\" >> \"${GITHUB_ENV}\"\n \n       - name: Clear cache\n         run: |\n-          rm -rf ~/.triton/\n+          rm -rf ~/.triton\n \n-      - name: Update path\n+      - name: Update PATH\n         run: |\n-          echo \"$HOME/.local/bin/\" >> $GITHUB_PATH\n+          echo \"PATH=${HOME}/.local/bin:${PATH}\" >> \"${GITHUB_ENV}\"\n \n       - name: Check pre-commit\n         if: ${{ matrix.runner != 'macos-10.15' }}\n@@ -69,43 +72,43 @@ jobs:\n         run: |\n           cd python\n           python3 -m pip install cmake==3.24\n-          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE python3 -m pip install -e '.[tests]'\n+          python3 -m pip install -vvv -e '.[tests]'\n \n       - name: Install Triton on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n           cd python\n-          python3 -m pip uninstall --yes torch torchvision torchaudio\n-          python3 -m pip install --no-cache-dir --force-reinstall torch==1.13.1 --extra-index-url https://download.pytorch.org/whl/rocm5.2\n-          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE python3 -m pip install -e '.[tests]'\n+          python3 -m pip install cmake==3.24\n+          python3 -m pip install torch==1.13.1 --index-url https://download.pytorch.org/whl/rocm5.2\n+          python3 -m pip install -vvv -e '.[tests]'\n \n       - name: Run lit tests\n         if: ${{ env.BACKEND != 'ROCM'}}\n         run: |\n           python3 -m pip install lit\n           cd python\n           LIT_TEST_DIR=\"build/$(ls build)/test\"\n-          if [ ! -d \"$LIT_TEST_DIR\" ]; then\n-            echo \"Not found `$LIT_TEST_DIR`.  Did you change an installation method?\" ; exit -1\n+          if [ ! -d \"${LIT_TEST_DIR}\" ]; then\n+            echo \"Not found '${LIT_TEST_DIR}'.  Did you change an installation method?\" ; exit -1\n           fi\n-          lit -v \"$LIT_TEST_DIR\"\n+          lit -v \"${LIT_TEST_DIR}\"\n \n       - name: Run python tests on CUDA\n         if: ${{ env.BACKEND == 'CUDA'}}\n         run: |\n-          cd python/test/unit/\n+          cd python/test/unit\n           python3 -m pytest\n \n       - name: Run python tests on ROCM\n         if: ${{ env.BACKEND == 'ROCM'}}\n         run: |\n-          cd python/test/unit/language/\n+          cd python/test/unit/language\n           python3 -m pytest --capture=tee-sys -rfs --verbose \"test_core.py::test_empty_kernel\"\n \n       - name: Run CXX unittests\n         if: ${{ env.BACKEND != 'ROCM'}}\n         run: |\n-          cd python/\n+          cd python\n           cd \"build/$(ls build)\"\n           ctest\n "}, {"filename": "CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1,4 +1,4 @@\n-cmake_minimum_required(VERSION 3.18)\n+cmake_minimum_required(VERSION 3.20)\n \n if(POLICY CMP0116)\n # Introduced in cmake 3.20"}, {"filename": "python/setup.py", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "file_content_changes": "@@ -1,14 +1,13 @@\n-import distutils\n import os\n import platform\n import re\n import shutil\n import subprocess\n import sys\n+import sysconfig\n import tarfile\n import tempfile\n import urllib.request\n-from distutils.version import LooseVersion\n from pathlib import Path\n from typing import NamedTuple\n \n@@ -154,10 +153,10 @@ def run(self):\n                 \"CMake must be installed to build the following extensions: \" + \", \".join(e.name for e in self.extensions)\n             )\n \n-        if platform.system() == \"Windows\":\n-            cmake_version = LooseVersion(re.search(r\"version\\s*([\\d.]+)\", out.decode()).group(1))\n-            if cmake_version < \"3.1.0\":\n-                raise RuntimeError(\"CMake >= 3.1.0 is required on Windows\")\n+        match = re.search(r\"version\\s*(?P<major>\\d+)\\.(?P<minor>\\d+)([\\d.]+)?\", out.decode())\n+        cmake_major, cmake_minor = int(match.group(\"major\")), int(match.group(\"minor\"))\n+        if (cmake_major, cmake_minor) < (3, 20):\n+            raise RuntimeError(\"CMake >= 3.20.0 is required\")\n \n         for ext in self.extensions:\n             self.build_extension(ext)\n@@ -176,7 +175,7 @@ def build_extension(self, ext):\n         if not os.path.exists(self.build_temp):\n             os.makedirs(self.build_temp)\n         # python directories\n-        python_include_dir = distutils.sysconfig.get_python_inc()\n+        python_include_dir = sysconfig.get_path(\"platinclude\")\n         cmake_args = [\n             \"-DLLVM_ENABLE_WERROR=ON\",\n             \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\" + extdir,\n@@ -200,9 +199,8 @@ def build_extension(self, ext):\n                 cmake_args += [\"-A\", \"x64\"]\n             build_args += [\"--\", \"/m\"]\n         else:\n-            import multiprocessing\n             cmake_args += [\"-DCMAKE_BUILD_TYPE=\" + cfg]\n-            build_args += ['-j' + str(2 * multiprocessing.cpu_count())]\n+            build_args += ['-j' + str(2 * os.cpu_count())]\n \n         env = os.environ.copy()\n         subprocess.check_call([\"cmake\", self.base_dir] + cmake_args, cwd=self.build_temp, env=env)\n@@ -245,6 +243,11 @@ def build_extension(self, ext):\n         \"Topic :: Software Development :: Build Tools\",\n         \"License :: OSI Approved :: MIT License\",\n         \"Programming Language :: Python :: 3.6\",\n+        \"Programming Language :: Python :: 3.7\",\n+        \"Programming Language :: Python :: 3.8\",\n+        \"Programming Language :: Python :: 3.9\",\n+        \"Programming Language :: Python :: 3.10\",\n+        \"Programming Language :: Python :: 3.11\",\n     ],\n     test_suite=\"tests\",\n     extras_require={"}]