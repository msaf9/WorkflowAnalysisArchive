[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "file_content_changes": "@@ -3705,6 +3705,31 @@ struct ExtElemwiseOpConversion\n   }\n };\n \n+struct FDivOpConversion\n+    : ElementwiseOpConversionBase<mlir::arith::DivFOp, LLVM::InlineAsmOp,\n+                                  FDivOpConversion> {\n+  using Base = ElementwiseOpConversionBase<mlir::arith::DivFOp,\n+                                           LLVM::InlineAsmOp, FDivOpConversion>;\n+  using Base::Base;\n+  using Adaptor = typename Base::OpAdaptor;\n+\n+  Value createDestOp(mlir::arith::DivFOp op, OpAdaptor adaptor,\n+                     ConversionPatternRewriter &rewriter, Type elemTy,\n+                     ValueRange operands, Location loc) const {\n+\n+    PTXBuilder ptxBuilder;\n+    auto &fdiv = *ptxBuilder.create<PTXInstr>(\"div\");\n+    fdiv.o(\"full\").o(\"f32\");\n+    auto res = ptxBuilder.newOperand(\"=r\");\n+    auto lhs = ptxBuilder.newOperand(operands[0], \"r\");\n+    auto rhs = ptxBuilder.newOperand(operands[1], \"r\");\n+    fdiv(res, lhs, rhs);\n+\n+    Value ret = ptxBuilder.launch(rewriter, loc, elemTy, false);\n+    return ret;\n+  }\n+};\n+\n void populateTritonToLLVMPatterns(mlir::LLVMTypeConverter &typeConverter,\n                                   RewritePatternSet &patterns, int numWarps,\n                                   AxisInfoAnalysis &axisInfoAnalysis,\n@@ -3767,6 +3792,8 @@ void populateTritonToLLVMPatterns(mlir::LLVMTypeConverter &typeConverter,\n   POPULATE_UNARY_OP(math::ExpOp, math::ExpOp)\n #undef POPULATE_UNARY_OP\n \n+  patterns.add<FDivOpConversion>(typeConverter, benefit);\n+\n   patterns.add<ExtElemwiseOpConversion>(typeConverter, benefit);\n \n   patterns.add<BroadcastOpConversion>(typeConverter, benefit);"}]