[{"filename": "python/triton/__init__.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -9,6 +9,7 @@\n import torch  # noqa: F401\n \n # submodules\n+from . import impl\n from .utils import (\n     cdiv,\n     MockTensor,\n@@ -36,6 +37,7 @@\n     \"compile\",\n     \"Config\",\n     \"heuristics\",\n+    \"impl\",\n     \"jit\",\n     \"JITFunction\",\n     \"KernelInterface\","}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -25,6 +25,8 @@\n \n import triton\n import triton._C.libtriton.triton as _triton\n+\n+from . import impl\n from .tools.disasm import extract\n \n \n@@ -715,9 +717,8 @@ def visit_Call(self, node):\n                 for i in range(call_op.get_num_results()):\n                     results.append(triton.language.tensor(call_op.get_result(i), callee_ret_type[i]))\n                 return tuple(results)\n-        if hasattr(fn, '__self__') and self.is_triton_tensor(fn.__self__) or \\\n-                sys.modules[fn.__module__] is triton.language.core or \\\n-                isinstance(fn, triton.language.extern.ExternalFunction):\n+        if (hasattr(fn, '__self__') and self.is_triton_tensor(fn.__self__)) \\\n+                or impl.is_builtin(fn):\n             return fn(*args, _builder=self.builder, **kws)\n         if fn in self.builtins.values():\n             args = [arg.value if isinstance(arg, triton.language.constexpr) else arg"}, {"filename": "python/triton/impl/__init__.py", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "file_content_changes": "@@ -0,0 +1,22 @@\n+\"\"\"Triton internal implementation details.\n+\n+Client libraries should not import interfaces from the `triton.impl` module;\n+as the details are subject to change.\n+\n+APIs defined in the `triton.impl` module which are public will be re-exported\n+in other relevant `triton` module namespaces.\n+\"\"\"\n+\n+from triton._C.libtriton.triton import ir\n+from .base import (\n+    builtin,\n+    extern,\n+    is_builtin,\n+)\n+\n+__all__ = [\n+    \"builtin\",\n+    \"extern\",\n+    \"ir\",\n+    \"is_builtin\",\n+]"}, {"filename": "python/triton/impl/base.py", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "file_content_changes": "@@ -0,0 +1,36 @@\n+from __future__ import annotations\n+\n+from functools import wraps\n+from typing import TypeVar\n+\n+T = TypeVar(\"T\")\n+\n+TRITON_BUILTIN = \"__triton_builtin__\"\n+\n+\n+def builtin(fn: T) -> T:\n+    \"\"\"Mark a function as a builtin.\"\"\"\n+    assert callable(fn)\n+\n+    @wraps(fn)\n+    def wrapper(*args, **kwargs):\n+        if \"_builder\" not in kwargs or kwargs[\"_builder\"] is None:\n+            raise ValueError(\n+                \"Did you forget to add @triton.jit ? \"\n+                \"(`_builder` argument must be provided outside of JIT functions.)\"\n+            )\n+        return fn(*args, **kwargs)\n+\n+    setattr(wrapper, TRITON_BUILTIN, True)\n+\n+    return wrapper\n+\n+\n+def is_builtin(fn) -> bool:\n+    \"\"\"Is this a registered triton builtin function?\"\"\"\n+    return getattr(fn, TRITON_BUILTIN, False)\n+\n+\n+def extern(fn: T) -> T:\n+    \"\"\"A decorator for external functions.\"\"\"\n+    return builtin(fn)"}, {"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -1,8 +1,10 @@\n \"\"\"isort:skip_file\"\"\"\n # Import order is significant here.\n \n-from triton._C.libtriton.triton import ir\n-\n+from ..impl import (\n+    ir,\n+    builtin,\n+)\n from . import core, extern, libdevice, random\n from .core import (\n     abs,"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "file_content_changes": "@@ -1,11 +1,10 @@\n from __future__ import annotations\n \n from enum import Enum\n-from functools import wraps\n from typing import List, Callable, TypeVar\n \n import triton\n-from . import semantic\n+from . import builtin, semantic\n from triton._C.libtriton.triton import ir\n \n T = TypeVar('T')\n@@ -34,17 +33,6 @@ def _to_tensor(x, builder):\n     assert False, f'cannot convert {x} to tensor'\n \n \n-def builtin(fn: T) -> T:\n-    @wraps(fn)\n-    def wrapper(*args, **kwargs):\n-        if '_builder' not in kwargs or \\\n-           kwargs['_builder'] is None:\n-            raise ValueError(\"Did you forget to add @triton.jit ? (`_builder` argument must be provided outside of JIT functions.)\")\n-        return fn(*args, **kwargs)\n-\n-    return wrapper\n-\n-\n class dtype:\n     SINT_TYPES = ['int1', 'int8', 'int16', 'int32', 'int64']\n     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']"}, {"filename": "python/triton/language/extern.py", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "file_content_changes": "@@ -86,25 +86,3 @@ def elementwise(lib_name: str, lib_path: str, args: list, arg_type_symbol_dict:\n             ret_shape = broadcast_arg.shape\n     func = getattr(_builder, \"create_external_elementwise\")\n     return dispatch(func, lib_name, lib_path, dispatch_args, arg_type_symbol_dict, ret_shape, _builder)\n-\n-\n-class ExternalFunction:\n-    '''\n-        A wrapper for external functions\n-    '''\n-\n-    def __init__(self, fn):\n-        self.fn = fn\n-\n-    def __call__(self, *args, **kwargs):\n-        if '_builder' not in kwargs or \\\n-           kwargs['_builder'] is None:\n-            raise ValueError(\"Did you forget to add @triton.jit ? (`_builder` argument must be provided outside of JIT functions.)\")\n-        return self.fn(*args, **kwargs)\n-\n-\n-def extern(fn):\n-    '''\n-        A decorator for external functions\n-    '''\n-    return ExternalFunction(fn)"}, {"filename": "python/triton/language/libdevice.py", "status": "modified", "additions": 200, "deletions": 199, "changes": 399, "file_content_changes": "@@ -1,35 +1,36 @@\n import os\n \n+from .. import impl\n from . import core, extern\n \n LIBDEVICE_PATH = os.path.dirname(\n     os.path.abspath(__file__)) + \"/libdevice.10.bc\"\n \n \n-@extern.extern\n+@impl.extern\n def clz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_clz\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_clzll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def popc(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_popc\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_popcll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def byte_perm(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_byte_perm\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def min(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_min\", core.dtype(\"int32\")),\n@@ -41,7 +42,7 @@ def min(arg0, arg1, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def max(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_max\", core.dtype(\"int32\")),\n@@ -53,7 +54,7 @@ def max(arg0, arg1, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mulhi(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mulhi\", core.dtype(\"int32\")),\n@@ -63,31 +64,31 @@ def mulhi(arg0, arg1, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mul24(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mul24\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umul24\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def brev(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_brev\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_brevll\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sad(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"uint32\"),): (\"__nv_sad\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_usad\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def abs(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_abs\", core.dtype(\"int32\")),\n@@ -97,1370 +98,1370 @@ def abs(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def floor(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_floorf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_floor\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcp64h(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_rcp64h\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rsqrt(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rsqrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rsqrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ceil(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_ceil\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"),): (\"__nv_ceilf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def trunc(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_trunc\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"),): (\"__nv_truncf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def exp2(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_exp2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def saturatef(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_saturatef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_dividef(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_fdividef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def div_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def div_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def div_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def div_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcp_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcp_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcp_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcp_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sqrt_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sqrt_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sqrt_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sqrt(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sqrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sqrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def add_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rn\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def add_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rz\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def add_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rd\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def add_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_ru\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mul_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rn\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mul_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rz\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mul_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rd\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def mul_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_ru\", core.dtype(\"fp64\")),\n                                (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2int_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2int_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2int_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2int_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2int_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2uint_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2uint_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2uint_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2uint_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2uint_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2int_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2int_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2int_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2int_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2int_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2uint_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rn\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2uint_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rz\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2uint_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2uint_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2uint_ru\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def hiloint2double(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hiloint2double\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2loint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2loint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2hiint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2hiint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ll_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ll_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ll_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ll_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ll_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ull_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ull_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ull_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float2ull_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float2ull_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ll_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ll_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ll_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ll_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ll_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ull_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rn\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ull_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rz\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ull_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rd\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double2ull_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double2ull_ru\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2double_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2double_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ll2double_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2double_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2double_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ull2double_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def int_as_float(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float_as_int(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float_as_int\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def uint_as_float(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def float_as_uint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_float_as_uint\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def longlong_as_double(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_longlong_as_double\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def double_as_longlong(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_double_as_longlong\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_sinf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_sinf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_cosf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_cosf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_log2f(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_log2f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_logf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_logf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_expf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_expf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_tanf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_tanf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_exp10f(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_exp10f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_log10f(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fast_log10f\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fast_powf(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_powf\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def hadd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hadd\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_uhadd\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rhadd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_rhadd\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_urhadd\", core.dtype(\"uint32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sub_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rn\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sub_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rz\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sub_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rd\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sub_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_ru\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rsqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frsqrt_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ffs(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_ffs\", core.dtype(\"int32\")),\n                                (core.dtype(\"int64\"),): (\"__nv_ffsll\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rintf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rint\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def llrint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_llrintf\", core.dtype(\"int64\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_llrint\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def nearbyint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_nearbyintf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_nearbyint\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def isnan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isnanf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def signbit(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_signbitf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def copysign(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_copysignf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_copysign\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def finitef(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_finitef\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def isinf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isinff\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def nextafter(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_nextafterf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_nextafter\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sin(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sin\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cos(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cosf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cos\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sinpi(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinpif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sinpi\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cospi(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cospif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cospi\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def tan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tanf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tan\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def log2(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def exp(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_expf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def exp10(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_exp10f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_exp10\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cosh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_coshf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cosh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def sinh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_sinhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_sinh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def tanh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tanhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tanh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def atan2(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_atan2f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_atan2\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def atan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_atanf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_atan\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def asin(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_asinf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_asin\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def acos(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_acosf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_acos\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def log(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_logf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def log10(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log10f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log10\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def log1p(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_log1pf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_log1p\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def acosh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_acoshf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_acosh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def asinh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_asinhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_asinh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def atanh(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_atanhf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_atanh\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def expm1(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_expm1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_expm1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def hypot(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_hypotf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_hypot\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rhypot(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rhypotf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rhypot\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def norm3d(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm3df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm3d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rnorm3d(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm3df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm3d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def norm4d(arg0, arg1, arg2, arg3, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm4df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm4d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rnorm4d(arg0, arg1, arg2, arg3, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm4df\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm4d\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cbrt(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cbrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cbrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def rcbrt(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_rcbrtf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_rcbrt\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def j0(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_j0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_j0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def j1(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_j1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_j1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def y0(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_y0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_y0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def y1(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_y1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_y1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def yn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_ynf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_yn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def jn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_jnf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_jn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cyl_bessel_i0(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i0f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i0\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def cyl_bessel_i1(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i1f\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i1\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def erf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erff\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erf\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def erfinv(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def erfc(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfc\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def erfcx(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcxf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfcx\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def erfcinv(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_erfcinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_erfcinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def normcdfinv(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_normcdfinvf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_normcdfinv\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def normcdf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_normcdff\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_normcdf\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def lgamma(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_lgammaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_lgamma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ldexp(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_ldexpf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_ldexp\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def scalbn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_scalbnf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_scalbn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fmod(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmodf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fmod\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def remainder(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_remainderf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_remainder\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fma(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def pow(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_powif\", core.dtype(\"fp32\")),\n@@ -1470,55 +1471,55 @@ def pow(arg0, arg1, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def tgamma(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_tgammaf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_tgamma\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def round(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_roundf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_round\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def llround(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_llroundf\", core.dtype(\"int64\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_llround\", core.dtype(\"int64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def fdim(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdimf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fdim\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def ilogb(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_ilogbf\", core.dtype(\"int32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_ilogb\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def logb(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_logbf\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"),): (\"__nv_logb\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n-@extern.extern\n+@impl.extern\n def isfinited(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_isfinited\", core.dtype(\"int32\")),"}]