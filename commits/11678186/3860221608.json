[{"filename": "include/triton/Target/LLVMIR/LLVMIRTranslation.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "file_content_changes": "@@ -31,10 +31,6 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n std::unique_ptr<llvm::Module>\n translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module);\n \n-// Link against an external library\n-bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n-                   llvm::StringRef path);\n-\n } // namespace triton\n } // namespace mlir\n "}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "file_content_changes": "@@ -18,6 +18,7 @@\n #include \"llvm/IRReader/IRReader.h\"\n #include \"llvm/Linker/Linker.h\"\n #include \"llvm/Support/SourceMgr.h\"\n+#include <filesystem>\n \n namespace mlir {\n namespace triton {\n@@ -104,6 +105,24 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n     }\n   }\n \n+  if (!funcs.empty() && externLibs.empty()) {\n+    // When using the Math Dialect, it is possible that some ops (e.g., log) are\n+    // lowered to a function call. In this case, we need to link libdevice\n+    // using its default path:\n+    // [triton root dir]/python/triton/language/libdevice.10.bc\n+    // TODO(Keren): handle external linkage other than libdevice?\n+    namespace fs = std::filesystem;\n+    static const std::string libdevice = \"libdevice\";\n+    static const std::filesystem::path path = std::filesystem::path(__FILE__)\n+                                                  .parent_path()\n+                                                  .parent_path()\n+                                                  .parent_path()\n+                                                  .parent_path() /\n+                                              \"python\" / \"triton\" / \"language\" /\n+                                              \"libdevice.10.bc\";\n+    externLibs[libdevice] = path.string();\n+  }\n+\n   if (module.getOperation()->hasAttr(\"triton_gpu.externs\")) {\n     auto dict = module.getOperation()\n                     ->getAttr(\"triton_gpu.externs\")\n@@ -132,8 +151,8 @@ static void linkLibdevice(llvm::Module &module) {\n   module.addModuleFlag(reflect);\n }\n \n-bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n-                   llvm::StringRef path) {\n+static bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n+                          llvm::StringRef path) {\n   llvm::SMDiagnostic err;\n   auto &ctx = module.getContext();\n "}, {"filename": "lib/Target/PTX/PTXTranslation.cpp", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "file_content_changes": "@@ -8,7 +8,6 @@\n #include \"llvm/MC/TargetRegistry.h\"\n #include \"llvm/Support/TargetSelect.h\"\n #include \"llvm/Target/TargetMachine.h\"\n-#include <filesystem>\n \n namespace triton {\n \n@@ -31,37 +30,7 @@ static bool findAndReplace(std::string &str, const std::string &begin,\n   return true;\n }\n \n-// When using the Math Dialect, it is possible that some ops (e.g., log) are\n-// lowered to a function call. In this case, we need to link the libdevice\n-// TODO(Keren): handle external linkage other than libdevice?\n-static void linkExternal(llvm::Module &module) {\n-  bool hasExternal = false;\n-  for (auto &func : module) {\n-    if (func.hasExternalLinkage()) {\n-      hasExternal = true;\n-      break;\n-    }\n-  }\n-\n-  if (hasExternal) {\n-    namespace fs = std::filesystem;\n-    // Using the default libdevice path:\n-    // [triton root dir]/python/triton/language/libdevice.10.bc\n-    static const std::string libdevice = \"libdevice\";\n-    static const fs::path path = fs::path(__FILE__)\n-                                     .parent_path()\n-                                     .parent_path()\n-                                     .parent_path()\n-                                     .parent_path() /\n-                                 \"python\" / \"triton\" / \"language\" /\n-                                 \"libdevice.10.bc\";\n-    if (mlir::triton::linkExternLib(module, libdevice, path.string()))\n-      llvm::errs() << \"link failed for libdevice at path: \" << path.string();\n-  }\n-}\n-\n std::string translateLLVMIRToPTX(llvm::Module &module, int cc, int version) {\n-  linkExternal(module);\n   // LLVM version in use may not officially support target hardware\n   int maxNNVMCC = 75;\n   // options"}]