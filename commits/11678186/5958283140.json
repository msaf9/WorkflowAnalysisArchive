[{"filename": "lib/Dialect/TritonNvidiaGPU/Transforms/FenceInsertion.cpp", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "file_content_changes": "@@ -35,7 +35,7 @@ struct FenceInsertionPass\n   }\n   // TODO: support more general patterns to insert fences. eg. any op(generic)\n   // to shared in use-def chain which refers by async proxy. We have generic(\n-  // convertlayout with sts/stmatix) + fence + async(wgmma/tma store) up to now\n+  // convertlayout with sts/stmatix) + fence + async(wgmma) up to now\n   void runOnOperation() override {\n     // Only insert fences for compute capability 9.0\n     if (computeCapability < 90)\n@@ -65,27 +65,49 @@ struct FenceInsertionPass\n \n private:\n   bool canReachGeneric(Value operand) {\n+    static DenseSet<std::pair<Operation *, unsigned>> trace;\n     auto op = operand.getDefiningOp();\n+    // reach convertlayout\n+    if (op && isa<ttg::ConvertLayoutOp>(op) && ttg::isSharedEncoding(operand))\n+      return true;\n+    // root and not BlockArgument\n+    if (!op && !isa<BlockArgument>(operand))\n+      return false;\n+    // op and not BlockArgument\n+    if (op && !isa<BlockArgument>(operand)) {\n+      for (auto v : op->getOperands()) {\n+        if (canReachGeneric(v))\n+          return true;\n+      }\n+    }\n \n+    // reach BlockArgument\n     if (BlockArgument arg = dyn_cast<BlockArgument>(operand)) {\n       unsigned argNum = arg.getArgNumber();\n       Operation *argOwner = arg.getOwner()->getParentOp();\n       // suport ForOp\n       if (auto forOp = dyn_cast<scf::ForOp>(argOwner)) {\n-        Value v = forOp.getBody()->getTerminator()->getOperand(argNum - 1);\n+        // prologue\n+        auto iterOperands = forOp.getIterOperands();\n+        if (argNum == 0)\n+          return false;\n+        if (canReachGeneric(iterOperands[argNum - 1]))\n+          return true;\n+        // yield\n+        auto yieldOp = forOp.getBody()->getTerminator();\n+        Value v = yieldOp->getOperand(argNum - 1);\n+        auto entry = std::make_pair<Operation *, unsigned>(std::move(yieldOp),\n+                                                           std::move(argNum));\n+        // avoid cyclic\n+        if (trace.contains(entry))\n+          return false;\n+        else\n+          trace.insert(entry);\n+\n         if (canReachGeneric(v))\n           return true;\n       }\n     }\n-\n-    if (!op)\n-      return false;\n-    if (isa<ttg::ConvertLayoutOp>(op) && ttg::isSharedEncoding(operand))\n-      return true;\n-    for (auto v : op->getOperands()) {\n-      if (canReachGeneric(v))\n-        return true;\n-    }\n     return false;\n   }\n };"}, {"filename": "test/TritonGPU/fence-inserstion.mlir", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "file_content_changes": "@@ -5,7 +5,7 @@\n #shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0], hasLeadingOffset = false}>\n #shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = true}>\n module attributes {\"triton_gpu.compute-capability\" = 90 : i32, \"triton_gpu.num-ctas\" = 1 : i32, \"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n-  tt.func public @matmul_like_fence_0d1d2d3de4de5de6de7c8de9c10de11c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {\n+  tt.func public @matmul_like_fence_1(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {\n     %c2_i32 = arith.constant 2 : i32\n     %c128_i32 = arith.constant 128 : i32\n     %c1_i32 = arith.constant 1 : i32\n@@ -99,3 +99,107 @@ module attributes {\"triton_gpu.compute-capability\" = 90 : i32, \"triton_gpu.num-c\n     tt.return\n   }\n }\n+\n+\n+// -----\n+\n+#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>\n+#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>\n+#mma = #triton_gpu.mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0], instrShape = [16, 128, 16]}>\n+#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0], hasLeadingOffset = false}>\n+#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = true}>\n+module attributes {\"triton_gpu.compute-capability\" = 90 : i32, \"triton_gpu.num-ctas\" = 1 : i32, \"triton_gpu.num-warps\" = 4 : i32, \"triton_gpu.threads-per-warp\" = 32 : i32} {\n+  tt.func public @matmul_like_fence_2(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32}) attributes {noinline = false} {\n+    %c2_i32 = arith.constant 2 : i32\n+    %c128_i32 = arith.constant 128 : i32\n+    %c1_i32 = arith.constant 1 : i32\n+    %c3_i32 = arith.constant 3 : i32\n+    %true = arith.constant true\n+    %false = arith.constant false\n+    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma>\n+    %c0_i32 = arith.constant 0 : i32\n+    %c1_i64 = arith.constant 1 : i64\n+    %0 = arith.extsi %arg3 : i32 to i64\n+    %1 = arith.extsi %arg5 : i32 to i64\n+    %2 = arith.extsi %arg6 : i32 to i64\n+    %3 = tt.make_tensor_ptr %arg0, [%0, %1], [%2, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x128xf16, #blocked>, 1>\n+    %4 = arith.extsi %arg4 : i32 to i64\n+    %5 = arith.extsi %arg7 : i32 to i64\n+    %6 = tt.make_tensor_ptr %arg1, [%1, %4], [%5, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x128xf16, #blocked>, 1>\n+    %7 = arith.extsi %arg8 : i32 to i64\n+    %8 = tt.make_tensor_ptr %arg2, [%0, %4], [%7, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x128xf16, #blocked>, 1>\n+    %9 = triton_nvidia_gpu.alloc_mbarrier {count = 1 : i32} : tensor<3xi64, #shared>\n+    %10 = arith.cmpi sgt, %arg5, %c0_i32 : i32\n+    %11 = triton_gpu.alloc_tensor : tensor<3x128x128xf16, #shared1>\n+    %12 = tt.splat %10 : (i1) -> tensor<128x128xi1, #blocked1>\n+    %13 = triton_nvidia_gpu.extract_mbarrier %9[%c0_i32] : tensor<3xi64, #shared>, i32 -> <i64, 3>\n+    %14 = triton_nvidia_gpu.get_thread_id : i32\n+    %15 = arith.cmpi eq, %14, %c0_i32 : i32\n+    %16 = arith.andi %15, %10 : i1\n+    triton_nvidia_gpu.mbarrier_arrive %13, %16 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 65536 : i32} : !tt.ptr<i64, 3>, i1\n+    %17 = triton_nvidia_gpu.insert_slice_async_v2 %3, %11, %c0_i32, %13, %12 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+    %18 = triton_gpu.alloc_tensor : tensor<3x128x128xf16, #shared1>\n+    %19 = triton_nvidia_gpu.insert_slice_async_v2 %6, %18, %c0_i32, %13, %12 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+    %20 = tt.advance %3, [%c0_i32, %c128_i32] : <tensor<128x128xf16, #blocked>, 1>\n+    %21 = tt.advance %6, [%c128_i32, %c0_i32] : <tensor<128x128xf16, #blocked>, 1>\n+    %22 = arith.cmpi sgt, %arg5, %c128_i32 : i32\n+    %23 = tt.splat %22 : (i1) -> tensor<128x128xi1, #blocked1>\n+    %24 = triton_nvidia_gpu.extract_mbarrier %9[%c1_i32] : tensor<3xi64, #shared>, i32 -> <i64, 3>\n+    %25 = arith.andi %15, %22 : i1\n+    triton_nvidia_gpu.mbarrier_arrive %24, %25 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 65536 : i32} : !tt.ptr<i64, 3>, i1\n+    %26 = triton_nvidia_gpu.insert_slice_async_v2 %20, %17, %c1_i32, %24, %23 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+    %27 = triton_nvidia_gpu.insert_slice_async_v2 %21, %19, %c1_i32, %24, %23 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+    %28 = triton_gpu.extract_slice %26[0, 0, 0] [1, 128, 128] [1, 1, 1] : tensor<3x128x128xf16, #shared1> to tensor<128x128xf16, #shared1>\n+    %29 = triton_gpu.extract_slice %27[0, 0, 0] [1, 128, 128] [1, 1, 1] : tensor<3x128x128xf16, #shared1> to tensor<128x128xf16, #shared1>\n+    %b_29 = triton_gpu.convert_layout %29 : (tensor<128x128xf16, #shared1>) -> tensor<128x128xf16, #blocked1>\n+    %s_29 = triton_gpu.convert_layout %b_29 : (tensor<128x128xf16, #blocked1>) -> tensor<128x128xf16, #shared1>\n+    %30:15 = scf.for %arg9 = %c0_i32 to %arg5 step %c128_i32 iter_args(%arg10 = %cst, %arg11 = %3, %arg12 = %6, %arg13 = %26, %arg14 = %27, %arg15 = %28, %arg16 = %s_29, %arg17 = %20, %arg18 = %21, %arg19 = %c128_i32, %arg20 = %c2_i32, %arg21 = %c0_i32, %arg22 = %c0_i32, %arg23 = %false, %arg24 = %true) -> (tensor<128x128xf32, #mma>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, tensor<3x128x128xf16, #shared1>, tensor<128x128xf16, #shared1>, tensor<128x128xf16, #shared1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, i32, i32, i32, i32, i1, i1)  : i32 {\n+      %33 = triton_nvidia_gpu.extract_mbarrier %9[%arg21] : tensor<3xi64, #shared>, i32 -> <i64, 3>\n+      triton_nvidia_gpu.mbarrier_wait %33, %arg23 : <i64, 3>\n+      // CHECK: triton_nvidia_gpu.fence_async_shared\n+      %34 = triton_nvidia_gpu.dot_async %arg15, %arg16, %arg10 {allowTF32 = true} : tensor<128x128xf16, #shared1> * tensor<128x128xf16, #shared1> -> tensor<128x128xf32, #mma>\n+      triton_nvidia_gpu.dot_wait {pendings = 1 : i32}\n+      %35 = tt.advance %arg11, [%c0_i32, %c128_i32] : <tensor<128x128xf16, #blocked>, 1>\n+      %36 = tt.advance %arg12, [%c128_i32, %c0_i32] : <tensor<128x128xf16, #blocked>, 1>\n+      %37 = arith.addi %arg19, %c128_i32 : i32\n+      %38 = arith.cmpi slt, %37, %arg5 : i32\n+      %39 = arith.addi %arg21, %c1_i32 : i32\n+      %40 = arith.cmpi uge, %39, %c3_i32 : i32\n+      %41 = arith.select %40, %c0_i32, %39 : i32\n+      %42 = tt.advance %arg17, [%c0_i32, %c128_i32] : <tensor<128x128xf16, #blocked>, 1>\n+      %43 = tt.advance %arg18, [%c128_i32, %c0_i32] : <tensor<128x128xf16, #blocked>, 1>\n+      %44 = tt.splat %38 : (i1) -> tensor<128x128xi1, #blocked1>\n+      %45 = triton_nvidia_gpu.extract_mbarrier %9[%arg20] : tensor<3xi64, #shared>, i32 -> <i64, 3>\n+      %46 = arith.andi %15, %38 : i1\n+      triton_nvidia_gpu.mbarrier_arrive %45, %46 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 65536 : i32} : !tt.ptr<i64, 3>, i1\n+      %47 = triton_nvidia_gpu.insert_slice_async_v2 %42, %arg13, %arg20, %45, %44 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+      %48 = triton_gpu.extract_slice %47[%41, 0, 0] [1, 128, 128] [1, 1, 1] : tensor<3x128x128xf16, #shared1> to tensor<128x128xf16, #shared1>\n+      %49 = triton_nvidia_gpu.insert_slice_async_v2 %43, %arg14, %arg20, %45, %44 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x128xi1, #blocked1> -> tensor<3x128x128xf16, #shared1>\n+      %50 = triton_gpu.extract_slice %49[%41, 0, 0] [1, 128, 128] [1, 1, 1] : tensor<3x128x128xf16, #shared1> to tensor<128x128xf16, #shared1>\n+      %51 = arith.addi %arg20, %c1_i32 : i32\n+      %52 = arith.cmpi uge, %51, %c3_i32 : i32\n+      %53 = arith.select %52, %c0_i32, %51 : i32\n+      %54 = arith.addi %arg22, %c1_i32 : i32\n+      %55 = arith.xori %arg23, %true : i1\n+      %56 = arith.cmpi ult, %39, %c3_i32 : i32\n+      %57 = arith.andi %40, %55 : i1\n+      %58 = arith.andi %56, %arg23 : i1\n+      %59 = arith.ori %57, %58 : i1\n+      %60 = arith.xori %arg24, %true : i1\n+      %61 = arith.cmpi ult, %51, %c3_i32 : i32\n+      %62 = arith.andi %52, %60 : i1\n+      %63 = arith.andi %61, %arg24 : i1\n+      %64 = arith.ori %62, %63 : i1\n+      scf.yield %34, %35, %36, %47, %49, %48, %50, %42, %43, %37, %53, %41, %54, %59, %64 : tensor<128x128xf32, #mma>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<3x128x128xf16, #shared1>, tensor<3x128x128xf16, #shared1>, tensor<128x128xf16, #shared1>, tensor<128x128xf16, #shared1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, !tt.ptr<tensor<128x128xf16, #blocked>, 1>, i32, i32, i32, i32, i1, i1\n+    }\n+    scf.if %10 {\n+      triton_nvidia_gpu.dot_wait {pendings = 0 : i32}\n+    }\n+    %31 = arith.truncf %30#0 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma>\n+    %32 = triton_gpu.convert_layout %31 : (tensor<128x128xf16, #mma>) -> tensor<128x128xf16, #shared1>\n+    triton_nvidia_gpu.store_async %8, %32 : !tt.ptr<tensor<128x128xf16, #blocked>, 1>, tensor<128x128xf16, #shared1>\n+    triton_gpu.async_bulk_commit_group\n+    triton_gpu.async_bulk_wait {num = 0 : i32}\n+    tt.return\n+  }\n+}"}]