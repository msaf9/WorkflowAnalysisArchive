[{"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "file_content_changes": "@@ -26,7 +26,7 @@ namespace triton {\n // information from mlir module.\n struct NVVMMetadata {\n   int maxntidx{-1};\n-  bool is_kernel{};\n+  bool isKernel{};\n   // Free to extend with other information.\n };\n \n@@ -48,7 +48,7 @@ static void amendLLVMFunc(llvm::Function *func, const NVVMMetadata &metadata) {\n         ->addOperand(llvm::MDNode::get(ctx, md_args));\n   }\n \n-  if (metadata.is_kernel) {\n+  if (metadata.isKernel) {\n     llvm::Metadata *md_args[] = {\n         llvm::ValueAsMetadata::get(func), llvm::MDString::get(ctx, \"kernel\"),\n         llvm::ValueAsMetadata::get(\n@@ -75,7 +75,7 @@ extractNVVMMetadata(mlir::ModuleOp module,\n \n     // kernel\n     if (op->hasAttr(\"nvvm.kernel\")) {\n-      meta.is_kernel = true;\n+      meta.isKernel = true;\n       hasMetadata = true;\n     }\n \n@@ -179,6 +179,18 @@ translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module) {\n     return nullptr;\n   }\n \n+  // https://docs.nvidia.com/cuda/libdevice-users-guide/basic-usage.html\n+  // The standard process for linking with libdevice is to first link it with\n+  // the target module, then run the standard LLVM optimization and code\n+  // generation passes. This allows the optimizers to inline and perform\n+  // analyses on the used library functions, and eliminate any used functions as\n+  // dead code.\n+  auto externLibs = getExternLibs(module);\n+  for (auto &lib : externLibs) {\n+    if (linkExternLib(*llvmModule, lib.first, lib.second))\n+      return nullptr;\n+  }\n+\n   auto optPipeline = mlir::makeOptimizingTransformer(\n       /*optLevel=*/3, /*sizeLevel=*/0,\n       /*targetMachine=*/nullptr);\n@@ -194,12 +206,6 @@ translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module) {\n       amendLLVMFunc(&func, it->second);\n   }\n \n-  auto externLibs = getExternLibs(module);\n-  for (auto &lib : externLibs) {\n-    if (linkExternLib(*llvmModule, lib.first, lib.second))\n-      return nullptr;\n-  }\n-\n   return llvmModule;\n }\n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -1116,11 +1116,13 @@ def xor_sum(input: tl.tensor, axis: int, builder: ir.builder) -> tl.tensor:\n \n def umulhi(x: tl.tensor, y: tl.tensor, builder: ir.builder) -> tl.tensor:\n     x, y = binary_op_type_checking_impl(x, y, builder)\n+    # FIXME(Keren): not portable, should be fixed\n     from . import libdevice\n     return libdevice.mulhi(x, y, _builder=builder)\n \n \n def floor(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n+    # FIXME(Keren): not portable, should be fixed\n     from . import libdevice\n     return libdevice.floor(x, _builder=builder)\n "}]