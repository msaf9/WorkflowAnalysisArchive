[{"filename": "python/triton/__init__.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -15,8 +15,8 @@\n     TensorWrapper,\n     OutOfResources,\n     MockTensor,\n-    enable_illegal_memory_access_analysis,\n-    disable_illegal_memory_access_analysis,\n+    enable_invalid_memory_access_analysis,\n+    disable_invalid_memory_access_analysis,\n )\n from .runtime.jit import jit\n from .compiler import compile, CompilationError\n@@ -30,8 +30,8 @@\n     \"CompilationError\",\n     \"compile\",\n     \"Config\",\n-    \"enable_illegal_memory_access_analysis\",\n-    \"disable_illegal_memory_access_analysis\",\n+    \"enable_invalid_memory_access_analysis\",\n+    \"disable_invalid_memory_access_analysis\",\n     \"heuristics\",\n     \"impl\",\n     \"jit\","}, {"filename": "python/triton/runtime/__init__.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -1,7 +1,7 @@\n from .autotuner import Autotuner, Config, Heuristics, autotune, heuristics\n from .driver import driver\n-from .errors import (OutOfResources, disable_illegal_memory_access_analysis,\n-                     enable_illegal_memory_access_analysis)\n+from .errors import (OutOfResources, disable_invalid_memory_access_analysis,\n+                     enable_invalid_memory_access_analysis)\n from .jit import (JITFunction, KernelInterface, MockTensor, TensorWrapper, reinterpret,\n                   version_key)\n \n@@ -11,8 +11,8 @@\n     \"Heuristics\",\n     \"autotune\",\n     \"heuristics\",\n-    \"enable_illegal_memory_access_analysis\",\n-    \"disable_illegal_memory_access_analysis\",\n+    \"enable_invalid_memory_access_analysis\",\n+    \"disable_invalid_memory_access_analysis\",\n     \"JITFunction\",\n     \"KernelInterface\",\n     \"version_key\","}, {"filename": "python/triton/runtime/errors.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -29,8 +29,8 @@ def _rename_cuda_core(core_file_path: str):\n     return core_file_path\n \n \n-def _analyze_illegal_memory_access():\n-    print(\"Triton Illegal Memory Access Analysis...\")\n+def _analyze_invalid_memory_access():\n+    print(\"Triton Invalid Memory Access Analysis...\")\n     if os.environ.get(\"CUDA_ENABLE_COREDUMP_ON_EXCEPTION\", \"0\") == \"1\":\n         core_file_path = os.environ.get(\"CUDA_COREDUMP_FILE\", \"\")\n         cmd = f\"cuda-gdb -ex 'target cudacore {core_file_path}' -ex 'quit'\"\n@@ -47,15 +47,15 @@ def _analyze_illegal_memory_access():\n             print(f\"Example: {cmd}\")\n \n \n-def enable_illegal_memory_access_analysis(core_file_path: str):\n+def enable_invalid_memory_access_analysis(core_file_path: str):\n     os.environ[\"CUDA_ENABLE_COREDUMP_ON_EXCEPTION\"] = \"1\"\n     # convert core_file_path to absolute path\n     core_file_path = os.path.abspath(_rename_cuda_core(core_file_path))\n     os.environ[\"CUDA_COREDUMP_FILE\"] = core_file_path\n     # register the atexit hook\n-    atexit.register(_analyze_illegal_memory_access)\n+    atexit.register(_analyze_invalid_memory_access)\n \n \n-def disable_illegal_memory_access_analysis():\n+def disable_invalid_memory_access_analysis():\n     signal.signal(signal.SIGABRT, signal.SIG_DFL)\n-    atexit.unregister(_analyze_illegal_memory_access)\n+    atexit.unregister(_analyze_invalid_memory_access)"}, {"filename": "python/tutorials/09-illegal-memory-access-analysis.py", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "file_content_changes": "@@ -1,15 +1,15 @@\n \"\"\"\n-Illegal Memory Access Analysis\n+Invalid Memory Access Analysis\n ===============\n \n-In this tutorial, you will learn utlities to detect illegal memory accesses, including:\n-1. `triton.enable_illegal_memory_access_analysis` that catches exceptions on-the-fly and print the problematic line number.\n-2. `compute-sanitizer` as an external tool to instrument binaries and exhaustively capture illegal memory accesses.\n+In this tutorial, you will learn utlities to detect invalid memory accesses, including:\n+1. `triton.enable_invalid_memory_access_analysis` that catches exceptions on-the-fly and print the problematic line number.\n+2. `compute-sanitizer` as an external tool to instrument binaries and exhaustively capture invalid memory accesses.\n \n \"\"\"\n \n # %%\n-# Runtime Illegal Memory Access Analysis\n+# Runtime invalid Memory Access Analysis\n # --------------\n \n import os\n@@ -33,7 +33,7 @@ def add_kernel(\n     offsets = block_start + tl.arange(0, BLOCK_SIZE)\n     mask = offsets < n_elements\n     x = tl.load(x_ptr + offsets, mask=mask)\n-    # This line will cause an illegal memory access error\n+    # This line will cause an invalid memory access error\n     y = tl.load(y_ptr + offsets - 2147483647, mask=mask)\n     output = x + y\n     tl.store(output_ptr + offsets, output, mask=mask)\n@@ -54,31 +54,31 @@ def add(x: torch.Tensor, y: torch.Tensor):\n # We register the exception handling hook to print the exception stack trace.\n os.environ[\"PYTORCH_NO_CUDA_MEMORY_CACHING\"] = \"1\"\n \n-triton.enable_illegal_memory_access_analysis('./core_file')\n+triton.enable_invalid_memory_access_analysis('./core_file')\n torch.manual_seed(0)\n size = 127\n x = torch.rand(size, device='cuda')\n y = torch.rand(size, device='cuda')\n output_triton = add(x, y)\n \n # %%\n-# Compute-Sanitizer Illegal Memory Access Analysis\n+# Compute-Sanitizer Invalid Memory Access Analysis\n # --------------\n # Alternatively, you can try NVIDIA \"compute-sanitizer\" to instrument binaries and\n # capture invalide memory accesses.\n # See https://docs.nvidia.com/cuda/compute-sanitizer/index.html\n # for more details.\n-# For example, you can turn off Triton's illegal memory analysis (Line 57)\n+# For example, you can turn off Triton's invalid memory analysis (Line 57)\n # and run the following command to instrument the binary:\n-# $ compute-sanitizer --tool memcheck python ./09-illegal-memory-access-analysis.py\n+# $ compute-sanitizer --tool memcheck python ./09-invalid-memory-access-analysis.py\n # Then, you are expected to see the following output:\n # ```\n # ========= Compute Sanitizer Output =========\n # ========= CUDA-MEMCHECK\n # ========= Invalid __global__ read of size 4 bytes\n-# =========     at 0x270 in /root/code/triton/python/tutorials/09-exception-analysis.py:37:add_kernel_0d1d2d3\n-# =========     by thread (24,0,0) in block (0,0,0)\n-# =========     Address 0x7fa158380388 is out of bounds\n-# =========     and is 13106296 bytes before the nearest allocation at 0x7fa159000000 of size 508 bytes\n+# =========     at 0x270 in /root/code/triton/python/tutorials/09-invalid-memory-access-analysis.py:37:add_kernel_0d1d2d3\n+# =========     by thread (30,0,0) in block (0,0,0)\n+# =========     Address 0x7f78f32003ec is out of bounds\n+# =========     and is 8589933588 bytes before the nearest allocation at 0x7f7af3200000 of size 508 bytes\n # =========     Saved host backtrace up to driver entry point at kernel launch time\n # ```"}]