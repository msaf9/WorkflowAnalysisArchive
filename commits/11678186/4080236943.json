[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -236,7 +236,7 @@ struct PrintfOpConversion\n     msgNewline.push_back('\\n');\n     msgNewline.push_back('\\0');\n     Value prefixString =\n-        LLVM::getStaticString(loc, rewriter, \"printfFormat_\", msgNewline);\n+        LLVM::addStringToModule(loc, rewriter, \"printfFormat_\", msgNewline);\n     Value bufferPtr = null(int8Ptr);\n \n     SmallVector<Value, 16> newArgs;\n@@ -322,11 +322,11 @@ struct AssertOpConversion\n     auto moduleOp =\n         rewriter.getBlock()->getParent()->getParentOfType<ModuleOp>();\n     Value messageString =\n-        LLVM::getStaticString(loc, rewriter, \"assertMessage_\", message);\n+        LLVM::addStringToModule(loc, rewriter, \"assertMessage_\", message);\n     Value fileString =\n-        LLVM::getStaticString(loc, rewriter, \"assertFile_\", file);\n+        LLVM::addStringToModule(loc, rewriter, \"assertFile_\", file);\n     Value funcString =\n-        LLVM::getStaticString(loc, rewriter, \"assertFunc_\", func);\n+        LLVM::addStringToModule(loc, rewriter, \"assertFunc_\", func);\n     Value lineNumber = i32_val(line);\n     Value charSize = int_val(sizeof(size_t) * 8, sizeof(char));\n "}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -136,8 +136,8 @@ Value shflSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n   return builder.launch(rewriter, loc, val.getType(), false);\n }\n \n-Value getStaticString(Location loc, ConversionPatternRewriter &rewriter,\n-                      StringRef key, StringRef content) {\n+Value addStringToModule(Location loc, ConversionPatternRewriter &rewriter,\n+                        StringRef key, StringRef content) {\n   auto moduleOp = rewriter.getBlock()->getParent()->getParentOfType<ModuleOp>();\n   auto ctx = moduleOp.getContext();\n   unsigned stringNumber = 0;"}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -275,8 +275,8 @@ Value storeShared(ConversionPatternRewriter &rewriter, Location loc, Value ptr,\n Value shflSync(Location loc, ConversionPatternRewriter &rewriter, Value val,\n                int i);\n \n-Value getStaticString(Location loc, ConversionPatternRewriter &rewriter,\n-                      StringRef key, StringRef content);\n+Value addStringToModule(Location loc, ConversionPatternRewriter &rewriter,\n+                        StringRef key, StringRef content);\n \n } // namespace LLVM\n } // namespace mlir"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -1318,16 +1318,16 @@ def device_assert(cond, msg=\"\", _builder=None):\n     import inspect\n     frame = inspect.currentframe()\n     module = inspect.getmodule(frame)\n-    # XXX: The triton function module doesn't have any name.\n+    # The triton function module doesn't have the name attribute.\n     # We use this trick to find the caller.\n     while hasattr(module, \"__name__\"):\n         frame = frame.f_back\n         module = inspect.getmodule(frame)\n     func_name = frame.f_code.co_name\n     file_name = frame.f_back.f_code.co_filename\n-    # FIXME: The line number is not correct. It indicates the line\n+    # TODO: The line number currently indicates the line\n     # where the triton function is called but not where the\n-    # device_assert is called.\n+    # device_assert is called. Need to enhance this.\n     lineno = frame.f_back.f_lineno\n     return semantic.device_assert(_to_tensor(cond, _builder), msg, file_name, func_name, lineno, _builder)\n "}]