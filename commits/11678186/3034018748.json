[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -824,9 +824,10 @@ def make_triton_ir(fn, signature, specialization, constants):\n     function_name = '_'.join([fn.__name__, kernel_suffix(signature, specialization)])\n     new_constants = {k: 1 for k in specialization.equal_to_1}\n     new_attrs = {k: (\"multiple_of\", 16) for k in specialization.divisible_by_16}\n+    constants.update(new_constants)\n \n     prototype = triton.language.function_type(triton.language.void, arg_types)\n-    generator = CodeGenerator(context, prototype, gscope=gscope, constants=constants | new_constants, function_name=function_name, constexprs=constants, attributes=new_attrs, is_kernel=True)\n+    generator = CodeGenerator(context, prototype, gscope=gscope, constants=constants, function_name=function_name, constexprs=constants, attributes=new_attrs, is_kernel=True)\n     try:\n         generator.visit(fn.parse())\n     except Exception as e:"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -294,7 +294,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n       # kernel not cached -- compile\n       args = [{args}]\n       signature, constants = self._make_signature(sig_key)\n-      constants = constants | {{i: None for i, arg in enumerate(args) if arg is None}}\n+      constants.update({{i: None for i, arg in enumerate(args) if arg is None}})\n       configs = [self._get_config(*args)]\n       device = 0\n       if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs):"}]