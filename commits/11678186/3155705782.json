[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "file_content_changes": "@@ -1376,6 +1376,41 @@ def kernel(X, s):\n     kernel[(1,)](x_tri, 32)\n     np.testing.assert_equal(to_numpy(x_tri), np.arange(0, 256) % 8)\n \n+# -------------\n+# test call\n+# -------------\n+\n+\n+@triton.jit\n+def val_multiplier(val, i):\n+    return val * i\n+\n+\n+@triton.jit\n+def vecmul_kernel(ptr, n_elements, rep):\n+    pid = tl.program_id(axis=0)\n+    offsets = pid * 128 + tl.arange(0, 128)\n+    mask = offsets < n_elements\n+    vec = tl.load(ptr + offsets, mask=mask)\n+    for i in range(1, rep):\n+        vec = val_multiplier(vec, i)\n+    tl.store(ptr + offsets, vec, mask=mask)\n+\n+\n+def test_call():\n+\n+    @triton.jit\n+    def kernel(ptr, n_elements, num1, num2):\n+        vecmul_kernel(ptr, n_elements, num1)\n+        vecmul_kernel(ptr, n_elements, num2)\n+\n+    size = 1024\n+    rand_val = numpy_random((size,), dtype_str=\"float32\")\n+    rand_val_tri = to_triton(rand_val, device='cuda')\n+    kernel[(size // 128,)](rand_val_tri, size, 3, 5)\n+\n+    ans = rand_val * 1 * 2 * 1 * 2 * 3 * 4\n+    np.testing.assert_equal(to_numpy(rand_val_tri), ans)\n \n # -------------\n # test if"}]