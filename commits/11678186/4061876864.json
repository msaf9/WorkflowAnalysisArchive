[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "file_content_changes": "@@ -421,26 +421,41 @@ class MoveConvertOutOfIf : public mlir::RewritePattern {\n \n     BlockAndValueMapping mapping;\n     for (size_t i = 0; i < numOps; i++) {\n-      // Handle then\n-      if (auto thenCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n-              thenYield.getOperand(i).getDefiningOp())) {\n-        if (std::distance(thenCvt->user_begin(), thenCvt->user_end()) == 1) {\n+      auto thenCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n+          thenYield.getOperand(i).getDefiningOp());\n+      if (hasElse) {\n+        auto elseYield = ifOp.elseYield();\n+        auto elseCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n+            elseYield.getOperand(i).getDefiningOp());\n+        if (thenCvt && elseCvt &&\n+            std::distance(elseCvt->user_begin(), elseCvt->user_end()) == 1 &&\n+            std::distance(thenCvt->user_begin(), thenCvt->user_end()) == 1 &&\n+            thenCvt.getOperand().getType() == elseCvt.getOperand().getType()) {\n+          // If thenCvt and elseCvt's type are the same, it means a single\n+          // conversion is enough to replace both of them. We can move the\n+          // conversion out of scf.if and replace both thenCvt and elseCvt with\n+          // the new conversion.\n           mapping.map(thenCvt.getResult(), thenCvt.getOperand());\n           thenCvts.insert((Operation *)thenCvt);\n           newRetTypes.push_back(thenCvt.getOperand().getType());\n-        } else {\n-          newRetTypes.push_back(thenYield.getOperand(i).getType());\n-        }\n-      }\n-      // Handle else\n-      if (!hasElse)\n-        continue;\n-      if (auto elseCvt = dyn_cast<triton::gpu::ConvertLayoutOp>(\n-              elseYield.getOperand(i).getDefiningOp()))\n-        if (std::distance(elseCvt->user_begin(), elseCvt->user_end()) == 1) {\n           mapping.map(elseCvt.getResult(), elseCvt.getOperand());\n           elseCvts.insert((Operation *)elseCvt);\n-        }\n+        } else\n+          // Cannot move out of scf.if because thenCvt != elseCvt\n+          // Moving it out of scf.if will introduce a new conversion\n+          newRetTypes.push_back(thenYield.getOperand(i).getType());\n+      } else {\n+        if (thenCvt &&\n+            std::distance(thenCvt->user_begin(), thenCvt->user_end()) == 1) {\n+          // If there's only a single use of the conversion then we can move it\n+          mapping.map(thenCvt.getResult(), thenCvt.getOperand());\n+          thenCvts.insert((Operation *)thenCvt);\n+          newRetTypes.push_back(thenCvt.getOperand().getType());\n+        } else\n+          // Cannot move out of scf.if because either there's another use of\n+          // the conversion or there's no conversion at all\n+          newRetTypes.push_back(thenYield.getOperand(i).getType());\n+      }\n     }\n     if (mapping.getValueMap().empty())\n       return mlir::failure();"}]