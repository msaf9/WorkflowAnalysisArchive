[{"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "file_content_changes": "@@ -79,8 +79,13 @@ def _get_fn_file_line(fn):\n     base_fn = fn\n     while not isinstance(base_fn, JITFunction):\n         base_fn = base_fn.fn\n-    file_name = fn.fn.__code__.co_filename\n-    begin_line = fn.fn.__code__.co_firstlineno\n+    file_name = base_fn.fn.__code__.co_filename\n+    lines, begin_line = inspect.getsourcelines(base_fn.fn)\n+    for line in lines:\n+        if line.strip().startswith('@'):\n+            begin_line += 1\n+        else:\n+            break\n     return file_name, begin_line\n \n \n@@ -204,7 +209,8 @@ def __init__(self, context, prototype, gscope, attributes, constants, function_n\n         self.context = context\n         self.builder = ir.builder(context)\n         self.file_name = file_name\n-        self.begin_line = begin_line\n+        # node.lineno starts from 1, so we need to subtract 1\n+        self.begin_line = begin_line - 1\n         self.builder.set_loc(file_name, begin_line, 0)\n         self.module = self.builder.create_module() if module is None else module\n         self.function_ret_types = {} if function_types is None else function_types"}]