[{"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "file_content_changes": "@@ -3113,24 +3113,21 @@ void generator::visit_layout_mma(analysis::mma_layout* layout) {\n }\n \n void generator::visit_layout_scanline(analysis::scanline_layout* layout) {\n-  Value *warp_size = i32(32);\n-  Value* u_thread_id_0 = tgt_->get_local_id(mod_, *builder_, 0);\n-  Value *u_thread_id = urem(u_thread_id_0, warp_size);\n-  Value *u_warp_id = udiv(u_thread_id_0, warp_size);\n-\n+  Value* u_thread_id = tgt_->get_local_id(mod_, *builder_, 0);\n   auto order = layout->get_order();\n   const auto& shape = layout->get_shape();\n-  Value* full_thread_id = add(mul(u_warp_id, i32(32)), u_thread_id);\n   // Delinearize\n   size_t dim = shape.size();\n   std::vector<Value*> thread_id(dim);\n   for(unsigned k = 0; k < dim - 1; k++){\n     Constant *dim_k = i32(layout->mts(order[k]));\n-    Value *rem = urem(full_thread_id, dim_k);\n-    full_thread_id = udiv(full_thread_id, dim_k);\n+    Value *rem = urem(u_thread_id, dim_k);\n+    u_thread_id = udiv(u_thread_id, dim_k);\n     thread_id[order[k]] = rem;\n   }\n-  thread_id[order[dim - 1]] = full_thread_id;\n+  Constant *dim_k = i32(layout->mts(order[dim - 1]));\n+  thread_id[order[dim - 1]] = urem(u_thread_id, dim_k);\n+\n   // Create axes\n   for(unsigned k = 0; k < dim; k++) {\n     int nts = layout->nts(k);"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -687,7 +687,7 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n @pytest.mark.parametrize(\"dtype_str, shape\",\n                          [(dtype, shape)\n                           for dtype in dtypes\n-                          for shape in [128, 512]])\n+                          for shape in [32, 64, 128, 512]])\n def test_reduce1d(dtype_str, shape, device='cuda'):\n \n     # triton kernel"}]