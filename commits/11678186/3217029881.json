[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -709,8 +709,8 @@ def visit_BoolOp(self, node: ast.BoolOp):\n             rhs = rhs.value\n \n         fn = {\n-            ast.And: 'bool_and',\n-            ast.Or: 'bool_or',\n+            ast.And: 'logical_and',\n+            ast.Or: 'logical_or',\n         }[type(node.op)]\n \n         if self.is_triton_tensor(lhs):"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -556,14 +556,14 @@ def __ne__(self, other, _builder=None):\n         return semantic.not_equal(self, other, _builder)\n \n     @builtin\n-    def bool_and(self, other, _builder=None):\n+    def logical_and(self, other, _builder=None):\n         other = _to_tensor(other, _builder)\n-        return semantic.bool_and(self, other, _builder)\n+        return semantic.logical_and(self, other, _builder)\n \n     @builtin\n-    def bool_or(self, other, _builder=None):\n+    def logical_or(self, other, _builder=None):\n         other = _to_tensor(other, _builder)\n-        return semantic.bool_or(self, other, _builder)\n+        return semantic.logical_or(self, other, _builder)\n \n     @builtin\n     def __getitem__(self, slices, _builder=None):"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -285,15 +285,15 @@ def xor_(input: tl.tensor,\n     return tl.tensor(builder.create_xor(input.handle, other.handle), input.type)\n \n \n-def bool_and(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tensor:\n+def logical_and(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tensor:\n     if not input.type.is_int1():\n         input = bitcast(input, tl.dtype(\"int1\"), builder)\n     if not other.type.is_int1():\n         other = bitcast(other, tl.dtype(\"int1\"), builder)\n     return and_(input, other, builder)\n \n \n-def bool_or(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tensor:\n+def logical_or(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tensor:\n     if not input.type.is_int1():\n         input = bitcast(input, tl.dtype(\"int1\"), builder)\n     if not other.type.is_int1():"}]