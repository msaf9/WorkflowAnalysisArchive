[{"filename": "bin/triton-translate.cpp", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "file_content_changes": "@@ -10,13 +10,10 @@\n #include \"mlir/Support/LogicalResult.h\"\n #include \"mlir/Target/LLVMIR/Dialect/LLVMIR/LLVMToLLVMIRTranslation.h\"\n #include \"mlir/Target/LLVMIR/Export.h\"\n-#include \"mlir/Transforms/Passes.h\"\n #include \"triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h\"\n #include \"triton/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.h\"\n #include \"triton/Dialect/Triton/IR/Dialect.h\"\n-#include \"triton/Dialect/Triton/Transforms/Passes.h\"\n #include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n-#include \"triton/Dialect/TritonGPU/Transforms/Passes.h\"\n #include \"triton/Target/LLVMIR/LLVMIRTranslation.h\"\n #include \"triton/Target/PTX/PTXTranslation.h\"\n #include \"llvm/IR/LLVMContext.h\"\n@@ -97,42 +94,11 @@ LogicalResult tritonTranslateMain(int argc, char **argv,\n   llvm::cl::ParseCommandLineOptions(argc, argv, toolName);\n \n   mlir::MLIRContext context;\n-  context.disableMultithreading();\n   auto module = loadMLIRModule(inputFilename, context);\n   if (!module) {\n     return failure();\n   }\n \n-  // TODO: make these parameters\n-  int numWarps = 8;\n-  int numStages = 1;\n-  mlir::PassManager pm(module->getContext());\n-  pm.enableIRPrinting();\n-  // This follows optimize_triton_ir() from python/triton/compiler.py\n-  // TODO: share code between these two places\n-  pm.addPass(createInlinerPass());\n-  pm.addPass(createCombineOpsPass());\n-  pm.addPass(createCanonicalizerPass());\n-  pm.addPass(createCSEPass());\n-  pm.addPass(createLoopInvariantCodeMotionPass());\n-  // This follows ttir_to_ttgir() from python/triton/compiler.py\n-  // TODO: share code between these two places\n-  pm.addPass(createConvertTritonToTritonGPUPass(numWarps));\n-  pm.addPass(createTritonGPUCoalescePass());\n-  pm.addPass(createTritonGPUCombineOpsPass(SMArch.getValue()));\n-  pm.addPass(createTritonGPUPipelinePass(numStages));\n-  pm.addPass(createTritonGPUPrefetchPass());\n-  pm.addPass(createCanonicalizerPass());\n-  pm.addPass(createCSEPass());\n-  pm.addPass(createTritonGPUCombineOpsPass(SMArch.getValue()));\n-  pm.addPass(createLoopInvariantCodeMotionPass());\n-  pm.addPass(createTritonGPUCombineOpsPass(SMArch.getValue()));\n-  pm.addPass(createCSEPass());\n-\n-  if(failed(pm.run(module.get()))) {\n-    return failure();\n-  }\n-\n   std::string errorMessage;\n   auto output = openOutputFile(outputFilename, &errorMessage);\n   if (!output) {"}, {"filename": "include/triton/Dialect/Triton/IR/TritonDialect.td", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -14,7 +14,7 @@ def Triton_Dialect : Dialect {\n     Triton Dialect.\n \n     Dependent Dialects:\n-      * Arithmeticmetic:\n+      * Arithmetic:\n         * addf, addi, andi, cmpf, cmpi, divf, fptosi, ...\n       * Math:\n         * exp, sin, cos, log, ..."}, {"filename": "include/triton/Dialect/TritonGPU/IR/Dialect.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -11,7 +11,6 @@\n #include \"triton/Dialect/TritonGPU/IR/Dialect.h.inc\"\n #include \"triton/Dialect/TritonGPU/IR/Traits.h\"\n \n-// #include \"triton/Dialect/Triton/IR/AttrInterfaces.h.inc\"\n #define GET_ATTRDEF_CLASSES\n #include \"triton/Dialect/TritonGPU/IR/TritonGPUAttrDefs.h.inc\"\n "}, {"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "file_content_changes": "@@ -242,10 +242,12 @@ class AllocationAnalysis {\n     });\n     // Get the alias values\n     std::unique_ptr<DataFlowSolver> solver = createDataFlowSolver();\n-    SharedMemoryAliasAnalysis* aliasAnalysis =\n+    SharedMemoryAliasAnalysis *aliasAnalysis =\n         solver->load<SharedMemoryAliasAnalysis>();\n-    if (failed(solver->initializeAndRun(operation)))\n-      return;  // TODO(csigg): error reporting?\n+    if (failed(solver->initializeAndRun(operation))) {\n+      // TODO: return error instead of bailing out..\n+      llvm_unreachable(\"failed to run SharedMemoryAliasAnalysis\");\n+    }\n     operation->walk<WalkOrder::PreOrder>([&](Operation *op) {\n       for (auto operand : op->getOperands()) {\n         getValueAlias(operand, *aliasAnalysis);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "file_content_changes": "@@ -279,11 +279,7 @@ struct SharedMemoryObject {\n                      ConversionPatternRewriter &rewriter)\n       : base(base) {\n     strides = getStridesFromShapeAndOrder(shape, order, loc, rewriter);\n-\n-    for (auto idx : order) {\n-      (void)idx;\n-      offsets.emplace_back(i32_val(0));\n-    }\n+    offsets.append(order.size(), i32_val(0));\n   }\n \n   SmallVector<Value> getElems() const {"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -8,7 +8,7 @@\n #include \"mlir/Pass/PassManager.h\"\n #include \"mlir/Transforms/Passes.h\"\n \n-#include \"mlir/Parser.h\"\n+#include \"mlir/Parser/Parser.h\"\n #include \"mlir/Support/FileUtilities.h\"\n \n #include \"mlir/Dialect/LLVMIR/LLVMDialect.h\""}]