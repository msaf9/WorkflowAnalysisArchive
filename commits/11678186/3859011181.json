[{"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "file_content_changes": "@@ -36,9 +36,8 @@ static void amendLLVMFunc(llvm::Function *func, const NVVMMetadata &metadata) {\n   auto &ctx = func->getContext();\n \n   if (metadata.maxntidx > 0) {\n-    auto i32_ty = llvm::IntegerType::get(ctx, 32);\n-    auto warps =\n-        llvm::ConstantInt::get(i32_ty, llvm::APInt(32, metadata.maxntidx));\n+    auto warps = llvm::ConstantInt::get(llvm::IntegerType::get(ctx, 32),\n+                                        llvm::APInt(32, metadata.maxntidx));\n \n     llvm::Metadata *md_args[] = {llvm::ValueAsMetadata::get(func),\n                                  llvm::MDString::get(ctx, \"maxntidx\"),\n@@ -49,12 +48,12 @@ static void amendLLVMFunc(llvm::Function *func, const NVVMMetadata &metadata) {\n   }\n \n   if (metadata.isKernel) {\n-    llvm::Metadata *md_args[] = {\n+    llvm::Metadata *mdArgs[] = {\n         llvm::ValueAsMetadata::get(func), llvm::MDString::get(ctx, \"kernel\"),\n         llvm::ValueAsMetadata::get(\n             llvm::ConstantInt::get(llvm::Type::getInt32Ty(ctx), 1))};\n     module->getOrInsertNamedMetadata(\"nvvm.annotations\")\n-        ->addOperand(llvm::MDNode::get(ctx, md_args));\n+        ->addOperand(llvm::MDNode::get(ctx, mdArgs));\n   }\n }\n \n@@ -99,8 +98,8 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n       auto path =\n           func.getOperation()->getAttr(\"libpath\").dyn_cast<StringAttr>();\n       if (name) {\n-        std::string lib_name = name.str();\n-        externLibs[lib_name] = path.str();\n+        std::string libName = name.str();\n+        externLibs[libName] = path.str();\n       }\n     }\n   }\n@@ -123,12 +122,12 @@ static void linkLibdevice(llvm::Module &module) {\n   // for example, when enable nvvm-reflect-ftz, sqrt.approx.f32 will change to\n   // sqrt.approx.ftz.f32\n   auto &ctx = module.getContext();\n-  llvm::Type *I32 = llvm::Type::getInt32Ty(ctx);\n+  llvm::Type *i32 = llvm::Type::getInt32Ty(ctx);\n   llvm::Metadata *mdFour =\n-      llvm::ConstantAsMetadata::get(llvm::ConstantInt::getSigned(I32, 4));\n+      llvm::ConstantAsMetadata::get(llvm::ConstantInt::getSigned(i32, 4));\n   llvm::Metadata *mdName = llvm::MDString::get(ctx, \"nvvm-reflect-ftz\");\n   llvm::Metadata *mdOne =\n-      llvm::ConstantAsMetadata::get(llvm::ConstantInt::getSigned(I32, 1));\n+      llvm::ConstantAsMetadata::get(llvm::ConstantInt::getSigned(i32, 1));\n   llvm::MDNode *reflect = llvm::MDNode::get(ctx, {mdFour, mdName, mdOne});\n   module.addModuleFlag(reflect);\n }"}]