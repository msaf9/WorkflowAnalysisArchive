[{"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -2,6 +2,7 @@\n # Import order is significant here.\n \n from . import math\n+from . import extra\n from .standard import (\n     cdiv,\n     sigmoid,\n@@ -128,6 +129,7 @@\n     \"dot\",\n     \"dtype\",\n     \"exp\",\n+    \"extra\",\n     \"fdiv\",\n     \"float16\",\n     \"float32\","}, {"filename": "python/triton/language/extra/__init__.py", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -0,0 +1,3 @@\n+from . import cuda\n+\n+__all__ = ['cuda']"}, {"filename": "python/triton/language/extra/cuda.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -7,6 +7,6 @@\n \n @core.extern\n def globaltimer(_builder=None):\n-    return core.elementwise(\"extra\", os.path.join(__path__, \"extra.bc\"), [],\n-                            {tuple(): (\"globaltimer\", core.dtype(\"int64\")),\n-                             }, _builder)\n+    return core.extern_elementwise(\"cuda\", os.path.join(__path__, \"cuda.bc\"), [],\n+                                   {tuple(): (\"globaltimer\", core.dtype(\"int64\")),\n+                                    }, _builder)"}, {"filename": "python/tutorials/01-vector-add.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -45,7 +45,7 @@ def add_kernel(\n     x = tl.load(x_ptr + offsets, mask=mask)\n     y = tl.load(y_ptr + offsets, mask=mask)\n     output = x + y\n-    output = output * 0 + tl.math.globaltimer()\n+    output = output * 0 + tl.extra.cuda.globaltimer()\n     # Write x + y back to DRAM.\n     tl.store(output_ptr + offsets, output, mask=mask)\n "}]