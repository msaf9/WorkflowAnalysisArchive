[{"filename": "include/triton/Dialect/TritonGPU/IR/Dialect.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -89,9 +89,8 @@ SmallVector<unsigned> getCTAOrder(Attribute layout);\n  * (3) In the implementation of emitIndices, ShapePerCTATile will\n  *     be replicated or wraped to fit ShapePerCTA.\n  */\n-SmallVector<unsigned>\n-getShapePerCTATile(Attribute layout,\n-                   ArrayRef<int64_t> tensorShape = ArrayRef<int64_t>());\n+SmallVector<unsigned> getShapePerCTATile(Attribute layout,\n+                                         ArrayRef<int64_t> tensorShape);\n \n SmallVector<int64_t> getShapePerCTA(ArrayRef<unsigned> CTASplitNum,\n                                     ArrayRef<int64_t> shape);"}, {"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -88,8 +88,8 @@ getScratchConfigForCvtLayout(triton::gpu::ConvertLayoutOp op, unsigned &inVec,\n \n   auto srcShapePerCTA = getShapePerCTA(srcTy);\n   auto dstShapePerCTA = getShapePerCTA(dstTy);\n-  auto srcShapePerCTATile = getShapePerCTATile(srcLayout, srcTy.getShape());\n-  auto dstShapePerCTATile = getShapePerCTATile(dstLayout, dstTy.getShape());\n+  auto srcShapePerCTATile = getShapePerCTATile(srcLayout, srcShapePerCTA);\n+  auto dstShapePerCTATile = getShapePerCTATile(dstLayout, dstShapePerCTA);\n \n   unsigned rank = dstTy.getRank();\n   SmallVector<unsigned> paddedRepShape(rank);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "file_content_changes": "@@ -251,8 +251,8 @@ struct ConvertLayoutOpConversion\n     auto sizePerThread = getSizePerThread(layout);\n     auto accumSizePerThread = product<unsigned>(sizePerThread);\n     SmallVector<unsigned> numCTATiles(rank);\n-    auto shapePerCTATile = getShapePerCTATile(layout);\n     auto shapePerCTA = getShapePerCTA(layout, type.getShape());\n+    auto shapePerCTATile = getShapePerCTATile(layout, shapePerCTA);\n     auto order = getOrder(layout);\n     for (unsigned d = 0; d < rank; ++d) {\n       numCTATiles[d] = ceil<unsigned>(shapePerCTA[d], shapePerCTATile[d]);\n@@ -344,8 +344,9 @@ struct ConvertLayoutOpConversion\n \n     SmallVector<unsigned> numCTAs(rank, 1);\n     SmallVector<unsigned> numCTAsEachRep(rank, 1);\n-    SmallVector<unsigned> shapePerCTATile = getShapePerCTATile(layout, shape);\n     SmallVector<int64_t> shapePerCTA = getShapePerCTA(layout, shape);\n+    SmallVector<unsigned> shapePerCTATile =\n+        getShapePerCTATile(layout, shapePerCTA);\n     auto elemTy = type.getElementType();\n \n     int ctaId = 0;\n@@ -535,6 +536,7 @@ struct ConvertLayoutOpConversion\n     SmallVector<unsigned> outNumCTAsEachRep(rank);\n     SmallVector<unsigned> inNumCTAs(rank);\n     SmallVector<unsigned> outNumCTAs(rank);\n+    // [benzh] here logic need more check\n     auto srcShapePerCTATile = getShapePerCTATile(srcLayout, srcTy.getShape());\n     auto dstShapePerCTATile = getShapePerCTATile(dstLayout, shape);\n     auto shapePerCTA = getShapePerCTA(srcLayout, shape);\n@@ -759,7 +761,7 @@ struct ConvertLayoutOpConversion\n       auto ptrI8SharedTy = LLVM::LLVMPointerType::get(\n           typeConverter->convertType(rewriter.getI8Type()), 3);\n \n-      uint32_t rowsPerRep = getShapePerCTATile(mmaLayout)[0];\n+      uint32_t rowsPerRep = getShapePerCTATile(mmaLayout, srcShapePerCTA)[0];\n \n       Value threadId = getThreadId(rewriter, loc);\n       Value warpId = udiv(threadId, i32_val(32));"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM/SharedToDotOperandFMA.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -35,7 +35,7 @@ getThreadIds(Value threadId, ArrayRef<unsigned int> shapePerCTATile,\n // Get shapePerCTATile for M or N axis.\n int getShapePerCTATileForMN(BlockedEncodingAttr layout, bool isM) {\n   auto order = layout.getOrder();\n-  auto shapePerCTATile = getShapePerCTATile(layout);\n+  auto shapePerCTATile = getShapePerCTATile(layout, {});\n \n   int mShapePerCTATile =\n       order[0] == 1 ? shapePerCTATile[order[1]] : shapePerCTATile[order[0]];\n@@ -110,7 +110,7 @@ Value loadAFMA(Value A, Value llA, BlockedEncodingAttr dLayout, Value thread,\n   int K = aShapePerCTA[1];\n   int M = aShapePerCTA[0];\n \n-  auto shapePerCTATile = getShapePerCTATile(dLayout);\n+  auto shapePerCTATile = getShapePerCTATile(dLayout, {});\n   auto sizePerThread = getSizePerThread(dLayout);\n \n   Value _0 = i32_val(0);\n@@ -174,7 +174,7 @@ Value loadBFMA(Value B, Value llB, BlockedEncodingAttr dLayout, Value thread,\n   int K = bShapePerCTA[0];\n   int N = bShapePerCTA[1];\n \n-  auto shapePerCTATile = getShapePerCTATile(dLayout);\n+  auto shapePerCTATile = getShapePerCTATile(dLayout, {});\n   auto sizePerThread = getSizePerThread(dLayout);\n \n   Value _0 = i32_val(0);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/DotOpToLLVM/FMA.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -54,7 +54,7 @@ LogicalResult convertFMADot(triton::DotOp op, triton::DotOp::Adaptor adaptor,\n   Value llB = adaptor.getB();\n \n   auto sizePerThread = getSizePerThread(dLayout);\n-  auto shapePerCTATile = getShapePerCTATile(dLayout);\n+  auto shapePerCTATile = getShapePerCTATile(dLayout, {});\n \n   int K = aShapePerCTA[1];\n   int M = aShapePerCTA[0];"}, {"filename": "lib/Conversion/TritonGPUToLLVM/DotOpToLLVM/WGMMA.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -286,7 +286,7 @@ LogicalResult convertDot(TritonGPUToLLVMTypeConverter *typeConverter,\n   int N = instrShape[1];\n   int K = instrShape[2];\n \n-  auto shapePerCTATile = getShapePerCTATile(mmaEncoding);\n+  auto shapePerCTATile = getShapePerCTATile(mmaEncoding, dShapePerCTA);\n   int numRepM = ceil<unsigned>(dShapePerCTA[0], shapePerCTATile[0]);\n   int numRepN = ceil<unsigned>(dShapePerCTA[1], shapePerCTATile[1]);\n   int numRepK = ceil<unsigned>(aTensorTy.getShape()[1], instrShape[2]);\n@@ -364,7 +364,7 @@ Value loadC(Value tensor, Value llTensor) {\n   auto shapePerCTA = getShapePerCTA(tensorTy);\n   auto instrShape = mmaVersionToInstrShape(mmaEncoding, shapePerCTA);\n   auto wpt = mmaEncoding.getWarpsPerCTA();\n-  auto shapePerCTATile = getShapePerCTATile(mmaEncoding);\n+  auto shapePerCTATile = getShapePerCTATile(mmaEncoding, shapePerCTA);\n \n   int numRepM = ceil<unsigned>(shapePerCTA[0], shapePerCTATile[0]);\n   int numRepN = ceil<unsigned>(shapePerCTA[1], shapePerCTATile[1]);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -815,8 +815,8 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     auto threadsPerWarp = blockedLayout.getThreadsPerWarp();\n     auto warpsPerCTA = blockedLayout.getWarpsPerCTA();\n     auto order = blockedLayout.getOrder();\n-    auto shapePerCTATile = getShapePerCTATile(blockedLayout);\n     auto shapePerCTA = triton::gpu::getShapePerCTA(blockedLayout, shape);\n+    auto shapePerCTATile = getShapePerCTATile(blockedLayout, shapePerCTA);\n \n     unsigned rank = shape.size();\n     SmallVector<unsigned> tilesPerDim(rank);\n@@ -994,9 +994,9 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     SmallVector<SmallVector<unsigned>> ret;\n \n     for (unsigned i = 0; i < shapePerCTA[0];\n-         i += getShapePerCTATile(mmaLayout)[0]) {\n+         i += getShapePerCTATile(mmaLayout, shapePerCTA)[0]) {\n       for (unsigned j = 0; j < shapePerCTA[1];\n-           j += getShapePerCTATile(mmaLayout)[1]) {\n+           j += getShapePerCTATile(mmaLayout, shapePerCTA)[1]) {\n         ret.push_back({i, j});\n         ret.push_back({i, j + 1});\n         ret.push_back({i + 8, j});\n@@ -1073,9 +1073,9 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n         mmaVersionToInstrShape(mmaLayout, shapePerCTA);\n \n     for (unsigned i = 0; i < shapePerCTA[0];\n-         i += getShapePerCTATile(mmaLayout)[0]) {\n+         i += getShapePerCTATile(mmaLayout, shapePerCTA)[0]) {\n       for (unsigned j = 0; j < shapePerCTA[1];\n-           j += getShapePerCTATile(mmaLayout)[1]) {\n+           j += getShapePerCTATile(mmaLayout, shapePerCTA)[1]) {\n         for (unsigned k = 0; k < instrShape[1]; k += 8) {\n           ret.push_back({i, j + k});\n           ret.push_back({i, j + k + 1});"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -308,7 +308,8 @@ SmallVector<unsigned> getShapePerCTATile(Attribute layout,\n               static_cast<unsigned>(tensorShape[1])};\n     }\n     if (mmaLayout.isHopper()) {\n-      auto instrShape = mmaLayout.getInstrShape();\n+      auto instrShape = mmaVersionToInstrShape(\n+          mmaLayout, tensorShape); // mmaLayout.getInstrShape();\n       return {16 * mmaLayout.getWarpsPerCTA()[0],\n               instrShape[1] * mmaLayout.getWarpsPerCTA()[1]};\n     }\n@@ -933,7 +934,7 @@ unsigned DotOperandEncodingAttr::getTotalElemsPerThread(ArrayRef<int64_t> shape,\n     }\n   }\n   if (auto blockedLayout = getParent().dyn_cast<BlockedEncodingAttr>()) {\n-    auto shapePerCTATile = getShapePerCTATile(blockedLayout);\n+    auto shapePerCTATile = getShapePerCTATile(blockedLayout, {});\n     auto order = blockedLayout.getOrder();\n     auto sizePerThread = getSizePerThread(blockedLayout);\n "}]