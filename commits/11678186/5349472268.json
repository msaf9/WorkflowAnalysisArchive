[{"filename": "python/test/tools/compare_files.py", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "file_content_changes": "@@ -42,7 +42,9 @@ def getFileWithExtension(path: str, ext: str) -> Optional[str]:\n         return None\n     # filter out files with grp in their name\n     files = [f for f in files if \"__grp__\" not in f]\n-    assert len(files) == 1, f\"Found {len(files)} files in {path} with extension {ext}!\"\n+    if len(files) != 1:\n+        print(f\"Found {len(files)} files in {path} with extension {ext}!\")\n+        sys.exit(2)\n     return files[0]\n \n \n@@ -99,7 +101,9 @@ def getNameToHashesDict(path: str) -> Dict[str, List[str]]:\n     nameToHashes = {}\n     for hash in os.listdir(path):\n         fullPath = os.path.join(path, hash)\n-        assert os.path.isdir(fullPath), f\"Path {fullPath} is not a directory!\"\n+        if not os.path.isdir(fullPath):\n+            print(f\"Path {fullPath} is not a directory!\")\n+            sys.exit(2)\n         fileVec = getFileVec(fullPath)\n         if len(fileVec) < 2 or fileVec[0][0] != \"json\":\n             continue\n@@ -192,13 +196,17 @@ def main(args) -> bool:\n         Iterates over all kernels in the given yaml file and compares them\n         in the given paths\n     \"\"\"\n-    assert args.path1 != args.path2, \"Cannot compare files in the same directory!\"\n+    if args.path1 == args.path2:\n+        print(\"Cannot compare files in the same directory!\")\n+        sys.exit(2)\n     # Get kernel name to hashes dict, these hashes would have the same kernel name\n     nameToHashes1 = getNameToHashesDict(args.path1)\n     nameToHashes2 = getNameToHashesDict(args.path2)\n \n     yamlFilePath = args.kernels\n-    assert os.path.exists(yamlFilePath), f\"Path {yamlFilePath} does not exist!\"\n+    if not os.path.exists(yamlFilePath):\n+        print(f\"Path {yamlFilePath} does not exist!\")\n+        sys.exit(2)\n     nameAndExtension = loadYamlFile(yamlFilePath)[\"name_and_extension\"]\n \n     results = []"}]