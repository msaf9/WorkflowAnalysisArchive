[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "file_content_changes": "@@ -1128,10 +1128,7 @@ struct StoreOpConversion\n           elem = bitcast(elem, valueElemTy);\n \n           Type u32Ty = typeConverter->convertType(type::u32Ty(ctx));\n-          llWord =\n-              insert_element(wordTy, llWord, elem,\n-                             rewriter.create<LLVM::ConstantOp>(\n-                                 loc, u32Ty, IntegerAttr::get(u32Ty, elemIdx)));\n+          llWord = insert_element(wordTy, llWord, elem, i32_val(elemIdx));\n         }\n         llWord = bitcast(llWord, valArgTy);\n         std::string constraint =\n@@ -4275,9 +4272,10 @@ struct ExpOpConversionApprox\n     // For FP64 input, call __nv_expf for higher-precision calculation\n     if (elemTy.getIntOrFloatBitWidth() == 64)\n       return {};\n+\n     const double log2e = 1.4426950408889634;\n-    Value prod =\n-        rewriter.create<LLVM::FMulOp>(loc, f32_ty, operands[0], f32_val(log2e));\n+    Value prod = fmul(f32_ty, operands[0], f32_val(log2e));\n+\n     PTXBuilder ptxBuilder;\n     auto &exp2 = ptxBuilder.create<PTXInstr>(\"ex2\")->o(\"approx\").o(\"f32\");\n     auto output = ptxBuilder.newOperand(\"=f\");"}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -41,6 +41,7 @@\n #define sub(...) rewriter.create<LLVM::SubOp>(loc, __VA_ARGS__)\n #define fadd(...) rewriter.create<LLVM::FAddOp>(loc, __VA_ARGS__)\n #define mul(...) rewriter.create<LLVM::MulOp>(loc, __VA_ARGS__)\n+#define fmul(...) rewriter.create<LLVM::FMulOp>(loc, __VA_ARGS__)\n #define smax(...) rewriter.create<LLVM::SMaxOp>(loc, __VA_ARGS__)\n #define umax(...) rewriter.create<LLVM::UMaxOp>(loc, __VA_ARGS__)\n #define fmax(...) rewriter.create<LLVM::MaxNumOp>(loc, __VA_ARGS__)"}]