[{"filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -7,3 +7,6 @@ python/build/\n python/triton.egg-info/\n python/triton/_C/libtriton.pyd\n python/triton/_C/libtriton.so\n+\n+.vscode\n+.vs"}, {"filename": "CMakeLists.txt", "status": "modified", "additions": 83, "deletions": 69, "changes": 152, "file_content_changes": "@@ -3,6 +3,8 @@ include(ExternalProject)\n \n set(CMAKE_CXX_STANDARD 17)\n \n+set(CMAKE_INCLUDE_CURRENT_DIR ON)\n+\n if(NOT TRITON_LLVM_BUILD_DIR)\n     set(TRITON_LLVM_BUILD_DIR ${CMAKE_BINARY_DIR})\n endif()\n@@ -15,8 +17,8 @@ if(NOT WIN32)\n endif()\n \n # Options\n-option(BUILD_TUTORIALS \"Build C++ Triton tutorials\" ON)\n-option(BUILD_PYTHON_MODULE \"Build Python Triton bindings\" OFF)\n+option(TRITON_BUILD_TUTORIALS \"Build C++ Triton tutorials\" ON)\n+option(TRITON_BUILD_PYTHON_MODULE \"Build Python Triton bindings\" OFF)\n \n # Default build type\n if(NOT CMAKE_BUILD_TYPE)\n@@ -47,7 +49,8 @@ endif()\n ##########\n # LLVM\n ##########\n-if(\"${LLVM_LIBRARY_DIR}\" STREQUAL \"\")\n+if (NOT MLIR_DIR)\n+  if(NOT LLVM_LIBRARY_DIR)\n     if(WIN32)\n       find_package(LLVM 13 REQUIRED COMPONENTS nvptx amdgpu)\n \n@@ -66,80 +69,90 @@ if(\"${LLVM_LIBRARY_DIR}\" STREQUAL \"\")\n     if(APPLE)\n       set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.14\")\n     endif()\n-# sometimes we don't want to use llvm-config, since it may have been downloaded for some specific linux distros\n-else()\n+  # sometimes we don't want to use llvm-config, since it may have been downloaded for some specific linux distros\n+  else()\n     set(LLVM_LDFLAGS \"-L${LLVM_LIBRARY_DIR}\")\n     set(LLVM_LIBRARIES\n-libLLVMNVPTXCodeGen.a\n-libLLVMNVPTXDesc.a\n-libLLVMNVPTXInfo.a\n-libLLVMAMDGPUDisassembler.a\n-libLLVMMCDisassembler.a\n-libLLVMAMDGPUCodeGen.a\n-libLLVMMIRParser.a\n-libLLVMGlobalISel.a\n-libLLVMSelectionDAG.a\n-libLLVMipo.a\n-libLLVMInstrumentation.a\n-libLLVMVectorize.a\n-libLLVMLinker.a\n-libLLVMIRReader.a\n-libLLVMAsmParser.a\n-libLLVMFrontendOpenMP.a\n-libLLVMAsmPrinter.a\n-libLLVMDebugInfoDWARF.a\n-libLLVMCodeGen.a\n-libLLVMTarget.a\n-libLLVMScalarOpts.a\n-libLLVMInstCombine.a\n-libLLVMAggressiveInstCombine.a\n-libLLVMTransformUtils.a\n-libLLVMBitWriter.a\n-libLLVMAnalysis.a\n-libLLVMProfileData.a\n-libLLVMObject.a\n-libLLVMTextAPI.a\n-libLLVMBitReader.a\n-libLLVMAMDGPUAsmParser.a\n-libLLVMMCParser.a\n-libLLVMAMDGPUDesc.a\n-libLLVMAMDGPUUtils.a\n-libLLVMMC.a\n-libLLVMDebugInfoCodeView.a\n-libLLVMDebugInfoMSF.a\n-libLLVMCore.a\n-libLLVMRemarks.a\n-libLLVMBitstreamReader.a\n-libLLVMBinaryFormat.a\n-libLLVMAMDGPUInfo.a\n-libLLVMSupport.a\n-libLLVMDemangle.a\n-libLLVMPasses.a\n-libLLVMAnalysis.a\n-libLLVMTransformUtils.a\n-libLLVMScalarOpts.a\n-libLLVMTransformUtils.a\n-libLLVMipo.a\n-libLLVMObjCARCOpts.a\n-libLLVMCoroutines.a\n-libLLVMAnalysis.a\n-)\n+      libLLVMNVPTXCodeGen.a\n+      libLLVMNVPTXDesc.a\n+      libLLVMNVPTXInfo.a\n+      libLLVMAMDGPUDisassembler.a\n+      libLLVMMCDisassembler.a\n+      libLLVMAMDGPUCodeGen.a\n+      libLLVMMIRParser.a\n+      libLLVMGlobalISel.a\n+      libLLVMSelectionDAG.a\n+      libLLVMipo.a\n+      libLLVMInstrumentation.a\n+      libLLVMVectorize.a\n+      libLLVMLinker.a\n+      libLLVMIRReader.a\n+      libLLVMAsmParser.a\n+      libLLVMFrontendOpenMP.a\n+      libLLVMAsmPrinter.a\n+      libLLVMDebugInfoDWARF.a\n+      libLLVMCodeGen.a\n+      libLLVMTarget.a\n+      libLLVMScalarOpts.a\n+      libLLVMInstCombine.a\n+      libLLVMAggressiveInstCombine.a\n+      libLLVMTransformUtils.a\n+      libLLVMBitWriter.a\n+      libLLVMAnalysis.a\n+      libLLVMProfileData.a\n+      libLLVMObject.a\n+      libLLVMTextAPI.a\n+      libLLVMBitReader.a\n+      libLLVMAMDGPUAsmParser.a\n+      libLLVMMCParser.a\n+      libLLVMAMDGPUDesc.a\n+      libLLVMAMDGPUUtils.a\n+      libLLVMMC.a\n+      libLLVMDebugInfoCodeView.a\n+      libLLVMDebugInfoMSF.a\n+      libLLVMCore.a\n+      libLLVMRemarks.a\n+      libLLVMBitstreamReader.a\n+      libLLVMBinaryFormat.a\n+      libLLVMAMDGPUInfo.a\n+      libLLVMSupport.a\n+      libLLVMDemangle.a\n+      libLLVMPasses.a\n+      libLLVMAnalysis.a\n+      libLLVMTransformUtils.a\n+      libLLVMScalarOpts.a\n+      libLLVMTransformUtils.a\n+      libLLVMipo.a\n+      libLLVMObjCARCOpts.a\n+      libLLVMCoroutines.a\n+      libLLVMAnalysis.a\n+    )\n+  endif()\n+  set (MLIR_DIR ${LLVM_LIBRARY_DIR}/cmake/mlir)\n endif()\n-include_directories(${LLVM_INCLUDE_DIRS})\n \n # Python module\n-if(BUILD_PYTHON_MODULE)\n+if(TRITON_BUILD_PYTHON_MODULE)\n     message(STATUS \"Adding Python module\")\n-    set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n-    include_directories(\".\" ${PYTHON_SRC_PATH} ${PYTHON_INCLUDE_DIRS})\n-    link_directories(${PYTHON_LINK_DIRS})\n+    if (PYTHON_INCLUDE_DIRS)\n+      set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n+      include_directories(\".\" ${PYTHON_SRC_PATH} ${PYTHON_INCLUDE_DIRS})\n+      link_directories(${PYTHON_LINK_DIRS})\n+    else()\n+      find_package(Python3 REQUIRED COMPONENTS Development)\n+      set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n+      include_directories(\".\" ${PYTHON_SRC_PATH} ${Python3_INCLUDE_DIRS})\n+      link_directories(${Python3_LIBRARY_DIRS})\n+      link_libraries(${Python3_LIBRARIES})\n+      add_link_options(${Python3_LINK_OPTIONS})\n+    endif()\n     set(PYTHON_SRC ${PYTHON_SRC_PATH}/main.cc ${PYTHON_SRC_PATH}/triton.cc)\n endif()\n \n \n # # Triton\n # file(GLOB_RECURSE LIBTRITON_SRC lib/*.cc)\n-# if (WIN32 AND BUILD_PYTHON_MODULE)\n+# if (WIN32 AND TRITON_BUILD_PYTHON_MODULE)\n #     find_package(Python3 REQUIRED COMPONENTS Development)\n #     Python3_add_library(triton SHARED ${LIBTRITON_SRC} ${PYTHON_SRC})\n #     set_target_properties(triton PROPERTIES SUFFIX \".pyd\")\n@@ -150,17 +163,18 @@ endif()\n \n \n # MLIR\n-find_package(MLIR REQUIRED CONFIG PATHS ${LLVM_LIBRARY_DIR}/cmake/mlir)\n+find_package(MLIR REQUIRED CONFIG PATHS ${MLIR_DIR})\n \n-list(APPEND CMAKE_MODULE_PATH ${LLVM_LIBRARY_DIR}/cmake/llvm)\n-list(APPEND CMAKE_MODULE_PATH ${LLVM_LIBRARY_DIR}/cmake/mlir)\n+list(APPEND CMAKE_MODULE_PATH \"${MLIR_CMAKE_DIR}\")\n+list(APPEND CMAKE_MODULE_PATH \"${LLVM_CMAKE_DIR}\")\n \n include(TableGen) # required by AddMLIR\n include(AddLLVM)\n include(AddMLIR)\n # include(HandleLLVMOptions) # human-friendly error message\n \n include_directories(${MLIR_INCLUDE_DIRS})\n+include_directories(${LLVM_INCLUDE_DIRS})\n include_directories(${PROJECT_SOURCE_DIR}/include)\n include_directories(${PROJECT_BINARY_DIR}/include) # Tablegen'd files\n # link_directories(${LLVM_LIBRARY_DIR})\n@@ -209,7 +223,7 @@ else()\n endif()\n \n \n-if(BUILD_PYTHON_MODULE AND NOT WIN32)\n+if(TRITON_BUILD_PYTHON_MODULE AND NOT WIN32)\n     set(CMAKE_SHARED_LIBRARY_SUFFIX \".so\")\n     # Check if the platform is MacOS\n     if(APPLE)"}, {"filename": "python/setup.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -97,8 +97,8 @@ def build_extension(self, ext):\n         python_include_dirs = [distutils.sysconfig.get_python_inc()] + ['/usr/local/cuda/include']\n         cmake_args = [\n             \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\" + extdir,\n-            \"-DBUILD_TUTORIALS=OFF\",\n-            \"-DBUILD_PYTHON_MODULE=ON\",\n+            \"-DTRITON_BUILD_TUTORIALS=OFF\",\n+            \"-DTRITON_BUILD_PYTHON_MODULE=ON\",\n             \"-DLLVM_INCLUDE_DIRS=\" + llvm_include_dir,\n             \"-DLLVM_LIBRARY_DIR=\" + llvm_library_dir,\n             # '-DPYTHON_EXECUTABLE=' + sys.executable,"}, {"filename": "test/CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -18,7 +18,7 @@ set(TRITON_TEST_DEPENDS\n \n add_lit_testsuite(check-triton \"Running the triton regression tests\"\n   ${CMAKE_CURRENT_BINARY_DIR}\n-  DEPENDS ${STANDALONE_TEST_DEPENDS}\n+  DEPENDS ${TRITON_TEST_DEPENDS}\n   )\n set_target_properties(check-triton PROPERTIES FOLDER \"Tests\")\n "}]