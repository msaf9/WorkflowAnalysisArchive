[{"filename": "python/tests/test_core.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -1083,7 +1083,7 @@ def test_dot(epilogue, allow_tf32, dtype, device='cuda'):\n \n     M, N, K = 64, 64, 64\n     num_warps = 4\n-    trans_a, trans_b = False, True\n+    trans_a, trans_b = False, False\n \n     # triton kernel\n     @triton.jit\n@@ -1106,8 +1106,8 @@ def kernel(X, stride_xm, stride_xk,\n         Zs = Z + off_m[:, None] * stride_zm + off_n[None, :] * stride_zn\n         x = tl.load(Xs)\n         y = tl.load(Ys)\n-        x = x.T if TRANS_A else x\n-        y = y.T if TRANS_B else y\n+        x = tl.trans(x) if TRANS_A else x\n+        y = tl.trans(y) if TRANS_B else y\n         z = tl.dot(x, y, allow_tf32=ALLOW_TF32)\n         if ADD_MATRIX:\n             z += tl.load(Zs)\n@@ -1124,7 +1124,9 @@ def kernel(X, stride_xm, stride_xk,\n             den = tl.sum(num, 1)\n             z = num / den[:, None]\n         if CHAIN_DOT:\n-            z = tl.dot(z.to(tl.float16).T, tl.load(Ws))\n+            # tl.store(Zs, z)\n+            # tl.debug_barrier()\n+            z = tl.dot(z.to(tl.float16), tl.load(Ws))\n         tl.store(Zs, z)\n     # input\n     rs = RandomState(17)\n@@ -1171,7 +1173,7 @@ def kernel(X, stride_xm, stride_xk,\n         denom = np.sum(num, axis=-1, keepdims=True)\n         z_ref = num / denom\n     if epilogue == 'chain-dot':\n-        z_ref = np.matmul(z_ref.T, w)\n+        z_ref = np.matmul(z_ref, w)\n     # compare\n     # print(z_ref[:,0], z_tri[:,0])\n     np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=0.01)"}]