[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "file_content_changes": "@@ -514,6 +514,14 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     unsigned rank = shape.size();\n     assert(rank == order.size());\n     auto reordered = reorder(shape, order);\n+    SmallVector<Value> reorderedMultiDim(rank);\n+    if (auto constantOp = linear.getDefiningOp<arith::ConstantOp>()) {\n+      unsigned intVal =\n+          constantOp.getValue().cast<IntegerAttr>().getValue().getSExtValue();\n+      reorderedMultiDim = delinearize(rewriter, loc, intVal, reordered);\n+    } else {\n+      reorderedMultiDim = delinearize(rewriter, loc, linear, reordered);\n+    }\n     auto reorderedMultiDim = delinearize(rewriter, loc, linear, reordered);\n     SmallVector<Value> multiDim(rank);\n     for (unsigned i = 0; i < rank; ++i) {\n@@ -522,6 +530,26 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     return multiDim;\n   }\n \n+  SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n+                                 Location loc, unsigned linear,\n+                                 ArrayRef<unsigned> shape) const {\n+    unsigned rank = shape.size();\n+    assert(rank > 0);\n+    SmallVector<Value> multiDim(rank);\n+    if (rank == 1) {\n+      multiDim[0] = i32_val(linear % shape[0]);\n+    } else {\n+      unsigned remained = linear;\n+      for (auto &&en : llvm::enumerate(shape.drop_back())) {\n+        unsigned dimSize = en.value();\n+        multiDim[en.index()] = i32_val(remained % dimSize);\n+        remained = remained % dimSize;\n+      }\n+      multiDim[rank - 1] = i32_val(remained);\n+    }\n+    return multiDim;\n+  }\n+\n   SmallVector<Value> delinearize(ConversionPatternRewriter &rewriter,\n                                  Location loc, Value linear,\n                                  ArrayRef<unsigned> shape) const {"}]