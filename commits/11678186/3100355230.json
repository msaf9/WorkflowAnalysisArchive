[{"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "file_content_changes": "@@ -301,9 +301,17 @@ void LoopPipeliner::emitPrologue() {\n       }\n \n       // If this is a load/async_copy, we need to update the mask\n-      if (llvm::isa<triton::LoadOp, triton::gpu::InsertSliceAsyncOp>(newOp)) {\n-        Value mask = llvm::isa<triton::LoadOp>(newOp) ? newOp->getOperand(1)\n-                                                      : newOp->getOperand(3);\n+      if (Value mask = [&]() {\n+            if (auto loadOp = llvm::dyn_cast<triton::LoadOp>(newOp)) {\n+              return loadOp.mask();\n+            } else if (auto insertSliceAsyncOp =\n+                           llvm::dyn_cast<triton::gpu::InsertSliceAsyncOp>(\n+                               newOp)) {\n+              return insertSliceAsyncOp.mask();\n+            } else {\n+              return mlir::Value();\n+            }\n+          }()) {\n         // assert(I1 or TensorOf<[I1]>);\n         OpBuilder::InsertionGuard g(builder);\n         // TODO: move this out of the loop"}]