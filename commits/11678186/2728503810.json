[{"filename": "python/test/unit/language/test_random.py", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "file_content_changes": "@@ -175,3 +175,24 @@ def kernel(X, N, seed):\n     kernel[grid](x, N, seed)\n     assert abs(x.mean()) < 1e-2\n     assert abs(x.std() - 1) < 1e-2\n+\n+\n+# tl.rand() should never produce >=1.0\n+\n+def test_rand_limits():\n+    @triton.jit\n+    def kernel(input, output, n: tl.constexpr):\n+        idx = tl.arange(0, n)\n+        x=tl.load(input + idx)\n+        y=tl.random.uint32_to_uniform_float(x)\n+        tl.store(output + idx, y)\n+\n+    min_max_int32 = torch.tensor([\n+        torch.iinfo(torch.int32).min,\n+        torch.iinfo(torch.int32).max,\n+    ], dtype=torch.int32, device='cuda')\n+    output = torch.empty(2, dtype=torch.float32, device='cuda')\n+    kernel[(1,)](min_max_int32, output, 2)\n+\n+    assert output[0] == output[1]\n+    assert 1.0 - torch.finfo(torch.float32).eps <= output[0].item() < 1.0"}, {"filename": "python/triton/language/random.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -91,9 +91,10 @@ def uint32_to_uniform_float(x):\n     Numerically stable function to convert a random uint32 into a random float uniformly sampled in [0, 1).\n     \"\"\"\n     x = x.to(tl.int32, bitcast=True)\n-    max = 4.656613e-10  # = 1/MAX_INT = 1/2147483647.\n+    # maximum value such that `MAX_INT * scale < 1.0` (with float rounding)\n+    scale = 4.6566127342e-10\n     x = tl.where(x < 0, -x - 1, x)\n-    return x * max\n+    return x * scale\n \n \n @triton.jit"}]