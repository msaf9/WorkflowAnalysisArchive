[{"filename": "lib/Conversion/TritonGPUToLLVM/ConvertLayoutOpToLLVM.cpp", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "file_content_changes": "@@ -1,5 +1,6 @@\n #include \"ConvertLayoutOpToLLVM.h\"\n #include \"Utility.h\"\n+#include \"triton/Analysis/Utility.h\"\n \n using ::mlir::LLVM::delinearize;\n using ::mlir::LLVM::getSharedMemoryObjectFromStruct;\n@@ -228,12 +229,8 @@ struct ConvertLayoutOpConversion\n       elemTy = IntegerType::get(elemTy.getContext(), 64);\n \n     auto llvmElemTy = getTypeConverter()->convertType(elemTy);\n-    SmallVector<int64_t> repShapeLong;\n-    for (unsigned i = 0; i < repShape.size(); ++i) {\n-      repShapeLong.push_back(repShape[i]);\n-    }\n     auto smemStrides = getStridesFromShapeAndOrder(\n-        repShapeLong, getOrder(sharedLayout), loc, rewriter);\n+        convertType<int64_t>(repShape), getOrder(sharedLayout), loc, rewriter);\n     SmallVector<Value> smemOffsetVals(rank, i32_val(0));\n \n     SharedMemoryObject smemObj(smemBase, smemStrides, smemOffsetVals);\n@@ -485,15 +482,12 @@ struct ConvertLayoutOpConversion\n     if (srcLayout.isa<BlockedEncodingAttr>() &&\n         dstLayout.isa<MmaEncodingAttr>() && !isDstMmaV1) {\n       repShape = getScratchConfigForCvtLayout(op, inVec, outVec, false);\n-      SmallVector<int64_t> repShapeLong;\n-      for (unsigned i = 0; i < repShape.size(); ++i) {\n-        repShapeLong.push_back(repShape[i]);\n-      }\n       auto dstDotOp = triton::gpu::DotOperandEncodingAttr::get(\n           getContext(), 0, dstLayout, dstTy.getElementType());\n       sharedLayout = triton::gpu::SharedEncodingAttr::get(\n-          getContext(), dstDotOp, repShapeLong, getOrder(dstLayout),\n-          srcTy.getElementType());\n+          getContext(), dstDotOp,\n+          convertType<int64_t>(ArrayRef<unsigned>(repShape)),\n+          getOrder(dstLayout), srcTy.getElementType());\n     } else if (isSrcMmaV1 || isDstMmaV1) {\n       repShape = getScratchConfigForCvtLayout(op, inVec, outVec, true);\n       auto maxVec = std::max(inVec, outVec);"}]