[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "file_content_changes": "@@ -127,9 +127,9 @@ Value createLLVMIntegerConstant(OpBuilder &builder, Location loc, short width,\n                             __VA_ARGS__)\n \n LLVM::LLVMFuncOp getVprintfDeclaration(OpBuilder &builder) {\n-  auto module = builder.getBlock()->getParent()->getParentOfType<ModuleOp>();\n+  auto moduleOp = builder.getBlock()->getParent()->getParentOfType<ModuleOp>();\n   StringRef funcName(\"vprintf\");\n-  Operation *funcOp = module.lookupSymbol(funcName);\n+  Operation *funcOp = moduleOp.lookupSymbol(funcName);\n   if (funcOp)\n     return cast<LLVMFuncOp>(*funcOp);\n \n@@ -141,6 +141,9 @@ LLVM::LLVMFuncOp getVprintfDeclaration(OpBuilder &builder) {\n       LLVM::LLVMPointerType::get(IntegerType::get(context, 8))};\n   auto funcType = LLVM::LLVMFunctionType::get(retType, argsType);\n \n+  ConversionPatternRewriter::InsertionGuard guard(builder);\n+  builder.setInsertionPointToStart(moduleOp.getBody());\n+\n   return builder.create<LLVMFuncOp>(UnknownLoc::get(context), funcName,\n                                     funcType);\n }\n@@ -174,10 +177,16 @@ void llPrintf(StringRef msg, ValueRange args, OpBuilder &builder) {\n   size_t formatStringSize = formatString.size_in_bytes();\n   auto globalType = LLVM::LLVMArrayType::get(int8Ty, formatStringSize);\n \n-  auto global = builder.create<LLVM::GlobalOp>(\n-      UnknownLoc::get(context), globalType,\n-      /*isConstant=*/true, LLVM::Linkage::Internal, stringConstName,\n-      builder.getStringAttr(formatString));\n+  LLVM::GlobalOp global;\n+  {\n+    ConversionPatternRewriter::InsertionGuard guard(builder);\n+    builder.setInsertionPointToStart(moduleOp.getBody());\n+    global = builder.create<LLVM::GlobalOp>(\n+        UnknownLoc::get(context), globalType,\n+        /*isConstant=*/true, LLVM::Linkage::Internal, stringConstName,\n+        builder.getStringAttr(formatString));\n+  }\n+\n   Value globalPtr =\n       builder.create<LLVM::AddressOfOp>(UnknownLoc::get(context), global);\n   Value stringStart =\n@@ -192,9 +201,9 @@ void llPrintf(StringRef msg, ValueRange args, OpBuilder &builder) {\n       argTypes.push_back(arg.getType());\n     }\n     Type structTy = LLVM::LLVMStructType::getLiteral(context, argTypes);\n-\n-    Value allocated = builder.create<LLVM::AllocaOp>(\n-        UnknownLoc::get(context), structTy, one, /*alignment=*/0);\n+    auto allocated = builder.create<LLVM::AllocaOp>(\n+        UnknownLoc::get(context), LLVM::LLVMPointerType::get(structTy), one,\n+        /*alignment=*/0);\n \n     for (const auto &entry : llvm::enumerate(args)) {\n       auto index = builder.create<LLVM::ConstantOp>(\n@@ -1888,6 +1897,13 @@ class ElementwiseOpConversionBase\n     }\n     Value view = getStructFromElements(loc, resultVals, rewriter, structTy);\n     rewriter.replaceOp(op, view);\n+    // example for add printf\n+#if 0\n+    {\n+      auto builder = rewriter.atBlockTerminator(rewriter.getInsertionBlock());\n+      LLVM::llPrintf(\"hello world %d, %d\\n\", {i32_val(2008), i32_val(2023)}, builder);\n+    }\n+#endif\n     return success();\n   }\n "}]