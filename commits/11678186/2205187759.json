[{"filename": "python/triton/testing.py", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "file_content_changes": "@@ -3,6 +3,7 @@\n import sys\n import psutil, functools\n import torch\n+from contextlib import contextmanager\n \n import triton._C.libtriton.triton as _triton\n from .code_gen import OutOfResources\n@@ -382,6 +383,39 @@ def wrapper(*args, **kwargs):\n     return decorator\n \n \n+@contextmanager\n+def set_gpu_clock(ref_sm_clock=1350, ref_mem_clock=1215):\n+    try:\n+        subprocess.check_output([\"nvidia-smi\", \"-i\", \"0\", \"-pm\", \"1\"])\n+        subprocess.check_output(\n+            [\n+                \"nvidia-smi\",\n+                \"-i\",\n+                \"0\",\n+                f\"--lock-gpu-clocks={ref_sm_clock},{ref_sm_clock}\",\n+            ]\n+        )\n+        subprocess.check_output(\n+            [\n+                \"nvidia-smi\",\n+                \"-i\",\n+                \"0\",\n+                f\"--lock-memory-clocks={ref_mem_clock},{ref_mem_clock}\",\n+            ]\n+        )\n+        cur_sm_clock = nvsmi_attr([\"clocks.current.sm\"])[0]\n+        cur_mem_clock = nvsmi_attr([\"clocks.current.memory\"])[0]\n+        assert abs(cur_sm_clock - ref_sm_clock) < 10, f\"GPU SMs must run at {ref_sm_clock} MHz\"\n+        assert abs(cur_mem_clock - ref_mem_clock) < 10, f\"GPU SMs must run at {ref_mem_clock} MHz\"\n+        tflops = 1e-6 * 2 * 108 * 4 * 256 * ref_sm_clock\n+        gbps = 640 * 2 * ref_mem_clock * 1e-3\n+        yield tflops, gbps\n+    finally:\n+        subprocess.check_output([\"nvidia-smi\", \"-i\", \"0\", \"-pm\", \"0\"])\n+        subprocess.check_output([\"nvidia-smi\", \"-i\", \"0\", \"-rgc\"])\n+        subprocess.check_output([\"nvidia-smi\", \"-i\", \"0\", \"-rmc\"])\n+\n+\n def get_max_simd_tflops(dtype: torch.dtype, backend=None, device=None):\n     if not backend:\n         backend = _triton.runtime.backend.CUDA"}]