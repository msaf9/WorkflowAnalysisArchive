[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -330,7 +330,10 @@ def test_bitwise_op(dtype_x, dtype_y, op, device='cuda'):\n def test_shift_op(dtype_x, dtype_y, op, device='cuda'):\n     expr = f'x {op} y'\n     bw = max(_bitwidth(dtype_x), _bitwidth(dtype_y))\n-    dtype_z = f'uint{bw}'\n+    if dtype_x.startswith('int'):\n+        dtype_z = f'int{bw}'\n+    else:\n+        dtype_z = f'uint{bw}'\n     numpy_expr = f'x.astype(np.{dtype_z}) {op} y.astype(np.{dtype_z})'\n     _test_binary(dtype_x, dtype_y, expr, numpy_expr, device=device, y_low=0, y_high=65)\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -549,7 +549,10 @@ def __lshift__(self, other, _builder=None):\n     @builtin\n     def __rshift__(self, other, _builder=None):\n         other = _to_tensor(other, _builder)\n-        return semantic.lshr(self, other, _builder)\n+        if self.dtype.is_int_signed():\n+            return semantic.ashr(self, other, _builder)\n+        else:\n+            return semantic.lshr(self, other, _builder)\n \n     # comparison operators\n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "file_content_changes": "@@ -325,6 +325,13 @@ def lshr(input: tl.tensor,\n     return tl.tensor(builder.create_lshr(input.handle, other.handle), input.type)\n \n \n+def ashr(input: tl.tensor,\n+         other: tl.tensor,\n+         builder: ir.builder) -> tl.tensor:\n+    input, other = bitwise_op_type_checking_impl(input, other, builder)\n+    return tl.tensor(builder.create_ashr(input.handle, other.handle), input.type)\n+\n+\n def shl(input: tl.tensor,\n         other: tl.tensor,\n         builder: ir.builder) -> tl.tensor:\n@@ -999,6 +1006,7 @@ def dot(lhs: tl.tensor,\n         allow_tf32: bool,\n         builder: ir.builder) -> tl.tensor:\n     assert lhs.type.is_block() and rhs.type.is_block()\n+    assert lhs.dtype == rhs.dtype, \"lhs and rhs must have the same dtype!\"\n     assert len(lhs.shape) == 2 and len(rhs.shape) == 2\n     assert lhs.shape[1].value == rhs.shape[0].value\n     assert lhs.shape[0].value >= 16 and lhs.shape[1].value >= 16 \\"}]