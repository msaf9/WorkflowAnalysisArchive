[{"filename": "python/triton/language/extern.py", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "file_content_changes": "@@ -59,28 +59,34 @@ def elementwise(lib_name: str, lib_path: str, args: list, arg_type_symbol_dict:\n         :return: the return value of the function\n     '''\n     dispatch_args = args.copy()\n-    if len(args) == 1:\n-        dispatch_args[0] = core._to_tensor(dispatch_args[0], _builder)\n-        ret_shape = dispatch_args[0].shape\n-    elif len(args) == 2:\n-        dispatch_args[0] = core._to_tensor(dispatch_args[0], _builder)\n-        dispatch_args[1] = core._to_tensor(dispatch_args[1], _builder)\n-        dispatch_args[0], dispatch_args[1] = semantic.binary_op_type_checking_impl(\n-            dispatch_args[0], dispatch_args[1], _builder)\n-        ret_shape = dispatch_args[0].shape\n-    else:\n-        for i in range(len(dispatch_args)):\n-            dispatch_args[i] = core._to_tensor(dispatch_args[i], _builder)\n-        broadcast_arg = dispatch_args[0]\n-        # Get the broadcast shape over all the arguments\n-        for i in range(len(dispatch_args)):\n-            _, broadcast_arg = semantic.binary_op_type_checking_impl(\n-                dispatch_args[i], broadcast_arg, _builder)\n-        # Change the shape of each argument based on the broadcast shape\n-        for i in range(len(dispatch_args)):\n-            dispatch_args[i], _ = semantic.binary_op_type_checking_impl(\n-                dispatch_args[i], broadcast_arg, _builder)\n-        ret_shape = broadcast_arg.shape\n+    all_scalar = True\n+    ret_shape = None\n+    for dispatch_arg in dispatch_args:\n+        if dispatch_arg.type.is_block():\n+            all_scalar = False\n+    if not all_scalar:\n+        if len(args) == 1:\n+            dispatch_args[0] = core._to_tensor(dispatch_args[0], _builder)\n+            ret_shape = dispatch_args[0].shape\n+        elif len(args) == 2:\n+            dispatch_args[0] = core._to_tensor(dispatch_args[0], _builder)\n+            dispatch_args[1] = core._to_tensor(dispatch_args[1], _builder)\n+            dispatch_args[0], dispatch_args[1] = semantic.binary_op_type_checking_impl(\n+                dispatch_args[0], dispatch_args[1], _builder)\n+            ret_shape = dispatch_args[0].shape\n+        else:\n+            for i in range(len(dispatch_args)):\n+                dispatch_args[i] = core._to_tensor(dispatch_args[i], _builder)\n+            broadcast_arg = dispatch_args[0]\n+            # Get the broadcast shape over all the arguments\n+            for i in range(len(dispatch_args)):\n+                _, broadcast_arg = semantic.binary_op_type_checking_impl(\n+                    dispatch_args[i], broadcast_arg, _builder)\n+            # Change the shape of each argument based on the broadcast shape\n+            for i in range(len(dispatch_args)):\n+                dispatch_args[i], _ = semantic.binary_op_type_checking_impl(\n+                    dispatch_args[i], broadcast_arg, _builder)\n+            ret_shape = broadcast_arg.shape\n     func = getattr(_builder, \"create_extern_elementwise\")\n     return dispatch(func, lib_name, lib_path, dispatch_args, arg_type_symbol_dict, ret_shape, _builder)\n "}]