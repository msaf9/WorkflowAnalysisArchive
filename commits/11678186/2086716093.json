[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -1034,15 +1034,18 @@ def kernel(VALUE, X):\n # test dynamic parallelism\n # -------------------------\n \n+\n @triton.jit\n def mult(x, alpha):\n     tl.store(x + tl.program_id(0), alpha)\n \n+\n @triton.jit\n def stub(X, alpha, grid_0, grid_1, grid_2):\n     tl.launch(mult, [X, alpha], [grid_0, grid_1, grid_2])\n \n-def test_dyn_par(cond = True, device='cuda'):\n+\n+def test_dyn_par(cond=True, device='cuda'):\n     n_pids = 10\n     # pids = torch.arange(n_pids, device=device)\n     # alpha = 2.0"}, {"filename": "python/triton/code_gen.py", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "file_content_changes": "@@ -44,12 +44,13 @@ def mangle_ty(type):\n         return f'{elt}S{shape}S'\n     assert False, \"Unsupport type\"\n \n+\n def mangle_fn(name, arg_tys, constants):\n     # doesn't mangle ret type, which must be a function of arg tys\n     mangled_arg_names = '_'.join([mangle_ty(ty) for ty in arg_tys])\n     key = lambda x: x.__name__ if isinstance(x, JITFunction) else repr(x)\n     mangled_constants = '_'.join([f'{i}c{key(constants[i])}' for i in sorted(constants)])\n-    mangled_constants = mangled_constants.replace('.','x')\n+    mangled_constants = mangled_constants.replace('.', 'x')\n     return f'{name}__{mangled_arg_names}__{mangled_constants}'\n \n \n@@ -90,7 +91,7 @@ def visit_compound_statement(self, stmts):\n                 break\n         return stmts and isinstance(stmt, ast.Return)\n \n-    def __init__(self, context, prototype, gscope, attributes, constants, module = None, is_kernel = False):\n+    def __init__(self, context, prototype, gscope, attributes, constants, module=None, is_kernel=False):\n         self.builder = _triton.ir.builder(context)\n         self.value_constructor = _triton.ir.value_constructor(self.builder)\n         self.module = _triton.ir.module('', self.builder) if module is None else module\n@@ -170,8 +171,7 @@ def visit_FunctionDef(self, node):\n                 fn.args[idx].name = arg_name\n                 arg_values.append(fn.args[idx])\n                 idx += 1\n-        \n-                \n+\n         insert_pt = self.builder.get_insert_block()\n         entry = _triton.ir.basic_block.create(self.builder.context, \"entry\", fn)\n         self.builder.set_insert_block(entry)\n@@ -180,14 +180,13 @@ def visit_FunctionDef(self, node):\n             self.set_value(arg_name, arg_value)\n         # visit function body\n         has_ret = self.visit_compound_statement(node.body)\n-        # finalize \n+        # finalize\n         if not has_ret:\n             self.builder.ret_void()\n         else:\n             self.module.reset_ret_ty(fn_name, self.last_ret.type)\n         # self.module.reset_ret_type(node.name)\n         self.builder.set_insert_block(insert_pt)\n-            \n \n     def visit_arguments(self, node):\n         arg_names = []\n@@ -266,7 +265,7 @@ def visit_Tuple(self, node):\n         mode = type(args[0])\n         # tuple of values -- create a struct\n         if len(args) > 1 and mode == triton.language.block\\\n-            and all([type(arg) == mode for arg in args]):\n+                and all([type(arg) == mode for arg in args]):\n             args = [arg.handle for arg in args]\n             tys = [arg.type for arg in args]\n             struct_ty = _triton.ir.struct_type.get(tys, True)\n@@ -508,14 +507,13 @@ def visit_Call(self, node):\n         for keyword in node.keywords:\n             kws.update(self.visit(keyword))\n         args = [self.visit(arg) for arg in node.args]\n-    \n \n         if isinstance(fn, JITFunction):\n             from inspect import getcallargs\n             args = getcallargs(fn.fn, *args, **kws)\n             args = [args[name] for name in fn.arg_names]\n             args = [arg if isinstance(arg, triton.language.block)\n-                          else triton.language.constexpr(arg) for arg in args]\n+                    else triton.language.constexpr(arg) for arg in args]\n             # generate function def\n             attributes = dict()\n             constexprs = [i for i, arg in enumerate(args) if isinstance(arg, triton.language.constexpr)]\n@@ -527,7 +525,7 @@ def visit_Call(self, node):\n             fn_name = mangle_fn(fn.__name__, arg_types, constants)\n             # generate function def if necessary\n             if not self.module.has_function(fn_name):\n-                ret_type  = _triton.ir.type.get_void(self.builder.context)\n+                ret_type = _triton.ir.type.get_void(self.builder.context)\n                 prototype = _triton.ir.type.make_function(ret_type, arg_types)\n                 gscope = sys.modules[fn.fn.__module__].__dict__\n                 generator = CodeGenerator(self.builder.context, prototype, gscope, attributes, constants, module=self.module)\n@@ -539,7 +537,7 @@ def visit_Call(self, node):\n             return ret\n         # built-in function\n         if hasattr(fn, '__self__') and self.is_triton_object(fn.__self__) or \\\n-            sys.modules[fn.__module__] is triton.language.core:\n+                sys.modules[fn.__module__] is triton.language.core:\n             ret = fn(*args, _builder=self.builder, **kws)\n         if fn in self.builtins.values():\n             args = [arg.value if isinstance(arg, triton.language.constexpr) else arg\n@@ -1301,6 +1299,7 @@ def decorator(fn):\n \n ######\n \n+\n def cdiv(x, y):\n     return (x + y - 1) // y\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -875,7 +875,7 @@ def sigmoid(x):\n \n @triton.jit\n @_add_math_1arg_docstr(\"softmax\")\n-def softmax(x, ieee_rounding: constexpr=False):\n+def softmax(x, ieee_rounding: constexpr = False):\n     z = x - triton.language.max(x, 0)\n     num = triton.language.exp(z)\n     den = triton.language.sum(num, 0)\n@@ -933,6 +933,7 @@ def zeros_like(input):\n # Dynamic Parallelism\n # -----------------------\n \n+\n class LaunchProxy:\n \n     def __init__(self, fn, args, constants, grid, num_warps) -> None:\n@@ -942,6 +943,7 @@ def __init__(self, fn, args, constants, grid, num_warps) -> None:\n         self.num_warps = num_warps\n         self.fn = fn\n \n+\n @builtin\n def launch(fn, args, grid, num_warps=None, _builder=None):\n     constants = {i: x for i, x in enumerate(args) if isinstance(x, constexpr)}"}]