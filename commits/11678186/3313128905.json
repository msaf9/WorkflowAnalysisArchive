[{"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "file_content_changes": "@@ -150,14 +150,6 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n   }\n \n   std::map<std::string, std::string> extern_libs;\n-  if (module.getOperation()->hasAttr(\"triton_gpu.externs\")) {\n-    auto dict = module.getOperation()->getAttr(\"triton_gpu.externs\").dyn_cast<DictionaryAttr>();\n-    for (auto& attr : dict) {\n-      extern_libs[attr.getName().strref().trim().str()] =\n-        attr.getValue().dyn_cast<StringAttr>().strref().trim().str();\n-    }\n-  }\n-\n   SmallVector<LLVM::LLVMFuncOp> funcs;\n   module.walk([&](LLVM::LLVMFuncOp func) {\n     if (func.isExternal()) funcs.push_back(func);\n@@ -168,11 +160,18 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n     auto path = func.getOperation()->getAttr(\"libpath\").dyn_cast<StringAttr>();\n     if (name) {\n       std::string lib_name = name.str();\n-      //if (extern_libs.count(lib_name) > 0) llvm::errs() << lib_name << \" already exist\";\n       extern_libs[lib_name] = path.str();\n     }\n   }\n \n+  if (module.getOperation()->hasAttr(\"triton_gpu.externs\")) {\n+    auto dict = module.getOperation()->getAttr(\"triton_gpu.externs\").dyn_cast<DictionaryAttr>();\n+    for (auto& attr : dict) {\n+      extern_libs[attr.getName().strref().trim().str()] =\n+        attr.getValue().dyn_cast<StringAttr>().strref().trim().str();\n+    }\n+  }\n+\n   auto llvmir = translateLLVMToLLVMIR(llvmContext, module);\n   if (!llvmir) {\n     llvm::errs() << \"Translate to LLVM IR failed\";"}]