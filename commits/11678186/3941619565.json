[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -165,7 +165,7 @@ def set_value(self, name: str,\n         self.local_defs[name] = value\n \n     @staticmethod\n-    def is_triton_tensor(self, value):\n+    def is_triton_tensor(value):\n         return isinstance(value, triton.language.tensor)\n \n     #\n@@ -751,15 +751,15 @@ def visit_BoolOp(self, node: ast.BoolOp):\n \n     if sys.version_info < (3, 8):\n         @staticmethod\n-        def visit_NameConstant(self, node):\n+        def visit_NameConstant(node):\n             return triton.language.constexpr(node.value)\n \n         @staticmethod\n-        def visit_Num(self, node):\n+        def visit_Num(node):\n             return triton.language.constexpr(node.n)\n \n         @staticmethod\n-        def visit_Str(self, node):\n+        def visit_Str(node):\n             return triton.language.constexpr(ast.literal_eval(node))\n \n     def visit_Attribute(self, node):\n@@ -1625,7 +1625,7 @@ def __new__(cls):\n         return cls.instance\n \n     @staticmethod\n-    def _generate_src(self):\n+    def _generate_src():\n         return \"\"\"\n         #include <cuda.h>\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -140,15 +140,15 @@ def is_bool(self):\n         return self.is_int1()\n \n     @staticmethod\n-    def is_void(self):\n+    def is_void():\n         raise RuntimeError(\"Not implemented\")\n     \n     @staticmethod\n-    def is_block(self):\n+    def is_block():\n         return False\n \n     @staticmethod\n-    def is_ptr(self):\n+    def is_ptr():\n         return False\n \n     def __eq__(self, other: dtype):"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -158,7 +158,7 @@ def __init__(self, path) -> None:\n         self._symbol_groups = {}\n         \n     @staticmethod\n-    def _extract_symbol(self, line) -> Optional[Symbol]:\n+    def _extract_symbol(line) -> Optional[Symbol]:\n         # Extract symbols from line in the following format:\n         # \"define [internal] <ret_type> @<name>(<arg_types>,)\"\n         entries = line.split(\"@\")"}, {"filename": "python/triton/utils.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -34,7 +34,7 @@ def __init__(self, dtype):\n         self.dtype = dtype\n \n     @staticmethod\n-    def data_ptr(self):\n+    def data_ptr():\n         return 0  # optimistically assumes multiple of 16\n \n "}]