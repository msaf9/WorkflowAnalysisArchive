[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "file_content_changes": "@@ -64,13 +64,11 @@ def optimize_ttgir(mod, num_stages, compute_capability):\n     return mod\n \n \n-def ttgir_to_llir(mod, extern_libs, compute_capability):\n+def ttgir_to_llir(mod, extern_libs, arch):\n     if extern_libs:\n         _triton.add_external_libs(mod, list(extern_libs.keys()),\n                                   list(extern_libs.values()))\n-    # TODO: move rocm info in its own class\n-    is_rocm = isinstance(compute_capability, tuple)\n-    return _triton.translate_triton_gpu_to_llvmir(mod, compute_capability, is_rocm)\n+    return _triton.translate_triton_gpu_to_llvmir(mod, arch, _is_rocm(arch))\n \n \n # PTX translation\n@@ -286,11 +284,11 @@ def parse_mlir_module(path, context):\n \n \n # TODO: architecture descriptor class\n-def is_rocm(arch):\n+def _is_rocm(arch):\n     return isinstance(arch, tuple)\n \n \n-def is_cuda(arch):\n+def _is_cuda(arch):\n     return isinstance(arch, int)\n \n \n@@ -331,11 +329,12 @@ def add_cuda_stages(arch, extern_libs, stages):\n \n def compile(fn, **kwargs):\n     arch = get_architecture_descriptor(kwargs.get(\"cc\", None))\n+    is_cuda = _is_cuda(arch)\n     context = _triton.ir.context()\n     asm = dict()\n     constants = kwargs.get(\"constants\", dict())\n     num_warps = kwargs.get(\"num_warps\", 4)\n-    num_stages = kwargs.get(\"num_stages\", 3 if arch >= 75 else 2)\n+    num_stages = kwargs.get(\"num_stages\", 3 if is_cuda and arch >= 75 else 2)\n     extern_libs = kwargs.get(\"extern_libs\", dict())\n     debug = kwargs.get(\"debug\", False)\n     # build compilation stages\n@@ -347,7 +346,7 @@ def compile(fn, **kwargs):\n                        lambda src: optimize_ttgir(ttir_to_ttgir(src, num_warps), num_stages, arch))\n     stages[\"llir\"] = (lambda path: Path(path).read_text(),\n                       lambda src: ttgir_to_llir(src, extern_libs, arch))\n-    if is_cuda(arch):\n+    if is_cuda:\n         add_cuda_stages(arch, extern_libs, stages)\n     else:\n         add_rocm_stages(arch, extern_libs, stages)"}]