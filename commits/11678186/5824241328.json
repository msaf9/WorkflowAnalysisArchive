[{"filename": "lib/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.cpp", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "file_content_changes": "@@ -34,6 +34,8 @@ class NVGPUOpPatternBase : public mlir::RewritePattern {\n   explicit NVGPUOpPatternBase(mlir::MLIRContext *context)\n       : mlir::RewritePattern(SourceOp::getOperationName(), 1, context) {}\n \n+  virtual bool hasSideEffects() const { return false; }\n+\n   LogicalResult\n   matchAndRewrite(mlir::Operation *op,\n                   mlir::PatternRewriter &rewriter) const override {\n@@ -63,7 +65,7 @@ class CGABarrierSyncOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::CGABarrierSyncOp, CGABarrierSyncOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return false; }\n+\n   std::string getPtxAsm(ttn::CGABarrierSyncOp op) const {\n     return \"barrier.cluster.sync.aligned;\";\n   }\n@@ -76,7 +78,7 @@ class FenceAsyncSharedOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::FenceAsyncSharedOp, FenceAsyncSharedOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return false; }\n+\n   std::string getPtxAsm(ttn::FenceAsyncSharedOp op) const {\n     auto bCluster = op.getBCluster();\n     if (bCluster)\n@@ -92,7 +94,7 @@ class WGMMAFenceOpPattern\n   using Base = NVGPUOpPatternBase<ttn::WGMMAFenceOp, WGMMAFenceOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n   std::string getPtxAsm(ttn::WGMMAFenceOp op) const {\n     return \"wgmma.fence.sync.aligned;\";\n   }\n@@ -106,7 +108,7 @@ class WGMMACommitGroupOpPattern\n       NVGPUOpPatternBase<ttn::WGMMACommitGroupOp, WGMMACommitGroupOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n \n   std::string getPtxAsm(ttn::WGMMACommitGroupOp op) const {\n     return \"wgmma.commit_group.sync.aligned;\";\n@@ -121,7 +123,7 @@ class WGMMAWaitGroupOpPattern\n       NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp, WGMMAWaitGroupOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n \n   std::string getPtxAsm(ttn::WGMMAWaitGroupOp op) const {\n     auto pendings = op.getPendings();\n@@ -317,7 +319,6 @@ class ClusterArriveOpPattern\n   using Base = NVGPUOpPatternBase<ttn::ClusterArriveOp, ClusterArriveOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const { return false; }\n   std::string getPtxAsm(ttn::ClusterArriveOp op) const {\n     auto relaxed = op.getRelaxed();\n     if (relaxed)\n@@ -332,7 +333,7 @@ class ClusterWaitOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::ClusterWaitOp, ClusterWaitOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return false; }\n+\n   std::string getPtxAsm(ttn::ClusterWaitOp op) const {\n     return \"barrier.cluster.wait.aligned;\";\n   }\n@@ -734,7 +735,7 @@ class FenceMBarrierInitOpPattern\n       NVGPUOpPatternBase<ttn::FenceMBarrierInitOp, FenceMBarrierInitOpPattern>;\n   using Base::Base;\n \n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n \n   std::string getPtxAsm(ttn::FenceMBarrierInitOp op) const {\n     return \"fence.mbarrier_init.release.cluster;\";\n@@ -808,7 +809,7 @@ class CGABarrierArriveOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::CGABarrierArriveOp, CGABarrierArriveOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return false; }\n+\n   std::string getPtxAsm(ttn::CGABarrierArriveOp op) const {\n     return \"barrier.cluster.arrive;\";\n   }\n@@ -821,7 +822,7 @@ class CGABarrierWaitOpPattern\n   using Base =\n       NVGPUOpPatternBase<ttn::CGABarrierWaitOp, CGABarrierWaitOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return false; }\n+\n   std::string getPtxAsm(ttn::CGABarrierWaitOp op) const {\n     return \"barrier.cluster.wait;\";\n   }\n@@ -939,7 +940,7 @@ class RegAllocOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::RegAllocOp, RegAllocOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n   std::string getPtxAsm(ttn::RegAllocOp op) const {\n     auto regCount = op.getRegCount();\n     return \"setmaxnreg.inc.sync.aligned.u32 \" + std::to_string(regCount) + \";\";\n@@ -951,7 +952,7 @@ class RegDeallocOpPattern\n public:\n   using Base = NVGPUOpPatternBase<ttn::RegDeallocOp, RegDeallocOpPattern>;\n   using Base::Base;\n-  bool hasSideEffects() const { return true; }\n+  bool hasSideEffects() const override { return true; }\n   std::string getPtxAsm(ttn::RegDeallocOp op) const {\n     auto regCount = op.getRegCount();\n     return \"setmaxnreg.dec.sync.aligned.u32 \" + std::to_string(regCount) + \";\";"}]