[{"filename": "python/triton/language/extern.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -65,9 +65,9 @@ def elementwise(lib_name: str, lib_path: str, args: list, arg_type_symbol_dict:\n     if not all_scalar:\n         broadcast_arg = dispatch_args[0]\n         # Get the broadcast shape over all the arguments\n-        for i in range(len(dispatch_args)):\n+        for i, item in enumerate(dispatch_args):\n             _, broadcast_arg = semantic.binary_op_type_checking_impl(\n-                dispatch_args[i], broadcast_arg, _builder)\n+                item, broadcast_arg, _builder)\n         # Change the shape of each argument based on the broadcast shape\n         for i in range(len(dispatch_args)):\n             dispatch_args[i], _ = semantic.binary_op_type_checking_impl("}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "file_content_changes": "@@ -533,10 +533,10 @@ def broadcast_impl_shape(input: tl.tensor,\n         raise ValueError(f\"Cannot broadcast, rank mismatch: {src_shape}, {shape}\")\n     if shape == src_shape:\n         return input\n-    for i in range(len(src_shape)):\n-        if shape[i] != src_shape[i] and src_shape[i] != 1:\n+    for i, item in enumerate(src_shape):\n+        if shape[i] != item and item != 1:\n             raise ValueError(f\"Cannot broadcast, the expanded size of the tensor ({shape[i]})\"\n-                             f\" must match the existing size ({src_shape[i]}) at non-singleton dimension\"\n+                             f\" must match the existing size ({item}) at non-singleton dimension\"\n                              f\" {i}: {src_shape}, {shape}\")\n     ret_ty = tl.block_type(input.type.scalar, shape)\n     return tl.tensor(builder.create_broadcast(input.handle, shape), ret_ty)\n@@ -576,8 +576,7 @@ def broadcast_impl_value(lhs: tl.tensor,\n         assert len(rhs_shape) == len(lhs_shape)\n \n         ret_shape = []\n-        for i in range(len(lhs_shape)):\n-            left = lhs_shape[i]\n+        for i, left in enumerate(lhs_shape):\n             right = rhs_shape[i]\n             if left == 1:\n                 ret_shape.append(right)"}]