[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "file_content_changes": "@@ -11,6 +11,7 @@\n import sys\n import tempfile\n import textwrap\n+import threading\n import time\n import warnings\n from typing import Dict, Set, Tuple, Union\n@@ -1058,27 +1059,40 @@ def __call__(self, *args, **kwargs):\n         return self.kernel(*args, num_warps=config.num_warps, num_stages=config.num_stages, **kwargs, **config.kwargs)\n \n \n-@functools.lru_cache()\n+_version_key_lock = threading.Lock()\n+_version_key = None\n+\n+\n def version_key():\n-    import pkgutil\n-    contents = []\n-    # frontend\n-    with open(triton.code_gen.__file__, \"rb\") as f:\n-        contents += [hashlib.md5(f.read()).hexdigest()]\n-    # backend\n-    with open(triton._C.libtriton.__file__, \"rb\") as f:\n-        contents += [hashlib.md5(f.read()).hexdigest()]\n-    # language\n-    language_path = os.path.join(*triton.__path__, 'language')\n-    for lib in pkgutil.iter_modules([language_path]):\n-        with open(lib.module_finder.find_spec(lib.name).origin, \"rb\") as f:\n+    global _version_key\n+\n+    if _version_key is not None:\n+        return _version_key\n+\n+    with _version_key_lock:\n+        if _version_key is not None:\n+            return _version_key\n+\n+        import pkgutil\n+        contents = []\n+        # frontend\n+        with open(triton.code_gen.__file__, \"rb\") as f:\n+            contents += [hashlib.md5(f.read()).hexdigest()]\n+        # backend\n+        with open(triton._C.libtriton.__file__, \"rb\") as f:\n             contents += [hashlib.md5(f.read()).hexdigest()]\n-    # ptxas version\n-    try:\n-        ptxas_version = hashlib.md5(subprocess.check_output([\"ptxas\", \"--version\"])).hexdigest()\n-    except Exception:\n-        ptxas_version = ''\n-    return '-'.join(triton.__version__) + '-' + ptxas_version + '-' + '-'.join(contents)\n+        # language\n+        language_path = os.path.join(*triton.__path__, 'language')\n+        for lib in pkgutil.iter_modules([language_path]):\n+            with open(lib.module_finder.find_spec(lib.name).origin, \"rb\") as f:\n+                contents += [hashlib.md5(f.read()).hexdigest()]\n+        # ptxas version\n+        try:\n+            ptxas_version = hashlib.md5(subprocess.check_output([\"ptxas\", \"--version\"])).hexdigest()\n+        except Exception:\n+            ptxas_version = ''\n+        _version_key = '-'.join(triton.__version__) + '-' + ptxas_version + '-' + '-'.join(contents)\n+        return _version_key\n \n \n class DependenciesFinder(ast.NodeVisitor):"}]