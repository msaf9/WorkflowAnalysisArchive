[{"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 0, "deletions": 761, "changes": 761, "file_content_changes": "@@ -1,471 +1,5 @@\n // RUN: triton-opt %s -split-input-file --convert-triton-gpu-to-llvm | FileCheck %s\n \n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK: llvm.func @test_empty_kernel(%arg0: i32, %arg1: !llvm.ptr<f16, 1>)\n-  // Here the 128 comes from the 4 in module attribute multiples 32\n-  // CHECK:  attributes {nvvm.kernel = 1 : ui1, nvvm.maxntid = 128 : i32} {{.*}}\n-  func @test_empty_kernel(%lb : index, %A : !tt.ptr<f16>) {\n-    // CHECK:  llvm.return\n-    return\n-  }\n-} // end module\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_load\n-  func @basic_load(%a_ptr_init : tensor<256x!tt.ptr<f32>, #blocked0>, %cst : tensor<256xi1, #blocked0>, %cst_0 : tensor<256xf32, #blocked0>) {\n-    // CHECK: llvm.inline_asm\n-    // CHECK: llvm.inline_asm\n-    %1 = tt.load %a_ptr_init, %cst, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: vectorized_load\n-  func @vectorized_load(%a_ptr_init : tensor<256x!tt.ptr<f32>, #blocked0>, %cst : tensor<256xi1, #blocked0>, %cst_0 : tensor<256xf32, #blocked0>) {\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ld.global.b32\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ld.global.b32\n-    %1 = tt.load %a_ptr_init, %cst, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK-LABEL: vectorized_load_f16\n-  func @vectorized_load_f16(%a_ptr_init: tensor<256x!tt.ptr<f16>, #blocked0>, %cst : tensor<256xi1, #blocked0>, %cst_0 : tensor<256xf16, #blocked0>) {\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ld.global.b16\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ld.global.b16\n-    %1 = tt.load %a_ptr_init, %cst, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf16, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-// TODO: masked load with vectorization is pending on TODO\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: masked_load_const_other\n-  func @masked_load_const_other(%a_ptr_init : tensor<256x!tt.ptr<f32>, #blocked0>, %cst : tensor<256xi1, #blocked0>) {\n-    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked0>\n-    %1 = tt.load %a_ptr_init, %cst, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-// TODO: masked load with vectorization is pending on TODO\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: masked_load_const_other_vec\n-  func @masked_load_const_other_vec(%a_ptr_init : tensor<256x!tt.ptr<f32>, #blocked0>, %cst : tensor<256xi1, #blocked0>) {\n-    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked0>\n-    %1 = tt.load %a_ptr_init, %cst, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 2 : i32} {\n-  // CHECK-LABEL: global_load_store_no_vec\n-  func @global_load_store_no_vec(%arg0: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg3: i32) {\n-    %c256_i32 = arith.constant 256 : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = arith.muli %0, %c256_i32 : i32\n-    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked0>\n-    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked0>\n-    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked0>\n-    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-    %7 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Load 4 elements from vector0\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-\n-    // Load 4 elements from vector1\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: \"@${{.*}} ld.global.b32 { ${{.*}} }, [ ${{.*}} + 0 ];\n-    %9 = tt.load %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %10 = tt.load %8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %11 = arith.addf %9, %10 : tensor<256xf32, #blocked0>\n-    %12 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %13 = tt.addptr %12, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Store 4 elements to global\n-    // CHECK: @${{.*}} st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    // CHECK: @${{.*}} st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    // CHECK: @${{.*}} st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    // CHECK: @${{.*}} st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    tt.store %13, %11 : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 2 : i32} {\n-  // CHECK-LABEL: global_load_store_vec4\n-  func @global_load_store_vec4(%arg0: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg3: i32) {\n-    %c256_i32 = arith.constant 256 : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = arith.muli %0, %c256_i32 : i32\n-    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked0>\n-    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked0>\n-    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked0>\n-    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-    %7 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Load 4 elements from A with single one vectorized load instruction\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-\n-    // Load 4 elements from B with single one vectorized load instruction\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-\n-    %9 = tt.load %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %10 = tt.load %8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %11 = arith.addf %9, %10 : tensor<256xf32, #blocked0>\n-    %12 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %13 = tt.addptr %12, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Store 4 elements to global with single one vectorized store instruction\n-    // CHECK: @$5 st.global.v4.b32 [ ${{.*}} + 0 ], { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} };\n-    tt.store %13, %11 : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-// This test verifies the vectorization of Load and Store Ops.\n-#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>\n-// Note, the %n_elements doesn't have a \"tt.divisibility\" hint, so Triton assumes it's divisibility is 1, this should effect the mask's alignment and further restrict the load/store ops' vector width to be 1.\n-module attributes {\"triton_gpu.num-warps\" = 2 : i32} {\n-  func @vecadd_masked_vec1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %n_elements: i32) {\n-    %c64_i32 = arith.constant 64 : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = arith.muli %0, %c64_i32 : i32\n-    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked>\n-    %3 = tt.splat %1 : (i32) -> tensor<64xi32, #blocked>\n-    %4 = arith.addi %3, %2 : tensor<64xi32, #blocked>\n-    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<64x!tt.ptr<f32>, #blocked>\n-    %6 = tt.addptr %5, %4 : tensor<64x!tt.ptr<f32>, #blocked>\n-    %7 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<64x!tt.ptr<f32>, #blocked>\n-    %8 = tt.addptr %7, %4 : tensor<64x!tt.ptr<f32>, #blocked>\n-    %9 = tt.splat %n_elements : (i32) -> tensor<64xi32, #blocked>\n-    %10 = \"triton_gpu.cmpi\"(%4, %9) {predicate = 2 : i64} : (tensor<64xi32, #blocked>, tensor<64xi32, #blocked>) -> tensor<64xi1, #blocked>\n-    // load op has a vector width = 1 due to the %mask's alignment\n-    // CHECK: ld.global.b32\n-    %11 = tt.load %6, %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64xf32, #blocked>\n-    %12 = tt.load %8, %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64xf32, #blocked>\n-    %13 = arith.addf %11, %12 : tensor<64xf32, #blocked>\n-    %14 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<64x!tt.ptr<f32>, #blocked>\n-    %15 = tt.addptr %14, %4 : tensor<64x!tt.ptr<f32>, #blocked>\n-    tt.store %15, %13, %10 : tensor<64xf32, #blocked>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK-LABEL: global_load_store_vec8\n-    func @global_load_store_vec8(%arg0: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 4 : i32}, %arg3: i32) {\n-    %c256_i32 = arith.constant 256 : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    %1 = arith.muli %0, %c256_i32 : i32\n-    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked0>\n-    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked0>\n-    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked0>\n-    %5 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-    %7 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Load 8 elements from A with two vectorized load instruction\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-\n-    // Load 8 elements from B with two vectorized load instruction\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-    // CHECK: @${{.*}} ld.global.v4.b32 { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} }, [ ${{.*}} + 0 ];\n-\n-    %9 = tt.load %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %10 = tt.load %8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked0>\n-    %11 = arith.addf %9, %10 : tensor<256xf32, #blocked0>\n-    %12 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>, #blocked0>\n-    %13 = tt.addptr %12, %4 : tensor<256x!tt.ptr<f32>, #blocked0>\n-\n-    // Store 8 elements to global with two vectorized store instruction\n-    // CHECK: @$5 st.global.v4.b32 [ ${{.*}} + 0 ], { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} };\n-    // CHECK: @$5 st.global.v4.b32 [ ${{.*}} + 0 ], { ${{.*}}, ${{.*}}, ${{.*}}, ${{.*}} };\n-    tt.store %13, %11 : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// TODO: Add a testcase to verify the optimization when ptr of the LoadOp\n-//       is from an addptr with const idx\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_view_broadcast\n-  func @basic_view_broadcast(%arg : tensor<256xf32,#blocked0>) {\n-    // CHECK: llvm.mlir.undef\n-    // CHECK: %[[T0:.*]] = llvm.extractvalue\n-    // CHECK: %[[T1:.*]] = llvm.extractvalue\n-    %0 = tt.view %arg : (tensor<256xf32, #blocked0>) -> tensor<256x1xf32,#blocked2>\n-    // CHECK: llvm.mlir.undef\n-    // CHECK: llvm.insertvalue %[[T0]]\n-    // CHECK: llvm.insertvalue %[[T0]]\n-    // CHECK: llvm.insertvalue %[[T0]]\n-    // CHECK: llvm.insertvalue %[[T0]]\n-    // CHECK: llvm.insertvalue %[[T1]]\n-    // CHECK: llvm.insertvalue %[[T1]]\n-    // CHECK: llvm.insertvalue %[[T1]]\n-    // CHECK: llvm.insertvalue %[[T1]]\n-    %1 = tt.broadcast %0 : (tensor<256x1xf32,#blocked2>) -> tensor<256x4xf32, #blocked2>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_make_range\n-  func @basic_make_range() {\n-    // CHECK: nvvm.read.ptx.sreg.tid.x\n-    // CHECK: llvm.mlir.undef\n-    // CHECK: llvm.insertvalue\n-    // CHECK: llvm.insertvalue\n-    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_addf\n-  func @basic_addf(%arg0 : tensor<256xf32,#blocked0>, %arg1 : tensor<256xf32,#blocked0>) {\n-    // CHECK: llvm.fadd\n-    // CHECK: llvm.fadd\n-    %1 = arith.addf %arg0, %arg1 : tensor<256xf32,#blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_addi\n-  func @basic_addi(%arg0 : tensor<256xi32,#blocked0>, %arg1 : tensor<256xi32,#blocked0>) {\n-    // CHECK: llvm.add\n-    // CHECK: llvm.add\n-    %1 = arith.addi %arg0, %arg1 : tensor<256xi32,#blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_program_id\n-  func @basic_program_id() {\n-    // CHECK: nvvm.read.ptx.sreg.ctaid.x : i32\n-    %0 = tt.get_program_id {axis = 0 : i32} : i32\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_addptr\n-  func @basic_addptr(%arg0 : tensor<256x!tt.ptr<f32>,#blocked0>, %arg1 : tensor<256xi32,#blocked0>) {\n-    // CHECK: llvm.getelementptr\n-    // CHECK: llvm.getelementptr\n-    %0 = tt.addptr %arg0, %arg1 : tensor<256x!tt.ptr<f32>, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#shared0 = #triton_gpu.shared<{vec = 2, perPhase = 2, maxPhase = 4, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem\n-  // CHECK-LABEL: basic_alloc_tensor\n-  func @basic_alloc_tensor() {\n-    // CHECK: llvm.mlir.addressof @global_smem\n-    // CHECK-NEXT: llvm.bitcast\n-    // CHECK-NEXT: llvm.mlir.constant\n-    // CHECK-NEXT: llvm.getelementptr\n-    // CHECK-NEXT: llvm.bitcast\n-    %0 = triton_gpu.alloc_tensor : tensor<16x16xf16, #shared0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#shared0 = #triton_gpu.shared<{vec = 2, perPhase = 2, maxPhase = 4, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem\n-  // CHECK-LABEL: basic_extract_slice\n-  func @basic_extract_slice() {\n-    // CHECK: llvm.mlir.addressof @global_smem\n-    // CHECK: llvm.extractvalue \n-    // CHECK-NEXT: llvm.extractvalue\n-    // CHECK-NEXT: llvm.extractvalue\n-    // CHECK-NEXT: llvm.extractvalue\n-    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK-NEXT: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK-NEXT: llvm.mul\n-    // CHECK-NEXT: llvm.add\n-    // CHECK-NEXT: llvm.mul\n-    // CHECK-NEXT: llvm.add\n-    // CHECK-NEXT: llvm.mul\n-    // CHECK-NEXT: llvm.add\n-    // CHECK-NEXT: llvm.getelementptr\n-    %index = arith.constant 1 : index\n-    %0 = triton_gpu.alloc_tensor : tensor<128x16x32xf32, #shared0>\n-    %1 = tensor.extract_slice %0[%index, 0, 0][1, 16, 32][1, 1, 1] : tensor<128x16x32xf32, #shared0> to tensor<16x32xf32, #shared0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_async_wait\n-  func @basic_async_wait() {\n-    // CHECK: cp.async.wait_group 0x4\n-    triton_gpu.async_wait {num = 4: i32}\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#block0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [4], warpsPerCTA = [4], order = [0]}>\n-#block1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [8], warpsPerCTA = [4], order = [0]}>\n-#block2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 1], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#block3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 8], warpsPerCTA = [1, 4], order = [1, 0]}>\n-#slice2d1 = #triton_gpu.slice<{dim = 1, parent=#block2}>\n-#slice3d0 = #triton_gpu.slice<{dim = 0, parent=#block3}>\n-#AL = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#A = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_insert_slice_async_v4\n-  func @basic_insert_slice_async_v4(%arg0: !tt.ptr<f32> {tt.divisibility = 8 : i32}) {\n-    %off0_ = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #slice2d1>\n-    %off1_ = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<64xi32, #slice3d0>\n-    %off0 = tt.expand_dims %off0_ {axis = 1 : i32} : (tensor<16xi32, #slice2d1>) -> tensor<16x1xi32, #block2>\n-    %off1 = tt.expand_dims %off1_ {axis = 0 : i32} : (tensor<64xi32, #slice3d0>) -> tensor<1x64xi32, #block3>\n-    %broadcast_off0_scalar = tt.broadcast %off0 : (tensor<16x1xi32, #block2>) -> tensor<16x64xi32, #block2>\n-    %cst_scalar = arith.constant 64 : i32\n-    %cst = tt.splat %cst_scalar : (i32) -> tensor<16x64xi32, #block2>\n-    %broadcast_off0_ = arith.muli %broadcast_off0_scalar, %cst : tensor<16x64xi32, #block2>\n-    %broadcast_off1_ = tt.broadcast %off1 : (tensor<1x64xi32, #block3>) -> tensor<16x64xi32, #block3>\n-    %broadcast_off0 = triton_gpu.convert_layout %broadcast_off0_ : (tensor<16x64xi32, #block2>) -> tensor<16x64xi32, #AL>\n-    %broadcast_off1 = triton_gpu.convert_layout %broadcast_off1_ : (tensor<16x64xi32, #block3>) -> tensor<16x64xi32, #AL>\n-    %off = arith.addi %broadcast_off0, %broadcast_off1 : tensor<16x64xi32, #AL>\n-    %a_init = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x64x!tt.ptr<f32>, #AL>\n-    %a_ptr = tt.addptr %a_init, %off : tensor<16x64x!tt.ptr<f32>, #AL>\n-    %tensor = triton_gpu.alloc_tensor : tensor<2x16x64xf32, #A>\n-    %index = arith.constant 1 : i32\n-\n-    // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n-    // CHECK-SAME: cp.async.cg.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x10, 0x10\n-    // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n-    // CHECK-SAME: cp.async.cg.shared.global [ ${{.*}} + 16 ], [ ${{.*}} + 0 ], 0x10, 0x10\n-    // CHECK: llvm.inline_asm has_side_effects asm_dialect = att\n-    // CHECK-SAME: cp.async.commit_group\n-    %a = triton_gpu.insert_slice_async %a_ptr, %tensor, %index {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x64x!tt.ptr<f32>, #AL> -> tensor<2x16x64xf32, #A>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#block0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [4], warpsPerCTA = [4], order = [0]}>\n-#block1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [8], warpsPerCTA = [4], order = [0]}>\n-#block2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 1], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#block3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 8], warpsPerCTA = [1, 4], order = [1, 0]}>\n-#slice2d1 = #triton_gpu.slice<{dim = 1, parent=#block2}>\n-#slice3d0 = #triton_gpu.slice<{dim = 0, parent=#block3}>\n-#AL = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#A = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 4, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_insert_slice_async_v1\n-  func @basic_insert_slice_async_v1(%arg0: !tt.ptr<f32> {tt.divisibility = 4 : i32}) {\n-    %off0_ = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #slice2d1>\n-    %off1_ = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #slice3d0>\n-    %off0 = tt.expand_dims %off0_ {axis = 1 : i32} : (tensor<16xi32, #slice2d1>) -> tensor<16x1xi32, #block2>\n-    %off1 = tt.expand_dims %off1_ {axis = 0 : i32} : (tensor<32xi32, #slice3d0>) -> tensor<1x32xi32, #block3>\n-    %broadcast_off0_scalar = tt.broadcast %off0 : (tensor<16x1xi32, #block2>) -> tensor<16x32xi32, #block2>\n-    %cst_scalar = arith.constant 32 : i32\n-    %cst = tt.splat %cst_scalar : (i32) -> tensor<16x32xi32, #block2>\n-    %broadcast_off0_ = arith.muli %broadcast_off0_scalar, %cst : tensor<16x32xi32, #block2>\n-    %broadcast_off1_ = tt.broadcast %off1 : (tensor<1x32xi32, #block3>) -> tensor<16x32xi32, #block3>\n-    %broadcast_off0 = triton_gpu.convert_layout %broadcast_off0_ : (tensor<16x32xi32, #block2>) -> tensor<16x32xi32, #AL>\n-    %broadcast_off1 = triton_gpu.convert_layout %broadcast_off1_ : (tensor<16x32xi32, #block3>) -> tensor<16x32xi32, #AL>\n-    %off = arith.addi %broadcast_off0, %broadcast_off1 : tensor<16x32xi32, #AL>\n-    %a_init = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x32x!tt.ptr<f32>, #AL>\n-    %a_ptr = tt.addptr %a_init, %off : tensor<16x32x!tt.ptr<f32>, #AL>\n-    %tensor = triton_gpu.alloc_tensor : tensor<2x16x32xf32, #A>\n-    %index = arith.constant 1 : i32\n-\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: cp.async.commit_group\n-    %a = triton_gpu.insert_slice_async %a_ptr, %tensor, %index {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x32x!tt.ptr<f32>, #AL> -> tensor<2x16x32xf32, #A>\n-    return\n-  }\n-}\n-\n-// -----\n \n #block0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [8], warpsPerCTA = [4], order = [0]}>\n #block2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 1], warpsPerCTA = [4, 1], order = [1, 0]}>\n@@ -495,50 +29,34 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     %index = arith.constant 1 : i32\n \n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(16 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(16 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n     // CHECK: llvm.mlir.constant(0 : i32) : i32\n-    // CHECK: llvm.mlir.constant(16 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n-    // CHECK: llvm.mlir.constant(0 : i32) : i32\n     // CHECK: llvm.mlir.constant(16 : i32) : i32\n-    // CHECK: llvm.mul\n     // CHECK: llvm.add\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: cp.async.ca.shared.global [ ${{.*}} + 0 ], [ ${{.*}} + 0 ], 0x4, 0x4\n@@ -548,282 +66,3 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     return\n   }\n }\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK: basic_splat\n-  func @basic_splat(%ptr: !tt.ptr<f32>) {\n-    // CHECK: llvm.mlir.undef\n-    // CHECK: llvm.insertvalue\n-    // CHECK: llvm.insertvalue\n-    %0 = tt.splat %ptr : (!tt.ptr<f32>) -> tensor<256x!tt.ptr<f32>,#blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  // CHECK-LABEL: basic_store\n-  func @basic_store(%ptrs: tensor<256x!tt.ptr<f32>, #blocked0>, %vals: tensor<256xf32, #blocked0>, %mask: tensor<256xi1, #blocked0>) {\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: st.global.b32 [ ${{.*}} + 0 ], { ${{.*}} };\n-    tt.store %ptrs, %vals, %mask : tensor<256xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [1, 1], order = [1, 0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [0, 1]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>\n-  // CHECK-LABEL: convert_layout_blocked_blocked\n-  func @convert_layout_blocked_blocked(%arg0: tensor<16x16xf32, #blocked0>) {\n-    // CHECK: llvm.mlir.addressof @global_smem\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<1xf32>, 3>\n-    %0 = triton_gpu.convert_layout %arg0 : (tensor<16x16xf32, #blocked0>) -> tensor<16x16xf32, #blocked1>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [1, 1], order = [1, 0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [1, 1], order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>\n-  // CHECK-LABEL: convert_layout_blocked_blocked_vec\n-  func @convert_layout_blocked_blocked_vec(%arg0: tensor<16x16xf32, #blocked0>) {\n-    // CHECK: llvm.mlir.addressof @global_smem\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    %0 = triton_gpu.convert_layout %arg0 : (tensor<16x16xf32, #blocked0>) -> tensor<16x16xf32, #blocked1>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [1, 1], order = [1, 0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>\n-  // CHECK-LABEL: convert_layout_blocked_blocked_multi_rep\n-  func @convert_layout_blocked_blocked_multi_rep(%arg0: tensor<16x16xf32, #blocked0>) {\n-    // CHECK: llvm.mlir.addressof @global_smem\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    %0 = triton_gpu.convert_layout %arg0 : (tensor<16x16xf32, #blocked0>) -> tensor<16x16xf32, #blocked1>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [1, 1], order = [1, 0]}>\n-#shared0 = #triton_gpu.shared<{vec = 1, perPhase=2, maxPhase=8 ,order = [1, 0]}>\n-#mma0 = #triton_gpu.mma<{version=2, warpsPerCTA=[1,1]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK-LABEL: convert_dot\n-  func @convert_dot(%A: tensor<16x16xf16, #blocked0>, %B: tensor<16x16xf16, #blocked0>) {\n-    %AA = triton_gpu.convert_layout %A : (tensor<16x16xf16, #blocked0>) -> tensor<16x16xf16, #shared0>\n-    %BB = triton_gpu.convert_layout %B : (tensor<16x16xf16, #blocked0>) -> tensor<16x16xf16, #shared0>\n-    %cst0 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #mma0>\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ldmatrix.sync.aligned.m8n8.x4\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: ldmatrix.sync.aligned.m8n8.x4\n-\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32\n-    // CHECK: llvm.inline_asm\n-    // CHECK-SAME: mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32\n-    %D = tt.dot %AA, %BB, %cst0 {allowTF32 = true, transA = false, transB = false} : tensor<16x16xf16, #shared0> * tensor<16x16xf16, #shared0> -> tensor<16x16xf32, #mma0>\n-\n-    return\n-  }\n-}\n-\n-// TODO: problems in MLIR's parser on slice layout\n-// #blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [1, 1], order = [1, 0]}>\n-// module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-//   func @make_range_sliced_layout() {\n-//     %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>\n-//     return\n-//   }\n-// }\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [2, 2]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>\n-  // CHECK-LABEL: convert_layout_mma_block\n-  func @convert_layout_mma_blocked(%arg0: tensor<32x16xf32, #mma>) {\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<2xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<2xf32>, 3>\n-    // CHECK: nvvm.barrier0\n-    // CHECK: llvm.load\n-    // CHECK-SAME: !llvm.ptr<vector<4xf32>, 3>\n-    %0 = triton_gpu.convert_layout %arg0 : (tensor<32x16xf32, #mma>) -> tensor<32x16xf32, #blocked0>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>\n-#shared0 = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK: llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>\n-  // CHECK-LABEL: convert_layout_blocked_shared\n-  func @convert_layout_blocked_shared(%arg0: tensor<128x32xf32, #blocked0>) {\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<8xf32>, 3>\n-    // CHECK: llvm.store\n-    // CHECK-SAME: !llvm.ptr<vector<8xf32>, 3>\n-    %0 = triton_gpu.convert_layout %arg0 : (tensor<128x32xf32, #blocked0>) -> tensor<128x32xf32, #shared0>\n-    return\n-  }\n-}\n-\n-// -----\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK-LABEL: convert_blocked1d_to_slice0\n-  func @convert_blocked1d_to_slice0(%src:tensor<32xi32, #blocked0>) {\n-    // CHECK-COUNT-4: llvm.load {{.*}} : !llvm.ptr<vector<1xi32>, 3>\n-    %cvt = triton_gpu.convert_layout %src : (tensor<32xi32, #blocked0>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n-    return\n-  }\n-}\n-\n-\n-// -----\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>\n-module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n-  // CHECK-LABEL: convert_blocked1d_to_slice1\n-  func @convert_blocked1d_to_slice1(%src:tensor<32xi32, #blocked0>) {\n-    // CHECK-COUNT-32: llvm.load {{.*}} : !llvm.ptr<vector<1xi32>, 3>\n-    %cvt = triton_gpu.convert_layout %src : (tensor<32xi32, #blocked0>) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    return\n-  }\n-}\n-\n-\n-// -----\n-#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [1, 0]}>\n-#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [2, 2]}>\n-#dot_operand_a = #triton_gpu.dot_op<{opIdx=0, parent=#mma}>\n-#dot_operand_b = #triton_gpu.dot_op<{opIdx=1, parent=#mma}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func @matmul_kernel_dot_operand_layout(%ptr:!tt.ptr<f32> {tt.divisibility = 16 : i32},\n-  %a:tensor<128x32xf16, #shared>, %b:tensor<32x256xf16, #shared>) {\n-    %cst = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #mma>\n-    // CHECK: ldmatrix.sync.aligned.m8n8.x4.shared.b16\n-    %a_mat = triton_gpu.convert_layout %a : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #dot_operand_a>\n-    %b_mat = triton_gpu.convert_layout %b : (tensor<32x256xf16, #shared>) -> tensor<32x256xf16, #dot_operand_b>\n-\n-    %28 = tt.dot %a_mat, %b_mat, %cst {allowTF32 = true, transA = false, transB = false} : tensor<128x32xf16, #dot_operand_a> * tensor<32x256xf16, #dot_operand_b> -> tensor<128x256xf32, #mma>\n-    %38 = triton_gpu.convert_layout %28 : (tensor<128x256xf32, #mma>) -> tensor<128x256xf32, #blocked>\n-\n-    %30 = tt.splat %ptr : (!tt.ptr<f32>) -> tensor<128x1x!tt.ptr<f32>, #blocked>\n-    %36 = tt.broadcast %30 : (tensor<128x1x!tt.ptr<f32>, #blocked>) -> tensor<128x256x!tt.ptr<f32>, #blocked>\n-    tt.store %36, %38 : tensor<128x256xf32, #blocked>\n-    return\n-  }\n-}\n-\n-// -----\n-\n-#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [1, 0]}>\n-#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 1, warpsPerCTA = [2, 2]}>\n-#dot_operand_a = #triton_gpu.dot_op<{opIdx=0, parent=#mma}>\n-#dot_operand_b = #triton_gpu.dot_op<{opIdx=1, parent=#mma}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func @matmul884_kernel_dot_operand_layout(%ptr:!tt.ptr<f32> {tt.divisibility = 16 : i32},\n-  %a:tensor<128x32xf16, #shared>, %b:tensor<32x256xf16, #shared>) {\n-    %cst = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #mma>\n-    // CHECK: ldmatrix.sync.aligned.m8n8.x4.shared.b16\n-    %a_mat = triton_gpu.convert_layout %a : (tensor<128x32xf16, #shared>) -> tensor<128x32xf16, #dot_operand_a>\n-    %b_mat = triton_gpu.convert_layout %b : (tensor<32x256xf16, #shared>) -> tensor<32x256xf16, #dot_operand_b>\n-\n-    %28 = tt.dot %a_mat, %b_mat, %cst {allowTF32 = true, transA = false, transB = false} : tensor<128x32xf16, #dot_operand_a> * tensor<32x256xf16, #dot_operand_b> -> tensor<128x256xf32, #mma>\n-    // TODO[goostavz]: uncomment the following lines after convert_layout[mma<v1> -> blocked] is ready.\n-    // %38 = triton_gpu.convert_layout %28 : (tensor<128x256xf32, #mma>) -> tensor<128x256xf32, #blocked>\n-    // %30 = tt.splat %ptr : (!tt.ptr<f32>) -> tensor<128x1x!tt.ptr<f32>, #blocked>\n-    // %36 = tt.broadcast %30 : (tensor<128x1x!tt.ptr<f32>, #blocked>) -> tensor<128x256x!tt.ptr<f32>, #blocked>\n-    // tt.store %36, %38 : tensor<128x256xf32, #blocked>\n-    return\n-  }\n-}"}]