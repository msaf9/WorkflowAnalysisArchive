[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "file_content_changes": "@@ -520,17 +520,16 @@ def visit_If(self, node):\n                 self.visit_if_scf(cond, node)\n             else:\n                 self.visit_if_top_level(cond, node)\n-        elif _is_constexpr(cond):\n+        else:\n+            cond = _unwrap_if_constexpr(cond)\n             try:\n-                cond = bool(cond.value)\n+                cond = bool(cond)\n             except (TypeError, ValueError):\n-                raise UnsupportedLanguageConstruct(None, node, \"the boolean value of constexpr of type {} cannot be determined\".format(type(cond.value)))\n+                raise CompilationError(None, node, \"the boolean value of an object of type {} cannot be determined\".format(type(cond.value)))\n             if cond:\n                 self.visit_compound_statement(node.body)\n             else:\n                 self.visit_compound_statement(node.orelse)\n-        else:\n-            raise UnsupportedLanguageConstruct(None, node, \"conditionals are supported only for `tensor` and `constexpr` values.\")\n \n     def visit_IfExp(self, node):\n         cond = self.visit(node.test)"}]