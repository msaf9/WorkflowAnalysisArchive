[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPU.cpp", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "file_content_changes": "@@ -222,15 +222,20 @@ struct TritonDotPattern : public OpConversionPattern<triton::DotOp> {\n   matchAndRewrite(triton::DotOp op, OpAdaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const override {\n     RankedTensorType origType = op.getType().cast<RankedTensorType>();\n-    SmallVector<unsigned> retSizePerThread = {4, 4};\n-    SmallVector<unsigned> retOrder = {1, 0};\n+    auto origShape = origType.getShape();\n     auto typeConverter = cast<TritonGPUTypeConverter>(getTypeConverter());\n+    int numWarps = typeConverter->getNumWarps();\n+\n+    // probably not as efficient as it could be\n+    SmallVector<unsigned> retSizePerThread = {2, 2};\n+    if(origShape[0] >= 32 || origShape[1] >= 32)\n+      retSizePerThread = {4, 4};\n+    SmallVector<unsigned> retOrder = {1, 0};\n     Attribute dEncoding = triton::gpu::BlockedEncodingAttr::get(\n-                                                     getContext(), origType.getShape(),\n-                                                     retSizePerThread,\n-                                                     retOrder,\n-                                                     typeConverter->getNumWarps());\n-    RankedTensorType retType = RankedTensorType::get(origType.getShape(),\n+                                                     getContext(), origShape,\n+                                                     retSizePerThread, \n+                                                     retOrder, numWarps);\n+    RankedTensorType retType = RankedTensorType::get(origShape,\n                                                     origType.getElementType(),\n                                                     dEncoding);\n     // a & b must be of smem layout"}, {"filename": "python/test/unit/language/test_printf.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -1,12 +1,14 @@\n import os\n import subprocess\n+import sys\n+\n \n dir_path = os.path.dirname(os.path.realpath(__file__))\n printf_path = os.path.join(dir_path, \"printf_helper.py\")\n \n \n def test_printf():\n-    proc = subprocess.Popen([\"python\", printf_path], stdout=subprocess.PIPE, shell=False)\n+    proc = subprocess.Popen([sys.executable, printf_path], stdout=subprocess.PIPE, shell=False)\n     (outs, err) = proc.communicate()\n     outs = outs.split()\n     new_lines = set()"}]