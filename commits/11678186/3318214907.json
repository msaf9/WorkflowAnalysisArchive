[{"filename": "lib/Dialect/TritonGPU/Transforms/Prefetch.cpp", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "file_content_changes": "@@ -61,7 +61,7 @@ class Prefetcher {\n   LogicalResult isForOpOperand(Value v);\n \n   Value generatePrefetch(Value v, unsigned opIdx, bool isPrefetch,\n-                         Attribute mmaEncoding, OpBuilder &builder);\n+                         Attribute dotEncoding, OpBuilder &builder);\n \n public:\n   Prefetcher() = delete;\n@@ -78,7 +78,7 @@ class Prefetcher {\n };\n \n Value Prefetcher::generatePrefetch(Value v, unsigned opIdx, bool isPrefetch,\n-                                   Attribute mmaEncoding, OpBuilder &builder) {\n+                                   Attribute dotEncoding, OpBuilder &builder) {\n   // opIdx: 0 => a, 1 => b\n   auto type = v.getType().cast<RankedTensorType>();\n   SmallVector<int64_t> shape{type.getShape().begin(), type.getShape().end()};\n@@ -101,7 +101,7 @@ Value Prefetcher::generatePrefetch(Value v, unsigned opIdx, bool isPrefetch,\n       SmallVector<OpFoldResult>{intAttr(1), intAttr(1)});\n \n   auto dotOperandEnc = triton::gpu::DotOperandEncodingAttr::get(\n-      builder.getContext(), opIdx, mmaEncoding);\n+      builder.getContext(), opIdx, dotEncoding);\n   Value prefetchSlice = builder.create<triton::gpu::ConvertLayoutOp>(\n       v.getLoc(), RankedTensorType::get(shape, elementType, dotOperandEnc),\n       newSmem);\n@@ -167,15 +167,14 @@ void Prefetcher::emitPrologue() {\n   OpBuilder builder(forOp);\n \n   for (Value dot : dots) {\n-    auto mmaEncoding = dot.getType()\n+    Attribute dotEncoding = dot.getType()\n                            .cast<RankedTensorType>()\n-                           .getEncoding()\n-                           .cast<triton::gpu::MmaEncodingAttr>();\n+                           .getEncoding();\n     Value aPrefetched =\n-        generatePrefetch(dot2aHeaderDef[dot], 0, true, mmaEncoding, builder);\n+        generatePrefetch(dot2aHeaderDef[dot], 0, true, dotEncoding, builder);\n     operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().a()] = aPrefetched;\n     Value bPrefetched =\n-        generatePrefetch(dot2bHeaderDef[dot], 1, true, mmaEncoding, builder);\n+        generatePrefetch(dot2bHeaderDef[dot], 1, true, dotEncoding, builder);\n     operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().b()] = bPrefetched;\n   }\n }\n@@ -206,10 +205,9 @@ scf::ForOp Prefetcher::createNewForOp() {\n     Operation *newOp = nullptr;\n     auto dot = dyn_cast<triton::DotOp>(&op);\n     if (dots.contains(dot)) {\n-      auto mmaEncoding = dot.getType()\n-                             .cast<RankedTensorType>()\n-                             .getEncoding()\n-                             .cast<triton::gpu::MmaEncodingAttr>();\n+      auto dotEncoding = dot.getType()\n+                            .cast<RankedTensorType>()\n+                            .getEncoding();\n       // prefetched dot\n       Operation *firstDot = builder.clone(*dot, mapping);\n       if (Value a = operand2headPrefetch.lookup(dot.a()))\n@@ -221,9 +219,9 @@ scf::ForOp Prefetcher::createNewForOp() {\n \n       // remaining part\n       Value aRem = generatePrefetch(mapping.lookup(dot2aLoopArg[dot]), 0, false,\n-                                    mmaEncoding, builder);\n+                                    dotEncoding, builder);\n       Value bRem = generatePrefetch(mapping.lookup(dot2bLoopArg[dot]), 1, false,\n-                                    mmaEncoding, builder);\n+                                    dotEncoding, builder);\n       newOp = builder.clone(*dot, mapping);\n       newOp->setOperand(0, aRem);\n       newOp->setOperand(1, bRem);\n@@ -241,17 +239,17 @@ scf::ForOp Prefetcher::createNewForOp() {\n   for (Value v : forOp.getBody()->getTerminator()->getOperands())\n     yieldValues.push_back(mapping.lookup(v));\n   for (Value dot : dots) {\n-    auto mmaEncoding = dot.getType()\n-                           .cast<RankedTensorType>()\n-                           .getEncoding()\n-                           .cast<triton::gpu::MmaEncodingAttr>();\n+    Attribute dotEncoding = dot.getType()\n+                               .cast<RankedTensorType>()\n+                               .getEncoding();\n     yieldValues.push_back(generatePrefetch(mapping.lookup(dot2aYield[dot]), 0,\n-                                           true, mmaEncoding, builder));\n+                                           true, dotEncoding, builder));\n     yieldValues.push_back(generatePrefetch(mapping.lookup(dot2bYield[dot]), 1,\n-                                           true, mmaEncoding, builder));\n+                                           true, dotEncoding, builder));\n   }\n   // Update ops of yield\n   builder.create<scf::YieldOp>(yieldOp.getLoc(), yieldValues);\n+  return newForOp;\n }\n \n struct PrefetchPass : public TritonGPUPrefetchBase<PrefetchPass> {"}]