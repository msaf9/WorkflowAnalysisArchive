[{"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -514,7 +514,7 @@ def TT_ElementwiseInlineAsmOp : TT_Op<\"elementwise_inline_asm\", [Elementwise,\n   }];\n \n   let arguments = (ins StrAttr:$asm_string, StrAttr:$constraints, BoolAttr:$pure, I32Attr:$packed_element, Variadic<AnyTypeOf<[TT_Type]>>:$args);\n-  let results = (outs TT_Tensor:$result);\n+  let results = (outs TT_Type:$result);\n \n \n   let assemblyFormat = [{"}, {"filename": "python/src/extra/cuda.ll", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "file_content_changes": "@@ -1,17 +0,0 @@\n-; ~/.triton/llvm/llvm+mlir-17.0.0-x86_64-linux-gnu-ubuntu-18.04-release/bin/llvm-as ./src/extra/cuda.ll -o ./triton/language/extra/cuda.bc\n-\n-target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-target triple = \"nvptx64-nvidia-cuda\"\n-\n-\n-define i64 @globaltimer() #0 {\n-  %1 = call i64 asm sideeffect \"mov.u64 $0, %globaltimer;\", \"=l\"() nounwind\n-  ret i64 %1\n-}\n-\n-define i32 @smid() #0 {\n-  %1 = call i32 asm \"mov.u32 $0, %smid;\", \"=r\"() nounwind\n-  ret i32 %1\n-}\n-\n-attributes #0 = { alwaysinline nounwind }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -3403,8 +3403,7 @@ def kernel(Out1, Out2):\n     out2 = to_triton(np.zeros((1,), dtype=np.int64), device=device)\n     h = kernel[(1,)](out1, out2)\n     assert out2[0] > 0\n-    # 2 inlined globaltimers + one extra in the wrapper extern function\n-    assert h.asm[\"ptx\"].count(\"%globaltimer\") == 3\n+    assert h.asm[\"ptx\"].count(\"%globaltimer\") == 2\n \n \n def test_smid(device):\n@@ -3417,7 +3416,7 @@ def kernel(Out):\n     out = to_triton(np.zeros((1024,), dtype=np.int32), device=device)\n     h = kernel[(out.shape[0],)](out)\n     assert out.sort()[0].unique().shape[0] > 0\n-    assert h.asm[\"ptx\"].count(\"%smid\") == 2\n+    assert h.asm[\"ptx\"].count(\"%smid\") == 1\n \n # -----------------------\n # test layout conversions"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -1811,6 +1811,7 @@ def inline_asm_elementwise(asm: str, constraints: str, args: list, dtype, is_pur\n     is_pure = _constexpr_to_value(is_pure)\n     ret_shape = None\n     arg_types = []\n+    res_ty = dtype\n     for i in range(len(dispatch_args)):\n         dispatch_args[i] = _to_tensor(dispatch_args[i], _builder)\n         arg_types.append(dispatch_args[i].dtype)\n@@ -1825,10 +1826,10 @@ def inline_asm_elementwise(asm: str, constraints: str, args: list, dtype, is_pur\n         for i in range(len(dispatch_args)):\n             dispatch_args[i], _ = semantic.binary_op_type_checking_impl(\n                 dispatch_args[i], broadcast_arg, _builder, arithmetic_check=False)\n-    ret_shape = broadcast_arg.shape\n-    res_ty = block_type(dtype, ret_shape).to_ir(_builder)\n-    call = _builder.create_inline_asm(asm, constraints, [t.handle for t in args], res_ty, is_pure, pack)\n-    return tensor(call, block_type(dtype, ret_shape))\n+        ret_shape = broadcast_arg.shape\n+        res_ty = block_type(dtype, ret_shape)\n+    call = _builder.create_inline_asm(asm, constraints, [t.handle for t in args], res_ty.to_ir(_builder), is_pure, pack)\n+    return tensor(call, res_ty)\n \n \n # -----------------------"}, {"filename": "python/triton/language/extra/cuda.bc", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "file_content_changes": "N/A"}, {"filename": "python/triton/language/extra/cuda.py", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "file_content_changes": "@@ -1,19 +1,15 @@\n-import os\n-\n from .. import core\n \n-__path__ = os.path.dirname(os.path.abspath(__file__))\n-\n \n @core.extern\n def globaltimer(_builder=None):\n-    return core.extern_elementwise(\"cuda\", os.path.join(__path__, \"cuda.bc\"), [],\n-                                   {tuple(): (\"globaltimer\", core.dtype(\"int64\")),\n-                                    }, is_pure=False, _builder=_builder)\n+    return core.inline_asm_elementwise(\"mov.u64 $0, %globaltimer;\", \"=l\", [],\n+                                       dtype=core.int64, is_pure=False,\n+                                       pack=1, _builder=_builder)\n \n \n @core.extern\n def smid(_builder=None):\n-    return core.extern_elementwise(\"cuda\", os.path.join(__path__, \"cuda.bc\"), [],\n-                                   {tuple(): (\"smid\", core.dtype(\"int32\")),\n-                                    }, is_pure=True, _builder=_builder)\n+    return core.inline_asm_elementwise(\"mov.u32 $0, %smid;\", \"=r\", [],\n+                                       dtype=core.int32, is_pure=True,\n+                                       pack=1, _builder=_builder)"}]