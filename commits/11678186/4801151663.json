[{"filename": "python/triton/language/math.py", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "file_content_changes": "@@ -1,13 +1,18 @@\n import functools\n import os\n \n-from ..runtime import driver\n from . import core\n \n \n @functools.lru_cache()\n def libdevice_path():\n-    return os.getenv(\"TRITON_LIBDEVICE_PATH\", driver.libdevice_path)\n+    import torch\n+    third_party_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"..\", \"third_party\")\n+    if torch.version.hip is None:\n+        default = os.path.join(third_party_dir, \"cuda\", \"lib\", \"libdevice.10.bc\")\n+    else:\n+        assert False, \"libdevice not yet supported on AMD GPUs\"\n+    return os.getenv(\"TRITON_LIBDEVICE_PATH\", default)\n \n \n @core.extern"}, {"filename": "python/triton/runtime/driver.py", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "file_content_changes": "@@ -61,9 +61,6 @@ def __new__(cls):\n             cls.instance = super(CudaDriver, cls).__new__(cls)\n         return cls.instance\n \n-    def get_extern_path(self):\n-        return os.path.join(self.third_party_dir(), \"cuda\", \"lib\")\n-\n     def get_libdevice_path(self):\n         return os.path.join(self.third_party_dir(), \"cuda\", \"lib\", \"libdevice.10.bc\")\n "}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "file_content_changes": "@@ -289,14 +289,19 @@ def _output_stubs(self) -> str:\n         #   arg_type_symbol_dict = {[arg_type]: {(symbol, ret_type)}}\n         #   return extern.dispatch(\"libdevice\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n         import_str = \"from . import core\\n\"\n-        import_str += \"from ..runtime import driver\\n\"\n         import_str += \"import os\\n\"\n         import_str += \"import functools\\n\"\n \n         header_str = \"\"\n         header_str += \"@functools.lru_cache()\\n\"\n         header_str += \"def libdevice_path():\\n\"\n-        header_str += \"    return os.getenv(\\\"TRITON_LIBDEVICE_PATH\\\", driver.libdevice_path)\\n\"\n+        header_str += \"    import torch\\n\"\n+        header_str += \"    third_party_dir =  os.path.join(os.path.dirname(os.path.abspath(__file__)), \\\"..\\\", \\\"third_party\\\")\\n\"\n+        header_str += \"    if torch.version.hip is None:\\n\"\n+        header_str += \"        default = os.path.join(third_party_dir, \\\"cuda\\\", \\\"lib\\\", \\\"libdevice.10.bc\\\")\\n\"\n+        header_str += \"    else:\\n\"\n+        header_str += \"        assert False, \\\"libdevice not yet supported on AMD GPUs\\\"\\n\"\n+        header_str += \"    return os.getenv(\\\"TRITON_LIBDEVICE_PATH\\\", default)\\n\"\n         func_str = \"\"\n         for symbols in self._symbol_groups.values():\n             func_str += \"@core.extern\\n\""}]