[{"filename": ".github/workflows/Dockerfile", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "file_content_changes": "@@ -0,0 +1,35 @@\n+FROM centos:7\n+ARG llvm_dir=llvm-project\n+\n+# Add the cache artifacts and the LLVM source tree to the container\n+ADD sccache /sccache\n+ADD \"${llvm_dir}\" /source/llvm-project\n+ENV SCCACHE_DIR=\"/sccache\"\n+ENV SCCACHE_CACHE_SIZE=\"2G\"\n+\n+# Install build dependencies\n+RUN yum install --assumeyes centos-release-scl\n+RUN yum install --assumeyes devtoolset-9-gcc* python3-devel python3-pip\n+SHELL [ \"/usr/bin/scl\", \"enable\", \"devtoolset-9\" ]\n+\n+RUN python3 -m pip install --upgrade pip\n+RUN python3 -m pip install --upgrade cmake ninja sccache\n+\n+# Install MLIR's Python Dependencies\n+RUN python3 -m pip install -r /source/llvm-project/mlir/python/requirements.txt\n+\n+# Configure, Build, Test, and Install LLVM\n+RUN cmake -GNinja -Bbuild \\\n+  -DCMAKE_BUILD_TYPE=Release \\\n+  -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \\\n+  -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \\\n+  -DCMAKE_INSTALL_PREFIX=\"/install\" \\\n+  -DLLVM_BUILD_UTILS=ON \\\n+  -DLLVM_ENABLE_ASSERTIONS=ON \\\n+  -DMLIR_ENABLE_BINDINGS_PYTHON=ON \\\n+  -DLLVM_ENABLE_PROJECTS=mlir \\\n+  -DLLVM_INSTALL_UTILS=ON \\\n+  -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX;AMDGPU\" \\\n+  /source/llvm-project/llvm\n+\n+RUN ninja -C build check-mlir install"}, {"filename": ".github/workflows/llvm-build.yml", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "file_content_changes": "@@ -0,0 +1,194 @@\n+name: LLVM Build\n+\n+on:\n+  push:\n+    branches:\n+      - llvm-head\n+    paths:\n+      - llvm-hash.txt\n+  workflow_dispatch:\n+\n+env:\n+  SCCACHE_DIR: ${{ github.workspace }}/sccache\n+\n+permissions:\n+  contents: read\n+  id-token: write\n+\n+jobs:\n+\n+  build:\n+\n+    strategy:\n+      fail-fast: true\n+\n+      matrix:\n+        platform: [\n+          ubuntu-20.04-x64,\n+          ubuntu-22.04-x64,\n+          centos-7-x64,\n+          macos-x64,\n+          macos-arm64\n+        ]\n+\n+        include:\n+          # Specify OS versions\n+          - platform: ubuntu-20.04-x64\n+            host-os: ubuntu-20.04\n+            target-os: ubuntu\n+            arch: x64\n+          - platform: ubuntu-22.04-x64\n+            host-os: ubuntu-22.04\n+            target-os: ubuntu\n+            arch: x64\n+          - platform: centos-7-x64\n+            host-os: ubuntu-22.04\n+            target-os: centos\n+            arch: x64\n+          - platform: macos-x64\n+            host-os: macos-12\n+            target-os: macos\n+            arch: x64\n+          - platform: macos-arm64\n+            host-os: macos-12\n+            target-os: macos\n+            arch: arm64\n+\n+    runs-on: ${{ matrix.host-os }}\n+\n+    if: github.ref == 'refs/heads/llvm-head'\n+    steps:\n+\n+    - name: Checkout Repo\n+      uses: actions/checkout@v3\n+      with:\n+        ref: llvm-head\n+        path: llvm-build\n+\n+    - name: Fetch LLVM Commit Hash\n+      run: |\n+        LLVM_COMMIT_HASH=\"$(cat llvm-build/llvm-hash.txt)\"\n+        echo \"Found LLVM commit hash: ${LLVM_COMMIT_HASH}\"\n+        echo \"llvm_commit_hash=${LLVM_COMMIT_HASH}\" >> ${GITHUB_ENV}\n+\n+        SHORT_LLVM_COMMIT_HASH=\"${LLVM_COMMIT_HASH:0:8}\"\n+        echo \"Short LLVM commit hash: ${SHORT_LLVM_COMMIT_HASH}\"\n+        echo \"short_llvm_commit_hash=${SHORT_LLVM_COMMIT_HASH}\" >> ${GITHUB_ENV}\n+\n+        INSTALL_DIR=\"llvm-${SHORT_LLVM_COMMIT_HASH}-${{ matrix.platform }}\"\n+        echo \"LLVM installation directory name: ${INSTALL_DIR}\"\n+        echo \"llvm_install_dir=${INSTALL_DIR}\" >> ${GITHUB_ENV}\n+\n+    - name: Checkout LLVM\n+      uses: actions/checkout@v3\n+      with:\n+        repository: llvm/llvm-project\n+        path: llvm-project\n+        ref: ${{ env.llvm_commit_hash }}\n+\n+    - name: Set up Python\n+      uses: actions/setup-python@v4\n+      with:\n+        python-version: 3.11\n+\n+    - name: Install Prerequisites\n+      run: |\n+        python3 -m pip install azure-cli cmake ninja sccache\n+        mkdir -p ${{ env.SCCACHE_DIR }}\n+        rm -rf ${{ env.SCCACHE_DIR }}/*\n+\n+    - name: Enable Cache\n+      uses: actions/cache@v3\n+      with:\n+        path: ${{ env.SCCACHE_DIR }}\n+        key: ${{ matrix.platform }}-${{ env.short_llvm_commit_hash }}\n+        restore-keys: ${{ matrix.platform }}-\n+\n+    - name: Configure, Build, Test, and Install LLVM (Ubuntu and macOS x64)\n+      if: matrix.arch == 'x64' && contains(fromJSON('[\"ubuntu\", \"macos\"]'), matrix.target-os)\n+      run: >\n+        python3 -m pip install -r llvm-project/mlir/python/requirements.txt\n+\n+        cmake -GNinja -Bllvm-project/build\n+        -DCMAKE_BUILD_TYPE=Release\n+        -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\n+        -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache\n+        -DCMAKE_INSTALL_PREFIX=\"${{ env.llvm_install_dir }}\"\n+        -DCMAKE_LINKER=lld\n+        -DLLVM_BUILD_UTILS=ON\n+        -DLLVM_ENABLE_ASSERTIONS=ON\n+        -DMLIR_ENABLE_BINDINGS_PYTHON=ON\n+        -DLLVM_ENABLE_PROJECTS=mlir\n+        -DLLVM_INSTALL_UTILS=ON\n+        -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX;AMDGPU\"\n+        llvm-project/llvm\n+\n+        ninja -C llvm-project/build check-mlir install\n+\n+        tar czf \"${{ env.llvm_install_dir }}.tar.gz\" \"${{ env.llvm_install_dir }}\"\n+\n+    - name: Configure, Build, and Install LLVM (macOS arm64)\n+      if: matrix.arch == 'arm64' && matrix.target-os == 'macos'\n+      run: >\n+        python3 -m pip install -r llvm-project/mlir/python/requirements.txt\n+\n+        cmake -GNinja -Bllvm-project/build\n+        -DCMAKE_BUILD_TYPE=Release\n+        -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\n+        -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache\n+        -DCMAKE_INSTALL_PREFIX=\"${{ env.llvm_install_dir }}\"\n+        -DCMAKE_LINKER=lld\n+        -DCMAKE_OSX_ARCHITECTURES=arm64\n+        -DLLVM_BUILD_UTILS=ON\n+        -DLLVM_ENABLE_ASSERTIONS=ON\n+        -DMLIR_ENABLE_BINDINGS_PYTHON=ON\n+        -DLLVM_ENABLE_PROJECTS=mlir\n+        -DLLVM_ENABLE_ZSTD=OFF\n+        -DLLVM_INSTALL_UTILS=ON\n+        -DLLVM_TARGETS_TO_BUILD=\"AArch64\"\n+        -DLLVM_USE_HOST_TOOLS=ON\n+        llvm-project/llvm\n+\n+        ninja -C llvm-project/build install\n+\n+        tar czf \"${{ env.llvm_install_dir }}.tar.gz\" \"${{ env.llvm_install_dir }}\"\n+\n+    - name: Configure, Build, Test, and Install LLVM (CentOS)\n+      if: matrix.target-os == 'centos'\n+      run: |\n+        docker build --tag llvm-build --build-arg llvm_dir=llvm-project \\\n+          -f llvm-build/.github/workflows/Dockerfile .\n+\n+        # Create temporary container to copy cache and installed artifacts.\n+        CONTAINER_ID=$(docker create llvm-build)\n+        docker cp \"${CONTAINER_ID}:/install\" \"${{ env.llvm_install_dir }}\"\n+        tar czf \"${{ env.llvm_install_dir }}.tar.gz\" \"${{ env.llvm_install_dir }}\"\n+\n+        # We remove the existing directory, otherwise docker will\n+        # create a subdirectory inside the existing directory.\n+        rm -rf \"${{ env.SCCACHE_DIR }}\"\n+        docker cp \"${CONTAINER_ID}:/sccache\" \"${{ env.SCCACHE_DIR }}\"\n+        sudo chown -R \"$(id -u -n):$(id -g -n)\" \"${{ env.SCCACHE_DIR }}\"\n+\n+        docker rm \"${CONTAINER_ID}\"\n+\n+    - name: Azure Login\n+      uses: azure/login@v1\n+      with:\n+        client-id: ${{ secrets.AZURE_CLIENT_ID }}\n+        tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n+        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n+\n+    - name: Upload LLVM Artifacts to Azure\n+      run: |\n+        az storage blob upload --account-name tritonlang --auth-mode login --container-name llvm-builds --file \"${{ env.llvm_install_dir }}.tar.gz\" --name \"${{ env.llvm_install_dir }}.tar.gz\" --overwrite\n+\n+        URL=$(az storage blob url --account-name tritonlang --auth-mode login --container-name llvm-builds --name \"${{ env.llvm_install_dir }}.tar.gz\")\n+        echo \"Blob URL: ${URL}\"\n+\n+    - name: Azure Logout\n+      run: az logout\n+      if: always()\n+\n+    - name: Dump Sccache Statistics\n+      run: sccache --show-stats"}]