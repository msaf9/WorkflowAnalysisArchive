[{"filename": "python/triton/__init__.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -17,6 +17,7 @@\n     KernelInterface,\n     reinterpret,\n     TensorWrapper,\n+    OutOfResources,\n     MockTensor,\n )\n from .runtime.jit import jit\n@@ -39,6 +40,7 @@\n     \"MockTensor\",\n     \"next_power_of_2\",\n     \"ops\",\n+    \"OutOfResources\",\n     \"reinterpret\",\n     \"runtime\",\n     \"TensorWrapper\","}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -756,6 +756,7 @@ def visit_keyword(self, node) -> Tuple[str, Any]:\n     def visit_Assert(self, node) -> Any:\n         if not self.debug:\n             return\n+        print(\"AA\")\n         test = self.visit(node.test)\n         msg = self.visit(node.msg)\n         # Convert assert to triton's device_assert which happens on the device\n@@ -951,7 +952,7 @@ def kernel_suffix(signature, specialization):\n     return suffix\n \n \n-def ast_to_ttir(fn, signature, specialization, constants, debug=False):\n+def ast_to_ttir(fn, signature, specialization, constants, debug):\n     # canonicalize signature\n     if isinstance(signature, str):\n         signature = {k: v.strip() for k, v in enumerate(signature.split(\",\"))}"}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "file_content_changes": "@@ -24,7 +24,27 @@\n from .make_launcher import make_stub\n \n \n-def optimize_ttir(mod):\n+def inline_triton_ir(mod):\n+    pm = _triton.ir.pass_manager(mod.context)\n+    pm.enable_debug()\n+    pm.add_inliner_pass()\n+    pm.run(mod)\n+    return mod\n+\n+\n+def ttir_compute_capability_rewrite(mod, arch):\n+    # For hardware without support, we must rewrite all load/store\n+    # with block (tensor) pointers into tensors of pointers\n+    pm = _triton.ir.pass_manager(mod.context)\n+    pm.enable_debug()\n+    pm.add_rewrite_tensor_pointer_pass(arch)\n+    pm.run(mod)\n+    return mod\n+\n+\n+def optimize_ttir(mod, arch):\n+    mod = inline_triton_ir(mod)\n+    mod = ttir_compute_capability_rewrite(mod, arch)\n     pm = _triton.ir.pass_manager(mod.context)\n     pm.enable_debug()\n     pm.add_inliner_pass()\n@@ -352,7 +372,7 @@ def compile(fn, **kwargs):\n     stages = dict()\n     stages[\"ast\"] = (lambda path: fn, None)\n     stages[\"ttir\"] = (lambda path: parse_mlir_module(path, context),\n-                      lambda src: optimize_ttir(ast_to_ttir(src, signature, configs[0], constants)))\n+                      lambda src: optimize_ttir(ast_to_ttir(src, signature, configs[0], constants, debug=debug), arch))\n     stages[\"ttgir\"] = (lambda path: parse_mlir_module(path, context),\n                        lambda src: optimize_ttgir(ttir_to_ttgir(src, num_warps), num_stages, arch))\n     stages[\"llir\"] = (lambda path: Path(path).read_text(),"}, {"filename": "python/triton/runtime/__init__.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -1,5 +1,5 @@\n from . import driver\n-from .autotuner import Config, Heuristics, autotune, heuristics\n+from .autotuner import Config, Heuristics, OutOfResources, autotune, heuristics\n from .jit import (JITFunction, KernelInterface, MockTensor, TensorWrapper, reinterpret,\n                   version_key)\n \n@@ -14,5 +14,6 @@\n     \"version_key\",\n     \"reinterpret\",\n     \"TensorWrapper\",\n+    \"OutOfResources\",\n     \"MockTensor\",\n ]"}]