[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "file_content_changes": "@@ -1328,6 +1328,21 @@ def format_of(ty):\n             \"int64_t\": \"L\",\n         }[ty]\n \n+    def ty_to_cast_method(ty):\n+        return {\n+            \"i1\": \"PyLong_AsLong\",\n+            \"i8\": \"PyLong_AsLong\",\n+            \"i16\": \"PyLong_AsLong\",\n+            \"i32\": \"PyLong_AsLong\",\n+            \"i64\": \"PyLong_AsLongLong\",\n+            \"u32\": \"PyLong_AsUnsignedLong\",\n+            \"u64\": \"PyLong_AsUnsignedLongLong\",\n+            \"fp16\": \"PyFloat_AsDouble\",\n+            \"bf16\": \"PyFloat_AsDouble\",\n+            \"fp32\": \"PyFloat_AsDouble\",\n+            \"f32\": \"PyFloat_AsDouble\",\n+            \"fp64\": \"PyFloat_AsDouble\",\n+        }[ty]\n     format = \"iiiiiKKOOO\" + ''.join([format_of(_extracted_type(ty)) for ty in signature.values()])\n \n     # generate glue code\n@@ -1546,43 +1561,57 @@ def format_of(ty):\n   return ptr_info;\n }}\n \n-static PyObject* launch(PyObject* self, PyObject* args) {{\n-  int gridX, gridY, gridZ;\n-  uint64_t _stream;\n-  uint64_t _function;\n-  int num_warps;\n-  int shared_memory;\n-  PyObject *launch_enter_hook = NULL;\n-  PyObject *launch_exit_hook = NULL;\n-  PyObject *compiled_kernel = NULL;\n-  {' '.join([f\"{_extracted_type(ty)} _arg{i}; \" for i, ty in signature.items()])}\n-  if(!PyArg_ParseTuple(args, \\\"{format}\\\", &gridX, &gridY, &gridZ, &num_warps, &shared_memory, &_stream, &_function, &launch_enter_hook, &launch_exit_hook, &compiled_kernel, {', '.join(f\"&_arg{i}\" for i, ty in signature.items())})) {{\n-    return NULL;\n+static PyObject* launch(PyObject* self, PyObject* const* args, Py_ssize_t nargs, PyObject* kwnames) {{\n+  int gridX = (int) PyLong_AsLong(args[0]);\n+  int gridY = (int) PyLong_AsLong(args[1]);\n+  int gridZ = (int) PyLong_AsLong(args[2]);\n+  int num_warps = (int) PyLong_AsLong(args[3]);\n+  int shared_memory = (int) PyLong_AsLong(args[4]);\n+\n+  uint64_t _stream = PyLong_AsUnsignedLongLong(args[5]);\n+  uint64_t _function = PyLong_AsUnsignedLongLong(args[6]);\n+\n+  PyObject *launch_enter_hook = args[7];\n+  PyObject *launch_exit_hook = args[8];\n+  PyObject *compiled_kernel = args[9];\n+\n+  {\" \".join([f\"PyObject* _arg{i} = args[{10+i}];\" if ty[0] == \"*\" else \"\" for i, ty in signature.items()])};\n+  {\" \".join([f\"{ty_to_cpp(ty)} _arg{i} = ({ty_to_cpp(ty)}) {ty_to_cast_method(ty)}(args[{10+i}]);\" if ty[0] != \"*\" else \"\" for i, ty in signature.items()])};\n+\n+  PyObject *py_args = NULL;\n+  if(launch_enter_hook != Py_None || launch_exit_hook != Py_None) {{\n+    py_args = PyTuple_New(nargs);\n+    for(Py_ssize_t i = 0; i < nargs; ++i) {{\n+        Py_INCREF(args[i]);\n+        PyTuple_SetItem(py_args, i, args[i]);\n+    }}\n   }}\n \n   if (launch_enter_hook != Py_None) {{\n-    PyObject_CallObject(launch_enter_hook, args);\n+    PyObject_CallObject(launch_enter_hook, py_args);\n   }}\n \n-\n   // raise exception asap\n   {\"; \".join([f\"DevicePtrInfo ptr_info{i} = getPointer(_arg{i}, {i}); if (!ptr_info{i}.valid) return NULL;\" if ty[0] == \"*\" else \"\" for i, ty in signature.items()])};\n   _launch(gridX, gridY, gridZ, num_warps, shared_memory, (CUstream)_stream, (CUfunction)_function, {', '.join(f\"ptr_info{i}.dev_ptr\" if ty[0]==\"*\" else f\"_arg{i}\"for i, ty in signature.items())});\n \n   if (launch_exit_hook != Py_None) {{\n-    PyObject_CallObject(launch_exit_hook, args);\n+    PyObject_CallObject(launch_exit_hook, py_args);\n   }}\n \n   if(PyErr_Occurred()) {{\n     return NULL;\n   }}\n   // return None\n   Py_INCREF(Py_None);\n+  if(py_args != NULL) {{\n+    Py_DECREF(py_args);\n+  }}\n   return Py_None;\n }}\n \n static PyMethodDef ModuleMethods[] = {{\n-  {{\"launch\", launch, METH_VARARGS, \"Entry point for all kernels with this signature\"}},\n+  {{\"launch\", (PyCFunction)launch, METH_FASTCALL, \"Entry point for all kernels with this signature\"}},\n   {{NULL, NULL, 0, NULL}} // sentinel\n }};\n "}]