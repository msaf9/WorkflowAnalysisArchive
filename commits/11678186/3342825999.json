[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "file_content_changes": "@@ -3719,11 +3719,22 @@ struct FDivOpConversion\n \n     PTXBuilder ptxBuilder;\n     auto &fdiv = *ptxBuilder.create<PTXInstr>(\"div\");\n-    fdiv.o(\"full\").o(\"f32\");\n-    auto res = ptxBuilder.newOperand(\"=r\");\n-    auto lhs = ptxBuilder.newOperand(operands[0], \"r\");\n-    auto rhs = ptxBuilder.newOperand(operands[1], \"r\");\n-    fdiv(res, lhs, rhs);\n+    unsigned bitwidth = elemTy.getIntOrFloatBitWidth();\n+    if (32 == bitwidth) {\n+      fdiv.o(\"full\").o(\"f32\");\n+      auto res = ptxBuilder.newOperand(\"=r\");\n+      auto lhs = ptxBuilder.newOperand(operands[0], \"r\");\n+      auto rhs = ptxBuilder.newOperand(operands[1], \"r\");\n+      fdiv(res, lhs, rhs);\n+    } else if (64 == bitwidth) {\n+      fdiv.o(\"rn\").o(\"f64\");\n+      auto res = ptxBuilder.newOperand(\"=l\");\n+      auto lhs = ptxBuilder.newOperand(operands[0], \"l\");\n+      auto rhs = ptxBuilder.newOperand(operands[1], \"l\");\n+      fdiv(res, lhs, rhs);\n+    } else {\n+      assert(0 && bitwidth && \"not supported\");\n+    }\n \n     Value ret = ptxBuilder.launch(rewriter, loc, elemTy, false);\n     return ret;"}]