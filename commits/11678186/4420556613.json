[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "file_content_changes": "@@ -295,6 +295,43 @@ def test_floordiv(dtype_x, dtype_y, device='cuda'):\n     _test_binary(dtype_x, dtype_y, expr, numpy_expr, device=device)\n \n \n+def test_unsigned_name_mangling(device='cuda'):\n+    # Test that uint32 and int32 are mangled differently by the compiler\n+    SIZE = 128\n+    # define the kernel / launch-grid\n+\n+    @triton.jit\n+    def kernel(O1, O2, X, Y, SIZE: tl.constexpr):\n+        off = tl.arange(0, SIZE)\n+        x = tl.load(X + off)\n+        y = tl.load(Y + off)\n+        out1 = tl.abs(x)  # uint32 -> nop\n+        out2 = tl.abs(-y)  # int32 -> should have an effect\n+        tl.store(O1 + off, out1)\n+        tl.store(O2 + off, out2)\n+\n+    dtype_x = 'uint32'\n+    dtype_y = 'int32'\n+    # inputs\n+    rs = RandomState(17)\n+    x = numpy_random(SIZE, dtype_str=dtype_x, rs=rs)\n+    y = numpy_random(SIZE, dtype_str=dtype_y, rs=rs)\n+    # reference result\n+    expect = (np.abs(x), np.abs(-y))\n+    # triton result\n+    x_tri = to_triton(x, device=device, dst_type=dtype_x)\n+    y_tri = to_triton(y, device=device, dst_type=dtype_y)\n+    actual = tuple(\n+        to_triton(np.empty_like(e), device=device)\n+        for e in expect\n+    )\n+    kernel[(1, )](actual[0], actual[1], x_tri, y_tri, SIZE=SIZE, num_warps=4)\n+\n+    # Bitwise op, so expect exact equality\n+    assert (expect[0] == to_numpy(actual[0])).all()\n+    assert (expect[1] == to_numpy(actual[1])).all()\n+\n+\n # ---------------\n # test bitwise ops\n # ---------------"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -57,7 +57,9 @@ def mangle_ty(ty):\n     if ty.is_ptr():\n         return 'P' + mangle_ty(ty.element_ty)\n     if ty.is_int():\n-        return 'i' + str(ty.int_bitwidth)\n+        SIGNED = triton.language.dtype.SIGNEDNESS.SIGNED\n+        prefix = 'i' if ty.int_signedness == SIGNED else 'u'\n+        return prefix + str(ty.int_bitwidth)\n     if ty.is_fp8():\n         return 'fp8'\n     if ty.is_fp16():"}]