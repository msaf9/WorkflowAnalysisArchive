[{"filename": "python/src/triton.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "file_content_changes": "@@ -1503,17 +1503,19 @@ void init_triton_ir(py::module &&m) {\n       .def(py::init<mlir::MLIRContext *>())\n       .def(\"enable_debug\",\n            [](mlir::PassManager &self) {\n+             if (!::triton::tools::getBoolEnv(\"MLIR_ENABLE_DUMP\")) return;\n+             self.getContext()->disableMultithreading();\n              auto printingFlags = mlir::OpPrintingFlags();\n              printingFlags.elideLargeElementsAttrs(16);\n+             auto print_always = [](mlir::Pass *, mlir::Operation *) {\n+               return true;\n+             };\n              self.enableIRPrinting(\n-                 /*shouldPrintBeforePass=*/nullptr,\n-                 /*shouldPrintAfterPass=*/\n-                 [](mlir::Pass *pass, mlir::Operation *) {\n-                   return ::triton::tools::getBoolEnv(\"MLIR_ENABLE_DUMP\");\n-                 },\n-                 /*printModuleScope=*/false,\n-                 /*printAfterOnlyOnChange=*/true,\n-                 /*printAfterOnlyOnFailure*/ false, llvm::dbgs(),\n+                 /*shouldPrintBeforePass=*/print_always,\n+                 /*shouldPrintAfterPass=*/print_always,\n+                 /*printModuleScope=*/true,\n+                 /*printAfterOnlyOnChange=*/false,\n+                 /*printAfterOnlyOnFailure*/true, llvm::dbgs(),\n                  printingFlags);\n            })\n       .def(\"run\","}]