[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "file_content_changes": "@@ -1521,23 +1521,43 @@ def max_contiguous(input, values, _builder=None):\n @builtin\n def static_print(*values, sep: str = \" \", end: str = \"\\n\", file=None, flush=False, _builder=None):\n     '''\n-    Print the values at compile time. The parameters are the same as the builtin :code:`print`.\n+    Print the values at compile time. The parameters are the same as the Python builtin :code:`print`.\n+\n+    Calling the Python builtin :code:`print` inside your kernel is the same as calling this.  \n+    \n+    .. highlight:: python\n+    .. code-block:: python\n+\n+        tl.static_print(f\"{BLOCK_SIZE=}\")\n+        print(f\"{BLOCK_SIZE=}\")\n     '''\n     pass\n \n \n @builtin\n def static_assert(cond, msg=\"\", _builder=None):\n     '''\n-    Assert the condition at compile time. The parameters are the same as the builtin :code:`assert`.\n+    Assert the condition at compile time.  Does not require that the :code:`TRITON_DEBUG` environment variable\n+    is set.\n+    \n+    .. highlight:: python\n+    .. code-block:: python\n+\n+        tl.static_assert(BLOCK_SIZE == 1024)\n     '''\n     pass\n \n \n @builtin\n def device_print(prefix, *args, _builder=None):\n     '''\n-    Print the values at runtime from the device.\n+    Print the values at runtime from the device.  String formatting does not work, so you should\n+    provide the values you want to print as arguments.\n+    \n+    .. highlight:: python\n+    .. code-block:: python\n+\n+        tl.device_print(\"pid\", pid)\n \n     :param prefix: a prefix to print before the values. This is required to be a string literal.\n     :param args: the values to print. They can be any tensor or scalar.\n@@ -1560,7 +1580,18 @@ def device_print(prefix, *args, _builder=None):\n @builtin\n def device_assert(cond, msg=\"\", _builder=None):\n     '''\n-    Assert the condition at runtime from the device.\n+    Assert the condition at runtime from the device.  Requires that the environment variable :code:`TRITON_DEBUG`\n+    is set to a value besides :code:`0` in order for this to have any effect.\n+    \n+    Using the Python :code:`assert` statement is the same as calling this function, except that the second argument\n+    must be provided and must be a string, e.g. :code:`assert pid == 0, \"pid != 0\"`.  The environment variable must\n+    be set for this :code:`assert` statement to have any effect.\n+    \n+    .. highlight:: python\n+    .. code-block:: python\n+\n+        tl.device_assert(pid == 0)\n+        assert pid == 0, f\"pid != 0\"\n \n     :param cond: the condition to assert. This is required to be a boolean tensor.\n     :param msg: the message to print if the assertion fails. This is required to be a string literal."}]