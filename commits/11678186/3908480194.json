[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "file_content_changes": "@@ -1203,9 +1203,7 @@ class TritonGPUCombineOpsPass\n       signalPassFailure();\n     }\n \n-    mlir::RewritePatternSet loopFixup(context);\n-    addFixupLoopPattern(context, loopFixup);\n-    if (applyPatternsAndFoldGreedily(m, std::move(loopFixup)).failed()) {\n+    if (fixupLoops(m).failed()) {\n       signalPassFailure();\n     }\n   }"}, {"filename": "lib/Dialect/TritonGPU/Transforms/UpdateMmaForVolta.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "file_content_changes": "@@ -340,12 +340,9 @@ class UpdateMmaForVoltaPass\n \n       if (applyPatternsAndFoldGreedily(m, std::move(patterns), config).failed())\n         signalPassFailure();\n-    }\n \n-    mlir::RewritePatternSet loopFixup(context);\n-    addFixupLoopPattern(context, loopFixup);\n-    if (applyPatternsAndFoldGreedily(m, std::move(loopFixup)).failed()) {\n-      signalPassFailure();\n+      if (fixupLoops(m).failed())\n+        signalPassFailure();\n     }\n   }\n };"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Utility.cpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "file_content_changes": "@@ -1,6 +1,7 @@\n #include \"Utility.h\"\n #include \"mlir/Dialect/SCF/SCF.h\"\n #include \"mlir/IR/BlockAndValueMapping.h\"\n+#include \"mlir/Transforms/GreedyPatternRewriteDriver.h\"\n \n namespace mlir {\n \n@@ -21,8 +22,6 @@ class FixupLoop : public mlir::RewritePattern {\n     SmallVector<Value, 4> newInitArgs = forOp.getInitArgs();\n     bool shouldRematerialize = false;\n     for (size_t i = 0; i < newInitArgs.size(); i++) {\n-      auto initArg = newInitArgs[i];\n-      auto regionArg = forOp.getRegionIterArgs()[i];\n       if (newInitArgs[i].getType() != forOp.getRegionIterArgs()[i].getType() ||\n           newInitArgs[i].getType() != forOp.getResultTypes()[i]) {\n         shouldRematerialize = true;\n@@ -52,8 +51,13 @@ class FixupLoop : public mlir::RewritePattern {\n \n } // namespace\n \n-void addFixupLoopPattern(MLIRContext *ctx, RewritePatternSet &patterns) {\n+LogicalResult fixupLoops(ModuleOp mod) {\n+  auto *ctx = mod.getContext();\n+  mlir::RewritePatternSet patterns(ctx);\n   patterns.add<FixupLoop>(ctx);\n+  if (applyPatternsAndFoldGreedily(mod, std::move(patterns)).failed())\n+    return failure();\n+  return success();\n }\n \n } // namespace mlir"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Utility.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -5,7 +5,7 @@\n \n namespace mlir {\n \n-void addFixupLoopPattern(MLIRContext *ctx, RewritePatternSet &patterns);\n+LogicalResult fixupLoops(ModuleOp mod);\n \n } // namespace mlir\n "}]