[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "file_content_changes": "@@ -2582,6 +2582,11 @@ def add_fn(x):\n     return x + 1\n \n \n+@triton.jit(noinline=True)\n+def add_fn_noinline(x):\n+    return x + 1\n+\n+\n @triton.jit\n def add_fn_return(x, pid):\n     if pid == 0:\n@@ -2595,7 +2600,16 @@ def add_fn_expr(Out, x):\n     tl.store(Out, x)\n \n \n-@pytest.mark.parametrize(\"call_type\", [\"attribute\", \"jit_function\", \"jit_function_return\", \"jit_function_ifexp\", \"jit_function_expr\"])\n+@triton.jit\n+def add_fn_static_cond(x, cond: tl.constexpr):\n+    if cond == \"\":\n+        return x\n+    else:\n+        return x + 1\n+\n+\n+@pytest.mark.parametrize(\"call_type\", [\"attribute\", \"jit_function\", \"jit_function_return\",\n+                                       \"ifexp\", \"expr\", \"jit_function_static_cond\", \"jit_function_noinline\"])\n def test_if_call(call_type):\n     @triton.jit\n     def kernel(Out, call_type: tl.constexpr):\n@@ -2615,16 +2629,20 @@ def kernel(Out, call_type: tl.constexpr):\n                 elif call_type == \"jit_function_return\":\n                     # function without end_if block\n                     a = add_fn_return(a, pid)\n-                elif call_type == \"jit_function_ifexp\":\n+                elif call_type == \"ifexp\":\n                     # ifexp expression\n                     a = add_fn(a) if pid == 0 else add_fn_return(a, pid)\n-                elif call_type == \"jit_function_expr\":\n+                elif call_type == \"expr\":\n                     if pid == 1:\n                         return\n                     a = add_fn(a)\n                     if pid == 0:\n                         # call without return\n                         add_fn_expr(Out, a)\n+                elif call_type == \"jit_function_static_cond\":\n+                    a = add_fn_static_cond(a, call_type)\n+                elif call_type == \"jit_function_noinline\":\n+                    a = add_fn_noinline(a)\n                 o = a\n \n         tl.store(Out, o)"}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -175,7 +175,7 @@ def contains_return_op(self, node):\n                 if name not in self.lscope and name not in self.gscope:\n                     return False\n             fn = self.visit(node.func)\n-            if isinstance(fn, JITFunction):\n+            if isinstance(fn, JITFunction) and fn.noinline is False:\n                 old_gscope = self.gscope\n                 self.gscope = sys.modules[fn.fn.__module__].__dict__\n                 ret = self.contains_return_op(fn.parse())\n@@ -195,8 +195,8 @@ def contains_return_op(self, node):\n             for _, value in ast.iter_fields(node):\n                 if isinstance(value, list):\n                     for item in value:\n-                       if isinstance(item, ast.AST):\n-                           ret = ret or self.contains_return_op(item)\n+                        if isinstance(item, ast.AST):\n+                            ret = ret or self.contains_return_op(item)\n                 elif isinstance(value, ast.AST):\n                     ret = ret or self.contains_return_op(value)\n             return ret"}]