[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -1155,3 +1155,17 @@ def kernel(Cond, XTrue, XFalse, Ret):\n     x_false = torch.tensor([1.51], dtype=torch.float32, device='cuda')\n     ret = torch.empty(1, dtype=torch.float32, device='cuda')\n     kernel[(1,)](cond, x_true, x_false, ret)\n+\n+\n+def test_num_warps_pow2():\n+    dst = torch.empty(128, device='cuda')\n+\n+    @triton.jit\n+    def _kernel(dst):\n+        pass\n+\n+    with pytest.raises(AssertionError, match='must be a power of 2'):\n+        _kernel[(1,)](dst=dst, num_warps=3)\n+    _kernel[(1,)](dst=dst, num_warps=1)\n+    _kernel[(1,)](dst=dst, num_warps=2)\n+    _kernel[(1,)](dst=dst, num_warps=4)"}, {"filename": "python/triton/code_gen.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -954,6 +954,7 @@ def add_to_cache(self, key, wargs, device_idx, num_warps, num_stages):\n         return self.fn._warmup(key, arg_types=arg_types, device=device_idx, attributes=attributes, constants=constants, num_warps=num_warps, num_stages=num_stages, is_manual_warmup=False)\n \n     def __call__(self, *wargs, grid, num_warps=4, num_stages=2, **kwargs):\n+        assert num_warps != 0 and (num_warps & (num_warps - 1)) == 0, f\"{num_warps=} must be a power of 2.\"\n         # handle arguments passed by name\n         kwargs = {self.fn.arg_names.index(name): value for name, value in kwargs.items()}\n         wargs = list(wargs)"}]