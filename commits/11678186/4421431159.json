[{"filename": "include/triton/Analysis/AxisInfo.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "file_content_changes": "@@ -112,7 +112,8 @@ class AxisInfo {\n \n   /// The _divisibility_ information maps the `d`-th\n   /// dimension to the largest power-of-two that\n-  /// divides the first element of all the values along it\n+  /// divides the first element of all groups of\n+  // _contiguity_ values along it\n   /// For example:\n   /// [10, 11, 12, 13, 18, 19, 20, 21]\n   /// [20, 21, 22, 23, 28, 29, 30, 31]\n@@ -123,6 +124,10 @@ class AxisInfo {\n   /// [14, 18, 22, 26]\n   /// [15, 19, 23, 27]\n   //  would have divisibility [4, 1]\n+  //  On the other hand:\n+  //  [0, 1, 2, 0, 4, 5, 6, 7]\n+  //  would have divisibility 1 because\n+  //  _contiguity_=1\n   DimVectorT divisibility;\n \n   /// The _constancy_ information maps the `d`-th"}, {"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "file_content_changes": "@@ -334,14 +334,7 @@ class DivOpAxisInfoVisitor final : public BinaryOpVisitorImpl<OpTy> {\n     if (lhs.getConstantValue().has_value() &&\n         lhs.getConstantValue().value() == 0)\n       return lhs.getDivisibility(dim);\n-    // Case 2: rhs is constant\n-    if (rhs.getConstantValue().has_value()) {\n-      auto lhsDivisibility = lhs.getDivisibility(dim);\n-      auto rhsValue = rhs.getConstantValue().value();\n-      if (lhsDivisibility % rhsValue == 0)\n-        return lhsDivisibility / rhsValue;\n-    }\n-    // Case 3: both are not constant\n+    // otherwise: return 1\n     return 1;\n   }\n "}, {"filename": "python/test/regression/test_performance.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -56,7 +56,7 @@ def nvsmi(attrs):\n     'a100': {\n         (512, 512, 512): {'float16': 0.08, 'float32': 0.13, 'int8': 0.05},\n         (1024, 1024, 1024): {'float16': 0.33, 'float32': 0.35, 'int8': 0.169},\n-        (2048, 2048, 2048): {'float16': 0.64, 'float32': 0.57, 'int8': 0.34},\n+        (2048, 2048, 2048): {'float16': 0.59, 'float32': 0.57, 'int8': 0.34},\n         (4096, 4096, 4096): {'float16': 0.81, 'float32': 0.75, 'int8': 0.46},\n         (8192, 8192, 8192): {'float16': 0.77, 'float32': 0.85, 'int8': 0.51},\n         # tall-skinny"}]