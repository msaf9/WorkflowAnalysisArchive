[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -251,7 +251,7 @@ def _mod_operation_ill_conditioned(dtype_x, dtype_y) -> bool:\n \n @pytest.mark.parametrize(\"dtype_x, dtype_y, op\", [\n     (dtype_x, dtype_y, op)\n-    for op in ['+', '-', '*', '/']  # , '%'] #TODO: handle remainder\n+    for op in ['+', '-', '*', '/', '%']  \n     for dtype_x in dtypes_with_bfloat16\n     for dtype_y in dtypes_with_bfloat16\n ])"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "file_content_changes": "@@ -237,7 +237,11 @@ def mod(input: tl.tensor,\n     other_scalar_ty = other.type.scalar\n     # float % float\n     if scalar_ty.is_floating():\n-        return tl.tensor(builder.create_frem(input.handle, other.handle), input.type)\n+        # input - input.div(other, rounding_mode=\"floor\") * other\n+        ret = sub(input , mul(floor(fdiv(input, other, False, builder), builder), \n+                              other, builder), \n+                  builder)\n+        return ret\n     # % int\n     elif scalar_ty.is_int():\n         if scalar_ty.int_signedness != other_scalar_ty.int_signedness:\n@@ -1108,6 +1112,9 @@ def umulhi(x: tl.tensor, y: tl.tensor, builder: ir.builder) -> tl.tensor:\n     from . import libdevice\n     return libdevice.mulhi(x, y, _builder=builder)\n \n+def floor(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n+    from . import libdevice\n+    return libdevice.floor(x, _builder=builder)\n \n def exp(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n     return tl.tensor(builder.create_exp(x.handle), x.type)\n@@ -1116,6 +1123,8 @@ def exp(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n def log(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n     return tl.tensor(builder.create_log(x.handle), x.type)\n \n+def fdiv(x: tl.tensor, y: tl.tensor, builder: ir.builder) -> tl.tensor:\n+    return tl.tensor(builder.create_frem(x.handle, y.handle), x.type)\n \n def cos(x: tl.tensor, builder: ir.builder) -> tl.tensor:\n     return tl.tensor(builder.create_cos(x.handle), x.type)"}]