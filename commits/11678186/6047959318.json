[{"filename": "lib/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -437,7 +437,7 @@ class TMAStoreTiledOpPattern : public mlir::RewritePattern {\n \n     PTXBuilder ptxBuilder;\n     if (dimSize == 2) {\n-      auto ptxAsm = \"cp.async.bulk.tensor.2d.global.shared::cta.bulk_group\"\n+      auto ptxAsm = \"@$4 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group\"\n                     \"[$0, {$2, $3}], [$1];\";\n       auto &ptxInstr = *ptxBuilder.create<PTXInstr>(ptxAsm);\n "}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -749,7 +749,7 @@ struct StoreAsyncOpConversion\n         typeConverter->convertType(rewriter.getI8Type()), 3);\n \n     auto threadId = getThreadId(rewriter, loc);\n-    Value pred = icmp_eq(urem(threadId, i32_val(32)), i32_val(0));\n+    Value pred = int_val(1, 1);\n \n     auto llCoord = getTypeConverter()->unpackLLElements(loc, llDst, rewriter,\n                                                         dst.getType());"}]