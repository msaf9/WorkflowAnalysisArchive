[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "file_content_changes": "@@ -445,10 +445,18 @@ class MoveConvertOutOfLoop : public mlir::RewritePattern {\n         if (isa<triton::gpu::ConvertLayoutOp>(user)) {\n           auto newType =\n               user->getResults()[0].getType().cast<RankedTensorType>();\n-          if (newType.getEncoding()\n+          auto oldType = user->getOperand(0).getType().cast<RankedTensorType>();\n+          if (oldType.getEncoding().isa<triton::gpu::SharedEncodingAttr>() &&\n+              newType.getEncoding()\n                   .isa<triton::gpu::DotOperandEncodingAttr>()) {\n             continue;\n           }\n+          if (newType.getEncoding().isa<triton::gpu::SharedEncodingAttr>()) {\n+            if (newType.getEncoding()\n+                    .cast<triton::gpu::SharedEncodingAttr>()\n+                    .getVec() == 1)\n+              continue;\n+          }\n           cvtTargetTypes.insert(newType);\n         }\n       }\n@@ -460,6 +468,7 @@ class MoveConvertOutOfLoop : public mlir::RewritePattern {\n           continue;\n       }\n       // check\n+      // llvm::outs() << \"replacing \" << iterArg.index() << \"\\n\";\n       for (auto op : iterArg.value().getUsers()) {\n         auto cvt = dyn_cast<triton::gpu::ConvertLayoutOp>(op);\n         if (!cvt)"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Swizzle.cpp", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "file_content_changes": "@@ -92,12 +92,12 @@ struct SwizzlePass : public TritonGPUSwizzleBase<SwizzlePass> {\n     op->walk([&](triton::gpu::ConvertLayoutOp cvtOp) -> void {\n       OpBuilder builder(cvtOp);\n       auto arg = cvtOp.getOperand();\n-      auto argType = arg.getType().cast<RankedTensorType>();\n       auto retType = cvtOp.getResult().getType().cast<RankedTensorType>();\n-      auto argEncoding =\n-          argType.getEncoding().dyn_cast<triton::gpu::SharedEncodingAttr>();\n       auto retEncoding =\n           retType.getEncoding().dyn_cast<triton::gpu::DotOperandEncodingAttr>();\n+      auto argType = arg.getType().cast<RankedTensorType>();\n+      auto argEncoding =\n+          argType.getEncoding().dyn_cast<triton::gpu::SharedEncodingAttr>();\n       if (!argEncoding || !retEncoding)\n         return;\n       auto opIdx = retEncoding.getOpIdx();\n@@ -106,7 +106,15 @@ struct SwizzlePass : public TritonGPUSwizzleBase<SwizzlePass> {\n           retEncoding.getParent().dyn_cast<triton::gpu::MmaEncodingAttr>();\n       if (!parentEncoding)\n         return;\n-      SwizzleInfo swizzle = getSwizzleMMA(opIdx, parentEncoding, argType);\n+      auto swizzleType = argType;\n+      if (arg.getDefiningOp() &&\n+          isa<tensor::ExtractSliceOp>(arg.getDefiningOp())) {\n+        swizzleType = arg.getDefiningOp()\n+                          ->getOperand(0)\n+                          .getType()\n+                          .cast<RankedTensorType>();\n+      }\n+      SwizzleInfo swizzle = getSwizzleMMA(opIdx, parentEncoding, swizzleType);\n       auto newEncoding = triton::gpu::SharedEncodingAttr::get(\n           &getContext(), swizzle.vec, swizzle.perPhase, swizzle.maxPhase,\n           argEncoding.getOrder());"}]