[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "file_content_changes": "@@ -1453,9 +1453,10 @@ struct BroadcastOpConversion\n     SmallVector<int64_t> resultLogicalShape(2 * rank);\n     SmallVector<unsigned> broadcastDims;\n     for (unsigned d = 0; d < rank; ++d) {\n-      unsigned resultShapePerCTA = triton::gpu::getSizePerThread(resultLayout)[d] *\n-                                   triton::gpu::getThreadsPerWarp(resultLayout)[d] *\n-                                   triton::gpu::getWarpsPerCTA(resultLayout)[d];\n+      unsigned resultShapePerCTA =\n+          triton::gpu::getSizePerThread(resultLayout)[d] *\n+          triton::gpu::getThreadsPerWarp(resultLayout)[d] *\n+          triton::gpu::getWarpsPerCTA(resultLayout)[d];\n       int64_t numCtas = ceil<unsigned>(resultShape[d], resultShapePerCTA);\n       if (srcShape[d] != resultShape[d]) {\n         assert(srcShape[d] == 1);\n@@ -1465,10 +1466,12 @@ struct BroadcastOpConversion\n             std::max<unsigned>(1, triton::gpu::getSizePerThread(srcLayout)[d]);\n       } else {\n         srcLogicalShape[d] = numCtas;\n-        srcLogicalShape[d + rank] = triton::gpu::getSizePerThread(resultLayout)[d];\n+        srcLogicalShape[d + rank] =\n+            triton::gpu::getSizePerThread(resultLayout)[d];\n       }\n       resultLogicalShape[d] = numCtas;\n-      resultLogicalShape[d + rank] = triton::gpu::getSizePerThread(resultLayout)[d];\n+      resultLogicalShape[d + rank] =\n+          triton::gpu::getSizePerThread(resultLayout)[d];\n \n       srcLogicalOrder[d] = order[d] + rank;\n       srcLogicalOrder[d + rank] = order[d];\n@@ -1983,6 +1986,7 @@ struct PrintfOpConversion\n       return \"%u\";\n     }\n     assert(false && \"not supported type\");\n+    return \"\";\n   }\n \n   // declare vprintf(i8*, i8*) as external function\n@@ -5483,6 +5487,7 @@ Value convertSplatLikeOpWithMmaLayout(const MmaEncodingAttr &layout,\n   }\n \n   assert(false && \"Unsupported mma layout found\");\n+  return {};\n }\n \n class TritonGPUToLLVMTypeConverter : public LLVMTypeConverter {"}, {"filename": "python/setup.py", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "file_content_changes": "@@ -6,7 +6,6 @@\n import subprocess\n import sys\n import tarfile\n-import tempfile\n import urllib.request\n from distutils.version import LooseVersion\n from typing import NamedTuple\n@@ -26,7 +25,9 @@ def get_build_type():\n     elif check_env_flag(\"REL_WITH_DEB_INFO\"):\n         return \"RelWithDebInfo\"\n     else:\n-        return \"Release\"\n+        return \"Debug\"\n+        # TODO(Keren): Restore this before we merge into master\n+        #return \"Release\"\n \n \n # --- third party packages -----\n@@ -124,19 +125,14 @@ def run(self):\n             self.build_extension(ext)\n \n     def build_extension(self, ext):\n-        self.debug = True\n         lit_dir = shutil.which('lit')\n         triton_cache_path = os.path.join(os.environ[\"HOME\"], \".triton\")\n         # lit is used by the test suite\n         thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)\n         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.path)))\n         # create build directories\n-        build_suffix = 'debug' if self.debug else 'release'\n-        llvm_build_dir = os.path.join(tempfile.gettempdir(), \"llvm-\" + build_suffix)\n         if not os.path.exists(self.build_temp):\n             os.makedirs(self.build_temp)\n-        if not os.path.exists(llvm_build_dir):\n-            os.makedirs(llvm_build_dir)\n         # python directories\n         python_include_dir = distutils.sysconfig.get_python_inc()\n         cmake_args = [\n@@ -145,13 +141,13 @@ def build_extension(self, ext):\n             \"-DTRITON_BUILD_TUTORIALS=OFF\",\n             \"-DTRITON_BUILD_PYTHON_MODULE=ON\",\n             # '-DPYTHON_EXECUTABLE=' + sys.executable,\n-            # '-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON',\n+            '-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON',\n             \"-DPYTHON_INCLUDE_DIRS=\" + python_include_dir,\n             \"-DLLVM_EXTERNAL_LIT=\" + lit_dir\n         ] + thirdparty_cmake_args\n \n         # configuration\n-        cfg = \"Debug\" if self.debug else \"Release\"\n+        cfg = get_build_type()\n         build_args = [\"--config\", cfg]\n \n         if platform.system() == \"Windows\":\n@@ -183,7 +179,11 @@ def build_extension(self, ext):\n         \"torch\",\n         \"lit\",\n     ],\n-    package_data={\"triton/ops\": [\"*.c\"], \"triton/ops/blocksparse\": [\"*.c\"]},\n+    package_data={\n+        \"triton/ops\": [\"*.c\"],\n+        \"triton/ops/blocksparse\": [\"*.c\"],\n+        \"triton/language\": [\"*.bc\"]\n+    },\n     include_package_data=True,\n     ext_modules=[CMakeExtension(\"triton\", \"triton/_C/\")],\n     cmdclass={\"build_ext\": CMakeBuild},"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -551,7 +551,7 @@ void init_triton_ir(py::module &&m) {\n                return llvm::dyn_cast<mlir::FuncOp>(funcOperation);\n              auto loc = self.getUnknownLoc();\n              if (auto funcTy = funcType.dyn_cast<mlir::FunctionType>()) {\n-               mlir::ArrayRef<mlir::NamedAttribute> attrs = {\n+               llvm::SmallVector<mlir::NamedAttribute> attrs = {\n                    mlir::NamedAttribute(self.getStringAttr(\"sym_visibility\"),\n                                         self.getStringAttr(visibility))};\n                return self.create<mlir::FuncOp>(loc, funcName, funcTy, attrs);"}]