[{"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "file_content_changes": "@@ -270,38 +270,7 @@ struct ReduceOpConversion\n     sync(rewriter, loc, op);\n \n     // set output values\n-    SmallVector<Value> results(op.getNumOperands());\n-    for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n-      if (auto resultTy =\n-              op.getResult()[i].getType().dyn_cast<RankedTensorType>()) {\n-        // nd-tensor where n >= 1\n-\n-        auto resultLayout = resultTy.getEncoding();\n-\n-        unsigned resultElems = getTotalElemsPerThread(resultTy);\n-        auto resultIndices = emitIndices(loc, rewriter, resultLayout, resultTy);\n-        assert(resultIndices.size() == resultElems);\n-\n-        SmallVector<Value> resultVals(resultElems);\n-        for (unsigned j = 0; j < resultElems; ++j) {\n-          SmallVector<Value> readIdx = resultIndices[j];\n-          readIdx.insert(readIdx.begin() + axis, ints[0]);\n-          Value readOffset =\n-              linearize(rewriter, loc, readIdx, smemShape, srcOrd);\n-          Value readPtr =\n-              gep(getElementPtrType(op, i), smemBases[i], readOffset);\n-          resultVals[j] = load(readPtr);\n-        }\n-        results[i] = getTypeConverter()->packLLElements(loc, resultVals,\n-                                                        rewriter, resultTy);\n-      } else {\n-        // 0d-tensor -> scalar\n-        results[i] = load(smemBases[i]);\n-      }\n-    }\n-\n-    auto parentBlock = op.getOperation()->getBlock();\n-    rewriter.replaceOp(op, results);\n+    loadReductionAndPackResult(helper, smemShape, smemBases, rewriter);\n     return success();\n   }\n \n@@ -588,11 +557,11 @@ struct ReduceOpConversion\n   // Load the final reduction from shared memory and replace the reduce result\n   // with it.\n   void loadReductionAndPackResult(ReduceOpHelper &helper,\n+                                  SmallVector<unsigned> smemShape,\n                                   SmallVector<Value> &smemBases,\n                                   ConversionPatternRewriter &rewriter) const {\n     triton::ReduceOp op = helper.getOperation();\n     Location loc = op.getLoc();\n-    auto smemShape = helper.getScratchConfigsFast();\n     auto order = getOrder(helper.getSrcLayout());\n     SmallVector<Value> results(op.getNumOperands());\n     for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n@@ -674,7 +643,7 @@ struct ReduceOpConversion\n     sync(rewriter, loc, op);\n \n     // set output values\n-    loadReductionAndPackResult(helper, smemBases, rewriter);\n+    loadReductionAndPackResult(helper, smemShape, smemBases, rewriter);\n \n     return success();\n   }"}]