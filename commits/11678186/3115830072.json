[{"filename": "python/setup.py", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "file_content_changes": "@@ -9,6 +9,7 @@\n import tarfile\n import urllib.request\n from distutils.version import LooseVersion\n+from typing import NamedTuple\n \n from setuptools import Extension, setup\n from setuptools.command.build_ext import build_ext\n@@ -38,34 +39,42 @@ def use_system_llvm():\n \n \n def get_thirdparty_packages(triton_cache_path):\n+    class Package(NamedTuple):\n+        package: str\n+        name: str\n+        url: str\n+        test_file: str\n+        include_flag: str\n+        lib_flag: str\n+\n     packages = [\n-        (\"pybind11\", \"pybind11-2.10.0\", \"https://github.com/pybind/pybind11/archive/refs/tags/v2.10.0.tar.gz\", \"include/pybind11/pybind11.h\", \"PYBIND11_INCLUDE_DIR\", \"\")\n+        Package(\"pybind11\", \"pybind11-2.10.0\", \"https://github.com/pybind/pybind11/archive/refs/tags/v2.10.0.tar.gz\", \"include/pybind11/pybind11.h\", \"PYBIND11_INCLUDE_DIR\", \"\")\n     ]\n     if not use_system_llvm():\n         # donwload LLVM if no suitable system LLVM is installed\n         packages.append(\n-            (\"llvm\", \"clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04\", \"https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz\", \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\")\n+            Package(\"llvm\", \"clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04\", \"https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz\", \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\")\n         )\n \n     thirdparty_cmake_args = []\n-    for package, name, url, test_file, include_flag, lib_flag in packages:\n-        package_root_dir = os.path.join(triton_cache_path, package)\n-        package_dir = os.path.join(package_root_dir, name)\n-        test_file_path = os.path.join(package_dir, test_file)\n+    for p in packages:\n+        package_root_dir = os.path.join(triton_cache_path, p.package)\n+        package_dir = os.path.join(package_root_dir, p.name)\n+        test_file_path = os.path.join(package_dir, p.test_file)\n         if not os.path.exists(test_file_path):\n             try:\n                 shutil.rmtree(package_root_dir)\n             except Exception:\n                 pass\n             os.makedirs(package_root_dir, exist_ok=True)\n-            print('downloading and extracting {} ...'.format(url))\n-            ftpstream = urllib.request.urlopen(url)\n+            print('downloading and extracting {} ...'.format(p.url))\n+            ftpstream = urllib.request.urlopen(p.url)\n             file = tarfile.open(fileobj=ftpstream, mode=\"r|*\")\n             file.extractall(path=package_root_dir)\n-        if include_flag:\n-            thirdparty_cmake_args.append(\"-D{}={}/include\".format(include_flag, package_dir))\n-        if lib_flag:\n-            thirdparty_cmake_args.append(\"-D{}={}/lib\".format(lib_flag, package_dir))\n+        if p.include_flag:\n+            thirdparty_cmake_args.append(\"-D{}={}/include\".format(p.include_flag, package_dir))\n+        if p.lib_flag:\n+            thirdparty_cmake_args.append(\"-D{}={}/lib\".format(p.lib_flag, package_dir))\n     return thirdparty_cmake_args\n \n "}]