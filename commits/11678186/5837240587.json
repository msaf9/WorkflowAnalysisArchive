[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "file_content_changes": "@@ -1916,6 +1916,16 @@ def extern_elementwise(lib_name: str, lib_path: str, args: list, arg_type_symbol\n     return dispatch(func, lib_name, lib_path, dispatch_args, arg_type_symbol_dict, ret_shape, is_pure, _builder)\n \n \n+def binary_op_type_legalization(lhs, rhs, builder):\n+    '''\n+        Convert both operands to a single common type\n+        :param lhs: the left operand\n+        :param rhs: the right operand\n+        :param builder: the builder\n+    '''\n+    return semantic.binary_op_type_checking_impl(lhs, rhs, builder)\n+\n+\n def extern(fn):\n     \"\"\"A decorator for external functions.\"\"\"\n     return builtin(fn)"}, {"filename": "python/triton/language/math.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -42,6 +42,7 @@ def byte_perm(arg0, arg1, arg2, _builder=None):\n def min(arg0, arg1, _builder=None):\n     arg0 = core._to_tensor(arg0, _builder)\n     arg1 = core._to_tensor(arg1, _builder)\n+    arg0, arg1 = core.binary_op_type_legalization(arg0, arg1, _builder)\n     dtype = arg0.dtype\n     if dtype.is_floating():\n         return core.tensor(_builder.create_minf(arg0.handle, arg1.handle), arg0.type)\n@@ -57,6 +58,7 @@ def min(arg0, arg1, _builder=None):\n def max(arg0, arg1, _builder=None):\n     arg0 = core._to_tensor(arg0, _builder)\n     arg1 = core._to_tensor(arg1, _builder)\n+    arg0, arg1 = core.binary_op_type_legalization(arg0, arg1, _builder)\n     dtype = arg0.dtype\n     if dtype.is_floating():\n         return core.tensor(_builder.create_maxf(arg0.handle, arg1.handle), arg0.type)"}]