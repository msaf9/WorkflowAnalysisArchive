[{"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 86, "deletions": 85, "changes": 171, "file_content_changes": "@@ -55,31 +55,31 @@ def test_gemm_no_scf(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS):\n     assert_close(c, golden, rtol=1e-3, atol=1e-3, check_dtype=False)\n \n \n-@pytest.mark.parametrize('SIZE_M,SIZE_N,SIZE_K,NUM_WARPS', [\n-    [64, 128, 128, 1],\n-    [128, 128, 128, 4],\n-    [16, 8, 32, 1],\n-    [32, 16, 64, 2],\n-    [32, 16, 64, 4],\n-])\n-def test_gemm_no_scf_int8(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS):\n-    a = torch.randint(-5, 5, (SIZE_M, SIZE_K), device='cuda', dtype=torch.int8)\n-    b = torch.randint(-5, 5, (SIZE_K, SIZE_N), device='cuda', dtype=torch.int8)\n-    c = torch.empty((SIZE_M, SIZE_N), device=a.device, dtype=torch.int32)\n-\n-    grid = lambda META: (1, )\n-    matmul_no_scf_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,\n-                               stride_am=a.stride(0), stride_ak=a.stride(1),\n-                               stride_bk=b.stride(0), stride_bn=b.stride(1),\n-                               stride_cm=c.stride(0), stride_cn=c.stride(1),\n-                               M=SIZE_M, N=SIZE_N, K=SIZE_K,\n-                               num_warps=NUM_WARPS)\n-\n-    aa = a.cpu()\n-    bb = b.cpu()\n-    golden = torch.matmul(aa.float(), bb.float()).int()\n-    torch.set_printoptions(profile=\"full\")\n-    torch.testing.assert_close(c.cpu(), golden, check_dtype=False)\n+#@pytest.mark.parametrize('SIZE_M,SIZE_N,SIZE_K,NUM_WARPS', [\n+#    [64, 128, 128, 1],\n+#    [128, 128, 128, 4],\n+#    [16, 8, 32, 1],\n+#    [32, 16, 64, 2],\n+#    [32, 16, 64, 4],\n+#])\n+#def test_gemm_no_scf_int8(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS):\n+#    a = torch.randint(-5, 5, (SIZE_M, SIZE_K), device='cuda', dtype=torch.int8)\n+#    b = torch.randint(-5, 5, (SIZE_K, SIZE_N), device='cuda', dtype=torch.int8)\n+#    c = torch.empty((SIZE_M, SIZE_N), device=a.device, dtype=torch.int32)\n+#\n+#    grid = lambda META: (1, )\n+#    matmul_no_scf_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,\n+#                               stride_am=a.stride(0), stride_ak=a.stride(1),\n+#                               stride_bk=b.stride(0), stride_bn=b.stride(1),\n+#                               stride_cm=c.stride(0), stride_cn=c.stride(1),\n+#                               M=SIZE_M, N=SIZE_N, K=SIZE_K,\n+#                               num_warps=NUM_WARPS)\n+#\n+#    aa = a.cpu()\n+#    bb = b.cpu()\n+#    golden = torch.matmul(aa.float(), bb.float()).int()\n+#    torch.set_printoptions(profile=\"full\")\n+#    torch.testing.assert_close(c.cpu(), golden, check_dtype=False)\n \n \n @triton.jit\n@@ -171,63 +171,64 @@ def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLO\n     assert_close(c, golden, rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err), check_dtype=False)\n \n \n-@pytest.mark.parametrize('M,N,K,num_warps,block_M,block_N,block_K', [\n-    [32, 32, 16, 4, 32, 32, 16],\n-    [32, 16, 16, 4, 32, 32, 16],\n-    [128, 8, 8, 4, 32, 32, 16],\n-    [127, 41, 43, 4, 32, 32, 16],\n-])\n-def test_gemm_fmadot(M, N, K, num_warps, block_M, block_N, block_K):\n-    @triton.jit\n-    def matmul_kernel(\n-        a_ptr, b_ptr, c_ptr,\n-        M, N, K,\n-        stride_am, stride_ak,\n-        stride_bk, stride_bn,\n-        stride_cm, stride_cn,\n-        BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n-    ):\n-        pid = tl.program_id(axis=0)\n-        # num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n-        num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n-        pid_m = pid // num_pid_n\n-        pid_n = pid % num_pid_n\n-\n-        offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n-        offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n-        offs_k = tl.arange(0, BLOCK_SIZE_K)\n-        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n-        b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n-\n-        accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-        for k in range(0, K, BLOCK_SIZE_K):\n-            a_mask = (offs_am[:, None] < M) & (offs_k[None, :] < K)\n-            b_mask = (offs_k[:, None] < K) & (offs_bn[None, :] < N)\n-            a = tl.load(a_ptrs, a_mask)\n-            b = tl.load(b_ptrs, b_mask)\n-            # NOTE the allow_tf32 should be false to force the dot op to do fmadot lowering\n-            accumulator += tl.dot(a, b, allow_tf32=False)\n-            a_ptrs += BLOCK_SIZE_K * stride_ak\n-            b_ptrs += BLOCK_SIZE_K * stride_bk\n-            offs_k += BLOCK_SIZE_K\n-\n-        offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n-        offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n-        c_ptrs = c_ptr + offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn\n-        c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n-        tl.store(c_ptrs, accumulator, c_mask)\n-\n-    a = torch.randn((M, K), device='cuda', dtype=torch.float32)\n-    b = torch.randn((K, N), device='cuda', dtype=torch.float32)\n-    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n-\n-    grid = lambda META: (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)\n-    matmul_kernel[grid](a, b, c,\n-                        M, N, K,\n-                        stride_am=a.stride(0), stride_ak=a.stride(1),\n-                        stride_bk=b.stride(0), stride_bn=b.stride(1),\n-                        stride_cm=c.stride(0), stride_cn=c.stride(1),\n-                        BLOCK_SIZE_M=block_M, BLOCK_SIZE_N=block_N, BLOCK_SIZE_K=block_K)\n-\n-    golden = torch.matmul(a, b)\n-    torch.testing.assert_close(c, golden)\n+#@pytest.mark.parametrize('M,N,K,num_warps,block_M,block_N,block_K', [\n+#    [32, 32, 16, 4, 32, 32, 16],\n+#    [32, 16, 16, 4, 32, 32, 16],\n+#    [128, 8, 8, 4, 32, 32, 16],\n+#    [127, 41, 43, 4, 32, 32, 16],\n+#])\n+#def test_gemm_fmadot(M, N, K, num_warps, block_M, block_N, block_K):\n+#    @triton.jit\n+#    def matmul_kernel(\n+#        a_ptr, b_ptr, c_ptr,\n+#        M, N, K,\n+#        stride_am, stride_ak,\n+#        stride_bk, stride_bn,\n+#        stride_cm, stride_cn,\n+#        BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n+#    ):\n+#        pid = tl.program_id(axis=0)\n+#        # num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n+#        num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n+#        pid_m = pid // num_pid_n\n+#        pid_n = pid % num_pid_n\n+#\n+#        offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n+#        offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n+#        offs_k = tl.arange(0, BLOCK_SIZE_K)\n+#        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n+#        b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n+#\n+#        accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n+#        for k in range(0, K, BLOCK_SIZE_K):\n+#            a_mask = (offs_am[:, None] < M) & (offs_k[None, :] < K)\n+#            b_mask = (offs_k[:, None] < K) & (offs_bn[None, :] < N)\n+#            a = tl.load(a_ptrs, a_mask)\n+#            b = tl.load(b_ptrs, b_mask)\n+#            # NOTE the allow_tf32 should be false to force the dot op to do fmadot lowering\n+#            accumulator += tl.dot(a, b, allow_tf32=False)\n+#            a_ptrs += BLOCK_SIZE_K * stride_ak\n+#            b_ptrs += BLOCK_SIZE_K * stride_bk\n+#            offs_k += BLOCK_SIZE_K\n+#\n+#        offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n+#        offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n+#        c_ptrs = c_ptr + offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn\n+#        c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n+#        tl.store(c_ptrs, accumulator, c_mask)\n+#\n+#    a = torch.randn((M, K), device='cuda', dtype=torch.float32)\n+#    b = torch.randn((K, N), device='cuda', dtype=torch.float32)\n+#    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n+#\n+#    grid = lambda META: (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)\n+#    matmul_kernel[grid](a, b, c,\n+#                        M, N, K,\n+#                        stride_am=a.stride(0), stride_ak=a.stride(1),\n+#                        stride_bk=b.stride(0), stride_bn=b.stride(1),\n+#                        stride_cm=c.stride(0), stride_cn=c.stride(1),\n+#                        BLOCK_SIZE_M=block_M, BLOCK_SIZE_N=block_N, BLOCK_SIZE_K=block_K)\n+#\n+#    golden = torch.matmul(a, b)\n+#    torch.testing.assert_close(c, golden)\n+#\n\\ No newline at end of file"}]