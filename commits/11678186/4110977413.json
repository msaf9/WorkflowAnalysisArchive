[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "file_content_changes": "@@ -305,17 +305,20 @@ class DivOpAxisInfoVisitor final : public BinaryOpVisitorImpl<OpTy> {\n \n   int64_t getDivisibility(OpTy op, const AxisInfo &lhs, const AxisInfo &rhs,\n                           int dim) override {\n-    // lhs = k * d_lhs = k * k' * gcd(d_lhs, d_rhs)\n-    // rhs = p * d_rhs = p * p' * gcd(d_lhs, d_rhs)\n-    // lhs / rhs = k * k' * gcd(d_lhs, d_rhs) / (p * p' * gcd(d_lhs, d_rhs))\n-    //           = k / p * k' / p'\n-    // gcd(k', p') = divisibility(d_lhs / gcd(d_lhs, d_rhs), d_rhs / gcd(d_lhs,\n-    // d_rhs))\n-    auto lhsDivisibility = lhs.getDivisibility(dim);\n-    auto rhsDivisibility = rhs.getDivisibility(dim);\n-    auto initGcd = gcd(lhsDivisibility, rhsDivisibility);\n-    return std::max(lhsDivisibility / initGcd, rhsDivisibility / initGcd);\n-  };\n+    // Case 1: lhs is 0\n+    if (lhs.getConstantValue().has_value() &&\n+        lhs.getConstantValue().value() == 0)\n+      return lhs.getDivisibility(dim);\n+    // Case 2: rhs is constant\n+    if (rhs.getConstantValue().has_value()) {\n+      auto lhsDivisibility = lhs.getDivisibility(dim);\n+      auto rhsValue = rhs.getConstantValue().value();\n+      if (lhsDivisibility % rhsValue == 0)\n+        return lhsDivisibility / rhsValue;\n+    }\n+    // Case 3: both are not constant\n+    return 1;\n+  }\n \n   std::optional<int64_t> getConstantValue(OpTy op, const AxisInfo &lhs,\n                                           const AxisInfo &rhs) override {"}, {"filename": "python/setup.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -79,9 +79,9 @@ def get_thirdparty_packages(triton_cache_path):\n     for p in packages:\n         package_root_dir = os.path.join(triton_cache_path, p.package)\n         package_dir = os.path.join(package_root_dir, p.name)\n-        test_file_path = os.path.join(package_dir, p.test_file)\n         if p.syspath_var_name in os.environ:\n             package_dir = os.environ[p.syspath_var_name]\n+        test_file_path = os.path.join(package_dir, p.test_file)\n         if not os.path.exists(test_file_path):\n             try:\n                 shutil.rmtree(package_root_dir)"}, {"filename": "test/Analysis/test-alignment.mlir", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "file_content_changes": "@@ -78,18 +78,24 @@ func @div() {\n   %1 = arith.constant dense<1> : tensor<128xi32>\n   // CHECK-NEXT: Contiguity: [128] ; Divisibility: [1073741824] ; Constancy: [1] ; ConstantValue: [None]\n   %2 = arith.divsi %0, %1 : tensor<128xi32>\n-  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [1073741824] ; Constancy: [1] ; ConstantValue: [None]\n+  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [1] ; Constancy: [1] ; ConstantValue: [None]\n   %3 = arith.divui %1, %0 : tensor<128xi32>\n   // CHECK-NEXT: Contiguity: [1] ; Divisibility: [64] ; Constancy: [128] ; ConstantValue: [64]\n   %4 = arith.constant dense<64> : tensor<128xi32>\n   // CHECK-NEXT: Contiguity: [1] ; Divisibility: [16777216] ; Constancy: [64] ; ConstantValue: [None]\n   %5 = arith.divsi %0, %4 : tensor<128xi32>\n-  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [16777216] ; Constancy: [1] ; ConstantValue: [None]\n+  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [1] ; Constancy: [1] ; ConstantValue: [None]\n   %6 = arith.divsi %4, %0 : tensor<128xi32>\n+  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [64] ; Constancy: [128] ; ConstantValue: [64]\n+  %7 = arith.divsi %4, %1 : tensor<128xi32>\n   // CHECK-NEXT: Contiguity: [1] ; Divisibility: [2] ; Constancy: [128] ; ConstantValue: [66]\n-  %7 = arith.constant dense<66> : tensor<128xi32>\n-  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [536870912] ; Constancy: [2] ; ConstantValue: [None]\n-  %8 = arith.divui %0, %7 : tensor<128xi32>\n+  %8 = arith.constant dense<66> : tensor<128xi32>\n+  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [1] ; Constancy: [2] ; ConstantValue: [None]\n+  %9 = arith.divui %0, %8 : tensor<128xi32>\n+  // CHECK-NEXT: Contiguity: [128] ; Divisibility: [8192] ; Constancy: [1] ; ConstantValue: [None]\n+  %10 = tt.make_range {end = 8320 : i32, start = 8192 : i32} : tensor<128xi32>\n+  // CHECK-NEXT: Contiguity: [1] ; Divisibility: [128] ; Constancy: [64] ; ConstantValue: [None]\n+  %11 = arith.divsi %10, %4 : tensor<128xi32>\n   return \n }\n "}]