[{"filename": ".github/workflows/compare-artifacts.yml", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "file_content_changes": "@@ -0,0 +1,51 @@\n+name: Compare Artifacts\n+on:\n+  workflow_run:\n+    workflows:\n+      - Integration Tests\n+    types:\n+      - completed\n+\n+jobs:\n+  Compare-artifacts:\n+    runs-on: ubuntu-latest\n+    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n+\n+    steps:\n+      - name: 'Download artifact'\n+        uses: actions/github-script@v6\n+        with:\n+          script: |\n+            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n+               owner: context.repo.owner,\n+               repo: context.repo.repo,\n+               run_id: context.payload.workflow_run.id,\n+            });\n+            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n+              return artifact.name == \"pr_number\"\n+            })[0];\n+            let download = await github.rest.actions.downloadArtifact({\n+               owner: context.repo.owner,\n+               repo: context.repo.repo,\n+               artifact_id: matchArtifact.id,\n+               archive_format: 'zip',\n+            });\n+            let fs = require('fs');\n+            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_number.zip`, Buffer.from(download.data));\n+\n+      - name: 'Unzip artifact'\n+        run: unzip pr_number.zip\n+\n+      - name: 'Comment on PR'\n+        uses: actions/github-script@v6\n+        with:\n+          github-token: ${{ secrets.GITHUB_TOKEN }}\n+          script: |\n+            let fs = require('fs');\n+            let issue_number = Number(fs.readFileSync('./pr_number'));\n+            await github.rest.issues.createComment({\n+              owner: context.repo.owner,\n+              repo: context.repo.repo,\n+              issue_number: issue_number,\n+              body: `Ignore this message. This is to test another workflow posting comment on PR number ${issue_number}.`\n+            });"}, {"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "file_content_changes": "@@ -153,6 +153,16 @@ jobs:\n           sudo nvidia-smi -i 0 --lock-gpu-clocks=1280,1280\n           python3 -m pytest -vs . --reruns 10\n           sudo nvidia-smi -i 0 -rgc\n+      - name: Save PR number\n+        env:\n+          PR_NUMBER: ${{ github.event.number }}\n+        run: |\n+          mkdir -p ./pr\n+          echo $PR_NUMBER > ./pr/pr_number\n+      - uses: actions/upload-artifact@v3\n+        with:\n+          name: pr_number\n+          path: pr/\n \n   Integration-Tests-Third-Party:\n     needs: Runner-Preparation"}, {"filename": "bin/triton-translate.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -125,7 +125,7 @@ LogicalResult tritonTranslateMain(int argc, char **argv,\n   llvm::LLVMContext llvmContext;\n   mlir::triton::gpu::TMAMetadataTy tmaInfos;\n   auto llvmir = translateTritonGPUToLLVMIR(\n-      &llvmContext, *module, SMArch.getValue(), tmaInfos, false /*isRocm*/);\n+      &llvmContext, *module, SMArch.getValue(), tmaInfos, Target::Default);\n \n   if (!llvmir) {\n     llvm::errs() << \"Translate to LLVM IR failed\";"}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/Passes.td", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "file_content_changes": "@@ -30,9 +30,13 @@ def ConvertTritonGPUToLLVM : Pass<\"convert-triton-gpu-to-llvm\", \"mlir::ModuleOp\"\n         Option<\"tmaMetadata\", \"tma-metadata\",\n                \"mlir::triton::gpu::TMAMetadataTy*\", /*default*/\"nullptr\",\n                \"tma metadata to the runtime\">,\n-        Option<\"isROCM\", \"is-rocm\",\n-               \"bool\", /*default*/\"false\",\n-               \"compile for ROCM-compatible LLVM\">,\n+        Option<\"target\", \"target\", \"enum Target\", \"mlir::triton::Target::Default\",\n+               \"compile for target compatible LLVM\",\n+               \"llvm::cl::values(\"\n+               \"clEnumValN(mlir::triton::Target::NVVM, \\\"nvvm\\\", \\\"compile for \"\n+               \"NVVM-compatible LLVM\\\"), \"\n+               \"clEnumValN(mlir::triton::Target::ROCDL, \\\"rocdl\\\", \\\"compile for \"\n+               \"ROCDL-compatible LLVM\\\"))\">,\n     ];\n }\n "}, {"filename": "include/triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -14,6 +14,8 @@ template <typename T> class OperationPass;\n \n namespace triton {\n \n+enum Target { NVVM, ROCDL, Default = NVVM };\n+\n #define GEN_PASS_DECL\n #include \"triton/Conversion/TritonGPUToLLVM/Passes.h.inc\"\n "}, {"filename": "include/triton/Target/LLVMIR/LLVMIRTranslation.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -1,5 +1,6 @@\n #ifndef TRITON_TARGET_LLVM_IR_LLVM_IR_TRANSLATION_H\n #define TRITON_TARGET_LLVM_IR_LLVM_IR_TRANSLATION_H\n+#include \"triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h\"\n #include \"triton/Target/PTX/TmaMetadata.h\"\n #include \"llvm/ADT/StringRef.h\"\n #include <memory>\n@@ -28,15 +29,15 @@ std::unique_ptr<llvm::Module>\n translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n                            mlir::ModuleOp module, int computeCapability,\n                            mlir::triton::gpu::TMAMetadataTy &tmaInfos,\n-                           bool isROCM);\n+                           Target target);\n \n // Translate mlir LLVM dialect to LLVMIR, return null if failed.\n std::unique_ptr<llvm::Module>\n translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module,\n-                      bool isROCM);\n+                      Target target);\n \n bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n-                   llvm::StringRef path, bool isROCM);\n+                   llvm::StringRef path, Target target);\n \n } // namespace triton\n } // namespace mlir"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "file_content_changes": "@@ -307,8 +307,10 @@ struct ReduceOpConversion\n     Operation *yield = block->getTerminator();\n     Operation *reduceOp = yield->getOperand(0).getDefiningOp();\n     if (!reduceOp || reduceOp->getNumOperands() != 2 ||\n-        reduceOp->getNumResults() != 1 ||\n-        !reduceOp->getResultTypes()[0].isInteger(32))\n+        reduceOp->getNumResults() != 1)\n+      return std::nullopt;\n+    auto intType = reduceOp->getResultTypes()[0].dyn_cast<IntegerType>();\n+    if (!intType || intType.getWidth() > 32)\n       return std::nullopt;\n     if (reduceOp->getOperand(0) != block->getArgument(0) ||\n         reduceOp->getOperand(1) != block->getArgument(1))\n@@ -382,8 +384,19 @@ struct ReduceOpConversion\n           mask = shl(i32_val(bitmask),\n                      and_(laneId, i32_val(~(numLaneToReduce - 1))));\n         }\n-        acc[0] = rewriter.create<NVVM::ReduxOp>(loc, acc[0].getType(), acc[0],\n-                                                *kind, mask);\n+        for (unsigned i = 0; i < acc.size(); ++i) {\n+          unsigned bitwidth = acc[i].getType().cast<IntegerType>().getWidth();\n+          if (bitwidth < 32) {\n+            if (*kind == NVVM::ReduxKind::MIN || *kind == NVVM::ReduxKind::MAX)\n+              acc[i] = sext(i32_ty, acc[i]);\n+            else\n+              acc[i] = zext(i32_ty, acc[i]);\n+          }\n+          acc[i] = rewriter.create<NVVM::ReduxOp>(loc, acc[i].getType(), acc[0],\n+                                                  *kind, mask);\n+          if (bitwidth < 32)\n+            acc[i] = trunc(int_ty(bitwidth), acc[i]);\n+        }\n         return;\n       }\n     }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "file_content_changes": "@@ -63,14 +63,17 @@ static void addWSNamedAttrs(Operation *op,\n \n class TritonLLVMFunctionConversionTarget : public ConversionTarget {\n public:\n-  explicit TritonLLVMFunctionConversionTarget(MLIRContext &ctx, bool isROCM)\n+  explicit TritonLLVMFunctionConversionTarget(MLIRContext &ctx, Target target)\n       : ConversionTarget(ctx) {\n     addLegalDialect<index::IndexDialect>();\n     addLegalDialect<LLVM::LLVMDialect>();\n-    if (isROCM) {\n-      addLegalDialect<ROCDL::ROCDLDialect>();\n-    } else {\n+    switch (target) {\n+    case Target::NVVM:\n       addLegalDialect<NVVM::NVVMDialect>();\n+      break;\n+    case Target::ROCDL:\n+      addLegalDialect<ROCDL::ROCDLDialect>();\n+      break;\n     }\n     addLegalOp<mlir::UnrealizedConversionCastOp>();\n   }\n@@ -359,13 +362,16 @@ struct CallOpConversion : public ConvertOpToLLVMPattern<triton::CallOp> {\n \n class TritonLLVMConversionTarget : public ConversionTarget {\n public:\n-  explicit TritonLLVMConversionTarget(MLIRContext &ctx, bool isROCM)\n+  explicit TritonLLVMConversionTarget(MLIRContext &ctx, Target target)\n       : ConversionTarget(ctx) {\n     addLegalDialect<LLVM::LLVMDialect>();\n-    if (isROCM) {\n-      addLegalDialect<ROCDL::ROCDLDialect>();\n-    } else {\n+    switch (target) {\n+    case Target::NVVM:\n       addLegalDialect<NVVM::NVVMDialect>();\n+      break;\n+    case Target::ROCDL:\n+      addLegalDialect<ROCDL::ROCDLDialect>();\n+      break;\n     }\n     addLegalDialect<mlir::triton::nvgpu::NVGPUDialect>();\n     addIllegalDialect<triton::TritonDialect>();\n@@ -387,7 +393,7 @@ struct ConvertTritonGPUToLLVM\n     mlir::LowerToLLVMOptions option(context);\n     option.overrideIndexBitwidth(32);\n     TritonGPUToLLVMTypeConverter typeConverter(context, option);\n-    TritonLLVMConversionTarget target(*context, isROCM);\n+    TritonLLVMConversionTarget convTarget(*context, target);\n     int numWarps = triton::gpu::TritonGPUDialect::getNumWarps(mod);\n     int numCTAs = triton::gpu::TritonGPUDialect::getNumCTAs(mod);\n     int threadsPerWarp = triton::gpu::TritonGPUDialect::getThreadsPerWarp(mod);\n@@ -441,7 +447,7 @@ struct ConvertTritonGPUToLLVM\n     {\n       mlir::LowerToLLVMOptions option(context);\n       TritonGPUToLLVMTypeConverter typeConverter(context, option);\n-      TritonLLVMFunctionConversionTarget funcTarget(*context, isROCM);\n+      TritonLLVMFunctionConversionTarget funcTarget(*context, target);\n       RewritePatternSet funcPatterns(context);\n       funcPatterns.add<FuncOpConversion>(typeConverter, numWarps, allocation,\n                                          /*benefit=*/1);\n@@ -461,7 +467,7 @@ struct ConvertTritonGPUToLLVM\n     {\n       mlir::LowerToLLVMOptions option(context);\n       TritonGPUToLLVMTypeConverter typeConverter(context, option);\n-      TritonLLVMFunctionConversionTarget funcTarget(*context, isROCM);\n+      TritonLLVMFunctionConversionTarget funcTarget(*context, target);\n       RewritePatternSet funcPatterns(context);\n       funcPatterns.add<CallOpConversion>(typeConverter, numWarps, allocation,\n                                          /*benefit=*/1);\n@@ -539,16 +545,19 @@ struct ConvertTritonGPUToLLVM\n     mlir::populateMathToLLVMConversionPatterns(typeConverter, patterns);\n \n     // Native lowering patterns\n-    if (isROCM) {\n+    switch (target) {\n+    case Target::NVVM:\n+      mlir::populateGpuToNVVMConversionPatterns(typeConverter, patterns);\n+      break;\n+    case Target::ROCDL:\n       mlir::populateGpuToROCDLConversionPatterns(typeConverter, patterns,\n                                                  mlir::gpu::amd::HIP);\n-    } else {\n-      mlir::populateGpuToNVVMConversionPatterns(typeConverter, patterns);\n+      break;\n     }\n \n     mlir::cf::populateControlFlowToLLVMConversionPatterns(typeConverter,\n                                                           patterns);\n-    if (failed(applyPartialConversion(mod, target, std::move(patterns))))\n+    if (failed(applyPartialConversion(mod, convTarget, std::move(patterns))))\n       return signalPassFailure();\n \n     // Fold CTAId when there is only 1 CTA."}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "file_content_changes": "@@ -55,7 +55,7 @@ struct NVVMMetadata {\n \n // Add the nvvm related metadata to LLVM IR.\n static void amendLLVMFunc(llvm::Function *func, const NVVMMetadata &metadata,\n-                          bool isROCM) {\n+                          Target target) {\n   auto *module = func->getParent();\n   auto &ctx = func->getContext();\n \n@@ -85,16 +85,19 @@ static void amendLLVMFunc(llvm::Function *func, const NVVMMetadata &metadata,\n   }\n \n   if (metadata.isKernel) {\n-    if (isROCM) {\n-      func->setCallingConv(llvm::CallingConv::AMDGPU_KERNEL);\n-      func->addFnAttr(\"amdgpu-flat-work-group-size\", \"1, 1024\");\n-    } else {\n+    switch (target) {\n+    case Target::NVVM: {\n       llvm::Metadata *mdArgs[] = {\n           llvm::ValueAsMetadata::get(func), llvm::MDString::get(ctx, \"kernel\"),\n           llvm::ValueAsMetadata::get(\n               llvm::ConstantInt::get(llvm::Type::getInt32Ty(ctx), 1))};\n       module->getOrInsertNamedMetadata(\"nvvm.annotations\")\n           ->addOperand(llvm::MDNode::get(ctx, mdArgs));\n+    } break;\n+    case Target::ROCDL: {\n+      func->setCallingConv(llvm::CallingConv::AMDGPU_KERNEL);\n+      func->addFnAttr(\"amdgpu-flat-work-group-size\", \"1, 1024\");\n+    } break;\n     }\n   }\n }\n@@ -240,7 +243,7 @@ static void linkLibdevice(llvm::Module &module) {\n }\n \n bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n-                   llvm::StringRef path, bool isROCM) {\n+                   llvm::StringRef path, Target target) {\n   llvm::SMDiagnostic err;\n   auto &ctx = module.getContext();\n \n@@ -259,8 +262,7 @@ bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n     return true;\n   }\n \n-  // check if ROCM\n-  if (!isROCM) {\n+  if (target == Target::NVVM) {\n     if (name == \"libdevice\") {\n       linkLibdevice(module);\n     }\n@@ -274,7 +276,7 @@ bool linkExternLib(llvm::Module &module, llvm::StringRef name,\n \n std::unique_ptr<llvm::Module>\n translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module,\n-                      bool isROCM) {\n+                      Target target) {\n   DialectRegistry registry;\n   mlir::registerBuiltinDialectTranslation(registry);\n   mlir::registerLLVMDialectTranslation(registry);\n@@ -302,7 +304,7 @@ translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module,\n   // dead code.\n   auto externLibs = getExternLibs(module);\n   for (auto &lib : externLibs) {\n-    if (linkExternLib(*llvmModule, lib.first, lib.second, isROCM))\n+    if (linkExternLib(*llvmModule, lib.first, lib.second, target))\n       return nullptr;\n   }\n \n@@ -318,7 +320,7 @@ translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module,\n   for (auto &func : llvmModule->functions()) {\n     auto it = nvvmMetadata.find(func.getName());\n     if (it != nvvmMetadata.end())\n-      amendLLVMFunc(&func, it->second, isROCM);\n+      amendLLVMFunc(&func, it->second, target);\n   }\n \n   return llvmModule;\n@@ -328,7 +330,7 @@ std::unique_ptr<llvm::Module>\n translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n                            mlir::ModuleOp module, int computeCapability,\n                            mlir::triton::gpu::TMAMetadataTy &tmaInfos,\n-                           bool isROCM) {\n+                           Target target) {\n   mlir::PassManager pm(module->getContext());\n   mlir::registerPassManagerCLOptions();\n   if (failed(applyPassManagerCLOptions(pm))) {\n@@ -351,7 +353,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n   pm.addPass(mlir::createConvertSCFToCFPass());\n   pm.addPass(mlir::createConvertIndexToLLVMPass());\n   pm.addPass(\n-      createConvertTritonGPUToLLVMPass({computeCapability, &tmaInfos, isROCM}));\n+      createConvertTritonGPUToLLVMPass({computeCapability, &tmaInfos, target}));\n   pm.addPass(createConvertNVGPUToLLVMPass());\n   pm.addPass(mlir::createArithToLLVMConversionPass());\n   pm.addPass(mlir::createCanonicalizerPass());\n@@ -366,7 +368,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n     return nullptr;\n   }\n \n-  auto llvmIR = translateLLVMToLLVMIR(llvmContext, module, isROCM);\n+  auto llvmIR = translateLLVMToLLVMIR(llvmContext, module, target);\n   if (!llvmIR) {\n     llvm::errs() << \"Translate to LLVM IR failed\";\n     return nullptr;"}, {"filename": "lib/Target/PTX/PTXTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -56,7 +56,7 @@ static void linkExternal(llvm::Module &module) {\n   //     std::filesystem::path(__BUILD_DIR__) / \"lib\" / \"Hopper\" /\n   //     \"libhopper_helpers.bc\";\n   if (mlir::triton::linkExternLib(module, \"libhopper_helpers\", path.string(),\n-                                  /*isROCM*/ false))\n+                                  mlir::triton::Target::NVVM))\n     llvm::errs() << \"Link failed for: libhopper_helpers.bc\";\n }\n "}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "file_content_changes": "@@ -81,6 +81,11 @@ void init_triton_runtime(py::module &&m) {\n       .value(\"CUDA\", CUDA)\n       .value(\"ROCM\", ROCM)\n       .export_values();\n+\n+  py::enum_<mlir::triton::Target>(m, \"TARGET\")\n+      .value(\"NVVM\", mlir::triton::NVVM)\n+      .value(\"ROCDL\", mlir::triton::ROCDL)\n+      .export_values();\n }\n \n // A custom op builder that keeps track of the last location\n@@ -1804,11 +1809,12 @@ void init_triton_translation(py::module &m) {\n   m.def(\n       \"translate_triton_gpu_to_llvmir\",\n       [](mlir::ModuleOp op, int computeCapability,\n-         mlir::triton::gpu::TMAMetadataTy &tmaInfos, bool isROCM) {\n+         mlir::triton::gpu::TMAMetadataTy &tmaInfos,\n+         mlir::triton::Target target) {\n         py::gil_scoped_release allow_threads;\n         llvm::LLVMContext llvmContext;\n         auto llvmModule = ::mlir::triton::translateTritonGPUToLLVMIR(\n-            &llvmContext, op, computeCapability, tmaInfos, isROCM);\n+            &llvmContext, op, computeCapability, tmaInfos, target);\n         if (!llvmModule)\n           llvm::report_fatal_error(\"Failed to translate TritonGPU to LLVM IR.\");\n "}, {"filename": "python/test/regression/test_performance.py", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "file_content_changes": "@@ -225,3 +225,59 @@ def test_flash_attention(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str):\n     ref_gpu_util = flash_attention_data[DEVICE_NAME][(Z, H, N_CTX, D_HEAD, seq_par, causal, mode, dtype_str)]\n     print_perf(ms, cur_gpu_util, ref_gpu_util)\n     triton.testing.assert_close(cur_gpu_util, ref_gpu_util, atol=0.02, rtol=0.01)\n+\n+\n+#######################\n+# Reduction\n+#######################\n+\n+\n+@triton.jit\n+def _sum(x_ptr, y_ptr, output_ptr, n_elements,\n+         BLOCK_SIZE: tl.constexpr):\n+    pid = tl.program_id(axis=0)\n+    block_start = pid * BLOCK_SIZE\n+    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n+    mask = offsets < n_elements\n+    x = tl.load(x_ptr + offsets, mask=mask)\n+    y = tl.load(y_ptr + offsets, mask=mask)\n+    # run in a loop to only to make it compute bound.\n+    for i in range(100):\n+        x = tl.sum(x, axis=0) + y\n+\n+    tl.store(output_ptr + offsets, x, mask=mask)\n+\n+\n+reduction_data = {\n+    'a100': {\n+        1024 * 16384: {'float16': 0.016, 'float32': 0.031, 'int16': 0.015, 'int32': 0.031},\n+        1024 * 65536: {'float16': 0.016, 'float32': 0.032, 'int16': 0.015, 'int32': 0.032},\n+    }\n+}\n+\n+\n+@pytest.mark.parametrize('N', reduction_data[DEVICE_NAME].keys())\n+@pytest.mark.parametrize(\"dtype_str\", ['float16', 'float32', 'int16', 'int32'])\n+def test_reductions(N, dtype_str):\n+    stream = torch.cuda.Stream()\n+    torch.cuda.set_stream(stream)\n+    torch.manual_seed(0)\n+    dtype = {'float16': torch.float16, 'float32': torch.float32, 'int16': torch.int16, 'int32': torch.int32}[dtype_str]\n+    ref_gpu_util = reduction_data[DEVICE_NAME][N][dtype_str]\n+    cur_sm_clock = nvsmi(['clocks.current.sm'])[0]\n+    max_gpu_perf = get_max_tensorcore_tflops(dtype, clock_rate=cur_sm_clock * 1e3)\n+    z = torch.empty((N, ), dtype=dtype, device='cuda')\n+    if dtype == torch.float16 or dtype == torch.float32:\n+        x = torch.randn_like(z)\n+        y = torch.randn_like(z)\n+    else:\n+        info = torch.iinfo(dtype)\n+        x = torch.randint(info.min, info.max, (N,), dtype=dtype, device='cuda')\n+        y = torch.randint(info.min, info.max, (N,), dtype=dtype, device='cuda')\n+    grid = lambda args: (triton.cdiv(N, args['BLOCK_SIZE']), )\n+    fn = lambda: _sum[grid](x, y, z, N, BLOCK_SIZE=1024)\n+    ms = triton.testing.do_bench_cudagraph(fn)\n+    cur_gpu_perf = 100. * 2. * N / ms * 1e-9\n+    cur_gpu_util = cur_gpu_perf / max_gpu_perf\n+    print_perf(ms, cur_gpu_util, ref_gpu_util)\n+    triton.testing.assert_close(cur_gpu_util, ref_gpu_util, atol=0.02, rtol=0.01)"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -1488,8 +1488,6 @@ def copy_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n def get_reduced_dtype(dtype_str, op):\n     if op in ('argmin', 'argmax'):\n         return 'int32'\n-    if dtype_str in ['int8', 'uint8', 'int16', 'uint16']:\n-        return 'int32'\n     if dtype_str == 'bfloat16':\n         return 'float32'\n     return dtype_str"}, {"filename": "python/triton/common/build.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -18,7 +18,7 @@ def is_hip():\n \n @functools.lru_cache()\n def libcuda_dirs():\n-    libs = subprocess.check_output([\"ldconfig\", \"-p\"]).decode()\n+    libs = subprocess.check_output([\"/sbin/ldconfig\", \"-p\"]).decode()\n     # each line looks like the following:\n     # libcuda.so.1 (libc6,x86-64) => /lib/x86_64-linux-gnu/libcuda.so.1\n     locs = [line.split()[-1] for line in libs.splitlines() if \"libcuda.so\" in line]\n@@ -27,6 +27,9 @@ def libcuda_dirs():\n     if locs:\n         msg += 'Possible files are located at %s.' % str(locs)\n         msg += 'Please create a symlink of libcuda.so to any of the file.'\n+    else:\n+        msg += 'Please make sure GPU is setup and then run \"/sbin/ldconfig\"'\n+        msg += ' (requires sudo) to refresh the linker cache.'\n     assert any(os.path.exists(os.path.join(path, 'libcuda.so')) for path in dirs), msg\n     return dirs\n "}, {"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -13,7 +13,7 @@\n \n from .._C.libtriton.triton import (ClusterInfo, TMAInfos, add_external_libs,\n                                    compile_ptx_to_cubin, get_env_vars, get_num_warps,\n-                                   get_shared_memory_size, ir,\n+                                   get_shared_memory_size, ir, runtime,\n                                    translate_llvmir_to_hsaco, translate_llvmir_to_ptx,\n                                    translate_triton_gpu_to_llvmir)\n from ..common.backend import get_backend, path_to_ptxas\n@@ -142,9 +142,9 @@ def ttgir_to_llir(mod, extern_libs, arch, tma_infos):\n         _add_external_libs(mod, extern_libs)\n     # TODO: separate tritongpu_to_llvmir for different backends\n     if _is_cuda(arch):\n-        return translate_triton_gpu_to_llvmir(mod, arch, tma_infos, False)\n+        return translate_triton_gpu_to_llvmir(mod, arch, tma_infos, runtime.TARGET.NVVM)\n     else:\n-        return translate_triton_gpu_to_llvmir(mod, 0, True)\n+        return translate_triton_gpu_to_llvmir(mod, 0, TMAInfos(), runtime.TARGET.ROCDL)\n \n \n # PTX translation"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "file_content_changes": "@@ -1354,11 +1354,6 @@ def make_combine_region(reduce_op):\n @builtin\n def _promote_reduction_input(t, _builder=None):\n     scalar_ty = t.type.scalar\n-    # input is extended to 32-bits if necessary\n-    # this increases numerical accuracy and can be done pretty much for free\n-    # on GPUs\n-    if scalar_ty.is_int() and scalar_ty.int_bitwidth < 32:\n-        return t.to(int32, _builder=_builder)\n \n     # hardware doesn't support FMAX, FMIN, CMP for bfloat16\n     if scalar_ty is bfloat16:"}, {"filename": "python/triton/ops/flash_attention.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -342,7 +342,7 @@ def backward(ctx, do):\n         dk = torch.empty_like(k)\n         dv = torch.empty_like(v)\n         delta = torch.empty_like(L)\n-        _bwd_preprocess[(ctx.grid[0] * ctx.grid[1], )](\n+        _bwd_preprocess[(cdiv(q.shape[2], BLOCK) * ctx.grid[1], )](\n             o, do,\n             delta,\n             BLOCK_M=BLOCK, D_HEAD=ctx.BLOCK_DMODEL,"}, {"filename": "python/triton/testing.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -377,9 +377,9 @@ def get_max_tensorcore_tflops(dtype, backend=None, device=None, clock_rate=None)\n         assert dtype == torch.float16\n         ops_per_sub_core = 256  # 2 4x4x4 Tensor Cores\n     else:\n-        if dtype == torch.float32:\n+        if dtype in [torch.float32, torch.int32]:\n             ops_per_sub_core = 256\n-        elif dtype in [torch.float16, torch.bfloat16]:\n+        elif dtype in [torch.float16, torch.bfloat16, torch.int16]:\n             ops_per_sub_core = 512\n         elif dtype in [torch.int8, tl.float8e4nv, tl.float8e4b15, tl.float8e5]:\n             ops_per_sub_core = 1024"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -1,4 +1,4 @@\n-// RUN: triton-opt %s -split-input-file --convert-triton-gpu-to-llvm | FileCheck %s\n+// RUN: triton-opt %s -split-input-file --convert-triton-gpu-to-llvm=\"target=nvvm\" | FileCheck %s\n \n module attributes {\"triton_gpu.num-ctas\" = 1 : i32, \"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK: llvm.func @test_empty_kernel(%arg0: i64, %arg1: !llvm.ptr<f16, 1>)"}]