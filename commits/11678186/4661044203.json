[{"filename": "test/TritonGPU/combine.mlir", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "file_content_changes": "@@ -56,8 +56,8 @@ func.func @remat(%arg0: i32) -> tensor<1024xi32, #layout1> {\n }\n \n // Always rematerialize single value loads\n-// CHECK-LABEL: remat_fast_load1\n-func.func @remat_fast_load1(%arg: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {\n+// CHECK-LABEL: remat_single_value\n+func.func @remat_single_value(%arg: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {\n   %0 = tt.splat %arg : (!tt.ptr<i32>) -> tensor<1x!tt.ptr<i32>, #layout1>\n   %1 = tt.load %0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1xi32, #layout1>\n   // CHECK-NOT: triton_gpu.convert_layout\n@@ -68,21 +68,19 @@ func.func @remat_fast_load1(%arg: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {\n }\n \n \n-// Always rematerialize high hit-rate loads\n-// CHECK-LABEL: remat_fast_load2\n-func.func @remat_fast_load2(%arg: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {\n+module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n+func.func @remat_fast_load(%arg: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {\n   %0 = tt.splat %arg : (!tt.ptr<i32>) -> tensor<16x!tt.ptr<i32>, #layout1>\n-  %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #layout0>\n-  %2 = tt.addptr %0, %1 : tensor<16x!tt.ptr<i32>, #layout1>\n+  %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #layout1>\n+  %2 = tt.addptr %0, %1 : tensor<16x!tt.ptr<i32>, #layout1>, tensor<16xi32, #layout1>\n   %3 = tt.load %2 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16xi32, #layout1>\n   // CHECK-NOT: triton_gpu.convert_layout\n   %4 = triton_gpu.convert_layout %3 : (tensor<16xi32, #layout1>) -> tensor<16xi32, #layout0>\n   %5 = triton_gpu.convert_layout %2 : (tensor<16x!tt.ptr<i32>, #layout1>) -> tensor<16x!tt.ptr<i32>, #layout0>\n-  tt.store %5, %4 : tensor<1xi32, #layout0>\n+  tt.store %5, %4 : tensor<16xi32, #layout0>\n   return\n }\n-\n-\n+}\n \n // CHECK-LABEL: if\n func.func @if(%arg0: i32, %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32}) {"}]