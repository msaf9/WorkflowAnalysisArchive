[{"filename": "lib/Conversion/TritonGPUToLLVM/DotOpHelpers.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "file_content_changes": "@@ -110,18 +110,18 @@ Value DotOpMmaV1ConversionHelper::loadA(\n   }\n \n   Type elemX2Ty = vec_ty(f16_ty, 2);\n-  Type elemPtrTy = ptr_ty(f16_ty);\n+  Type elemPtrTy = ptr_ty(f16_ty, 3);\n   if (tensorTy.getElementType().isBF16()) {\n     elemX2Ty = vec_ty(i16_ty, 2);\n-    elemPtrTy = ptr_ty(i16_ty);\n+    elemPtrTy = ptr_ty(i16_ty, 3);\n   }\n \n   // prepare arguments\n   SmallVector<Value> ptrA(numPtrA);\n \n   std::map<std::pair<int, int>, std::pair<Value, Value>> has;\n   for (int i = 0; i < numPtrA; i++)\n-    ptrA[i] = gep(ptr_ty(f16_ty), smemBase, offA[i]);\n+    ptrA[i] = gep(ptr_ty(f16_ty, 3), smemBase, offA[i]);\n \n   auto ld = [&](decltype(has) &vals, int m, int k, Value val0, Value val1) {\n     vals[{m, k}] = {val0, val1};\n@@ -224,17 +224,17 @@ Value DotOpMmaV1ConversionHelper::loadB(\n     offB[i] = add(mul(offB0I, strideB0), mul(offB1, strideB1));\n   }\n \n-  Type elemPtrTy = ptr_ty(f16_ty);\n+  Type elemPtrTy = ptr_ty(f16_ty, 3);\n   Type elemX2Ty = vec_ty(f16_ty, 2);\n   if (tensorTy.getElementType().isBF16()) {\n-    elemPtrTy = ptr_ty(i16_ty);\n+    elemPtrTy = ptr_ty(i16_ty, 3);\n     elemX2Ty = vec_ty(i16_ty, 2);\n   }\n \n   SmallVector<Value> ptrB(numPtrB);\n   ValueTable hbs;\n   for (int i = 0; i < numPtrB; ++i)\n-    ptrB[i] = gep(ptr_ty(f16_ty), smem, offB[i]);\n+    ptrB[i] = gep(ptr_ty(f16_ty, 3), smem, offB[i]);\n \n   auto ld = [&](decltype(hbs) &vals, int m, int k, Value val0, Value val1) {\n     vals[{m, k}] = {val0, val1};\n@@ -1289,7 +1289,7 @@ Value DotOpFMAConversionHelper::loadA(\n   }\n   auto elemTy = A.getType().cast<RankedTensorType>().getElementType();\n \n-  Type ptrTy = ptr_ty(elemTy);\n+  Type ptrTy = ptr_ty(elemTy, 3);\n   SmallVector<Value> aPtrs(aNumPtr);\n   for (int i = 0; i < aNumPtr; ++i)\n     aPtrs[i] = gep(ptrTy, aSmem.base, aOff[i]);\n@@ -1352,7 +1352,7 @@ Value DotOpFMAConversionHelper::loadB(\n   }\n   auto elemTy = B.getType().cast<RankedTensorType>().getElementType();\n \n-  Type ptrTy = ptr_ty(elemTy);\n+  Type ptrTy = ptr_ty(elemTy, 3);\n   SmallVector<Value> bPtrs(bNumPtr);\n   for (int i = 0; i < bNumPtr; ++i)\n     bPtrs[i] = gep(ptrTy, bSmem.base, bOff[i]);"}, {"filename": "python/setup.py", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "file_content_changes": "@@ -57,10 +57,19 @@ def get_pybind11_package_info():\n def get_llvm_package_info():\n     # download if nothing is installed\n     system = platform.system()\n-    system_suffix = {\"Linux\": \"linux-gnu-ubuntu-18.04\", \"Darwin\": \"apple-darwin\"}[system]\n+    if system == \"Darwin\":\n+        system_suffix = \"apple-darwin\"\n+    elif system == \"Linux\":\n+        vglibc = tuple(map(int, platform.libc_ver()[1].split('.')))\n+        vglibc = vglibc[0] * 100 + vglibc[1]\n+        linux_suffix = 'ubuntu-18.04' if vglibc > 217 else 'centos-7'\n+        system_suffix = f\"linux-gnu-{linux_suffix}\"\n+    else:\n+        raise RuntimeError(f\"unsupported system: {system}\")\n     use_assert_enabled_llvm = check_env_flag(\"TRITON_USE_ASSERT_ENABLED_LLVM\", \"False\")\n-    name = 'llvm+mlir-17.0.0-x86_64-{}-{}'.format(system_suffix, \"assert\" if use_assert_enabled_llvm else \"release\")\n-    url = \"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-17.0.0-37b7a60cd74b/{}.tar.xz\".format(name)\n+    release_suffix = \"assert\" if use_assert_enabled_llvm else \"release\"\n+    name = f'llvm+mlir-17.0.0-x86_64-{system_suffix}-{release_suffix}'\n+    url = f\"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-17.0.0-37b7a60cd74b/{name}.tar.xz\"\n     return Package(\"llvm\", name, url, \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n \n "}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -1293,13 +1293,13 @@ def format_of(ty):\n \n static struct PyModuleDef ModuleDef = {{\n   PyModuleDef_HEAD_INIT,\n-  \\\"launcher\\\",\n+  \\\"__triton_launcher\\\",\n   NULL, //documentation\n   -1, //size\n   ModuleMethods\n }};\n \n-PyMODINIT_FUNC PyInit_launcher(void) {{\n+PyMODINIT_FUNC PyInit___triton_launcher(void) {{\n   PyObject *m = PyModule_Create(&ModuleDef);\n   if(m == NULL) {{\n     return NULL;\n@@ -1654,7 +1654,7 @@ class CompiledKernel:\n     def __init__(self, so_path, metadata, asm):\n         # initialize launcher\n         import importlib.util\n-        spec = importlib.util.spec_from_file_location(\"launcher\", so_path)\n+        spec = importlib.util.spec_from_file_location(\"__triton_launcher\", so_path)\n         mod = importlib.util.module_from_spec(spec)\n         spec.loader.exec_module(mod)\n         self.c_wrapper = getattr(mod, \"launch\")"}]