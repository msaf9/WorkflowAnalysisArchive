[{"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "file_content_changes": "@@ -370,11 +370,10 @@ void LoopPipeliner::emitPrologue() {\n         setValueMapping(originalResult, newOp->getResult(dstIdx), stage);\n         // update mapping for loop-carried values (args)\n         for (OpOperand &operand : yieldOp->getOpOperands()) {\n-          if (operand.get() == op->getResult(dstIdx)) {\n+          if (operand.get() == op->getResult(dstIdx))\n             setValueMapping(\n                 forOp.getRegionIterArgs()[operand.getOperandNumber()],\n                 newOp->getResult(dstIdx), stage + 1);\n-          }\n         }\n       }\n     } // for (Operation *op : orderedDeps)\n@@ -484,22 +483,24 @@ scf::ForOp LoopPipeliner::createNewForOp() {\n   // 3. replace loads with block args (from prologue)\n   for (size_t idx = 0; idx < loads.size(); ++idx) {\n     OpBuilder::InsertionGuard guard(builder);\n-    builder.setInsertionPointToStart(newForOp.getBody());\n-\n     Value load = loads[idx];\n     assert(load.hasOneUse() &&\n            \"we assume that this load has one use (ConvertLayout)\");\n     Value loadUse = load.getUsers().begin()->getResult(0);\n+    // set insertion point\n+    Value newLoad = mapping.lookup(load);\n+    Value newLoadUse = mapping.lookup(loadUse);\n+    builder.setInsertionPoint(newLoadUse.getDefiningOp());\n     // create conversion\n     auto cvt = builder.create<ttg::ConvertLayoutOp>(\n         loadUse.getLoc(), loadUse.getType(),\n         newForOp.getRegionIterArgs()[loadIdx + idx]);\n \n     // replace uses\n-    mapping.lookup(loadUse).replaceAllUsesWith(cvt.getResult());\n+    newLoadUse.replaceAllUsesWith(cvt.getResult());\n     // delete old load and layout conversion\n-    mapping.lookup(loadUse).getDefiningOp()->erase();\n-    mapping.lookup(load).getDefiningOp()->erase();\n+    newLoadUse.getDefiningOp()->erase();\n+    newLoad.getDefiningOp()->erase();\n   }\n \n   // 4. prefetch the next iteration"}]