[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -337,11 +337,13 @@ def visit_Assign(self, node):\n             names = [names]\n         if not isinstance(values, tuple):\n             values = [values]\n+        native_nontensor_types = (triton.language.dtype, )\n         for name, value in zip(names, values):\n             # by default, constexpr are assigned into python variable\n             if isinstance(value, triton.language.constexpr):\n                 value = value.value\n-            if not isinstance(value, triton.language.tensor):\n+            if not isinstance(value, triton.language.tensor) and \\\n+               not isinstance(value, native_nontensor_types):\n                 value = triton.language.core._to_tensor(value, self.builder)\n             self.set_value(name, value)\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "file_content_changes": "@@ -1215,23 +1215,16 @@ def max_contiguous(input, values, _builder=None):\n \n @triton.jit\n def abs(x):\n-    if x.dtype.is_fp16():\n-        m = 0x7fff\n-        y = x.to(triton.language.int16, bitcast=True) & m.to(triton.language.int16, bitcast=False)\n-        z = y.to(triton.language.float16, bitcast=True)\n-    elif x.dtype.is_bf16():\n-        m = 0x7fff\n-        y = x.to(triton.language.int16, bitcast=True) & m.to(triton.language.int16, bitcast=False)\n-        z = y.to(triton.language.bfloat16, bitcast=True)\n-    elif x.dtype.is_fp32():\n-        y = x.to(triton.language.int32, bitcast=True) & 0x7fffffff\n-        z = y.to(triton.language.float32, bitcast=True)\n-    elif x.dtype.is_fp64():\n-        y = x.to(triton.language.int64, bitcast=True) & 0x7fffffffffffffff\n-        z = y.to(triton.language.float64, bitcast=True)\n+    x_dtype = x.dtype\n+    if x_dtype.is_floating():\n+        num_bits: constexpr = x.dtype.primitive_bitwidth\n+        int_dtype = dtype(f'int{num_bits}')\n+        mask = 2 ** (num_bits - 1) - 1\n+        ret = x.to(int_dtype, bitcast=True) & mask.to(int_dtype)\n+        ret = ret.to(x_dtype, bitcast=True)\n     else:\n-        z = where(x >= 0, x, -x)\n-    return z\n+        ret = where(x >= 0, x, -x)\n+    return ret\n \n \n @triton.jit"}]