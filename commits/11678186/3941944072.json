[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -768,7 +768,7 @@ def visit_Attribute(self, node):\n             if node.attr == \"T\":\n                 return triton.language.semantic.trans(lhs, builder=self.builder)\n         return getattr(lhs, node.attr)\n-    \n+\n     def visit_Expr(self, node):\n         ast.NodeVisitor.generic_visit(self, node)\n "}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -142,7 +142,7 @@ def is_bool(self):\n     @staticmethod\n     def is_void():\n         raise RuntimeError(\"Not implemented\")\n-    \n+\n     @staticmethod\n     def is_block():\n         return False"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -156,7 +156,7 @@ def __init__(self, path) -> None:\n         '''\n         super().__init__(\"libdevice\", path)\n         self._symbol_groups = {}\n-        \n+\n     @staticmethod\n     def _extract_symbol(line) -> Optional[Symbol]:\n         # Extract symbols from line in the following format:"}]