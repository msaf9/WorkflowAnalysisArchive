[{"filename": "include/triton/Analysis/Membar.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "file_content_changes": "@@ -56,8 +56,12 @@ class MembarAnalysis {\n     bool isIntersected(const RegionInfo &other, Allocation *allocation) const {\n       return /*RAW*/ isIntersected(syncWriteBuffers, other.syncReadBuffers,\n                                    allocation) ||\n-             /*WAR*/ isIntersected(syncReadBuffers, other.syncWriteBuffers,\n-                                   allocation);\n+             /*WAR*/\n+             isIntersected(syncReadBuffers, other.syncWriteBuffers,\n+                           allocation) ||\n+             /*WAW*/\n+             isIntersected(syncWriteBuffers, other.syncWriteBuffers,\n+                           allocation);\n     }\n \n     /// Clears the buffers because a barrier is inserted."}, {"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -187,6 +187,7 @@ def TT_StoreOp : TT_Op<\"store\",\n //\n def TT_AtomicRMWOp : TT_Op<\"atomic_rmw\", [SameOperandsAndResultShape,\n                                           SameOperandsAndResultEncoding,\n+                                          MemoryEffects<[MemRead]>,\n                                           MemoryEffects<[MemWrite]>,\n                                           TypesMatchWith<\"infer ptr type from value type\",\n                                                          \"val\", \"ptr\",\n@@ -208,7 +209,9 @@ def TT_AtomicRMWOp : TT_Op<\"atomic_rmw\", [SameOperandsAndResultShape,\n     let results = (outs TT_Type:$result);\n }\n \n-def TT_AtomicCASOp : TT_Op<\"atomic_cas\", [SameOperandsAndResultShape,\n+def TT_AtomicCASOp : TT_Op<\"atomic_cas\", [MemoryEffects<[MemRead]>,\n+                                          MemoryEffects<[MemWrite]>,\n+                                          SameOperandsAndResultShape,\n                                           SameOperandsAndResultEncoding]> {\n     let summary = \"atomic cas\";\n "}, {"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUOps.td", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -79,8 +79,7 @@ def TTG_SelectOp : TTG_Op<\"select\", [NoSideEffect]> {\n def TTG_InsertSliceAsyncOp : TTG_Op<\"insert_slice_async\",\n                                     [AttrSizedOperandSegments,\n                                      ResultsAreSharedEncoding,\n-                                     // MemoryEffects<[MemRead]>, doesn't work with CSE but seems like it should?\n-                                     NoSideEffect,\n+                                     MemoryEffects<[MemRead]>,\n                                      TypesMatchWith<\"infer mask type from src type\",\n                                                     \"src\", \"mask\", \"getI1SameShape($_self)\",\n                                                     \"($_op.getOperands().size() <= 3) || std::equal_to<>()\">,\n@@ -158,7 +157,8 @@ def TTG_InsertSliceAsyncOp : TTG_Op<\"insert_slice_async\",\n   let printer = [{ return printInsertSliceAsyncOp(p, *this); }];\n }\n \n-def TTG_AllocTensorOp : TTG_Op<\"alloc_tensor\", [NoSideEffect, ResultsAreSharedEncoding]> {\n+def TTG_AllocTensorOp : TTG_Op<\"alloc_tensor\", [MemoryEffects<[MemAlloc]>,  // Allocate shared memory\n+                                                ResultsAreSharedEncoding]> {\n   let summary = \"allocate tensor\";\n \n   let description = [{"}, {"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -172,6 +172,8 @@ def get_proper_err(a, b, golden):\n     [128, 64, 128, 4, 128, 64, 128, False, False],\n     [16, 16, 16, 16, 16, 16, 16, False, False],  # wpt overflow issue\n     # K-Forloop\n+    [32, 32, 64, 4, 32, 32, 32, False, False], # Single shared encoding\n+    [16, 16, 128, 4, 16, 16, 16, False, False], # Single shared encoding and small k\n     [64, 32, 128, 4, 64, 32, 64, False, False],\n     [128, 16, 128, 4, 128, 16, 32, False, False],\n     [32, 16, 128, 4, 32, 16, 32, False, False],"}]