[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "file_content_changes": "@@ -1201,8 +1201,8 @@ class FixupLoop : public mlir::RewritePattern {\n   }\n };\n \n-// This pattern collects the Mma those need to update and create the new\n-// layouts.\n+// This pattern collects the wrong Mma those need to update and create the right\n+// ones for each.\n class CollectMmaToUpdateForVolta : public mlir::RewritePattern {\n   DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate;\n \n@@ -1232,10 +1232,8 @@ class CollectMmaToUpdateForVolta : public mlir::RewritePattern {\n     if (mmaToUpdate.count(mmaLayout))\n       return failure();\n \n-    // NOTE Should run after the BlockedToMMA pattern.\n     auto dotOperandA = AT.getEncoding().cast<DotOperandEncodingAttr>();\n     auto dotOperandB = BT.getEncoding().cast<DotOperandEncodingAttr>();\n-    // NOTE Should run after OptimizeConvertToDotOperand pattern.\n     bool isARow = dotOperandA.getIsMMAv1Row().cast<BoolAttr>().getValue();\n     bool isBRow = dotOperandB.getIsMMAv1Row().cast<BoolAttr>().getValue();\n     auto [isARow_, isBRow_, isAVec4, isBVec4] =\n@@ -1255,6 +1253,7 @@ class CollectMmaToUpdateForVolta : public mlir::RewritePattern {\n   }\n };\n \n+// Correct the versionMinor field in MmaEncodingAttr for Volta.\n class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n   const DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate;\n   enum class Kind {\n@@ -1393,12 +1392,12 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n   }\n };\n \n-class RematerializeForloop : public RewritePattern {\n+class RematerializeForloopForVolta : public RewritePattern {\n \n   const DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate;\n \n public:\n-  RematerializeForloop(\n+  RematerializeForloopForVolta(\n       mlir::MLIRContext *ctx,\n       const DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate)\n       : RewritePattern(scf::ForOp::getOperationName(), 1 /*benefit*/, ctx),\n@@ -1415,9 +1414,8 @@ class RematerializeForloop : public RewritePattern {\n         if (!tensorTy.getEncoding())\n           continue;\n         if (auto mma = tensorTy.getEncoding().dyn_cast<MmaEncodingAttr>()) {\n-          auto it = mmaToUpdate.find(mma);\n-          if (it == mmaToUpdate.end())\n-            return failure();\n+          if (!mmaToUpdate.count(mma))\n+            continue;\n           needRematerialize = true;\n           break;\n         }\n@@ -1516,7 +1514,7 @@ class TritonGPUCombineOpsPass\n     }\n     {\n       mlir::RewritePatternSet ps(context);\n-      ps.add<RematerializeForloop>(context, mmaToUpdate);\n+      ps.add<RematerializeForloopForVolta>(context, mmaToUpdate);\n       if (applyPatternsAndFoldGreedily(m, std::move(ps)).failed())\n         signalPassFailure();\n     }"}]