[{"filename": "include/triton/Dialect/NVGPU/ToLLVMIR/NVGPUToLLVMIR.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "file_content_changes": "@@ -1,41 +0,0 @@\n-/*\n- * Copyright (c) 2023 NVIDIA Corporation & Affiliates. All rights reserved.\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining\n- * a copy of this software and associated documentation files\n- * (the \"Software\"), to deal in the Software without restriction,\n- * including without limitation the rights to use, copy, modify, merge,\n- * publish, distribute, sublicense, and/or sell copies of the Software,\n- * and to permit persons to whom the Software is furnished to do so,\n- * subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be\n- * included in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n- */\n-\n-#ifndef TRITON_DIALECT_NVGPU_NVGPUTOLLVMIRTRANSLATION_H\n-#define TRITON_DIALECT_NVGPU_NVGPUTOLLVMIRTRANSLATION_H\n-\n-namespace mlir {\n-\n-class DialectRegistry;\n-class MLIRContext;\n-\n-/// Register the nvgpu dialect and the translation from it to the LLVM IR in the\n-/// given registry;\n-void registerNVGPUDialectTranslation(DialectRegistry &registry);\n-\n-/// Register the nvgpu dialect and the translation from it in the registry\n-/// associated with the given context.\n-void registerNVGPUDialectTranslation(MLIRContext &context);\n-} // namespace mlir\n-\n-#endif // TRITON_DIALECT_NVGPU_NVGPUTOLLVMIRTRANSLATION_H"}, {"filename": "lib/CMakeLists.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -3,4 +3,3 @@ add_subdirectory(Analysis)\n add_subdirectory(Conversion)\n add_subdirectory(Dialect)\n add_subdirectory(Target)\n-add_subdirectory(Hopper)"}, {"filename": "lib/Dialect/NVGPU/CMakeLists.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -1,2 +1 @@\n add_subdirectory(IR)\n-add_subdirectory(ToLLVMIR)"}, {"filename": "lib/Dialect/NVGPU/ToLLVMIR/CMakeLists.txt", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "file_content_changes": "@@ -1,17 +0,0 @@\n-add_mlir_translation_library(NVGPUToLLVMIR\n-  NVGPUToLLVMIR.cpp\n-\n-  DEPENDS\n-  NVGPUTableGen\n-\n-  LINK_COMPONENTS\n-  Core\n-\n-  LINK_LIBS PUBLIC\n-  MLIRIR\n-  MLIRLLVMDialect\n-  MLIRNVVMDialect\n-  MLIRSupport\n-  MLIRTargetLLVMIRExport\n-  NVGPUIR\n-  )"}, {"filename": "lib/Dialect/NVGPU/ToLLVMIR/NVGPUToLLVMIR.cpp", "status": "removed", "additions": 0, "deletions": 177, "changes": 177, "file_content_changes": "@@ -1,177 +0,0 @@\n-/*\n- * Copyright (c) 2023 NVIDIA Corporation & Affiliates. All rights reserved.\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining\n- * a copy of this software and associated documentation files\n- * (the \"Software\"), to deal in the Software without restriction,\n- * including without limitation the rights to use, copy, modify, merge,\n- * publish, distribute, sublicense, and/or sell copies of the Software,\n- * and to permit persons to whom the Software is furnished to do so,\n- * subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be\n- * included in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n- */\n-\n-#include \"triton/Dialect/NVGPU/ToLLVMIR/NVGPUToLLVMIR.h\"\n-#include \"mlir/Dialect/LLVMIR/NVVMDialect.h\"\n-#include \"mlir/IR/Operation.h\"\n-#include \"mlir/Target/LLVMIR/ModuleTranslation.h\"\n-#include \"triton/Dialect/NVGPU/IR/Dialect.h\"\n-\n-#include \"llvm/IR/IRBuilder.h\"\n-#include \"llvm/IR/InlineAsm.h\"\n-#include \"llvm/IR/IntrinsicsNVPTX.h\"\n-\n-using namespace mlir;\n-using namespace mlir::LLVM;\n-\n-namespace {\n-static llvm::FunctionCallee\n-getExternalFuncOP(llvm::Module *module, llvm::StringRef funcName,\n-                  llvm::Type *retTy, ArrayRef<llvm::Type *> argTys = {}) {\n-  return module->getOrInsertFunction(\n-      funcName, llvm::FunctionType::get(retTy, argTys, false),\n-      llvm::AttributeList{});\n-}\n-\n-llvm::Value *createExternalCall(llvm::IRBuilderBase &builder,\n-                                llvm::StringRef funcName,\n-                                ArrayRef<llvm::Value *> args = {},\n-                                ArrayRef<llvm::Type *> tys = {}) {\n-  auto *module = builder.GetInsertBlock()->getModule();\n-  auto *func = module->getFunction(funcName);\n-\n-  if (func == nullptr) {\n-    llvm::SmallVector<llvm::Type *> argTys;\n-    for (auto *arg : args) {\n-      argTys.push_back(arg->getType());\n-    }\n-\n-    llvm::Type *retTy;\n-    if (tys.empty())\n-      retTy = builder.getVoidTy();\n-    else\n-      retTy = tys[0];\n-\n-    func = dyn_cast<llvm::Function>(\n-        getExternalFuncOP(module, funcName, retTy, argTys).getCallee());\n-  }\n-\n-  return builder.CreateCall(func, args);\n-}\n-\n-static std::string getTMALoadFuncName(bool tiled, bool mcast,\n-                                      uint32_t dimSize) {\n-  std::string funcName;\n-  llvm::raw_string_ostream os(funcName);\n-  os << \"__nv_tma_load\";\n-  if (tiled)\n-    os << \"_tiled\";\n-  else\n-    os << \"_im2col\";\n-\n-  if (mcast)\n-    os << \"_mcast\";\n-\n-  os << \"_\" << dimSize << \"d\";\n-\n-  return funcName;\n-}\n-\n-void createTMALoadIm2col(llvm::IRBuilderBase &builder, llvm::Value *dst,\n-                         llvm::Value *mbarrier, llvm::Value *tmaDesc,\n-                         llvm::Value *l2Desc, uint16_t mcastMask,\n-                         llvm::Value *im2colOffsets, llvm::Value *pred,\n-                         llvm::SmallVector<llvm::Value *> coords) {\n-  assert(coords.size() >= 3 && coords.size() <= 5 &&\n-         \"invalid coords.size() for im2col\");\n-  auto funcName = getTMALoadFuncName(false, mcastMask != 0, coords.size());\n-  llvm::Type *retTy = builder.getVoidTy();\n-  llvm::SmallVector<llvm::Value *> args;\n-  llvm::SmallVector<llvm::Type *> argTys;\n-\n-  argTys.push_back(tmaDesc->getType());\n-  args.push_back(tmaDesc);\n-\n-  argTys.push_back(dst->getType());\n-  args.push_back(dst);\n-\n-  argTys.push_back(mbarrier->getType());\n-  args.push_back(mbarrier);\n-  for (auto *c : coords) {\n-    argTys.push_back(c->getType());\n-    args.push_back(c);\n-  }\n-\n-  {\n-    auto offsetsType = dyn_cast<llvm::StructType>(im2colOffsets->getType());\n-    auto subTypes = offsetsType->elements();\n-    assert((coords.size() - subTypes.size() == 2) && \"wrong imcolOffsets\");\n-    unsigned idx = 0;\n-    for (auto subType : subTypes) {\n-      argTys.push_back(subType);\n-      args.push_back(builder.CreateExtractValue(im2colOffsets, {idx}));\n-      idx++;\n-    }\n-  }\n-\n-  argTys.push_back(l2Desc->getType());\n-  args.push_back(l2Desc);\n-\n-  if (mcastMask != 0) {\n-    argTys.push_back(builder.getInt16Ty());\n-    llvm::Value *mcastMask_ = builder.getInt16(mcastMask);\n-    args.push_back(mcastMask_);\n-  }\n-\n-  argTys.push_back(pred->getType());\n-  args.push_back(pred);\n-\n-  auto *module = builder.GetInsertBlock()->getModule();\n-  auto *func = dyn_cast<llvm::Function>(\n-      getExternalFuncOP(module, funcName, retTy, argTys).getCallee());\n-  builder.CreateCall(func, args);\n-\n-  return;\n-}\n-\n-class NVGPUDialectLLVMIRTranslationInterface\n-    : public LLVMTranslationDialectInterface {\n-public:\n-  using LLVMTranslationDialectInterface::LLVMTranslationDialectInterface;\n-\n-  /// Translates the given operation to LLVM IR using the provided IR builder\n-  /// and saving the state in `moduleTranslation`.\n-  LogicalResult\n-  convertOperation(Operation *op, llvm::IRBuilderBase &builder,\n-                   LLVM::ModuleTranslation &moduleTranslation) const final {\n-    Operation &opInst = *op;\n-#include \"triton/Dialect/NVGPU/IR/OpsConversions.inc\"\n-\n-    return failure();\n-  }\n-};\n-} // namespace\n-\n-void mlir::registerNVGPUDialectTranslation(DialectRegistry &registry) {\n-  registry.insert<mlir::triton::nvgpu::NVGPUDialect>();\n-  registry.addExtension(\n-      +[](MLIRContext *ctx, mlir::triton::nvgpu::NVGPUDialect *dialect) {\n-        dialect->addInterfaces<NVGPUDialectLLVMIRTranslationInterface>();\n-      });\n-}\n-\n-void mlir::registerNVGPUDialectTranslation(MLIRContext &context) {\n-  DialectRegistry registry;\n-  registerNVGPUDialectTranslation(registry);\n-  context.appendDialectRegistry(registry);\n-}"}, {"filename": "lib/Hopper/CMakeLists.txt", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "file_content_changes": "@@ -1,24 +0,0 @@\n-# TODO: re-enable generation of the hopper helper.\n-# For now we just commit a pre-built bc file.\n-#cmake_path(GET LLVM_LIBRARY_DIR PARENT_PATH LLVM_DIR)\n-#set(CUDA_PATH \"/usr/local/cuda\")\n-#if(DEFINED ENV{CUDA_PATH})\n-#        set(CUDA_PATH $ENV{CUDA_PATH})\n-#endif()\n-#\n-#set(outfile \"libhopper_helpers.bc\")\n-#add_custom_target(HopperHelpers ALL\n-#        COMMAND ${LLVM_DIR}/bin/clang -c\n-#        -O3 -emit-llvm\n-#        -fno-unwind-tables -fno-exceptions\n-#        --cuda-gpu-arch=sm_90a\n-#        --cuda-device-only\n-#        -D__CUDACC__ -D__CUDABE__ -D__CUDA_LIBDEVICE__\n-#        -I${CUDA_PATH}/include\n-#        -target nvptx64-nvidia-gpulibs\n-#        ${CMAKE_CURRENT_SOURCE_DIR}/HopperHelpers.c -o ${outfile}\n-#        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/HopperHelpers.c\n-#        BYPRODUCTS ${outfile}\n-#        COMMENT \"Building LLVM bitcode ${outfile}\"\n-#        VERBATIM\n-#)"}, {"filename": "lib/Hopper/HopperHelpers.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "file_content_changes": "@@ -1,39 +0,0 @@\n-/*\n- * Copyright (c) 2023 NVIDIA Corporation & Affiliates. All rights reserved.\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining\n- * a copy of this software and associated documentation files\n- * (the \"Software\"), to deal in the Software without restriction,\n- * including without limitation the rights to use, copy, modify, merge,\n- * publish, distribute, sublicense, and/or sell copies of the Software,\n- * and to permit persons to whom the Software is furnished to do so,\n- * subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be\n- * included in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n- */\n-\n-#include \"device_launch_parameters.h\"\n-#include <builtin_types.h>\n-#include <cuda_device_runtime_api.h>\n-#include <stdarg.h>\n-#include <stdint.h>\n-#include <stdio.h>\n-\n-#ifdef __NVCC__\n-#define __DEVICE__ __device__ inline\n-#else\n-#define __DEVICE__\n-#endif\n-\n-#ifndef BARRIER_RANDOM_DELAY\n-#define BARRIER_RANDOM_DELAY 0\n-#endif"}, {"filename": "lib/Target/LLVMIR/CMakeLists.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -23,7 +23,6 @@ add_mlir_translation_library(TritonLLVMIR\n         MLIRSCFToControlFlow\n         MLIRSupport\n         MLIRTargetLLVMIRExport\n-        NVGPUToLLVMIR\n         TritonGPUToLLVM\n         )\n "}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -17,7 +17,6 @@\n #include \"mlir/Transforms/Passes.h\"\n #include \"triton/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.h\"\n #include \"triton/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.h\"\n-#include \"triton/Dialect/NVGPU/ToLLVMIR/NVGPUToLLVMIR.h\"\n #include \"triton/Target/LLVMIR/Passes.h\"\n #include \"triton/Target/PTX/TmaMetadata.h\"\n #include \"triton/Tools/Sys/GetEnv.hpp\"\n@@ -279,7 +278,6 @@ translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module,\n   mlir::registerLLVMDialectTranslation(registry);\n   mlir::registerROCDLDialectTranslation(registry);\n   mlir::registerNVVMDialectTranslation(registry);\n-  mlir::registerNVGPUDialectTranslation(registry);\n \n   module->getContext()->appendDialectRegistry(registry);\n "}]