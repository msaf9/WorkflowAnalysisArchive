[{"filename": "lib/Conversion/NVGPUToLLVM/NVGPUToLLVMPass.cpp", "status": "modified", "additions": 100, "deletions": 275, "changes": 375, "file_content_changes": "@@ -23,6 +23,45 @@ namespace {\n \n using Constraint = std::variant<int, std::string>;\n using OperandsAndConstraints = std::vector<std::pair<mlir::Value, Constraint>>;\n+\n+const std::string Reg_Alloc_Op = \"setmaxnreg.inc.sync.aligned.u32 #regCount;\";\n+const std::string Wgmma_Fence_Op = \"wgmma.fence.sync.aligned;\";\n+const std::string Cga_Barrier_Sync_op = \"barrier.cluster.sync.aligned;\";\n+const std::string Wgmma_Commit_Group_Op = \"wgmma.commit_group.sync.aligned;\";\n+const std::string Wgmma_Wait_Group_Op =\n+    \"wgmma.wait_group.sync.aligned #pendings;\";\n+const std::string Cluster_Wait_Op = \"barrier.cluster.wait.aligned;\";\n+const std::string Fence_Mbarrier_Init_Op =\n+    \"fence.mbarrier_init.release.cluster;\";\n+const std::string Cga_Barrier_Arrive_Op = \"barrier.cluster.arrive;\";\n+const std::string Cga_Barrier_Wait_Op = \"barrier.cluster.wait;\";\n+const std::string Reg_Dealloc_Op = \"setmaxnreg.dec.sync.aligned.u32 #regCount;\";\n+\n+const std::string Mbarrier_Init_Op =\n+    \"@$1 mbarrier.init.shared.b64 [$0], #count;\";\n+const std::string Mbarrier_Wait_Op =\n+    \"{                                                           \\n\"\n+    \".reg .pred P1;                                              \\n\"\n+    \"LAB_WAIT:                                                   \\n\"\n+    \"mbarrier.try_wait.parity.shared.b64 P1, [$0], $1, 0x989680; \\n\"\n+    \"@P1 bra.uni DONE;                                           \\n\"\n+    \"bra.uni LAB_WAIT;                                           \\n\"\n+    \"DONE:                                                       \\n\"\n+    \"}                                                           \\n\";\n+const std::string Named_Barrier_Arrive_Op = \"bar.arrive $0, $1;\";\n+const std::string Named_Barrier_Wait_Op = \"bar.sync $0, $1;\";\n+const std::string Sts64_Op = \"st.shared.v2.b32 [$0], {$1, $2};\";\n+const std::string Cluster_Cta_Id_Op = \"{\\n\"\n+                                      \".reg .u32 a<5>;              \\n\"\n+                                      \"mov.u32 a0, %cluster_ctaid.x;\\n\"  // x\n+                                      \"mov.u32 a1, %cluster_ctaid.y;\\n\"  // y\n+                                      \"mov.u32 a2, %cluster_ctaid.z;\\n\"  // z\n+                                      \"mov.u32 a3, %cluster_nctaid.x;\\n\" // nx\n+                                      \"mov.u32 a4, %cluster_nctaid.y;\\n\" // ny\n+                                      \"mad.lo.u32 a1, a2, a4, a1;     \\n\"\n+                                      \"mad.lo.u32 $0, a1, a3, a0;     \\n\"\n+                                      \"}\";\n+\n template <typename SourceOp, typename ConcreteT>\n class NVGPUOpPatternBase : public mlir::RewritePattern {\n public:\n@@ -235,17 +274,35 @@ class NVGPUOpPatternBase : public mlir::RewritePattern {\n   }\n };\n \n-class CGABarrierSyncOpPattern\n-    : public NVGPUOpPatternBase<ttn::CGABarrierSyncOp,\n-                                CGABarrierSyncOpPattern> {\n+template <typename SourceOp>\n+class NVGPUOpGenericPattern\n+    : public NVGPUOpPatternBase<SourceOp, NVGPUOpGenericPattern<SourceOp>> {\n public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::CGABarrierSyncOp, CGABarrierSyncOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::CGABarrierSyncOp op) const {\n-    return \"barrier.cluster.sync.aligned;\";\n+  using Base = NVGPUOpPatternBase<SourceOp, NVGPUOpGenericPattern<SourceOp>>;\n+  explicit NVGPUOpGenericPattern(mlir::MLIRContext *context, std::string ptxAsm,\n+                                 std::vector<std::string> outputConstraints,\n+                                 std::vector<std::string> inputConstraints)\n+      : NVGPUOpPatternBase<SourceOp, NVGPUOpGenericPattern<SourceOp>>(context),\n+        ptxAsm(ptxAsm), outputConstraints(outputConstraints),\n+        inputConstraints(inputConstraints) {}\n+\n+  std::vector<std::string> getOutputConstraints(SourceOp op) const {\n+    return outputConstraints;\n+  }\n+  OperandsAndConstraints getOperandsAndConstraints(SourceOp op) const {\n+    OperandsAndConstraints operandsAndConstraints;\n+    for (unsigned i = 0; i < inputConstraints.size(); i++) {\n+      operandsAndConstraints.push_back(\n+          {op->getOperand(i), inputConstraints[i]});\n+    }\n+    return operandsAndConstraints;\n   }\n+  std::string getPtxAsm(SourceOp op) const { return ptxAsm; }\n+\n+private:\n+  std::string ptxAsm;\n+  std::vector<std::string> outputConstraints;\n+  std::vector<std::string> inputConstraints;\n };\n \n class FenceAsyncSharedOpPattern\n@@ -265,43 +322,6 @@ class FenceAsyncSharedOpPattern\n   }\n };\n \n-class WGMMAFenceOpPattern\n-    : public NVGPUOpPatternBase<ttn::WGMMAFenceOp, WGMMAFenceOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::WGMMAFenceOp, WGMMAFenceOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::WGMMAFenceOp op) const {\n-    return \"wgmma.fence.sync.aligned;\";\n-  }\n-};\n-\n-class WGMMACommitGroupOpPattern\n-    : public NVGPUOpPatternBase<ttn::WGMMACommitGroupOp,\n-                                WGMMACommitGroupOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::WGMMACommitGroupOp, WGMMACommitGroupOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::WGMMACommitGroupOp op) const {\n-    return \"wgmma.commit_group.sync.aligned;\";\n-  }\n-};\n-\n-class WGMMAWaitGroupOpPattern\n-    : public NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp,\n-                                WGMMAWaitGroupOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::WGMMAWaitGroupOp, WGMMAWaitGroupOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::WGMMAWaitGroupOp op) const {\n-    return \"wgmma.wait_group.sync.aligned #pendings;\";\n-  }\n-};\n-\n class ClusterArriveOpPattern\n     : public NVGPUOpPatternBase<ttn::ClusterArriveOp, ClusterArriveOpPattern> {\n public:\n@@ -317,75 +337,6 @@ class ClusterArriveOpPattern\n   }\n };\n \n-class ClusterWaitOpPattern\n-    : public NVGPUOpPatternBase<ttn::ClusterWaitOp, ClusterWaitOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::ClusterWaitOp, ClusterWaitOpPattern>;\n-  using Base::Base;\n-  std::string getPtxAsm(ttn::ClusterWaitOp op) const {\n-    return \"barrier.cluster.wait.aligned;\";\n-  }\n-};\n-\n-class FenceMBarrierInitOpPattern\n-    : public NVGPUOpPatternBase<ttn::FenceMBarrierInitOp,\n-                                FenceMBarrierInitOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::FenceMBarrierInitOp, FenceMBarrierInitOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::FenceMBarrierInitOp op) const {\n-    return \"fence.mbarrier_init.release.cluster;\";\n-  }\n-};\n-\n-class CGABarrierArriveOpPattern\n-    : public NVGPUOpPatternBase<ttn::CGABarrierArriveOp,\n-                                CGABarrierArriveOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::CGABarrierArriveOp, CGABarrierArriveOpPattern>;\n-  using Base::Base;\n-  std::string getPtxAsm(ttn::CGABarrierArriveOp op) const {\n-    return \"barrier.cluster.arrive;\";\n-  }\n-};\n-\n-class CGABarrierWaitOpPattern\n-    : public NVGPUOpPatternBase<ttn::CGABarrierWaitOp,\n-                                CGABarrierWaitOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::CGABarrierWaitOp, CGABarrierWaitOpPattern>;\n-  using Base::Base;\n-  std::string getPtxAsm(ttn::CGABarrierWaitOp op) const {\n-    return \"barrier.cluster.wait;\";\n-  }\n-};\n-\n-class RegAllocOpPattern\n-    : public NVGPUOpPatternBase<ttn::RegAllocOp, RegAllocOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::RegAllocOp, RegAllocOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::RegAllocOp op) const {\n-    return \"setmaxnreg.inc.sync.aligned.u32 #regCount;\";\n-  }\n-};\n-\n-class RegDeallocOpPattern\n-    : public NVGPUOpPatternBase<ttn::RegDeallocOp, RegDeallocOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::RegDeallocOp, RegDeallocOpPattern>;\n-  using Base::Base;\n-\n-  std::string getPtxAsm(ttn::RegDeallocOp op) const {\n-    return \"setmaxnreg.dec.sync.aligned.u32 #regCount;\";\n-  }\n-};\n-\n class StoreMatrixOpPattern\n     : public NVGPUOpPatternBase<ttn::StoreMatrixOp, StoreMatrixOpPattern> {\n public:\n@@ -425,28 +376,6 @@ class StoreMatrixOpPattern\n   }\n };\n \n-class MBarrierInitOpPattern\n-    : public NVGPUOpPatternBase<ttn::MBarrierInitOp, MBarrierInitOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::MBarrierInitOp, MBarrierInitOpPattern>;\n-  using Base::Base;\n-\n-  OperandsAndConstraints\n-  getOperandsAndConstraints(ttn::MBarrierInitOp op) const {\n-    OperandsAndConstraints operandsAndTypes;\n-    Value mbarrier = op.getMbarrier();\n-    Value pred = op.getPred();\n-    operandsAndTypes.push_back({mbarrier, \"r\"});\n-    operandsAndTypes.push_back({pred, \"b\"});\n-    return operandsAndTypes;\n-  }\n-\n-  std::string getPtxAsm(ttn::MBarrierInitOp op) const {\n-    std::string ptxAsm = \"@$1 mbarrier.init.shared.b64 [$0], #count;\";\n-    return ptxAsm;\n-  }\n-};\n-\n class MBarrierArriveOpPattern\n     : public NVGPUOpPatternBase<ttn::MBarrierArriveOp,\n                                 MBarrierArriveOpPattern> {\n@@ -516,36 +445,6 @@ class MBarrierArriveOpPattern\n   }\n };\n \n-class MBarrierWaitOpPattern\n-    : public NVGPUOpPatternBase<ttn::MBarrierWaitOp, MBarrierWaitOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::MBarrierWaitOp, MBarrierWaitOpPattern>;\n-  using Base::Base;\n-\n-  OperandsAndConstraints\n-  getOperandsAndConstraints(ttn::MBarrierWaitOp op) const {\n-    OperandsAndConstraints operandsAndTypes;\n-    Value mbarrier = op.getMbarrier();\n-    Value phase = op.getPhase();\n-    operandsAndTypes.push_back({mbarrier, \"r\"});\n-    operandsAndTypes.push_back({phase, \"r\"});\n-    return operandsAndTypes;\n-  }\n-\n-  std::string getPtxAsm(ttn::MBarrierWaitOp op) const {\n-    auto ptxAsm =\n-        \"{                                                           \\n\"\n-        \".reg .pred P1;                                              \\n\"\n-        \"LAB_WAIT:                                                   \\n\"\n-        \"mbarrier.try_wait.parity.shared.b64 P1, [$0], $1, 0x989680; \\n\"\n-        \"@P1 bra.uni DONE;                                           \\n\"\n-        \"bra.uni LAB_WAIT;                                           \\n\"\n-        \"DONE:                                                       \\n\"\n-        \"}                                                           \\n\";\n-    return ptxAsm;\n-  }\n-};\n-\n class TMALoadTiledOpPattern\n     : public NVGPUOpPatternBase<ttn::TMALoadTiledOp, TMALoadTiledOpPattern> {\n public:\n@@ -661,51 +560,6 @@ class TMAStoreTiledOpPattern\n     return ptxAsm;\n   }\n };\n-class NamedBarrierArriveOpPattern\n-    : public NVGPUOpPatternBase<ttn::NamedBarrierArriveOp,\n-                                NamedBarrierArriveOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::NamedBarrierArriveOp,\n-                                  NamedBarrierArriveOpPattern>;\n-  using Base::Base;\n-\n-  OperandsAndConstraints\n-  getOperandsAndConstraints(ttn::NamedBarrierArriveOp op) const {\n-    OperandsAndConstraints operandsAndTypes;\n-    auto bar = op.getBar();\n-    auto numThreads = op.getNumThreads();\n-    operandsAndTypes.push_back({bar, \"r\"});\n-    operandsAndTypes.push_back({numThreads, \"r\"});\n-    return operandsAndTypes;\n-  }\n-\n-  std::string getPtxAsm(ttn::NamedBarrierArriveOp op) const {\n-    return \"bar.arrive $0, $1;\";\n-  }\n-};\n-\n-class NamedBarrierWaitOpPattern\n-    : public NVGPUOpPatternBase<ttn::NamedBarrierWaitOp,\n-                                NamedBarrierWaitOpPattern> {\n-public:\n-  using Base =\n-      NVGPUOpPatternBase<ttn::NamedBarrierWaitOp, NamedBarrierWaitOpPattern>;\n-  using Base::Base;\n-\n-  OperandsAndConstraints\n-  getOperandsAndConstraints(ttn::NamedBarrierWaitOp op) const {\n-    OperandsAndConstraints operandsAndTypes;\n-    auto bar = op.getBar();\n-    auto numThreads = op.getNumThreads();\n-    operandsAndTypes.push_back({bar, \"r\"});\n-    operandsAndTypes.push_back({numThreads, \"r\"});\n-    return operandsAndTypes;\n-  }\n-\n-  std::string getPtxAsm(ttn::NamedBarrierWaitOp op) const {\n-    return \"bar.sync $0, $1;\";\n-  }\n-};\n \n class StoreDSmemOpPattern\n     : public NVGPUOpPatternBase<ttn::StoreDSmemOp, StoreDSmemOpPattern> {\n@@ -772,27 +626,6 @@ class StoreDSmemOpPattern\n   }\n };\n \n-class Sts64OpPattern : public NVGPUOpPatternBase<ttn::Sts64Op, Sts64OpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::Sts64Op, Sts64OpPattern>;\n-  using Base::Base;\n-\n-  OperandsAndConstraints getOperandsAndConstraints(ttn::Sts64Op op) const {\n-    OperandsAndConstraints operandsAndTypes;\n-    auto offset = op.getOffset();\n-    auto d0 = op.getD0();\n-    auto d1 = op.getD1();\n-    operandsAndTypes.push_back({offset, \"r\"});\n-    operandsAndTypes.push_back({d0, \"r\"});\n-    operandsAndTypes.push_back({d1, \"r\"});\n-    return operandsAndTypes;\n-  }\n-\n-  std::string getPtxAsm(ttn::Sts64Op op) const {\n-    return \"st.shared.v2.b32 [$0], {$1, $2};\";\n-  }\n-};\n-\n class LoadDSmemOpPattern\n     : public NVGPUOpPatternBase<ttn::LoadDSmemOp, LoadDSmemOpPattern> {\n public:\n@@ -1000,31 +833,6 @@ class WGMMAOpPattern : public NVGPUOpPatternBase<ttn::WGMMAOp, WGMMAOpPattern> {\n   }\n };\n \n-class ClusterCTAIdOpPattern\n-    : public NVGPUOpPatternBase<ttn::ClusterCTAIdOp, ClusterCTAIdOpPattern> {\n-public:\n-  using Base = NVGPUOpPatternBase<ttn::ClusterCTAIdOp, ClusterCTAIdOpPattern>;\n-  using Base::Base;\n-\n-  std::vector<std::string> getOutputConstraints(ttn::ClusterCTAIdOp op) const {\n-    return {\"=r\"};\n-  }\n-\n-  std::string getPtxAsm(ttn::ClusterCTAIdOp op) const {\n-    auto ptxAsm = \"{\\n\"\n-                  \".reg .u32 a<5>;              \\n\"\n-                  \"mov.u32 a0, %cluster_ctaid.x;\\n\"  // x\n-                  \"mov.u32 a1, %cluster_ctaid.y;\\n\"  // y\n-                  \"mov.u32 a2, %cluster_ctaid.z;\\n\"  // z\n-                  \"mov.u32 a3, %cluster_nctaid.x;\\n\" // nx\n-                  \"mov.u32 a4, %cluster_nctaid.y;\\n\" // ny\n-                  \"mad.lo.u32 a1, a2, a4, a1;     \\n\"\n-                  \"mad.lo.u32 $0, a1, a3, a0;     \\n\"\n-                  \"}\";\n-    return ptxAsm;\n-  }\n-};\n-\n class WGMMADescCreateOpPattern\n     : public NVGPUOpPatternBase<ttn::WGMMADescCreateOp,\n                                 WGMMADescCreateOpPattern> {\n@@ -1279,35 +1087,52 @@ class ConvertNVGPUToLLVM : public ConvertNVGPUToLLVMBase<ConvertNVGPUToLLVM> {\n     ModuleOp mod = getOperation();\n     RewritePatternSet patterns(context);\n \n-    patterns.add<CGABarrierSyncOpPattern>(context);\n     patterns.add<FenceAsyncSharedOpPattern>(context);\n-    patterns.add<WGMMAFenceOpPattern>(context);\n-    patterns.add<WGMMACommitGroupOpPattern>(context);\n-    patterns.add<WGMMAWaitGroupOpPattern>(context);\n     patterns.add<StoreMatrixOpPattern>(context);\n     patterns.add<OffsetOfStmatrixV4OpPattern>(context);\n     patterns.add<WGMMADescCreateOpPattern>(context);\n-    patterns.add<MBarrierInitOpPattern>(context);\n     patterns.add<MBarrierArriveOpPattern>(context);\n-    patterns.add<MBarrierWaitOpPattern>(context);\n     patterns.add<ClusterArriveOpPattern>(context);\n-    patterns.add<ClusterWaitOpPattern>(context);\n     patterns.add<TMALoadTiledOpPattern>(context);\n     patterns.add<TMAStoreTiledOpPattern>(context);\n     patterns.add<LoadDSmemOpPattern>(context);\n-    patterns.add<ClusterCTAIdOpPattern>(context);\n-    patterns.add<RegAllocOpPattern>(context);\n-    patterns.add<RegDeallocOpPattern>(context);\n     patterns.add<WGMMAOpPattern>(context);\n-    patterns.add<NamedBarrierWaitOpPattern>(context);\n-    patterns.add<NamedBarrierArriveOpPattern>(context);\n-\n-    patterns.add<FenceMBarrierInitOpPattern>(context);\n     patterns.add<StoreDSmemOpPattern>(context);\n-    patterns.add<Sts64OpPattern>(context);\n     patterns.add<OffsetOfSts64OpPattern>(context);\n-    patterns.add<CGABarrierWaitOpPattern>(context);\n-    patterns.add<CGABarrierArriveOpPattern>(context);\n+\n+#define POPULATE_NVGPU_OP(SRC_OP, ASM)                                         \\\n+  patterns.add<NVGPUOpGenericPattern<SRC_OP>>(                                 \\\n+      context, ASM, std::vector<std::string>(), std::vector<std::string>());\n+    POPULATE_NVGPU_OP(ttn::RegAllocOp, Reg_Alloc_Op)\n+    POPULATE_NVGPU_OP(ttn::WGMMAFenceOp, Wgmma_Fence_Op)\n+    POPULATE_NVGPU_OP(ttn::CGABarrierSyncOp, Cga_Barrier_Sync_op)\n+    POPULATE_NVGPU_OP(ttn::WGMMACommitGroupOp, Wgmma_Commit_Group_Op)\n+    POPULATE_NVGPU_OP(ttn::WGMMAWaitGroupOp, Wgmma_Wait_Group_Op)\n+    POPULATE_NVGPU_OP(ttn::ClusterWaitOp, Cluster_Wait_Op)\n+    POPULATE_NVGPU_OP(ttn::FenceMBarrierInitOp, Fence_Mbarrier_Init_Op)\n+    POPULATE_NVGPU_OP(ttn::CGABarrierArriveOp, Cga_Barrier_Arrive_Op)\n+    POPULATE_NVGPU_OP(ttn::CGABarrierWaitOp, Cga_Barrier_Wait_Op)\n+    POPULATE_NVGPU_OP(ttn::RegDeallocOp, Reg_Dealloc_Op)\n+#undef POPULATE_NVGPU_OP\n+    patterns.add<NVGPUOpGenericPattern<ttn::MBarrierInitOp>>(\n+        context, Mbarrier_Init_Op, std::vector<std::string>(),\n+        std::vector<std::string>({\"r\", \"b\"}));\n+    patterns.add<NVGPUOpGenericPattern<ttn::MBarrierWaitOp>>(\n+        context, Mbarrier_Wait_Op, std::vector<std::string>(),\n+        std::vector<std::string>({\"r\", \"r\"}));\n+    patterns.add<NVGPUOpGenericPattern<ttn::NamedBarrierArriveOp>>(\n+        context, Named_Barrier_Arrive_Op, std::vector<std::string>(),\n+        std::vector<std::string>({\"r\", \"r\"}));\n+    patterns.add<NVGPUOpGenericPattern<ttn::NamedBarrierWaitOp>>(\n+        context, Named_Barrier_Wait_Op, std::vector<std::string>(),\n+        std::vector<std::string>({\"r\", \"r\"}));\n+    patterns.add<NVGPUOpGenericPattern<ttn::Sts64Op>>(\n+        context, Sts64_Op, std::vector<std::string>(),\n+        std::vector<std::string>({\"r\", \"r\", \"r\"}));\n+    patterns.add<NVGPUOpGenericPattern<ttn::ClusterCTAIdOp>>(\n+        context, Cluster_Cta_Id_Op, std::vector<std::string>({\"=r\"}),\n+        std::vector<std::string>());\n+\n     if (applyPatternsAndFoldGreedily(mod, std::move(patterns)).failed())\n       signalPassFailure();\n   }"}]