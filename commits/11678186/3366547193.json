[{"filename": "python/triton/language/libdevice.py", "status": "modified", "additions": 167, "deletions": 303, "changes": 470, "file_content_changes": "@@ -58,13 +58,7 @@ def mulhi(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mulhi\", core.dtype(\"int32\")),\n                                (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umulhi\", core.dtype(\"uint32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def mul64hi(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n+                               (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n                                (core.dtype(\"uint64\"), core.dtype(\"uint64\"),): (\"__nv_umul64hi\", core.dtype(\"uint64\")),\n                                }, _builder)\n \n@@ -157,262 +151,138 @@ def saturatef(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def fmaf_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ieee_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n @extern.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n+                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fast_fdividef(arg0, arg1, _builder=None):\n+def fast_dividef(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_fdividef\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rn(arg0, arg1, _builder=None):\n+def div_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rz(arg0, arg1, _builder=None):\n+def div_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rd(arg0, arg1, _builder=None):\n+def div_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_ru(arg0, arg1, _builder=None):\n+def div_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rn(arg0, _builder=None):\n+def rcp_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rz(arg0, _builder=None):\n+def rcp_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rd(arg0, _builder=None):\n+def rcp_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_ru(arg0, _builder=None):\n+def rcp_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frcp_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rn(arg0, _builder=None):\n+def sqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rz(arg0, _builder=None):\n+def sqrt_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rd(arg0, _builder=None):\n+def sqrt_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_ru(arg0, _builder=None):\n+def sqrt_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -425,114 +295,66 @@ def sqrt(arg0, _builder=None):\n \n \n @extern.extern\n-def dadd_rn(arg0, arg1, _builder=None):\n+def add_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rn\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rz(arg0, arg1, _builder=None):\n+def add_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rz\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rd(arg0, arg1, _builder=None):\n+def add_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rd\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_ru(arg0, arg1, _builder=None):\n+def add_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_ru\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rn(arg0, arg1, _builder=None):\n+def mul_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rn\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rz(arg0, arg1, _builder=None):\n+def mul_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rz\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rd(arg0, arg1, _builder=None):\n+def mul_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rd\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_ru(arg0, arg1, _builder=None):\n+def mul_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -624,7 +446,13 @@ def double2uint_ru(arg0, _builder=None):\n def int2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2double_rn\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -688,31 +516,55 @@ def float2uint_ru(arg0, _builder=None):\n def int2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rn\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rz\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_rd\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int2float_ru\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -853,71 +705,118 @@ def double2ull_ru(arg0, _builder=None):\n def ll2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rn\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rz\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_rd\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2float_ru\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rn\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rz\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_rd\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int64\"),): (\"__nv_ll2double_ru\", core.dtype(\"fp64\")),\n-                               (core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n def int_as_float(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"int32\"),): (\"__nv_int_as_float\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n                                }, _builder)\n \n \n@@ -928,6 +827,13 @@ def float_as_int(arg0, _builder=None):\n                                }, _builder)\n \n \n+@extern.extern\n+def uint_as_float(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n+                               }, _builder)\n+\n+\n @extern.extern\n def float_as_uint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n@@ -1006,11 +912,9 @@ def fast_log10f(arg0, _builder=None):\n \n \n @extern.extern\n-def pow(arg0, arg1, _builder=None):\n+def fast_powf(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_powf\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n-                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_pow\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -1031,35 +935,39 @@ def rhadd(arg0, arg1, _builder=None):\n \n \n @extern.extern\n-def fsub_rn(arg0, arg1, _builder=None):\n+def sub_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rn\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rz(arg0, arg1, _builder=None):\n+def sub_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rz\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rd(arg0, arg1, _builder=None):\n+def sub_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rd\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_ru(arg0, arg1, _builder=None):\n+def sub_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_ru\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n @extern.extern\n-def frsqrt_rn(arg0, _builder=None):\n+def rsqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_frsqrt_rn\", core.dtype(\"fp32\")),\n                                }, _builder)\n@@ -1098,16 +1006,18 @@ def nearbyint(arg0, _builder=None):\n \n \n @extern.extern\n-def isnanf(arg0, _builder=None):\n+def isnan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isnanf\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n @extern.extern\n-def signbitf(arg0, _builder=None):\n+def signbit(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_signbitf\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n@@ -1127,9 +1037,10 @@ def finitef(arg0, _builder=None):\n \n \n @extern.extern\n-def isinff(arg0, _builder=None):\n+def isinf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp32\"),): (\"__nv_isinff\", core.dtype(\"int32\")),\n+                               (core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n                                }, _builder)\n \n \n@@ -1550,10 +1461,12 @@ def fma(arg0, arg1, arg2, _builder=None):\n \n \n @extern.extern\n-def powi(arg0, arg1, _builder=None):\n+def pow(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_powif\", core.dtype(\"fp32\")),\n                                (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_powi\", core.dtype(\"fp64\")),\n+                               (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n+                               (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_pow\", core.dtype(\"fp64\")),\n                                }, _builder)\n \n \n@@ -1605,57 +1518,8 @@ def logb(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def signbitd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n @extern.extern\n def isfinited(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.dtype(\"fp64\"),): (\"__nv_isfinited\", core.dtype(\"int32\")),\n                                }, _builder)\n-\n-\n-@extern.extern\n-def isinfd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def isnand(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n-                               }, _builder)"}]