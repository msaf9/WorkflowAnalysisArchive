[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "file_content_changes": "@@ -3775,7 +3775,6 @@ struct MMA16816ConversionHelper {\n     auto aTensorTy = a.getType().cast<RankedTensorType>();\n     auto dTensorTy = d.getType().cast<RankedTensorType>();\n \n-\n     auto aShape = aTensorTy.getShape();\n     auto dShape = dTensorTy.getShape();\n \n@@ -3830,7 +3829,6 @@ struct MMA16816ConversionHelper {\n \n     Type resElemTy = dTensorTy.getElementType();\n \n-\n     // bitcast to fp32 in bulk\n     for (auto &elem : fc) {\n       elem = bitcast(elem, resElemTy);\n@@ -4490,12 +4488,6 @@ DotOpMmaV1ConversionHelper::extractLoadedOperand(\n   return rcds;\n }\n \n-template <typename T> void print_vec(ArrayRef<T> vec) {\n-  for (int v : vec)\n-    llvm::outs() << v << \" \";\n-  llvm::outs() << \"\\n\";\n-}\n-\n LogicalResult\n DotOpConversion::convertFMADot(triton::DotOp op, OpAdaptor adaptor,\n                                ConversionPatternRewriter &rewriter) const {\n@@ -4554,16 +4546,6 @@ DotOpConversion::convertFMADot(triton::DotOp op, OpAdaptor adaptor,\n \n   auto sizePerThread = getSizePerThread(dLayout);\n \n-  llvm::outs() << \"strideA: \" << strideAM << \" \" << strideAK << \"\\n\";\n-  llvm::outs() << \"strideB: \" << strideBN << \" \" << strideBK << \"\\n\";\n-  llvm::outs() << \"shapePerCTA: \";\n-  print_vec<unsigned>(shapePerCTA);\n-  llvm::outs() << \"\\n\";\n-\n-  llvm::outs() << \"sizePerThread: \";\n-  print_vec<unsigned>(sizePerThread);\n-  llvm::outs() << \"\\n\";\n-\n   Value _0 = i32_val(0);\n \n   Value mContig = i32_val(sizePerThread[order[1]]);\n@@ -4641,7 +4623,6 @@ DotOpConversion::convertFMADot(triton::DotOp op, OpAdaptor adaptor,\n               hbs[{n + nn, k}] = vb;\n             }\n \n-            llvm::outs() << z << \": \" << m + mm << \" \" << n + nn << \"\\n\";\n             ret[z] = rewriter.create<LLVM::FMulAddOp>(loc, has[{m + mm, k}],\n                                                       hbs[{n + nn, k}], ret[z]);\n             ++z;"}]