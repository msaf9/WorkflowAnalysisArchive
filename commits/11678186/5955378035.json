[{"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -137,7 +137,7 @@ def TT_LoadOp : TT_Op<\"load\",\n                       [SameLoadStoreOperandsAndResultShape,\n                        SameLoadStoreOperandsAndResultEncoding,\n                        AttrSizedOperandSegments,\n-                       MemoryEffects<[MemRead]>,\n+                       DeclareOpInterfaceMethods<MemoryEffectsOpInterface>,\n                        TypesMatchWith<\"infer ptr type from result type\",\n                                       \"result\", \"ptr\", \"$_self\",\n                                       \"mlir::OpTrait::impl::verifyLoadStorePointerAndValueType\">,"}, {"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "file_content_changes": "@@ -80,6 +80,16 @@ void LoadOp::print(OpAsmPrinter &printer) {\n   printer.printStrippedAttrOrType(getResult().getType());\n }\n \n+void LoadOp::getEffects(\n+    SmallVectorImpl<SideEffects::EffectInstance<MemoryEffects::Effect>>\n+        &effects) {\n+  effects.emplace_back(MemoryEffects::Read::get(), getPtr(),\n+                       SideEffects::DefaultResource::get());\n+  if (getIsVolatile())\n+    effects.emplace_back(MemoryEffects::Write::get(),\n+                         SideEffects::DefaultResource::get());\n+}\n+\n ParseResult StoreOp::parse(OpAsmParser &parser, OperationState &result) {\n   // Parse operands\n   SmallVector<OpAsmParser::UnresolvedOperand, 4> allOperands;"}, {"filename": "test/Triton/canonicalize.mlir", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "file_content_changes": "@@ -0,0 +1,12 @@\n+// RUN: triton-opt %s -split-input-file -canonicalize | FileCheck %s\n+\n+// CHECK-LABEL: dead_load\n+tt.func @dead_load(%ptr: tensor<32x128x!tt.ptr<f16>>) {\n+  %mask = arith.constant dense<true> : tensor<32x128xi1>\n+  %other = arith.constant dense<0.00e+00> : tensor<32x128xf16>\n+  // CHECK-NOT: tt.load {{.*}} isVolatile = false\n+  //     CHECK: tt.load {{.*}} isVolatile = true\n+  %a = tt.load %ptr, %mask, %other {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16>\n+  %b = tt.load %ptr, %mask, %other {cache = 1 : i32, evict = 1 : i32, isVolatile = true} : tensor<32x128xf16>\n+  tt.return\n+}"}]