[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -25,9 +25,9 @@ jobs:\n         id: set-matrix\n         run: |\n           if [ x\"${{ github.repository }}\" == x\"openai/triton\" ]; then\n-            echo '::set-output name=matrix::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"V100\"], [\"self-hosted\", \"gfx908\"], \"macos-10.15\"]'\n+            echo '::set-output name=matrix::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"V100\"], [\"self-hosted\", \"gfx908\"]]'\n           else\n-            echo '::set-output name=matrix::[\"ubuntu-latest\", \"macos-10.15\"]'\n+            echo '::set-output name=matrix::[\"ubuntu-latest\"]'\n           fi\n \n   Integration-Tests:"}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "file_content_changes": "@@ -399,13 +399,13 @@ struct AtomicCASOpConversion\n     auto valElements = getTypeConverter()->unpackLLElements(\n         loc, llVal, rewriter, op.getVal().getType());\n \n-    auto TensorTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n+    auto valueTy = op.getResult().getType();\n+    auto TensorTy = valueTy.dyn_cast<RankedTensorType>();\n     Type valueElemTy =\n         TensorTy ? getTypeConverter()->convertType(TensorTy.getElementType())\n-                 : op.getResult().getType();\n+                 : valueTy;\n     auto valueElemNBits = valueElemTy.getIntOrFloatBitWidth();\n-    auto tid = tid_val();\n-    Value pred = icmp_eq(tid, i32_val(0));\n+    Value mask = getMask(valueTy, rewriter, loc);\n     PTXBuilder ptxBuilderMemfence;\n     auto memfence = ptxBuilderMemfence.create<PTXInstr>(\"membar\")->o(\"gl\");\n     memfence();\n@@ -425,7 +425,7 @@ struct AtomicCASOpConversion\n     auto *valOpr = ptxBuilderAtomicCAS.newOperand(casVal, \"r\");\n     auto &atom = *ptxBuilderAtomicCAS.create<PTXInstr>(\"atom\");\n     atom.global().o(\"cas\").o(\"b32\");\n-    atom(dstOpr, ptrOpr, cmpOpr, valOpr).predicate(pred);\n+    atom(dstOpr, ptrOpr, cmpOpr, valOpr).predicate(mask);\n     auto old = ptxBuilderAtomicCAS.launch(rewriter, loc, valueElemTy);\n     barrier();\n \n@@ -434,7 +434,7 @@ struct AtomicCASOpConversion\n     auto *valOprStore = ptxBuilderStore.newOperand(old, \"r\");\n     auto &st = *ptxBuilderStore.create<PTXInstr>(\"st\");\n     st.shared().o(\"b32\");\n-    st(dstOprStore, valOprStore).predicate(pred);\n+    st(dstOprStore, valOprStore).predicate(mask);\n     ptxBuilderStore.launch(rewriter, loc, ASMReturnTy);\n     ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n     barrier();\n@@ -483,10 +483,11 @@ struct AtomicRMWOpConversion\n       maskElements = getTypeConverter()->unpackLLElements(\n           loc, llMask, rewriter, op.getMask().getType());\n \n-    auto tensorTy = op.getResult().getType().dyn_cast<RankedTensorType>();\n+    auto valueTy = op.getResult().getType();\n+    auto tensorTy = valueTy.dyn_cast<RankedTensorType>();\n     Type valueElemTy =\n         tensorTy ? getTypeConverter()->convertType(tensorTy.getElementType())\n-                 : op.getResult().getType();\n+                 : valueTy;\n     const size_t valueElemNBits = valueElemTy.getIntOrFloatBitWidth();\n     auto elemsPerThread = getTotalElemsPerThread(val.getType());\n     // vec = 1, numElements = 1 for scalar\n@@ -499,10 +500,7 @@ struct AtomicRMWOpConversion\n       // mask\n       numElems = tensorTy.getNumElements();\n     }\n-    Value mask = int_val(1, 1);\n-    auto tid = tid_val();\n-    mask = and_(mask,\n-                icmp_slt(mul(tid, i32_val(elemsPerThread)), i32_val(numElems)));\n+    Value mask = getMask(valueTy, rewriter, loc);\n \n     auto vecTy = vec_ty(valueElemTy, vec);\n     SmallVector<Value> resultVals(elemsPerThread);\n@@ -582,7 +580,6 @@ struct AtomicRMWOpConversion\n         memfenc();\n         auto ASMReturnTy = void_ty(ctx);\n         ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n-        rmwMask = and_(rmwMask, icmp_eq(tid, i32_val(0)));\n         atom(dstOpr, ptrOpr, valOpr).predicate(rmwMask);\n         auto old = ptxBuilderAtomicRMW.launch(rewriter, loc, valueElemTy);\n         Value atomPtr = getSharedMemoryBase(loc, rewriter, op.getOperation());"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMBase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -457,7 +457,7 @@ class ConvertTritonGPUOpToLLVMPatternBase {\n     } else {\n       // If the tensor is not ranked, then it is a scalar and only thread 0 can\n       // write\n-      mask = and_(mask, icmp_slt(tid, i32_val(1)));\n+      mask = and_(mask, icmp_eq(tid, i32_val(0)));\n     }\n     return mask;\n   }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "file_content_changes": "@@ -72,8 +72,24 @@ struct ReturnOpConversion : public ConvertOpToLLVMPattern<triton::ReturnOp> {\n                                                   op->getAttrs());\n     } else {\n       // A device function\n-      auto newOp =\n-          rewriter.create<LLVM::ReturnOp>(op.getLoc(), adaptor.getOperands());\n+      LLVM::ReturnOp newOp;\n+      if (adaptor.getOperands().size() < 2) {\n+        // Single or no return value.\n+        newOp =\n+            rewriter.create<LLVM::ReturnOp>(op.getLoc(), adaptor.getOperands());\n+      } else {\n+        // Pack the results into a struct.\n+        auto packedResultsTy = this->getTypeConverter()->packFunctionResults(\n+            funcOp.getResultTypes());\n+        Value packedResults =\n+            rewriter.create<LLVM::UndefOp>(op.getLoc(), packedResultsTy);\n+        auto loc = op.getLoc();\n+        for (auto it : llvm::enumerate(adaptor.getOperands())) {\n+          packedResults = insert_val(packedResultsTy, packedResults, it.value(),\n+                                     it.index());\n+        }\n+        newOp = rewriter.create<LLVM::ReturnOp>(op.getLoc(), packedResults);\n+      }\n       newOp->setAttrs(op->getAttrs());\n       rewriter.replaceOp(op, newOp->getResults());\n     }"}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "file_content_changes": "@@ -854,7 +854,19 @@ def noinline_dynamic_fn(x, y, Z):\n     tl.store(Z, z)\n \n \n-@pytest.mark.parametrize(\"mode\", [\"simple\", \"call_graph\", \"shared\", \"dynamic\"])\n+@triton.jit(noinline=True)\n+def noinline_call_multi_values_fn(x, y):\n+    return x + 1, y + 2\n+\n+\n+@triton.jit(noinline=True)\n+def noinline_multi_values_fn(x, y, Z):\n+    x, y = noinline_call_multi_values_fn(x, y)\n+    z = x + y\n+    tl.store(Z, z)\n+\n+\n+@pytest.mark.parametrize(\"mode\", [\"simple\", \"call_graph\", \"shared\", \"dynamic\", \"multi_values\"])\n def test_noinline(mode):\n     device = 'cuda'\n \n@@ -875,7 +887,7 @@ def kernel(X, Y, Z):\n     kernel[(1,)](x, y, z, num_warps=1)\n     if mode == \"simple\":\n         assert torch.equal(z, x + y)\n-    elif mode == \"call_graph\" or mode == \"dynamic\":\n+    elif mode == \"call_graph\" or mode == \"dynamic\" or mode == \"multi_values\":\n         assert torch.equal(z, x + 1 + y + 2)\n     elif mode == \"shared\":\n         ref = torch.full((16, 16), 16, device=device, dtype=torch.float32)\n@@ -1531,7 +1543,53 @@ def test_store_op(M, src_layout, device='cuda'):\n \n     pgm = store_kernel[(1, 1, 1)](x_tri, y_tri)\n     y_ref = x\n+    np.testing.assert_allclose(y_ref, y_tri.cpu().numpy(), rtol=0.01, atol=1e-3)\n+\n+\n+layouts = [\n+    BlockedLayout([1, 4], [1, 32], [4, 1], [1, 0]),\n+    BlockedLayout([1, 4], [1, 32], [2, 2], [1, 0]),\n+    MmaLayout(version=(2, 0), warps_per_cta=[4, 1])\n+]\n+\n+\n+@pytest.mark.parametrize(\"M\", [64, 128, 256])\n+@pytest.mark.parametrize(\"src_layout\", layouts)\n+@pytest.mark.parametrize(\"dst_layout\", layouts)\n+@pytest.mark.parametrize(\"src_dim\", [0, 1])\n+@pytest.mark.parametrize(\"dst_dim\", [0, 1])\n+def test_convert1d(M, src_layout, dst_layout, src_dim, dst_dim, device='cuda'):\n+    ir = f\"\"\"\n+    #dst = {dst_layout}\n+    #src = {src_layout}\n+    module attributes {{\"triton_gpu.num-warps\" = 4 : i32}} {{\n+        tt.func public @kernel(%arg0: !tt.ptr<i32> {{tt.divisibility = 16 : i32}}, %arg1: !tt.ptr<i32> {{tt.divisibility = 16 : i32}}) {{\n+            %0 = tt.splat %arg0 : (!tt.ptr<i32>) -> tensor<{M}x!tt.ptr<i32>, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>\n+            %1 = tt.make_range {{end = {M} : i32, start = 0 : i32}} : tensor<{M}xi32, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>\n+            %2 = tt.addptr %0, %1 : tensor<{M}x!tt.ptr<i32>, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>, tensor<{M}xi32, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>\n+            %3 = tt.load %2 {{cache = 1 : i32, evict = 1 : i32, isVolatile = false}} : tensor<{M}xi32, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>\n+            %4 = tt.splat %arg1 : (!tt.ptr<i32>) -> tensor<{M}x!tt.ptr<i32>, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>\n+            %5 = tt.make_range {{end = {M} : i32, start = 0 : i32}} : tensor<{M}xi32, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>\n+            %6 = tt.addptr %4, %5 : tensor<{M}x!tt.ptr<i32>, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>, tensor<{M}xi32, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>\n+            %7 = triton_gpu.convert_layout %3 : (tensor<{M}xi32, #triton_gpu.slice<{{dim = {src_dim}, parent = #src}}>>) -> tensor<{M}xi32, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>\n+            tt.store %6, %7 : tensor<{M}xi32, #triton_gpu.slice<{{dim = {dst_dim}, parent = #dst}}>>\n+            tt.return\n+        }}\n+    }}\n+    \"\"\"\n+    import tempfile\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.ttgir') as f:\n+        f.write(ir)\n+        f.flush()\n+        kernel = triton.compile(f.name)\n \n+    rs = RandomState(17)\n+    x = rs.randint(0, 4, (M, )).astype('int32')\n+    y = np.zeros((M, ), dtype='int32')\n+    x_tri = torch.tensor(x, device=device)\n+    y_tri = torch.tensor(y, device=device)\n+    pgm = kernel[(1, 1, 1)](x_tri, y_tri)\n+    y_ref = x\n     np.testing.assert_allclose(y_ref, y_tri.cpu().numpy(), rtol=0.01, atol=1e-3)\n \n "}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1009,7 +1009,6 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK-LABEL: atomic_add_f32\n   tt.func @atomic_add_f32(%arg0 : tensor<256x!tt.ptr<f32>, #blocked0>, %arg1 : tensor<256xi1, #blocked0>, %arg2 : tensor<256xf32, #blocked0>) {\n-    // CHECK: llvm.icmp \"slt\"\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: @$3 atom.global.gpu.add.f32\n     // CHECK: llvm.inline_asm\n@@ -1026,6 +1025,7 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   tt.func @atomic_add_f32_scalar(%arg0 : !tt.ptr<f32>, %arg1 : i1, %arg2 : f32) {\n     // CHECK: llvm.icmp \"eq\"\n     // CHECK: llvm.inline_asm\n+    // CHECK: llvm.inline_asm\n     // CHECK-SAME: @$3 atom.global.gpu.add.f32\n     %0 = \"tt.atomic_rmw\" (%arg0, %arg2, %arg1) {atomic_rmw_op = 5 : i32} : (!tt.ptr<f32>, f32, i1) -> f32\n     tt.return\n@@ -1052,7 +1052,7 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n   // CHECK-LABEL: store_f32_scalar\n   tt.func @store_f32_scalar(%arg0 : !tt.ptr<f32>, %arg1 : f32) {\n-    // CHECK: llvm.icmp \"slt\"\n+    // CHECK: llvm.icmp \"eq\"\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: @$2 st.global.b32\n     tt.store %arg0, %arg1 : f32"}]