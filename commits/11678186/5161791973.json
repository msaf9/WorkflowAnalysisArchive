[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "file_content_changes": "@@ -1338,7 +1338,11 @@ def get_reduced_dtype(dtype_str, op):\n \n @pytest.mark.parametrize(\"op, dtype_str, shape\",\n                          [(op, dtype, shape)\n-                          for op in ['min', 'max', 'sum', 'argmin', 'argmax']\n+                          for op in ['min', 'max',\n+                                     'min-with-indices',\n+                                     'max-with-indices',\n+                                     'argmin', 'argmax',\n+                                     'sum']\n                           for dtype in dtypes_with_bfloat16\n                           for shape in [32, 64, 128, 512]])\n def test_reduce1d(op, dtype_str, shape, device='cuda'):\n@@ -1348,15 +1352,22 @@ def test_reduce1d(op, dtype_str, shape, device='cuda'):\n     @triton.jit\n     def kernel(X, Z, BLOCK: tl.constexpr):\n         x = tl.load(X + tl.arange(0, BLOCK))\n-        tl.store(Z, GENERATE_TEST_HERE)\n+        GENERATE_TEST_HERE\n+        tl.store(Z, z)\n \n-    kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': f'tl.{op}(x, axis=0)'})\n+    if 'with-indices' in op:\n+        patch = f'z, _ = tl.{op.split(\"-\")[0]}(x, axis=0, return_indices=True)'\n+    else:\n+        patch = f'z = tl.{op}(x, axis=0)'\n+    kernel = patch_kernel(kernel, {'GENERATE_TEST_HERE': patch})\n     # input\n     rs = RandomState(17)\n     # limit the range of integers so that the sum does not overflow\n     x = numpy_random((shape,), dtype_str=dtype_str, rs=rs)\n     x_tri = to_triton(x, device=device)\n     numpy_op = {'sum': np.sum, 'max': np.max, 'min': np.min,\n+                'max-with-indices': np.max,\n+                'min-with-indices': np.min,\n                 'argmin': np.argmin, 'argmax': np.argmax}[op]\n     # numpy result\n     z_dtype_str = 'int32' if op in ('argmin', 'argmax') else dtype_str"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "file_content_changes": "@@ -1319,7 +1319,7 @@ def _promote_reduction_input(t, _builder=None):\n \n \n @builtin\n-def _argreduce(input, axis, combine_fn, _builder=None, _generator=None):\n+def _reduce_with_indices(input, axis, combine_fn, _builder=None, _generator=None):\n     axis = _constexpr_to_value(axis)\n     n = input.shape[axis]\n     index = arange(0, n, _builder=_builder)\n@@ -1333,7 +1333,7 @@ def _argreduce(input, axis, combine_fn, _builder=None, _generator=None):\n \n     rvalue, rindices = reduce((input, index), axis, combine_fn,\n                               _builder=_builder, _generator=_generator)\n-    return rindices\n+    return rvalue, rindices\n \n \n @triton.jit\n@@ -1361,19 +1361,14 @@ def maximum(x, y):\n     \"\"\"\n     return where(x > y, x, y)\n \n+# max and argmax\n+\n \n @triton.jit\n def _max_combine(a, b):\n     return maximum(a, b)\n \n \n-@triton.jit\n-@_add_reduction_docstr(\"maximum\")\n-def max(input, axis=None):\n-    input = _promote_reduction_input(input)\n-    return reduce(input, axis, _max_combine)\n-\n-\n @triton.jit\n def _argmax_combine(value1, index1, value2, index2):\n     gt = value1 > value2\n@@ -1384,11 +1379,23 @@ def _argmax_combine(value1, index1, value2, index2):\n     return value_ret, index_ret\n \n \n+@triton.jit\n+@_add_reduction_docstr(\"maximum\")\n+def max(input, axis=None, return_indices=False):\n+    input = _promote_reduction_input(input)\n+    if return_indices:\n+        return _reduce_with_indices(input, axis, _argmax_combine)\n+    else:\n+        return reduce(input, axis, _max_combine)\n+\n+\n @triton.jit\n @_add_reduction_docstr(\"maximum index\")\n def argmax(input, axis):\n-    input = _promote_reduction_input(input)\n-    return _argreduce(input, axis, _argmax_combine)\n+    (_, ret) = max(input, axis, return_indices=True)\n+    return ret\n+\n+# min and argmin\n \n \n @triton.jit\n@@ -1397,13 +1404,6 @@ def _min_combine(a, b):\n     return minimum(a, b)\n \n \n-@triton.jit\n-@_add_reduction_docstr(\"minimum\")\n-def min(input, axis=None):\n-    input = _promote_reduction_input(input)\n-    return reduce(input, axis, _min_combine)\n-\n-\n @triton.jit\n def _argmin_combine(value1, index1, value2, index2):\n     lt = value1 < value2\n@@ -1414,17 +1414,29 @@ def _argmin_combine(value1, index1, value2, index2):\n     return value_ret, index_ret\n \n \n+@triton.jit\n+@_add_reduction_docstr(\"minimum\")\n+def min(input, axis=None, return_indices=False):\n+    input = _promote_reduction_input(input)\n+    if return_indices:\n+        return _reduce_with_indices(input, axis, _argmin_combine)\n+    else:\n+        return reduce(input, axis, _min_combine)\n+\n+\n @triton.jit\n @_add_reduction_docstr(\"minimum index\")\n def argmin(input, axis):\n-    input = _promote_reduction_input(input)\n-    return _argreduce(input, axis, _argmin_combine)\n+    _, ret = min(input, axis, return_indices=True)\n+    return ret\n \n \n @triton.jit\n def _sum_combine(a, b):\n     return a + b\n \n+# sum\n+\n \n @triton.jit\n @_add_reduction_docstr(\"sum\")\n@@ -1438,6 +1450,8 @@ def _xor_combine(a, b):\n     return a ^ b\n \n \n+# xor sum\n+\n @builtin\n @_add_reduction_docstr(\"xor sum\")\n def xor_sum(input, axis=None, _builder=None, _generator=None):"}]