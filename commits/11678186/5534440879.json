[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "file_content_changes": "@@ -225,40 +225,52 @@ jobs:\n           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         run: |\n           OWNER_REPO=\"${{ github.repository }}\"\n-          PR_NUMBER=$(gh api --method GET repos/$OWNER_REPO/pulls -f state=closed | jq \".[] | select(.merged_at != null) | .number\" | head -1)\n-          echo \"Last merged PR number: $PR_NUMBER\"\n-\n-          BRANCH_NAME=$(gh api repos/$OWNER_REPO/pulls/$PR_NUMBER --jq '.head.ref')\n-          echo \"BRANCH_NAME: $BRANCH_NAME\"\n-\n-          page=1\n-          while true; do\n-            run_id=$(gh api --method GET \"repos/$OWNER_REPO/actions/runs?page=$page&per_page=100\" | jq --arg branch_name \"$BRANCH_NAME\" '.workflow_runs[] | select(.head_branch == $branch_name)' | jq '.id' | head -1)\n-            if [ \"$run_id\" != \"\" ]; then\n-              echo \"First run ID on branch $BRANCH_NAME is: $run_id\"\n-              WORKFLOW_RUN_ID=$run_id\n+          echo \"OWNER_REPO: $OWNER_REPO\"\n+          PR_NUMBERS=($(gh api --method GET repos/$OWNER_REPO/pulls -f state=closed | jq -r \".[] | select(.merged_at != null) | .number\"))\n+\n+          # Not all PRs go through integration tests\n+          success=0\n+          for PR_NUMBER in \"${PR_NUMBERS[@]}\"\n+          do\n+            echo \"Last merged PR number: $PR_NUMBER\"\n+            BRANCH_NAME=$(gh api repos/$OWNER_REPO/pulls/$PR_NUMBER --jq '.head.ref')\n+            echo \"BRANCH_NAME: $BRANCH_NAME\"\n+            USER_ID=$(gh api repos/$OWNER_REPO/pulls/$PR_NUMBER --jq '.user.id')\n+            echo \"USER_ID: $USER_ID\"\n+\n+            page=1\n+            while true; do\n+              run_id=$(gh api --method GET \"repos/$OWNER_REPO/actions/runs?page=$page&per_page=100\" | jq --arg branch_name \"$BRANCH_NAME\" --arg run_name \"Integration Tests\" --arg user_id \"$USER_ID\" '.workflow_runs[] | select(.head_branch == $branch_name and .name == $run_name and .actor.id == ($user_id | tonumber))' | jq '.id' | head -1)\n+              if [ \"$run_id\" != \"\" ]; then\n+                echo \"First run ID on branch $BRANCH_NAME is: $run_id\"\n+                WORKFLOW_RUN_ID=$run_id\n+                break\n+              fi\n+\n+              ((page++))\n+            done\n+\n+            echo \"WORKFLOW_RUN_ID: $WORKFLOW_RUN_ID\"\n+            ARTIFACT_URL=$(gh api repos/$OWNER_REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts | jq --arg artifact_name \"$ARTIFACT_NAME\" '.artifacts[] | select(.name == $artifact_name).archive_download_url' --raw-output)\n+            echo \"ARTIFACT_URL: $ARTIFACT_URL\"\n+\n+            if [ -n \"$ARTIFACT_URL\" ]; then\n+              echo \"Downloading artifact: $ARTIFACT_URL\"\n+              curl --location --remote-header-name -H \"Authorization: token $GH_TOKEN\" -o reference.zip \"$ARTIFACT_URL\"\n+              # Print the size of the downloaded artifact\n+              echo \"Artifact size (stat): $(stat --printf=\"%s bytes\" reference.zip)\"\n+              echo \"Artifact size (du): $(du -sh reference.zip)\"\n+              unzip reference.zip\n+              tar -xzf artifacts.tar.gz\n+              rm reference.zip\n+              rm artifacts.tar.gz\n+              mv cache reference\n+              success=1\n               break\n             fi\n-\n-            ((page++))\n           done\n \n-          echo \"WORKFLOW_RUN_ID: $WORKFLOW_RUN_ID\"\n-          ARTIFACT_URL=$(gh api repos/$OWNER_REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts | jq --arg artifact_name \"$ARTIFACT_NAME\" '.artifacts[] | select(.name == $artifact_name).archive_download_url' --raw-output)\n-          echo \"ARTIFACT_URL: $ARTIFACT_URL\"\n-\n-          if [ -n \"$ARTIFACT_URL\" ]; then\n-            echo \"Downloading artifact: $ARTIFACT_URL\"\n-            curl --location --remote-header-name -H \"Authorization: token $GH_TOKEN\" -o reference.zip \"$ARTIFACT_URL\"\n-            # Print the size of the downloaded artifact\n-            echo \"Artifact size (stat): $(stat --printf=\"%s bytes\" reference.zip)\"\n-            echo \"Artifact size (du): $(du -sh reference.zip)\"\n-            unzip reference.zip\n-            tar -xzf artifacts.tar.gz\n-            rm reference.zip\n-            rm artifacts.tar.gz\n-            mv cache reference\n-          else\n+          if [ $success -eq 0 ]; then\n             echo \"No artifact found with the name: $ARTIFACT_NAME\"\n             exit 1\n           fi"}, {"filename": "python/test/kernel_comparison/kernels.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -23,7 +23,7 @@ name_and_extension:\n     extension: ptx\n   - name: _kernel_0d1d2d345d6d7c89c1011c\n     extension: ptx\n-  - name: _bwd_kernel_0d1d2d34d5d6d7d8d9d10d11d12d13d14d15c16d17d18d19c20d21d22d23c2425d26d27\n+  - name: _bwd_kernel_0d1d2d34d5d6d7d8d9d10d11d12d13d14d15d16c17d18d19d20c21d22d23d24c2526d27d\n     extension: ptx\n   - name: _fwd_kernel_0d1d2d34d5d6d7d8d9d10c11d12d13d14c15d16d17d18c19d20d21d22c2324d25d\n     extension: ptx"}]