[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "file_content_changes": "@@ -919,11 +919,13 @@ unsigned AxisInfoAnalysis::getPtrContiguity(Value ptr) {\n   auto order = triton::gpu::getOrder(layout);\n   unsigned align = getPtrAlignment(ptr);\n \n-  unsigned uniqueContigPerThread =\n-      triton::gpu::getUniqueContigPerThread(tensorTy)[order[0]];\n-  uniqueContigPerThread = std::min(align, uniqueContigPerThread);\n+  auto uniqueContigPerThread = triton::gpu::getUniqueContigPerThread(tensorTy);\n+  assert(order[0] < uniqueContigPerThread.size() &&\n+         \"Unxpected uniqueContigPerThread size\");\n+  unsigned contiguity = uniqueContigPerThread[order[0]];\n+  contiguity = std::min(align, contiguity);\n \n-  return uniqueContigPerThread;\n+  return contiguity;\n }\n \n unsigned AxisInfoAnalysis::getPtrAlignment(Value ptr) {"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -176,6 +176,7 @@ SmallVector<unsigned> getUniqueContigPerThread(Type type) {\n   auto rank = shape.size();\n   SmallVector<unsigned> ret(rank);\n   auto contigPerThread = getContigPerThread(tensorType.getEncoding());\n+  assert(contigPerThread.size() == rank && \"Unexpected contigPerThread size\");\n   for (int d = 0; d < rank; ++d) {\n     ret[d] = std::min<unsigned>(shape[d], contigPerThread[d]);\n   }"}]