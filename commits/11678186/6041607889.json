[{"filename": "lib/Conversion/TritonGPUToLLVM/ReduceOpToLLVM.cpp", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "file_content_changes": "@@ -139,6 +139,26 @@ struct ReduceOpConversion\n     }\n   }\n \n+  SmallVector<Value> getSmemBases(ReduceOpHelper &helper, triton::ReduceOp op,\n+                                  SmallVector<unsigned> smemShape,\n+                                  ConversionPatternRewriter &rewriter) const {\n+    auto loc = op.getLoc();\n+    unsigned elems = product<unsigned>(smemShape);\n+    Type elemTy = helper.getLargestSrcElementType();\n+    auto elemPtrTy = LLVM::LLVMPointerType::get(elemTy, 3);\n+\n+    SmallVector<Value> smemBases(op.getNumOperands());\n+    smemBases[0] =\n+        bitcast(getSharedMemoryBase(loc, rewriter, op.getOperation()),\n+                getElementPtrType(op, 0));\n+    for (unsigned i = 1; i < op.getNumOperands(); ++i) {\n+      smemBases[i] = bitcast(\n+          gep(elemPtrTy, bitcast(smemBases[i - 1], elemPtrTy), i32_val(elems)),\n+          getElementPtrType(op, i));\n+    }\n+    return smemBases;\n+  }\n+\n   // Use shared memory for reduction within warps and across warps\n   LogicalResult\n   matchAndRewriteBasic(triton::ReduceOp op, OpAdaptor adaptor,\n@@ -157,25 +177,10 @@ struct ReduceOpConversion\n     auto sizePerThread = triton::gpu::getSizePerThread(srcLayout);\n     auto srcShape = helper.getSrcShape();\n \n-    SmallVector<Type> elemPtrTys(srcTys.size());\n-    for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n-      auto ty = srcTys[i].getElementType();\n-      auto llvmElemTy = getTypeConverter()->convertType(ty);\n-      elemPtrTys[i] = LLVM::LLVMPointerType::get(llvmElemTy, 3);\n-    }\n-    auto llvmIndexTy = getTypeConverter()->getIndexType();\n-\n     auto smemShape = helper.getScratchConfigBasic();\n-    unsigned elems = product<unsigned>(smemShape);\n \n-    SmallVector<Value> smemBases(op.getNumOperands());\n-    smemBases[0] = bitcast(\n-        getSharedMemoryBase(loc, rewriter, op.getOperation()), elemPtrTys[0]);\n-    for (unsigned i = 1; i < op.getNumOperands(); ++i) {\n-      smemBases[i] =\n-          bitcast(gep(elemPtrTys[i - 1], smemBases[i - 1], i32_val(elems)),\n-                  elemPtrTys[i]);\n-    }\n+    SmallVector<Value> smemBases =\n+        getSmemBases(helper, op, smemShape, rewriter);\n \n     auto srcValues = unpackInputs(loc, op, adaptor, rewriter);\n     std::map<SmallVector<unsigned>, SmallVector<Value>> accs;\n@@ -205,7 +210,7 @@ struct ReduceOpConversion\n       SmallVector<Value> writePtrs(op.getNumOperands());\n       for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n         // Store the within-thread accumulated value into shared memory\n-        writePtrs[i] = gep(elemPtrTys[i], smemBases[i], writeOffset);\n+        writePtrs[i] = gep(getElementPtrType(op, i), smemBases[i], writeOffset);\n         store(acc[i], writePtrs[i]);\n       }\n \n@@ -229,7 +234,7 @@ struct ReduceOpConversion\n         SmallVector<Value> readPtrs(op.getNumOperands());\n         for (unsigned i = 0; i < op.getNumOperands(); ++i) {\n           // The readPtr is readOffset away from writePtr\n-          readPtrs[i] = gep(elemPtrTys[i], writePtrs[i], readOffset);\n+          readPtrs[i] = gep(getElementPtrType(op, i), writePtrs[i], readOffset);\n         }\n \n         sync(rewriter, loc, op);\n@@ -271,7 +276,8 @@ struct ReduceOpConversion\n           readIdx.insert(readIdx.begin() + axis, ints[0]);\n           Value readOffset =\n               linearize(rewriter, loc, readIdx, smemShape, srcOrd);\n-          Value readPtr = gep(elemPtrTys[i], smemBases[i], readOffset);\n+          Value readPtr =\n+              gep(getElementPtrType(op, i), smemBases[i], readOffset);\n           resultVals[j] = load(readPtr);\n         }\n         results[i] = getTypeConverter()->packLLElements(loc, resultVals,\n@@ -634,19 +640,10 @@ struct ReduceOpConversion\n \n     // Compute a shared memory base per operand.\n     auto smemShape = helper.getScratchConfigsFast();\n-    unsigned elems = product<unsigned>(smemShape);\n-    SmallVector<Value> smemBases(op.getNumOperands());\n-    smemBases[0] =\n-        bitcast(getSharedMemoryBase(loc, rewriter, op.getOperation()),\n-                getElementPtrType(op, 0));\n \n-    Type elemTy = helper.getLargestSrcElementType();\n-    auto elemPtrTy = LLVM::LLVMPointerType::get(elemTy, 3);\n-    for (unsigned i = 1; i < op.getNumOperands(); ++i) {\n-      smemBases[i] = bitcast(\n-          gep(elemPtrTy, bitcast(smemBases[i - 1], elemPtrTy), i32_val(elems)),\n-          getElementPtrType(op, i));\n-    }\n+    SmallVector<Value> smemBases =\n+        getSmemBases(helper, op, smemShape, rewriter);\n+\n     storeWarpReduceToSharedMemory(helper, accs, indices, smemBases, rewriter);\n \n     sync(rewriter, loc, op);"}]