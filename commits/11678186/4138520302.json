[{"filename": "lib/Dialect/Triton/Transforms/Combine.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "file_content_changes": "@@ -69,6 +69,7 @@ class CombineSelectMaskedLoadPattern : public mlir::RewritePattern {\n \n     mlir::Value trueValue = selectOp.getTrueValue();\n     mlir::Value falseValue = selectOp.getFalseValue();\n+    mlir::Value condSelect = selectOp.getCondition();\n \n     auto *loadOpCandidate = trueValue.getDefiningOp();\n     auto loadOp = llvm::dyn_cast_or_null<triton::LoadOp>(loadOpCandidate);\n@@ -85,6 +86,10 @@ class CombineSelectMaskedLoadPattern : public mlir::RewritePattern {\n     if (!broadcastOp)\n       return mlir::failure();\n \n+    auto broadcastCond = broadcastOp.src();\n+    if (broadcastCond != condSelect)\n+      return mlir::failure();\n+\n     rewriter.replaceOpWithNewOp<triton::LoadOp>(\n         op, loadOp.ptr(), loadOp.mask(), falseValue, loadOp.cache(),\n         loadOp.evict(), loadOp.isVolatile());"}, {"filename": "test/Triton/combine.mlir", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "file_content_changes": "@@ -64,19 +64,25 @@ func @test_combine_select_masked_load_pattern(%ptr: tensor<8x!tt.ptr<f32>>, %con\n }\n \n // CHECK-LABEL: @test_combine_select_masked_load_fail_pattern\n-func @test_combine_select_masked_load_fail_pattern(%ptr: tensor<8x!tt.ptr<f32>>, %dummy_load: tensor<8xf32>, %dummy_broadcast: tensor<8xi1>, %cond: i1) -> (tensor<8xf32>, tensor<8xf32>) {\n+func @test_combine_select_masked_load_fail_pattern(%ptr: tensor<8x!tt.ptr<f32>>, %dummy_load: tensor<8xf32>, %dummy_broadcast: tensor<8xi1>, %cond0: i1, %cond1: i1) -> (tensor<8xf32>, tensor<8xf32>, tensor<8xf32>) {\n     %false_val = arith.constant dense<0.0> : tensor<8xf32>\n \n     // Case 1: value at the \"load\" position is not an \"op\".  Select should not be canonicalized.\n     // CHECK: %{{.*}} = select %{{.*}}, %{{.*}}, %{{.*}} : tensor<8xf32>\n-    %0 = select %cond, %dummy_load, %false_val : tensor<8xf32>\n+    %0 = select %cond0, %dummy_load, %false_val : tensor<8xf32>\n \n     // Case 2: value at the \"broadcast\" position is not an \"op\".  Select should not be canonicalized.\n-    %real_load = tt.load %ptr, %dummy_broadcast, %false_val {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<8xf32>\n+    %real_load0 = tt.load %ptr, %dummy_broadcast, %false_val {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<8xf32>\n     // CHECK: %{{.*}} = select %{{.*}}, %{{.*}}, %{{.*}} : tensor<8xf32>\n-    %1 = select %cond, %real_load, %false_val : tensor<8xf32>\n+    %1 = select %cond0, %real_load0, %false_val : tensor<8xf32>\n \n-    return %0, %1 : tensor<8xf32>, tensor<8xf32>\n+    // Case 3: condition of \"broadcast\" is not the same as the condition of \"select\".  Select should not be canonicalized.\n+    %cond0_ = tt.broadcast %cond0 : (i1) -> tensor<8xi1>\n+    %real_load1 = tt.load %ptr, %cond0_, %false_val {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<8xf32>\n+    // CHECK: %{{.*}} = select %{{.*}}, %{{.*}}, %{{.*}} : tensor<8xf32>\n+    %2 = select %cond1, %real_load1, %false_val : tensor<8xf32>\n+\n+    return %0, %1, %2 : tensor<8xf32>, tensor<8xf32>, tensor<8xf32>\n }\n \n // CHECK-LABEL: @test_combine_broadcast_constant_pattern"}]