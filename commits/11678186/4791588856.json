[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -2087,7 +2087,7 @@ def _kernel(dst):\n @pytest.mark.parametrize(\"dtype_str, expr, lib_path\",\n                          [('int32', 'math.ffs', ''),\n                           ('float32', 'math.log2', ''),\n-                          ('float32', 'math.pow', tl.math.LIBDEVICE_PATH),\n+                          ('float32', 'math.pow', tl.math.libdevice_path()),\n                           ('float64', 'math.norm4d', '')])\n def test_math_tensor(dtype_str, expr, lib_path):\n \n@@ -2132,7 +2132,7 @@ def kernel(X, Y, BLOCK: tl.constexpr):\n \n @pytest.mark.parametrize(\"dtype_str, expr, lib_path\",\n                          [('float32', 'math.pow', ''),\n-                          ('float64', 'math.pow', tl.math.LIBDEVICE_PATH)])\n+                          ('float64', 'math.pow', tl.math.libdevice_path())])\n def test_math_scalar(dtype_str, expr, lib_path):\n \n     @triton.jit"}, {"filename": "python/test/unit/runtime/test_driver.py", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -0,0 +1,14 @@\n+import sys\n+\n+import triton\n+\n+\n+def test_is_lazy():\n+    from importlib import reload\n+    reload(sys.modules[\"triton.runtime.driver\"])\n+    reload(sys.modules[\"triton.runtime\"])\n+    mod = sys.modules[triton.runtime.driver.__module__]\n+    assert isinstance(triton.runtime.driver, getattr(mod, \"LazyProxy\"))\n+    assert triton.runtime.driver._obj is None\n+    utils = triton.runtime.driver.utils  # noqa: F841\n+    assert issubclass(triton.runtime.driver._obj.__class__, getattr(mod, \"DriverBase\"))"}, {"filename": "python/triton/language/math.py", "status": "modified", "additions": 204, "deletions": 200, "changes": 404, "file_content_changes": "@@ -1,37 +1,41 @@\n+import functools\n import os\n \n from ..runtime import driver\n from . import core\n \n-LIBDEVICE_PATH = os.getenv(\"TRITON_LIBDEVICE_PATH\", driver.libdevice_path)\n+\n+@functools.lru_cache()\n+def libdevice_path():\n+    return os.getenv(\"TRITON_LIBDEVICE_PATH\", driver.libdevice_path)\n \n \n @core.extern\n def clz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_clz\", core.dtype(\"int32\")),\n                                     (core.dtype(\"int64\"),): (\"__nv_clzll\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def popc(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_popc\", core.dtype(\"int32\")),\n                                     (core.dtype(\"int64\"),): (\"__nv_popcll\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def byte_perm(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_byte_perm\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def min(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_min\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umin\", core.dtype(\"uint32\")),\n                                     (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_llmin\", core.dtype(\"int64\")),\n@@ -43,7 +47,7 @@ def min(arg0, arg1, _builder=None):\n \n @core.extern\n def max(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_max\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umax\", core.dtype(\"uint32\")),\n                                     (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_llmax\", core.dtype(\"int64\")),\n@@ -55,7 +59,7 @@ def max(arg0, arg1, _builder=None):\n \n @core.extern\n def mulhi(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mulhi\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umulhi\", core.dtype(\"uint32\")),\n                                     (core.dtype(\"int64\"), core.dtype(\"int64\"),): (\"__nv_mul64hi\", core.dtype(\"int64\")),\n@@ -65,31 +69,31 @@ def mulhi(arg0, arg1, _builder=None):\n \n @core.extern\n def mul24(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_mul24\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_umul24\", core.dtype(\"uint32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def brev(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_brev\", core.dtype(\"int32\")),\n                                     (core.dtype(\"int64\"),): (\"__nv_brevll\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sad(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"), core.dtype(\"uint32\"),): (\"__nv_sad\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_usad\", core.dtype(\"uint32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def abs(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_abs\", core.dtype(\"int32\")),\n                                     (core.dtype(\"int64\"),): (\"__nv_llabs\", core.dtype(\"int64\")),\n                                     (core.dtype(\"fp32\"),): (\"__nv_fabsf\", core.dtype(\"fp32\")),\n@@ -99,1370 +103,1370 @@ def abs(arg0, _builder=None):\n \n @core.extern\n def floor(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_floorf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_floor\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcp64h(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_rcp64h\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rsqrt(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_rsqrtf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_rsqrt\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ceil(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_ceil\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"),): (\"__nv_ceilf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def trunc(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_trunc\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"),): (\"__nv_truncf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def exp2(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_exp2f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_exp2\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def saturatef(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_saturatef\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rn\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rz\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_rd\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf_ru\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_dividef(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_fdividef\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def div_rn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rn\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def div_rz(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rz\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def div_rd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_rd\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def div_ru(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdiv_ru\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_ddiv_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcp_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_frcp_rn\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_drcp_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcp_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_frcp_rz\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_drcp_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcp_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_frcp_rd\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_drcp_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcp_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_frcp_ru\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_drcp_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sqrt_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rn\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sqrt_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rz\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sqrt_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_rd\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_dsqrt_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sqrt_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fsqrt_ru\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_dsqrt_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sqrt(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_sqrtf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_sqrt\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def add_rn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rn\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def add_rz(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rz\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def add_rd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_rd\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def add_ru(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dadd_ru\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fadd_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def mul_rn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rn\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def mul_rz(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rz\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def mul_rd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_rd\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def mul_ru(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dmul_ru\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmul_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2float_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2float_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2float_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2float_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2float_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2float_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2float_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2float_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2int_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2int_rn\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2int_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2int_rz\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2int_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2int_rd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2int_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2int_ru\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2uint_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rn\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2uint_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rz\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2uint_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2uint_rd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2uint_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2uint_ru\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int2double_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int2double_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint2double_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint2double_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2int_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2int_rn\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2int_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2int_rz\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2int_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2int_rd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2int_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2int_ru\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2uint_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rn\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2uint_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rz\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2uint_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2uint_rd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2uint_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2uint_ru\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int2float_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int2float_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int2float_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int2float_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int2float_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int2float_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int2float_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int2float_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint2float_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint2float_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint2float_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint2float_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint2float_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint2float_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def hiloint2double(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hiloint2double\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2loint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2loint\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2hiint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2hiint\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ll_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rn\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ll_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rz\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ll_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ll_rd\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ll_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ll_ru\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ull_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rn\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ull_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rz\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ull_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ull_rd\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float2ull_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float2ull_ru\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ll_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rn\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ll_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rz\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ll_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ll_rd\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ll_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ll_ru\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ull_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rn\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ull_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rz\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ull_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ull_rd\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double2ull_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double2ull_ru\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2float_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2float_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2float_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2float_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2float_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2float_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2float_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2float_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2float_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2float_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rz\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2float_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2float_rd\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2float_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2float_ru\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2double_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2double_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2double_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2double_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2double_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2double_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ll2double_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_ll2double_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2double_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2double_rz(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2double_rd(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2double_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ull2double_ru(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint64\"),): (\"__nv_ull2double_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def int_as_float(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_int_as_float\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float_as_int(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float_as_int\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def uint_as_float(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"uint32\"),): (\"__nv_uint_as_float\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def float_as_uint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_float_as_uint\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def longlong_as_double(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int64\"),): (\"__nv_longlong_as_double\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def double_as_longlong(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_double_as_longlong\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_sinf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_sinf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_cosf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_cosf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_log2f(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_log2f\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_logf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_logf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_expf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_expf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_tanf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_tanf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_exp10f(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_exp10f\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_log10f(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_fast_log10f\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fast_powf(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fast_powf\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def hadd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_hadd\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_uhadd\", core.dtype(\"uint32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rhadd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"int32\"),): (\"__nv_rhadd\", core.dtype(\"int32\")),\n                                     (core.dtype(\"uint32\"), core.dtype(\"uint32\"),): (\"__nv_urhadd\", core.dtype(\"uint32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sub_rn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rn\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sub_rz(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rz\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rz\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sub_rd(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_rd\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_rd\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sub_ru(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fsub_ru\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_dsub_ru\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rsqrt_rn(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_frsqrt_rn\", core.dtype(\"fp32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ffs(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"int32\"),): (\"__nv_ffs\", core.dtype(\"int32\")),\n                                     (core.dtype(\"int64\"),): (\"__nv_ffsll\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_rintf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_rint\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def llrint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_llrintf\", core.dtype(\"int64\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_llrint\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def nearbyint(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_nearbyintf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_nearbyint\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def isnan(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_isnanf\", core.dtype(\"int32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_isnand\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def signbit(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_signbitf\", core.dtype(\"int32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_signbitd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def copysign(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_copysignf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_copysign\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def finitef(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_finitef\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def isinf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_isinff\", core.dtype(\"int32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_isinfd\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def nextafter(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_nextafterf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_nextafter\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sin(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_sinf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_sin\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cos(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_cosf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cos\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sinpi(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_sinpif\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_sinpi\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cospi(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_cospif\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cospi\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def tan(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_tanf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_tan\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def log2(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_log2f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_log2\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def exp(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_expf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_exp\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def exp10(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_exp10f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_exp10\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cosh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_coshf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cosh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def sinh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_sinhf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_sinh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def tanh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_tanhf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_tanh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def atan2(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_atan2f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_atan2\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def atan(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_atanf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_atan\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def asin(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_asinf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_asin\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def acos(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_acosf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_acos\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def log(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_logf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_log\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def log10(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_log10f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_log10\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def log1p(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_log1pf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_log1p\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def acosh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_acoshf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_acosh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def asinh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_asinhf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_asinh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def atanh(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_atanhf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_atanh\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def expm1(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_expm1f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_expm1\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def hypot(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_hypotf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_hypot\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rhypot(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rhypotf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rhypot\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def norm3d(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm3df\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm3d\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rnorm3d(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm3df\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm3d\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def norm4d(arg0, arg1, arg2, arg3, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, arg3, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_norm4df\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_norm4d\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rnorm4d(arg0, arg1, arg2, arg3, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, arg3, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, arg3, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_rnorm4df\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_rnorm4d\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cbrt(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_cbrtf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cbrt\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def rcbrt(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_rcbrtf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_rcbrt\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def j0(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_j0f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_j0\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def j1(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_j1f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_j1\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def y0(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_y0f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_y0\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def y1(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_y1f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_y1\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def yn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_ynf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_yn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def jn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"int32\"), core.dtype(\"fp32\"),): (\"__nv_jnf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"int32\"), core.dtype(\"fp64\"),): (\"__nv_jn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cyl_bessel_i0(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i0f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i0\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def cyl_bessel_i1(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_cyl_bessel_i1f\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_cyl_bessel_i1\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def erf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_erff\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_erf\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def erfinv(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_erfinvf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_erfinv\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def erfc(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_erfcf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_erfc\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def erfcx(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_erfcxf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_erfcx\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def erfcinv(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_erfcinvf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_erfcinv\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def normcdfinv(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_normcdfinvf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_normcdfinv\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def normcdf(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_normcdff\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_normcdf\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def lgamma(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_lgammaf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_lgamma\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ldexp(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_ldexpf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_ldexp\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def scalbn(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_scalbnf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_scalbn\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fmod(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmodf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fmod\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def remainder(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_remainderf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_remainder\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fma(arg0, arg1, arg2, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, arg2, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fmaf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fma\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def pow(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"int32\"),): (\"__nv_powif\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"int32\"),): (\"__nv_powi\", core.dtype(\"fp64\")),\n                                     (core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_powf\", core.dtype(\"fp32\")),\n@@ -1472,54 +1476,54 @@ def pow(arg0, arg1, _builder=None):\n \n @core.extern\n def tgamma(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_tgammaf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_tgamma\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def round(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_roundf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_round\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def llround(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_llroundf\", core.dtype(\"int64\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_llround\", core.dtype(\"int64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def fdim(arg0, arg1, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, arg1, ],\n                                    {(core.dtype(\"fp32\"), core.dtype(\"fp32\"),): (\"__nv_fdimf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"), core.dtype(\"fp64\"),): (\"__nv_fdim\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def ilogb(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_ilogbf\", core.dtype(\"int32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_ilogb\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def logb(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp32\"),): (\"__nv_logbf\", core.dtype(\"fp32\")),\n                                     (core.dtype(\"fp64\"),): (\"__nv_logb\", core.dtype(\"fp64\")),\n                                     }, is_pure=True, _builder=_builder)\n \n \n @core.extern\n def isfinited(arg0, _builder=None):\n-    return core.extern_elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+    return core.extern_elementwise(\"libdevice\", libdevice_path(), [arg0, ],\n                                    {(core.dtype(\"fp64\"),): (\"__nv_isfinited\", core.dtype(\"int32\")),\n                                     }, is_pure=True, _builder=_builder)"}, {"filename": "python/triton/runtime/cache.py", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "file_content_changes": "@@ -1,11 +1,10 @@\n import json\n import os\n+import random\n from abc import ABC, abstractmethod\n from pathlib import Path\n from typing import Dict, Optional\n \n-from filelock import FileLock\n-\n \n def default_cache_dir():\n     return os.path.join(Path.home(), \".triton\", \"cache\")\n@@ -96,12 +95,18 @@ def put(self, data, filename, binary=True) -> str:\n             data = str(data)\n         assert self.lock_path is not None\n         filepath = self._make_path(filename)\n-        with FileLock(self.lock_path):\n-            # use tempfile to be robust against program interruptions\n-            mode = \"wb\" if binary else \"w\"\n-            with open(filepath + \".tmp\", mode) as f:\n-                f.write(data)\n-            os.rename(filepath + \".tmp\", filepath)\n+        # Random ID to avoid any collisions\n+        rnd_id = random.randint(0, 1000000)\n+        # we use the PID incase a bunch of these around so we can see what PID made it\n+        pid = os.getpid()\n+        # use tempfile to be robust against program interruptions\n+        temp_path = f\"{filepath}.tmp.pid_{pid}_{rnd_id}\"\n+        mode = \"wb\" if binary else \"w\"\n+        with open(temp_path, mode) as f:\n+            f.write(data)\n+        # Replace is guaranteed to be atomic on POSIX systems if it succeeds\n+        # so filepath cannot see a partial write\n+        os.replace(temp_path, filepath)\n         return filepath\n \n "}, {"filename": "python/triton/runtime/driver.py", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "file_content_changes": "@@ -140,7 +140,41 @@ def __init__(self):\n # -----------------------------\n \n \n-def create_driver():\n+class LazyProxy:\n+    def __init__(self, init_fn):\n+        self._init_fn = init_fn\n+        self._obj = None\n+\n+    def _initialize_obj(self):\n+        if self._obj is None:\n+            self._obj = self._init_fn()\n+\n+    def __getattr__(self, name):\n+        self._initialize_obj()\n+        return getattr(self._obj, name)\n+\n+    def __setattr__(self, name, value):\n+        if name in ['_init_fn', '_obj']:\n+            super().__setattr__(name, value)\n+        else:\n+            self._initialize_obj()\n+            setattr(self._obj, name, value)\n+\n+    def __delattr__(self, name):\n+        self._initialize_obj()\n+        delattr(self._obj, name)\n+\n+    def __repr__(self):\n+        if self._obj is None:\n+            return f\"<{self.__class__.__name__} for {self._init_fn} not yet initialized>\"\n+        return repr(self._obj)\n+\n+    def __str__(self):\n+        self._initialize_obj()\n+        return str(self._obj)\n+\n+\n+def initialize_driver():\n     import torch\n     if torch.version.hip is not None:\n         return HIPDriver()\n@@ -150,4 +184,4 @@ def create_driver():\n         return UnsupportedDriver()\n \n \n-driver = create_driver()\n+driver = LazyProxy(initialize_driver)"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "file_content_changes": "@@ -291,9 +291,12 @@ def _output_stubs(self) -> str:\n         import_str = \"from . import core\\n\"\n         import_str += \"from ..runtime import driver\\n\"\n         import_str += \"import os\\n\"\n+        import_str += \"import functools\\n\"\n \n         header_str = \"\"\n-        header_str += \"LIBDEVICE_PATH = os.getenv(\\\"TRITON_LIBDEVICE_PATH\\\", driver.libdevice_path)\\n\"\n+        header_str += \"@functools.lru_cache()\\n\"\n+        header_str += \"def libdevice_path():\\n\"\n+        header_str += \"    return os.getenv(\\\"TRITON_LIBDEVICE_PATH\\\", driver.libdevice_path)\\n\"\n         func_str = \"\"\n         for symbols in self._symbol_groups.values():\n             func_str += \"@core.extern\\n\"\n@@ -302,7 +305,7 @@ def _output_stubs(self) -> str:\n                 func_name_str += f\"{arg_name}, \"\n             func_name_str += \"_builder=None):\\n\"\n \n-            return_str = f\"\\treturn core.extern_elementwise(\\\"{self._name}\\\", LIBDEVICE_PATH, [\"\n+            return_str = f\"\\treturn core.extern_elementwise(\\\"{self._name}\\\", libdevice_path(), [\"\n             for arg_name in symbols[0].arg_names:\n                 return_str += f\"{arg_name}, \"\n             return_str += \"], \\n\""}]