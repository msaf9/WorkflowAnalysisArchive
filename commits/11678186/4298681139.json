[{"filename": "python/src/triton.cc", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "file_content_changes": "@@ -44,6 +44,7 @@\n #include <pybind11/stl.h>\n #include <pybind11/stl_bind.h>\n #include <regex>\n+#include <signal.h>\n #include <sstream>\n #include <stdexcept>\n #include <string>\n@@ -1509,7 +1510,6 @@ void init_triton_translation(py::module &m) {\n           llvm::sys::fs::createTemporaryFile(\"compile-ptx-src\", \"\", fsrc);\n           llvm::sys::fs::createTemporaryFile(\"compile-ptx-log\", \"\", flog);\n           std::string fbin = std::string(fsrc) + \".o\";\n-          llvm::FileRemover srcRemover(fsrc);\n           llvm::FileRemover logRemover(flog);\n           llvm::FileRemover binRemover(fbin);\n           const char *_fsrc = fsrc.c_str();\n@@ -1526,16 +1526,30 @@ void init_triton_translation(py::module &m) {\n \n           err = system(cmd.c_str());\n           if (err != 0) {\n+            err >>= 8;\n             std::ifstream _log(_flog);\n             std::string log(std::istreambuf_iterator<char>(_log), {});\n-            throw std::runtime_error(\"Internal Triton PTX codegen error: \\n\" +\n-                                     log);\n+            if (err == 255) {\n+              throw std::runtime_error(\"Internal Triton PTX codegen error: \\n\" +\n+                                       log);\n+            } else if (err == 128 + SIGSEGV) {\n+              throw std::runtime_error(\"Please run `ptxas \" + fsrc.str().str() +\n+                                       \"` to confirm that this is a \"\n+                                       \"bug in `ptxas`\\n\" +\n+                                       log);\n+            } else {\n+              throw std::runtime_error(\"`ptxas` failed with error code \" +\n+                                       std::to_string(err) + \": \\n\" + log);\n+            }\n+            return {};\n+          } else {\n+            llvm::FileRemover srcRemover(fsrc);\n+            std::ifstream _cubin(_fbin, std::ios::binary);\n+            std::string cubin(std::istreambuf_iterator<char>(_cubin), {});\n+            _cubin.close();\n+            py::bytes bytes(cubin);\n+            return std::move(bytes);\n           }\n-          std::ifstream _cubin(_fbin, std::ios::binary);\n-          std::string cubin(std::istreambuf_iterator<char>(_cubin), {});\n-          _cubin.close();\n-          py::bytes bytes(cubin);\n-          return std::move(bytes);\n         });\n \n   m.def(\"add_external_libs\","}]