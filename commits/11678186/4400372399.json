[{"filename": "lib/Dialect/TritonGPU/Transforms/AccelerateMatmul.cpp", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "file_content_changes": "@@ -41,39 +41,6 @@ SmallVector<int64_t, 2> mmaVersionToShapePerWarp(int version) {\n   }\n }\n \n-// Get the wpt for MMAv1 using more information.\n-// Reference the original logic here\n-// https://github.com/openai/triton/blob/0e4691e6dd91e001a8d33b71badf8b3314325459/lib/codegen/analysis/layout.cc#L223\n-SmallVector<unsigned, 2> warpsPerTileV1(ArrayRef<int64_t> shape, bool isARow,\n-                                        bool isBRow, bool isAVec4, bool isBVec4,\n-                                        int numWarps) {\n-  // TODO: Share code with\n-  // DotOpMmaV1ConversionHelper::AParam/BParam, since same code to compute the\n-  // rep,spw and fpw.\n-  SmallVector<unsigned> wpt({1, 1});\n-  SmallVector<unsigned> wpt_nm1;\n-\n-  SmallVector<int, 2> rep(2), spw(2);\n-  std::array<int, 3> fpw{{2, 2, 1}};\n-  int packSize0 = (isARow || isAVec4) ? 1 : 2;\n-  rep[0] = 2 * packSize0;\n-  spw[0] = fpw[0] * 4 * rep[0];\n-\n-  int packSize1 = (isBRow && !isBVec4) ? 2 : 1;\n-  rep[1] = 2 * packSize1;\n-  spw[1] = fpw[1] * 4 * rep[1];\n-\n-  do {\n-    wpt_nm1 = wpt;\n-    if (wpt[0] * wpt[1] < numWarps)\n-      wpt[0] = std::clamp<int>(wpt[0] * 2, 1, shape[0] / spw[0]);\n-    if (wpt[0] * wpt[1] < numWarps)\n-      wpt[1] = std::clamp<int>(wpt[1] * 2, 1, shape[1] / spw[1]);\n-  } while (wpt_nm1 != wpt);\n-\n-  return wpt;\n-}\n-\n SmallVector<unsigned, 2> warpsPerTileV2(triton::DotOp dotOp,\n                                         const ArrayRef<int64_t> shape,\n                                         int numWarps) {"}]