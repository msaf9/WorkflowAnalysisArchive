[{"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "file_content_changes": "@@ -7,7 +7,7 @@\n import os\n import subprocess\n import textwrap\n-from collections import namedtuple\n+from collections import defaultdict, namedtuple\n \n import torch\n \n@@ -252,7 +252,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n     if stream is None and not warmup:\n       stream = get_cuda_stream(device)\n     try:\n-      bin = cache[key]\n+      bin = cache[device][key]\n       if not warmup:\n           bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, triton.compiler.CompiledKernel.launch_enter_hook, triton.compiler.CompiledKernel.launch_exit_hook, bin, {args})\n       return bin\n@@ -271,12 +271,11 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n       for i, arg in constants.items():\n         if callable(arg):\n           raise TypeError(f\"Callable constexpr at index {i} is not supported\")\n-      device = 0\n       if not self._call_hook(key, signature, device, constants, num_warps, num_stages, extern_libs, configs):\n         bin = triton.compile(self, signature, device, constants, num_warps, num_stages, extern_libs=extern_libs, configs=configs)\n         if not warmup:\n             bin.c_wrapper(grid_0, grid_1, grid_2, bin.num_warps, bin.shared, stream, bin.cu_function, triton.compiler.CompiledKernel.launch_enter_hook, triton.compiler.CompiledKernel.launch_exit_hook, bin, *args)\n-        self.cache[key] = bin\n+        self.cache[device][key] = bin\n         return bin\n       return None\n \"\"\"\n@@ -301,7 +300,7 @@ def __init__(self, fn, version=None, do_not_specialize=None):\n         self.src = textwrap.dedent(inspect.getsource(fn))\n         self.src = self.src[self.src.find(\"def\"):]\n         # cache of just-in-time compiled kernels\n-        self.cache = dict()\n+        self.cache = defaultdict(dict)\n         self.hash = None\n         # JITFunction can be instantiated as kernel\n         # when called with a grid using __getitem__"}]