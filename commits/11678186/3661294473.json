[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPU.cpp", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "file_content_changes": "@@ -262,10 +262,10 @@ struct TritonCatPattern : public OpConversionPattern<triton::CatOp> {\n     // For now, this behaves like generic, but this will evolve when\n     // we add support for `can_reorder=False`\n     Type retType = this->getTypeConverter()->convertType(op.getType());\n-    rewriter.replaceOpWithNewOp<triton::CatOp>(op, retType, adaptor.getOperands());\n+    rewriter.replaceOpWithNewOp<triton::CatOp>(op, retType,\n+                                               adaptor.getOperands());\n     return success();\n   }\n-\n };\n \n struct TritonTransPattern : public OpConversionPattern<triton::TransOp> {\n@@ -450,13 +450,11 @@ void populateTritonPatterns(TritonGPUTypeConverter &typeConverter,\n       TritonGenericPattern<triton::IntToPtrOp>,\n       TritonGenericPattern<triton::PtrToIntOp>,\n       TritonGenericPattern<triton::SplatOp>, TritonBroadcastPattern,\n-      TritonGenericPattern<triton::AddPtrOp>, \n-      TritonCatPattern,\n-      TritonReducePattern,\n-      TritonTransPattern, TritonExpandDimsPattern, TritonMakeRangePattern,\n-      TritonDotPattern, TritonLoadPattern, TritonStorePattern,\n-      TritonExtElemwisePattern, TritonPrintfPattern, TritonAtomicRMWPattern>(\n-      typeConverter, context);\n+      TritonGenericPattern<triton::AddPtrOp>, TritonCatPattern,\n+      TritonReducePattern, TritonTransPattern, TritonExpandDimsPattern,\n+      TritonMakeRangePattern, TritonDotPattern, TritonLoadPattern,\n+      TritonStorePattern, TritonExtElemwisePattern, TritonPrintfPattern,\n+      TritonAtomicRMWPattern>(typeConverter, context);\n }\n \n //"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -782,8 +782,8 @@ class BlockedToMMA : public mlir::RewritePattern {\n                                                  newRetType.getEncoding()));\n     a = rewriter.create<triton::gpu::ConvertLayoutOp>(a.getLoc(), newAType, a);\n     b = rewriter.create<triton::gpu::ConvertLayoutOp>(b.getLoc(), newBType, b);\n-    auto newDot = rewriter.create<triton::DotOp>(\n-        dotOp.getLoc(), newRetType, a, b, newAcc, dotOp.allowTF32());\n+    auto newDot = rewriter.create<triton::DotOp>(dotOp.getLoc(), newRetType, a,\n+                                                 b, newAcc, dotOp.allowTF32());\n \n     rewriter.replaceOpWithNewOp<triton::gpu::ConvertLayoutOp>(\n         op, oldRetType, newDot.getResult());"}]