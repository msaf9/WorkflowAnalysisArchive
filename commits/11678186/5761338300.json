[{"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -125,7 +125,7 @@ unsigned ReduceOpHelper::getScratchSizeInBytes() {\n \n   unsigned bytesPerElem = 0;\n   for (const auto &ty : srcElementTypes) {\n-    bytesPerElem += ty.getIntOrFloatBitWidth() / 8;\n+    bytesPerElem += (ty.getIntOrFloatBitWidth() + 7) / 8;\n   }\n   return bytesPerElem * elems;\n }"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "file_content_changes": "@@ -1253,3 +1253,19 @@ module attributes {\"triton_gpu.num-warps\" = 1 : i32} {\n     tt.return\n   }\n }\n+\n+// -----\n+#blocked = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 2], order = [1, 0]}>\n+#slice = #triton_gpu.slice<{dim = 1, parent = #blocked}>\n+module attributes {\"triton_gpu.num-warps\" = 2 : i32} {\n+  // CHECK-LABEL: reduce_bools\n+  tt.func public @reduce_bools(%arg: tensor<256x2xi1, #blocked>) {\n+    // CHECK: llvm.mlir.addressof @global_smem\n+    %24 = \"tt.reduce\"(%arg) <{axis = 1 : i32}> ({\n+    ^bb0(%arg4: i1, %arg5: i1):\n+      %48 = arith.ori %arg4, %arg5 : i1\n+      tt.reduce.return %48 : i1\n+    }) : (tensor<256x2xi1, #blocked>) -> tensor<256xi1, #slice>\n+    tt.return\n+  }\n+}"}]