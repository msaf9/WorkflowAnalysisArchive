[{"filename": "python/triton/debugger/debugger.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -4,12 +4,13 @@\n \n import triton\n import triton.language as tl\n-from . import torch_wrapper as torch\n from .core import ExecutionContext\n from .memory_map import MemoryMap\n from .tl_lang import (TritonLangProxy, WrappedTensor, _primitive_to_tensor,\n                       debugger_constexpr)\n+from triton.debugger import torch_wrapper\n \n+torch = torch_wrapper.torch\n tl_method_backup = {}\n \n "}, {"filename": "python/triton/debugger/memory_map.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -1,6 +1,8 @@\n import dataclasses\n \n-from triton.debugger import torch_wrapper as torch\n+from triton.debugger import torch_wrapper\n+\n+torch = torch_wrapper.torch\n \n \n @dataclasses.dataclass"}, {"filename": "python/triton/debugger/tl_lang.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -1,7 +1,9 @@\n import triton\n-from . import torch_wrapper as torch\n from .core import ExecutionContext\n from .memory_map import MemoryMap\n+from triton.debugger import torch_wrapper\n+\n+torch = torch_wrapper.torch\n \n \n def _primitive_to_tensor(x):"}, {"filename": "python/triton/debugger/torch_wrapper.py", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "file_content_changes": "@@ -3,15 +3,16 @@\n except ImportError:\n     _torch = None\n \n-import sys\n-from types import ModuleType\n \n+class TorchWrapper:\n+    \"\"\"\n+    Helps in making torch an optional dependency\n+    \"\"\"\n \n-class _Wrapper(ModuleType):\n     def __getattr__(self, name):\n         if _torch is None:\n             raise ImportError(\"Triton requires PyTorch to be installed\")\n         return getattr(_torch, name)\n \n \n-sys.modules[__name__] = _Wrapper(__name__)\n+torch = TorchWrapper()"}]