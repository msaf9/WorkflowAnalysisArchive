[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "file_content_changes": "@@ -1268,10 +1268,9 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n \n public:\n   UpdateMMAVersionMinorForVolta(\n-      mlir::MLIRContext *ctx,\n+      mlir::MLIRContext *ctx, llvm::StringRef opName,\n       const DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate)\n-      : RewritePattern(MatchAnyOpTypeTag{}, 1 /*benefit*/, ctx),\n-        mmaToUpdate(mmaToUpdate) {}\n+      : RewritePattern(opName, 1 /*benefit*/, ctx), mmaToUpdate(mmaToUpdate) {}\n \n   LogicalResult match(Operation *op) const override {\n     MmaEncodingAttr mma;\n@@ -1285,8 +1284,6 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n \n     // ConvertLayoutOp\n     if (auto cvt = llvm::dyn_cast<ConvertLayoutOp>(op)) {\n-      auto srcTensorTy =\n-          cvt.getOperand().getType().dyn_cast<RankedTensorType>();\n       // cvt X -> dot_operand\n       if (auto dotOperand =\n               tensorTy.getEncoding().dyn_cast<DotOperandEncodingAttr>()) {\n@@ -1504,18 +1501,23 @@ class TritonGPUCombineOpsPass\n         signalPassFailure();\n     }\n     {\n-      mlir::RewritePatternSet patterns(context);\n-      patterns.add<UpdateMMAVersionMinorForVolta>(context, mmaToUpdate);\n+      mlir::RewritePatternSet ps(context);\n+      ps.add<UpdateMMAVersionMinorForVolta>(context, DotOp::getOperationName(),\n+                                            mmaToUpdate);\n+      ps.add<UpdateMMAVersionMinorForVolta>(\n+          context, ConvertLayoutOp::getOperationName(), mmaToUpdate);\n+      ps.add<UpdateMMAVersionMinorForVolta>(\n+          context, arith::ConstantOp::getOperationName(), mmaToUpdate);\n       mlir::GreedyRewriteConfig config;\n       config.useTopDownTraversal = true;\n \n-      if (applyPatternsAndFoldGreedily(m, std::move(patterns), config).failed())\n+      if (applyPatternsAndFoldGreedily(m, std::move(ps), config).failed())\n         signalPassFailure();\n     }\n     {\n-      mlir::RewritePatternSet patterns(context);\n-      patterns.add<RematerializeForloop>(context, mmaToUpdate);\n-      if (applyPatternsAndFoldGreedily(m, std::move(patterns)).failed())\n+      mlir::RewritePatternSet ps(context);\n+      ps.add<RematerializeForloop>(context, mmaToUpdate);\n+      if (applyPatternsAndFoldGreedily(m, std::move(ps)).failed())\n         signalPassFailure();\n     }\n "}]