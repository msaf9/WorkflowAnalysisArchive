[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "file_content_changes": "@@ -2493,14 +2493,18 @@ def test_default(device):\n     ret1 = torch.zeros(1, dtype=torch.int32, device=device)\n \n     @triton.jit\n-    def _kernel(ret0, ret1, value):\n+    def _kernel(ret0, ret1, value=3):\n         tl.store(ret0, _impl())\n         tl.store(ret1, _impl(value))\n \n     _kernel[(1,)](ret0, ret1, value)\n     assert ret0.item() == 10\n     assert ret1.item() == value\n \n+    _kernel[(1,)](ret0, ret1)\n+    assert ret0.item() == 10\n+    assert ret1.item() == 3\n+\n # ---------------\n # test noop\n # ----------------"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "file_content_changes": "@@ -316,9 +316,10 @@ def _make_launcher(self):\n \n         spec_keys = ', '.join(specializations)\n         grid_args = ','.join([f'\"{arg}\": {arg}' for arg in self.arg_names])\n+        args_signature = ', '.join(name if dflt == inspect._empty else f'{name} = {dflt}' for name, dflt in zip(self.arg_names, self.arg_defaults))\n \n         src = f\"\"\"\n-def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stages=3, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n+def {self.fn.__name__}({args_signature}, grid=None, num_warps=4, num_stages=3, extern_libs=None, stream=None, warmup=False, device=None, device_type=None):\n     from ..compiler import compile, CompiledKernel\n     sig_key =  {sig_keys},\n     constexpr_key = {f'{constexpr_keys},' if len(constexpr_keys) > 0 else ()}\n@@ -327,6 +328,7 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n     if not extern_libs is None:\n       key = (key, tuple(extern_libs.items()))\n     assert num_warps > 0 and (num_warps & (num_warps - 1)) == 0, \"num_warps must be a power of 2\"\n+    assert grid is not None\n     if callable(grid):\n         grid = grid({{{grid_args}}})\n     grid_size = len(grid)\n@@ -407,7 +409,8 @@ def __init__(self, fn, version=None, do_not_specialize=None, debug=None, noinlin\n         # function signature information\n         signature = inspect.signature(fn)\n         self.arg_names = [v.name for v in signature.parameters.values()]\n-        self.has_defaults = any(v.default != inspect._empty for v in signature.parameters.values())\n+        self.arg_defaults = [v.default for v in signature.parameters.values()]\n+        self.has_defaults = any(v != inspect._empty for v in self.arg_defaults)\n         # specialization hints\n         self.do_not_specialize = [] if do_not_specialize is None else do_not_specialize\n         self.do_not_specialize = {self.arg_names.index(arg) if isinstance(arg, str) else arg for arg in self.do_not_specialize}"}]