[{"filename": "python/tutorials/06-fused-attention.py", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "file_content_changes": "@@ -23,16 +23,10 @@ def max_fn(x, y):\n     return tl.math.max(x, y)\n \n \n-@triton.autotune(\n-    configs=[\n-        triton.Config({'BLOCK_M': BLOCK_M, 'BLOCK_N': BLOCK_N}, num_stages=num_stages, num_warps=num_warps)\n-        for BLOCK_M in [32, 64, 128] for BLOCK_N in [32, 64, 128] for num_stages in [2, 3, 4] for num_warps in [4, 8]],\n-    key=['N_CTX']\n-)\n @triton.jit\n def _fwd_kernel(\n     Q, K, V, sm_scale,\n-    L, M,\n+    L,\n     Out,\n     stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n@@ -113,9 +107,7 @@ def _fwd_kernel(\n     # write back l and m\n     acc = acc / l_i[:, None]\n     l_ptrs = L + off_hz * N_CTX + offs_m\n-    m_ptrs = M + off_hz * N_CTX + offs_m\n-    tl.store(l_ptrs, l_i)\n-    tl.store(m_ptrs, m_i)\n+    tl.store(l_ptrs, m_i + tl.math.log2(l_i))\n     # write back O\n     O_block_ptr = tl.make_block_ptr(\n         base=Out + qvk_offset,\n@@ -130,7 +122,7 @@ def _fwd_kernel(\n \n @triton.jit\n def _bwd_preprocess(\n-    Out, DO, L,\n+    Out, DO,\n     NewDO, Delta,\n     BLOCK_M: tl.constexpr, D_HEAD: tl.constexpr,\n ):\n@@ -139,9 +131,7 @@ def _bwd_preprocess(\n     # load\n     o = tl.load(Out + off_m[:, None] * D_HEAD + off_n[None, :]).to(tl.float32)\n     do = tl.load(DO + off_m[:, None] * D_HEAD + off_n[None, :]).to(tl.float32)\n-    denom = tl.load(L + off_m).to(tl.float32)\n     # compute\n-    do = do / denom[:, None]\n     delta = tl.sum(o * do, axis=1)\n     # write-back\n     tl.store(NewDO + off_m[:, None] * D_HEAD + off_n[None, :], do)\n@@ -152,7 +142,7 @@ def _bwd_preprocess(\n def _bwd_kernel(\n     Q, K, V, sm_scale, Out, DO,\n     DQ, DK, DV,\n-    L, M,\n+    L,\n     D,\n     stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n@@ -161,7 +151,7 @@ def _bwd_kernel(\n     num_block,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n-    MODE: tl.constexpr,\n+    CAUSAL: tl.constexpr,\n ):\n     off_hz = tl.program_id(0)\n     off_z = off_hz // H\n@@ -176,10 +166,10 @@ def _bwd_kernel(\n     DK += off_z * stride_qz + off_h * stride_qh\n     DV += off_z * stride_qz + off_h * stride_qh\n     for start_n in range(0, num_block):\n-        if MODE == 0:\n-            lo = 0\n-        else:\n+        if CAUSAL:\n             lo = start_n * BLOCK_M\n+        else:\n+            lo = 0\n         # initialize row/col offsets\n         offs_qm = lo + tl.arange(0, BLOCK_M)\n         offs_n = start_n * BLOCK_M + tl.arange(0, BLOCK_M)\n@@ -193,7 +183,7 @@ def _bwd_kernel(\n         dq_ptrs = DQ + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n         # pointer to row-wise quantities in value-like data\n         D_ptrs = D + off_hz * N_CTX\n-        m_ptrs = M + off_hz * N_CTX\n+        l_ptrs = L + off_hz * N_CTX\n         # initialize dv amd dk\n         dv = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n         dk = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n@@ -206,16 +196,14 @@ def _bwd_kernel(\n             # load q, k, v, do on-chip\n             q = tl.load(q_ptrs)\n             # recompute p = softmax(qk, dim=-1).T\n-            # NOTE: `do` is pre-divided by `l`; no normalization here\n-            # if MODE == 1:\n-            if MODE == 1:\n+            if CAUSAL:\n                 qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), float(0.), float(\"-inf\"))\n             else:\n                 qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n             qk += tl.dot(q, tl.trans(k))\n             qk *= qk_scale\n-            m = tl.load(m_ptrs + offs_m_curr)\n-            p = tl.math.exp2(qk - m[:, None])\n+            l_i = tl.load(l_ptrs + offs_m_curr)\n+            p = tl.math.exp2(qk - l_i[:, None])\n             # compute dv\n             do = tl.load(do_ptrs)\n             dv += tl.dot(tl.trans(p.to(Q.dtype.element_ty)), do)\n@@ -254,29 +242,27 @@ def forward(ctx, q, k, v, causal, sm_scale):\n         assert Lq == Lk and Lk == Lv\n         assert Lk in {16, 32, 64, 128}\n         o = torch.empty_like(q)\n-        # BLOCK_M = 128\n-        # BLOCK_N = 64\n-        grid = lambda args: (triton.cdiv(q.shape[2], args['BLOCK_M']), q.shape[0] * q.shape[1], 1)\n+        BLOCK_M = 128\n+        BLOCK_N = 64\n+        grid = (triton.cdiv(q.shape[2], BLOCK_M), q.shape[0] * q.shape[1], 1)\n         L = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n-        m = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n \n-        # num_warps = 4 if Lk <= 64 else 8\n+        num_warps = 4 if Lk <= 64 else 8\n         _fwd_kernel[grid](\n             q, k, v, sm_scale,\n-            L, m,\n+            L,\n             o,\n             q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n             k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n             v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n             o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n             q.shape[0], q.shape[1], q.shape[2],\n-            BLOCK_DMODEL=Lk,\n+            BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N, BLOCK_DMODEL=Lk,\n             IS_CAUSAL=causal,\n-            # num_warps=num_warps,\n-            # num_stages=4\n-        )\n+            num_warps=num_warps,\n+            num_stages=4)\n \n-        ctx.save_for_backward(q, k, v, o, L, m)\n+        ctx.save_for_backward(q, k, v, o, L)\n         ctx.grid = grid\n         ctx.sm_scale = sm_scale\n         ctx.BLOCK_DMODEL = Lk\n@@ -286,36 +272,31 @@ def forward(ctx, q, k, v, causal, sm_scale):\n     @staticmethod\n     def backward(ctx, do):\n         BLOCK = 128\n-        q, k, v, o, l, m = ctx.saved_tensors\n+        q, k, v, o, L = ctx.saved_tensors\n         do = do.contiguous()\n         dq = torch.zeros_like(q, dtype=torch.float32)\n         dk = torch.empty_like(k)\n         dv = torch.empty_like(v)\n         do_scaled = torch.empty_like(do)\n-        delta = torch.empty_like(l)\n-        if ctx.causal:\n-            mode = 1\n-        else:\n-            mode = 0\n+        delta = torch.empty_like(L)\n         _bwd_preprocess[(ctx.grid[0] * ctx.grid[1], )](\n-            o, do, l,\n+            o, do,\n             do_scaled, delta,\n             BLOCK_M=BLOCK, D_HEAD=ctx.BLOCK_DMODEL,\n         )\n         _bwd_kernel[(ctx.grid[1],)](\n             q, k, v, ctx.sm_scale,\n             o, do_scaled,\n             dq, dk, dv,\n-            l, m,\n-            delta,\n+            L, delta,\n             q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n             k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n             v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n             q.shape[0], q.shape[1], q.shape[2],\n             ctx.grid[0],\n             BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n             BLOCK_DMODEL=ctx.BLOCK_DMODEL, num_warps=8,\n-            MODE=mode,\n+            CAUSAL=ctx.causal,\n             num_stages=1,\n         )\n         return dq, dk, dv, None, None\n@@ -364,19 +345,19 @@ def test_op(Z, H, N_CTX, D_HEAD, causal, dtype=torch.float16):\n except BaseException:\n     HAS_FLASH = False\n \n-BATCH, N_HEADS, N_CTX, D_HEAD = 4, 48, 4096, 32\n+BATCH, N_HEADS, N_CTX, D_HEAD = 4, 48, 4096, 64\n # vary seq length for fixed head and batch=4\n configs = [triton.testing.Benchmark(\n     x_names=['N_CTX'],\n-    x_vals=[2**i for i in range(12, 13)],\n+    x_vals=[2**i for i in range(10, 15)],\n     line_arg='provider',\n     line_vals=['triton'] + (['flash'] if HAS_FLASH else []),\n     line_names=['Triton'] + (['Flash'] if HAS_FLASH else []),\n     styles=[('red', '-'), ('blue', '-')],\n     ylabel='ms',\n     plot_name=f'fused-attention-batch{BATCH}-head{N_HEADS}-d{D_HEAD}-{mode}',\n     args={'H': N_HEADS, 'BATCH': BATCH, 'D_HEAD': D_HEAD, 'dtype': torch.float16, 'mode': mode, 'causal': causal}\n-) for mode in ['fwd'] for causal in [False]]\n+) for mode in ['bwd'] for causal in [False]]\n \n \n @triton.testing.perf_report(configs)"}]