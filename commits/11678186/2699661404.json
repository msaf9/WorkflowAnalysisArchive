[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "file_content_changes": "@@ -982,7 +982,7 @@ def __call__(self, *wargs, grid, num_warps=4, num_stages=2, extern_libs={}, **kw\n         if device not in self.cache_key:\n             cc = torch.cuda.get_device_capability(device)\n             cc = str(cc[0]) + '-' + str(cc[1])\n-            self.cache_key[device] = self.fn.cache_key + cc\n+            self.cache_key[device] = self.fn.cache_key(wargs) + cc\n         cache_key = self.cache_key[device]\n         stream = current_cuda_stream(device)\n         return _triton.runtime.launch(wargs, self.fn.do_not_specialize, cache_key, self.fn.arg_names,\n@@ -1124,12 +1124,26 @@ def version_key():\n \n class DependenciesFinder(ast.NodeVisitor):\n \n-    def __init__(self, globals, src) -> None:\n+    def __init__(self, globals, src, wargs) -> None:\n         super().__init__()\n         self.ret = hashlib.md5(src.encode(\"utf-8\")).hexdigest()\n         self.globals = globals\n+        self.locals = {}\n+        self.constants = {i: arg.value for i, arg in enumerate(wargs) if isinstance(arg, triton.language.constexpr)}\n+        self.constants.update({i: None for i, arg in enumerate(wargs) if arg is None})\n+\n+    def visit_FunctionDef(self, node):\n+        arg_names, _ = self.visit(node.args)\n+        for i, arg_name in enumerate(arg_names):\n+            if i in self.constants:\n+                cst = self.constants[i]\n+                if not isinstance(cst, triton.language.constexpr):\n+                    cst = triton.language.constexpr(self.constants[i])\n+                self.locals[arg_name] = cst\n \n     def visit_Name(self, node):\n+        if node.id in self.locals:\n+            return self.locals[node.id]\n         return self.globals.get(node.id, None)\n \n     def visit_Attribute(self, node):\n@@ -1142,6 +1156,8 @@ def visit_Attribute(self, node):\n \n     def visit_Call(self, node):\n         func = self.visit(node.func)\n+        if isinstance(func, triton.language.constexpr):\n+            func = func.value\n         if func is None:\n             return\n         if inspect.isbuiltin(func):\n@@ -1198,12 +1214,10 @@ def __init__(self, fn, version=None, inline=True, do_not_specialize=None):\n         self.__globals__ = fn.__globals__\n         self.__module__ = fn.__module__\n \n-    @property\n-    @functools.lru_cache()\n-    def cache_key(self):\n+    def cache_key(self, wargs):\n         # TODO : hash should be attribute of `self`\n         if self.hash is None:\n-            dependencies_finder = DependenciesFinder(globals=self.__globals__, src=self.src)\n+            dependencies_finder = DependenciesFinder(globals=self.__globals__, src=self.src, wargs=wargs)\n             dependencies_finder.visit(self.parse())\n             self.hash = dependencies_finder.ret + version_key()\n         return self.hash\n@@ -1231,7 +1245,6 @@ def __setattr__(self, name, value):\n         super(JITFunction, self).__setattr__(name, value)\n         if name == 'src':\n             self.hash = None\n-            JITFunction.cache_key.fget.cache_clear()\n \n     def _init_kernel(self):\n         if self.kernel is None:"}]