[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPU.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -226,9 +226,10 @@ struct TritonDotPattern : public OpConversionPattern<triton::DotOp> {\n     auto typeConverter = cast<TritonGPUTypeConverter>(getTypeConverter());\n     int numWarps = typeConverter->getNumWarps();\n \n-    // probably not as efficient as it could be\n-    SmallVector<unsigned> retSizePerThread = {2, 2};\n-    if(origShape[0] >= 32 || origShape[1] >= 32)\n+    SmallVector<unsigned> retSizePerThread = {1, 1};\n+    if(origShape[0]*origShape[1] / (numWarps*32) >= 4)\n+      retSizePerThread = {2, 2};\n+    if(origShape[0]*origShape[1] / (numWarps*32) >= 16)\n       retSizePerThread = {4, 4};\n     SmallVector<unsigned> retOrder = {1, 0};\n     Attribute dEncoding = triton::gpu::BlockedEncodingAttr::get("}]