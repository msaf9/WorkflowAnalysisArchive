[{"filename": "lib/Dialect/Triton/IR/Ops.cpp", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "file_content_changes": "@@ -295,8 +295,7 @@ OpFoldResult SplatOp::fold(FoldAdaptor adaptor) {\n   if (!value)\n     return {};\n   auto shapedType = getType().cast<ShapedType>();\n-  auto ret = SplatElementsAttr::get(\n-      shapedType, ArrayRef<Attribute>(value));\n+  auto ret = SplatElementsAttr::get(shapedType, ArrayRef<Attribute>(value));\n   return ret;\n }\n \n@@ -329,15 +328,16 @@ mlir::LogicalResult mlir::triton::ExpandDimsOp::inferReturnTypes(\n   return mlir::success();\n }\n \n-LogicalResult ExpandDimsOp::canonicalize(ExpandDimsOp op, PatternRewriter &rewriter) {\n+LogicalResult ExpandDimsOp::canonicalize(ExpandDimsOp op,\n+                                         PatternRewriter &rewriter) {\n   auto definingOp = op.getOperand().getDefiningOp();\n   if (!definingOp) {\n     return mlir::failure();\n   }\n   // expand_dims(splat) -> splat\n   if (auto splat = dyn_cast<triton::SplatOp>(definingOp)) {\n-    rewriter.replaceOpWithNewOp<triton::SplatOp>(\n-      op, op.getType(), splat.getOperand());\n+    rewriter.replaceOpWithNewOp<triton::SplatOp>(op, op.getType(),\n+                                                 splat.getOperand());\n     return mlir::success();\n   }\n   return mlir::failure();\n@@ -361,23 +361,24 @@ OpFoldResult ExpandDimsOp::fold(FoldAdaptor adaptor) {\n \n //-- ViewOp --\n template <typename OpType>\n-LogicalResult canonicalizeViewOrBroadcast(OpType op, PatternRewriter &rewriter) {\n+LogicalResult canonicalizeViewOrBroadcast(OpType op,\n+                                          PatternRewriter &rewriter) {\n   auto definingOp = op.getOperand().getDefiningOp();\n   if (!definingOp) {\n     return mlir::failure();\n   }\n \n   // view(view) -> view\n   if (auto parent_view = dyn_cast<OpType>(definingOp)) {\n-    rewriter.replaceOpWithNewOp<OpType>(\n-      op, op.getType(), parent_view.getOperand());\n+    rewriter.replaceOpWithNewOp<OpType>(op, op.getType(),\n+                                        parent_view.getOperand());\n     return mlir::success();\n   }\n \n   // view(splat) -> splat\n   if (auto splat = dyn_cast<triton::SplatOp>(definingOp)) {\n-    rewriter.replaceOpWithNewOp<triton::SplatOp>(\n-      op, op.getType(), splat.getOperand());\n+    rewriter.replaceOpWithNewOp<triton::SplatOp>(op, op.getType(),\n+                                                 splat.getOperand());\n     return mlir::success();\n   }\n \n@@ -387,7 +388,6 @@ LogicalResult ViewOp::canonicalize(ViewOp op, PatternRewriter &rewriter) {\n   return canonicalizeViewOrBroadcast(op, rewriter);\n }\n \n-\n OpFoldResult ViewOp::fold(FoldAdaptor adaptor) {\n   if (getType() == getOperand().getType()) {\n     // no-op\n@@ -398,7 +398,8 @@ OpFoldResult ViewOp::fold(FoldAdaptor adaptor) {\n }\n \n //-- BroadcastOp --\n-LogicalResult BroadcastOp::canonicalize(BroadcastOp op, PatternRewriter &rewriter) {\n+LogicalResult BroadcastOp::canonicalize(BroadcastOp op,\n+                                        PatternRewriter &rewriter) {\n   return canonicalizeViewOrBroadcast(op, rewriter);\n }\n "}]