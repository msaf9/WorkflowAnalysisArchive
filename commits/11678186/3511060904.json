[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "file_content_changes": "@@ -1036,7 +1036,7 @@ struct LoadStoreConversionBase : public ConvertTritonGPUOpToLLVMPatternBase {\n   // Get corresponding LLVM element values of \\param value.\n   static SmallVector<Value> getLLVMElems(Value value, Value llValue,\n                                          ConversionPatternRewriter &rewriter,\n-                                         Location loc) const {\n+                                         Location loc) {\n     if (!value)\n       return {};\n     if (!llValue.getType().isa<LLVM::LLVMStructType>())\n@@ -2694,7 +2694,7 @@ struct ElementwiseOpConversion\n \n   explicit ElementwiseOpConversion(LLVMTypeConverter &typeConverter,\n                                    PatternBenefit benefit = 1)\n-      : ElementwiseOpConversionBase<SourceOp, DestOp, ElementwiseOpConversion>(\n+      : ElementwiseOpConversionBase<SourceOp, ElementwiseOpConversion>(\n             typeConverter, benefit) {}\n \n   // An interface to support variant DestOp builder.\n@@ -2763,7 +2763,7 @@ struct CmpFOpConversion\n   static LLVM::FCmpOp createDestOp(triton::gpu::CmpFOp op, OpAdaptor adaptor,\n                                    ConversionPatternRewriter &rewriter,\n                                    Type elemTy, ValueRange operands,\n-                                   Location loc) const {\n+                                   Location loc) {\n     return rewriter.create<LLVM::FCmpOp>(\n         loc, elemTy, ArithCmpFPredicteToLLVM(op.predicate()), operands[0],\n         operands[1]);\n@@ -3255,7 +3255,6 @@ class MMA16816SmemLoader {\n     cMatShape = matShape[order[0]];\n     sMatShape = matShape[order[1]];\n \n-    Stride = smemStrides[1];\n     sStride = smemStrides[0];\n \n     // rule: k must be the fast-changing axis.\n@@ -5880,9 +5879,9 @@ struct FDivOpConversion\n       assert(0 && bitwidth && \"not supported\");\n     }\n \n-    auto res = ptxBuilder.newOperand(bidwith == 32 ? \"=r\" : \"=l\");\n-    auto lhs = ptxBuilder.newOperand(operands[0], bidwidth == 32 ? \"r\" : \"l\");\n-    auto rhs = ptxBuilder.newOperand(operands[1], bidwidth == 32 ? \"r\" : \"l\");\n+    auto res = ptxBuilder.newOperand(bitwidth == 32 ? \"=r\" : \"=l\");\n+    auto lhs = ptxBuilder.newOperand(operands[0], bitwidth == 32 ? \"r\" : \"l\");\n+    auto rhs = ptxBuilder.newOperand(operands[1], bitwidth == 32 ? \"r\" : \"l\");\n     fdiv(res, lhs, rhs);\n \n     Value ret = ptxBuilder.launch(rewriter, loc, elemTy, false);"}]