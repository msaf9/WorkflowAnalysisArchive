[{"filename": "python/tests/test_vecadd.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "file_content_changes": "@@ -26,11 +26,13 @@ def kernel(x_ptr,\n             offset = pid * block_size + tl.arange(0, iter_size)\n             x_ptrs = x_ptr + offset\n             y_ptrs = y_ptr + offset\n+\n             x = tl.load(x_ptrs)\n             y = tl.load(y_ptrs)\n             z = x + y\n             z_ptrs = z_ptr + offset\n             tl.store(z_ptrs, z)\n+\n             x_ptr += iter_size\n             y_ptr += iter_size\n             z_ptr += iter_size\n@@ -66,8 +68,9 @@ def kernel(x_ptr,\n         @num_elements: number of elements\n         '''\n         pid = tl.program_id(axis=0)\n-        offset = pid * block_size + tl.arange(0, iter_size)\n         for i in range(math.ceil(block_size / iter_size)):\n+            # TODO: a bug here, if put the offset outside the forloop, there will be a GPU mis-aligned error.\n+            offset = pid * block_size + tl.arange(0, iter_size)\n             x_ptrs = x_ptr + offset\n             y_ptrs = y_ptr + offset\n "}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "file_content_changes": "@@ -18,7 +18,6 @@\n from sysconfig import get_paths\n from typing import Any, Dict, Tuple, Union\n \n-import astunparse\n import setuptools\n import torch\n from filelock import FileLock\n@@ -722,21 +721,6 @@ def visit_BoolOp(self, node: ast.BoolOp):\n         else:\n             return getattr(lhs, fn)(rhs)\n \n-        return\n-\n-        print(astunparse.unparse(node))\n-        values = node.values\n-        print('values', [astunparse.unparse(v) for v in values])\n-        print('op', node.op)\n-        if isinstance(node.value, bool):\n-            return node.value\n-        elif isinstance(node.value, int):\n-            return self.builder.create_icmpNE(node.value, 0)\n-        elif isinstance(node.value, float):\n-            return self.builder.create_fcmpNE(node.value, 0.)\n-        else:\n-            raise NotImplementedError(\"Unsupported BoolOp with value: {}\".format(node.value))\n-\n     if sys.version_info < (3, 8):\n         def visit_NameConstant(self, node):\n             return triton.language.constexpr(node.value)\n@@ -983,7 +967,6 @@ def _compile(fn, signature: str, device: int = -1, constants=dict(), specializat\n \n     # llvm-ir\n     llvm_ir = make_llvm_ir(module)\n-    print(llvm_ir)\n \n     assert device >= 0, \"device should be provided.\"\n     ptxas, cuda_version = path_to_ptxas()"}]