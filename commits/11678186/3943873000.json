[{"filename": "lib/Conversion/TritonGPUToLLVM/DotOpHelpers.h", "status": "modified", "additions": 43, "deletions": 50, "changes": 93, "file_content_changes": "@@ -93,6 +93,13 @@ struct DotOpMmaV1ConversionHelper {\n \n   static ArrayRef<unsigned> getMmaInstrShape() { return instrShape; }\n \n+  static Type getMatType(TensorType operand) {\n+    auto *ctx = operand.getContext();\n+    Type fp16Ty = type::f16Ty(ctx);\n+    Type vecTy = vec_ty(fp16Ty, 2);\n+    return struct_ty(SmallVector<Type>{vecTy});\n+  }\n+\n   static Type getMmaRetType(TensorType operand) {\n     auto *ctx = operand.getContext();\n     Type fp32Ty = type::f32Ty(ctx);\n@@ -538,17 +545,17 @@ struct DotOpMmaV2ConversionHelper {\n \n   // The type of matrix that loaded by either a ldmatrix or composed lds.\n   Type getMatType() const {\n-    Type fp32Ty = type::f32Ty(ctx);\n+    // floating point types\n+    Type fp32x1Ty = vec_ty(type::f32Ty(ctx), 1);\n     Type fp16x2Ty = vec_ty(type::f16Ty(ctx), 2);\n     Type i16x2Ty = vec_ty(type::i16Ty(ctx), 2);\n-    // floating point types\n     Type fp16x2Pack4Ty =\n         LLVM::LLVMStructType::getLiteral(ctx, SmallVector<Type>(4, fp16x2Ty));\n     // LLVM 14.0 does not support bf16 type, so we use i16 instead.\n     Type bf16x2Pack4Ty =\n         LLVM::LLVMStructType::getLiteral(ctx, SmallVector<Type>(4, i16x2Ty));\n     Type fp32Pack4Ty =\n-        LLVM::LLVMStructType::getLiteral(ctx, SmallVector<Type>(4, fp32Ty));\n+        LLVM::LLVMStructType::getLiteral(ctx, SmallVector<Type>(4, fp32x1Ty));\n     // integer types\n     Type i8x4Ty = vec_ty(type::i8Ty(ctx), 4);\n     Type i8x4Pack4Ty =\n@@ -960,7 +967,7 @@ class MMA16816SmemLoader {\n   // Load 4 matrices and returns 4 vec<2> elements.\n   std::tuple<Value, Value, Value, Value>\n   loadX4(int mat0, int mat1, ArrayRef<Value> offs, ArrayRef<Value> ptrs,\n-         Type ldmatrixRetTy, Type shemPtrTy) const {\n+         Type matTy, Type shemPtrTy) const {\n     assert(mat0 % 2 == 0 && mat1 % 2 == 0 &&\n            \"smem matrix load must be aligned\");\n     int matIdx[2] = {mat0, mat1};\n@@ -983,6 +990,9 @@ class MMA16816SmemLoader {\n \n     Value ptr = getPtr(ptrIdx);\n \n+    // The struct should have exactly the same element types.\n+    Type elemTy = matTy.cast<LLVM::LLVMStructType>().getBody()[0];\n+\n     if (canUseLdmatrix) {\n       Value sOffset =\n           mul(i32_val(matIdx[order[1]] * sMatStride * sMatShape), sStride);\n@@ -1000,20 +1010,12 @@ class MMA16816SmemLoader {\n       ldmatrix(resArgs, addrArg);\n \n       // The result type is 4xi32, each i32 is composed of 2xf16\n-      // elements(adjacent two columns in a row)\n-      Value resV4 = builder.launch(rewriter, loc, ldmatrixRetTy);\n-\n-      auto getIntAttr = [&](int v) {\n-        return ArrayAttr::get(ctx, {IntegerAttr::get(i32_ty, v)});\n-      };\n-\n-      // The struct should have exactly the same element types.\n-      Type elemType = resV4.getType().cast<LLVM::LLVMStructType>().getBody()[0];\n-\n-      return {extract_val(elemType, resV4, getIntAttr(0)),\n-              extract_val(elemType, resV4, getIntAttr(1)),\n-              extract_val(elemType, resV4, getIntAttr(2)),\n-              extract_val(elemType, resV4, getIntAttr(3))};\n+      // elements (adjacent two columns in a row) or a single f32 element.\n+      Value resV4 = builder.launch(rewriter, loc, matTy);\n+      return {extract_val(elemTy, resV4, i32_arr_attr(0)),\n+              extract_val(elemTy, resV4, i32_arr_attr(1)),\n+              extract_val(elemTy, resV4, i32_arr_attr(2)),\n+              extract_val(elemTy, resV4, i32_arr_attr(3))};\n     } else if (elemBytes == 4 &&\n                needTrans) { // Use lds.32 to load tf32 matrices\n       Value ptr2 = getPtr(ptrIdx + 1);\n@@ -1025,21 +1027,23 @@ class MMA16816SmemLoader {\n           add(sOffsetElemVal, mul(i32_val(sOffsetArrElem), sStride));\n \n       Value elems[4];\n-      Type elemTy = type::f32Ty(ctx);\n-      Type elemPtrTy = ptr_ty(elemTy);\n       if (kOrder == 1) {\n-        elems[0] = load(gep(elemPtrTy, ptr, sOffsetElemVal));\n-        elems[1] = load(gep(elemPtrTy, ptr2, sOffsetElemVal));\n-        elems[2] = load(gep(elemPtrTy, ptr, sOffsetArrElemVal));\n-        elems[3] = load(gep(elemPtrTy, ptr2, sOffsetArrElemVal));\n+        elems[0] = load(gep(shemPtrTy, ptr, sOffsetElemVal));\n+        elems[1] = load(gep(shemPtrTy, ptr2, sOffsetElemVal));\n+        elems[2] = load(gep(shemPtrTy, ptr, sOffsetArrElemVal));\n+        elems[3] = load(gep(shemPtrTy, ptr2, sOffsetArrElemVal));\n       } else {\n-        elems[0] = load(gep(elemPtrTy, ptr, sOffsetElemVal));\n-        elems[2] = load(gep(elemPtrTy, ptr2, sOffsetElemVal));\n-        elems[1] = load(gep(elemPtrTy, ptr, sOffsetArrElemVal));\n-        elems[3] = load(gep(elemPtrTy, ptr2, sOffsetArrElemVal));\n+        elems[0] = load(gep(shemPtrTy, ptr, sOffsetElemVal));\n+        elems[2] = load(gep(shemPtrTy, ptr2, sOffsetElemVal));\n+        elems[1] = load(gep(shemPtrTy, ptr, sOffsetArrElemVal));\n+        elems[3] = load(gep(shemPtrTy, ptr2, sOffsetArrElemVal));\n       }\n-      return {elems[0], elems[1], elems[2], elems[3]};\n-\n+      std::array<Value, 4> retElems;\n+      retElems.fill(undef(elemTy));\n+      for (auto i = 0; i < 4; ++i) {\n+        retElems[i] = insert_element(elemTy, retElems[i], elems[i], i32_val(0));\n+      }\n+      return {retElems[0], retElems[1], retElems[2], retElems[3]};\n     } else if (elemBytes == 1 && needTrans) { // work with int8\n       std::array<std::array<Value, 4>, 2> ptrs;\n       ptrs[0] = {\n@@ -1064,49 +1068,42 @@ class MMA16816SmemLoader {\n           add(sOffsetElemVal, mul(i32_val(sOffsetArrElem), sStride));\n \n       std::array<Value, 4> i8v4Elems;\n-      std::array<Value, 4> i32Elems;\n-      i8v4Elems.fill(\n-          rewriter.create<LLVM::UndefOp>(loc, vec_ty(type::i8Ty(ctx), 4)));\n+      i8v4Elems.fill(undef(elemTy));\n \n       Value i8Elems[4][4];\n-      Type elemTy = type::i8Ty(ctx);\n-      Type elemPtrTy = ptr_ty(elemTy);\n-      Type i8x4Ty = vec_ty(type::i8Ty(ctx), 4);\n       if (kOrder == 1) {\n         for (int i = 0; i < 2; ++i)\n           for (int j = 0; j < 4; ++j)\n-            i8Elems[i][j] = load(gep(elemPtrTy, ptrs[i][j], sOffsetElemVal));\n+            i8Elems[i][j] = load(gep(shemPtrTy, ptrs[i][j], sOffsetElemVal));\n \n         for (int i = 2; i < 4; ++i)\n           for (int j = 0; j < 4; ++j)\n             i8Elems[i][j] =\n-                load(gep(elemPtrTy, ptrs[i - 2][j], sOffsetArrElemVal));\n+                load(gep(shemPtrTy, ptrs[i - 2][j], sOffsetArrElemVal));\n \n         for (int m = 0; m < 4; ++m) {\n           for (int e = 0; e < 4; ++e)\n             i8v4Elems[m] = insert_element(i8v4Elems[m].getType(), i8v4Elems[m],\n                                           i8Elems[m][e], i32_val(e));\n-          i32Elems[m] = bitcast(i8v4Elems[m], i8x4Ty);\n         }\n       } else { // k first\n         for (int j = 0; j < 4; ++j)\n-          i8Elems[0][j] = load(gep(elemPtrTy, ptrs[0][j], sOffsetElemVal));\n+          i8Elems[0][j] = load(gep(shemPtrTy, ptrs[0][j], sOffsetElemVal));\n         for (int j = 0; j < 4; ++j)\n-          i8Elems[2][j] = load(gep(elemPtrTy, ptrs[1][j], sOffsetElemVal));\n+          i8Elems[2][j] = load(gep(shemPtrTy, ptrs[1][j], sOffsetElemVal));\n         for (int j = 0; j < 4; ++j)\n-          i8Elems[1][j] = load(gep(elemPtrTy, ptrs[0][j], sOffsetArrElemVal));\n+          i8Elems[1][j] = load(gep(shemPtrTy, ptrs[0][j], sOffsetArrElemVal));\n         for (int j = 0; j < 4; ++j)\n-          i8Elems[3][j] = load(gep(elemPtrTy, ptrs[1][j], sOffsetArrElemVal));\n+          i8Elems[3][j] = load(gep(shemPtrTy, ptrs[1][j], sOffsetArrElemVal));\n \n         for (int m = 0; m < 4; ++m) {\n           for (int e = 0; e < 4; ++e)\n             i8v4Elems[m] = insert_element(i8v4Elems[m].getType(), i8v4Elems[m],\n                                           i8Elems[m][e], i32_val(e));\n-          i32Elems[m] = bitcast(i8v4Elems[m], i8x4Ty);\n         }\n       }\n \n-      return {i32Elems[0], i32Elems[1], i32Elems[2], i32Elems[3]};\n+      return {i8v4Elems[0], i8v4Elems[1], i8v4Elems[2], i8v4Elems[3]};\n     }\n \n     assert(false && \"Invalid smem load\");\n@@ -1413,14 +1410,10 @@ struct MMA16816ConversionHelper {\n       mma(retArgs, aArgs, bArgs, cArgs);\n       Value mmaOut = builder.launch(rewriter, loc, helper.getMmaRetType());\n \n-      auto getIntAttr = [&](int v) {\n-        return ArrayAttr::get(ctx, {IntegerAttr::get(i32_ty, v)});\n-      };\n-\n       Type elemTy = mmaOut.getType().cast<LLVM::LLVMStructType>().getBody()[0];\n       for (int i = 0; i < 4; ++i)\n         fc[m * colsPerThread + 4 * n + i] =\n-            extract_val(elemTy, mmaOut, getIntAttr(i));\n+            extract_val(elemTy, mmaOut, i32_arr_attr(i));\n     };\n \n     for (int k = 0; k < numRepK; ++k)"}, {"filename": "lib/Conversion/TritonGPUToLLVM/DotOpToLLVM.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "file_content_changes": "@@ -201,12 +201,8 @@ struct DotOpConversion : public ConvertTritonGPUOpToLLVMPattern<triton::DotOp> {\n       Value res =\n           builder.launch(rewriter, loc, helper.getMmaRetType(ATensorTy));\n \n-      auto getIntAttr = [&](int v) {\n-        return ArrayAttr::get(ctx, {IntegerAttr::get(i32_ty, v)});\n-      };\n-\n-      for (unsigned i = 0; i < 8; i++) {\n-        Value elem = extract_val(f32_ty, res, getIntAttr(i));\n+      for (auto i = 0; i < 8; i++) {\n+        Value elem = extract_val(f32_ty, res, i32_arr_attr(i));\n         acc[idx[i]] = elem;\n         resVals[(m * numN / 2 + n) * 8 + i] = elem;\n       }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ElementwiseOpToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "file_content_changes": "@@ -49,10 +49,8 @@ struct FpToFpOpConversion\n         struct_ty(SmallVector<Type>{fp16x2VecTy, fp16x2VecTy});\n     auto fp16x2x2Struct =\n         builder.launch(rewriter, loc, fp16x2x2StructTy, false);\n-    auto fp16x2Vec0 =\n-        extract_val(fp16x2VecTy, fp16x2x2Struct, rewriter.getI32ArrayAttr({0}));\n-    auto fp16x2Vec1 =\n-        extract_val(fp16x2VecTy, fp16x2x2Struct, rewriter.getI32ArrayAttr({1}));\n+    auto fp16x2Vec0 = extract_val(fp16x2VecTy, fp16x2x2Struct, i32_arr_attr(0));\n+    auto fp16x2Vec1 = extract_val(fp16x2VecTy, fp16x2x2Struct, i32_arr_attr(1));\n     return {extract_element(f16_ty, fp16x2Vec0, i32_val(0)),\n             extract_element(f16_ty, fp16x2Vec0, i32_val(1)),\n             extract_element(f16_ty, fp16x2Vec1, i32_val(0)),\n@@ -143,10 +141,8 @@ struct FpToFpOpConversion\n         struct_ty(SmallVector<Type>{bf16x2VecTy, bf16x2VecTy});\n     auto bf16x2x2Struct =\n         builder.launch(rewriter, loc, bf16x2x2StructTy, false);\n-    auto bf16x2Vec0 =\n-        extract_val(bf16x2VecTy, bf16x2x2Struct, rewriter.getI32ArrayAttr({0}));\n-    auto bf16x2Vec1 =\n-        extract_val(bf16x2VecTy, bf16x2x2Struct, rewriter.getI32ArrayAttr({1}));\n+    auto bf16x2Vec0 = extract_val(bf16x2VecTy, bf16x2x2Struct, i32_arr_attr(0));\n+    auto bf16x2Vec1 = extract_val(bf16x2VecTy, bf16x2x2Struct, i32_arr_attr(1));\n     return {extract_element(i16_ty, bf16x2Vec0, i32_val(0)),\n             extract_element(i16_ty, bf16x2Vec0, i32_val(1)),\n             extract_element(i16_ty, bf16x2Vec1, i32_val(0)),"}, {"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -214,7 +214,7 @@ struct LoadOpConversion\n         Value curr;\n         if (retTy.isa<LLVM::LLVMStructType>()) {\n           curr = extract_val(IntegerType::get(getContext(), width), ret,\n-                             rewriter.getI64ArrayAttr(ii));\n+                             i64_arr_attr(ii));\n         } else {\n           curr = ret;\n         }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TypeConverter.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -90,7 +90,7 @@ class TritonGPUToLLVMTypeConverter : public LLVMTypeConverter {\n         Type elemTy = convertType(type.getElementType());\n         if (mmaLayout.isAmpere()) {\n           const llvm::DenseMap<int, Type> targetTyMap = {\n-              {32, elemTy},\n+              {32, vec_ty(elemTy, 1)},\n               {16, vec_ty(elemTy, 2)},\n               {8, vec_ty(elemTy, 4)},\n           };\n@@ -103,8 +103,7 @@ class TritonGPUToLLVMTypeConverter : public LLVMTypeConverter {\n           if (dotOpLayout.getOpIdx() == 0) { // $a\n             auto elems =\n                 MMA16816ConversionHelper::getANumElemsPerThread(type, wpt[0]);\n-            return LLVM::LLVMStructType::getLiteral(\n-                ctx, SmallVector<Type>(elems, targetTy));\n+            return struct_ty(SmallVector<Type>(elems, targetTy));\n           }\n           if (dotOpLayout.getOpIdx() == 1) { // $b\n             auto elems ="}, {"filename": "lib/Conversion/TritonGPUToLLVM/Utility.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "file_content_changes": "@@ -95,6 +95,10 @@\n                             __VA_ARGS__)\n #define tid_val() getThreadId(rewriter, loc)\n \n+// Attributes\n+#define i32_arr_attr(...) rewriter.getI32ArrayAttr({__VA_ARGS__})\n+#define i64_arr_attr(...) rewriter.getI64ArrayAttr({__VA_ARGS__})\n+\n namespace mlir {\n namespace triton {\n \n@@ -191,7 +195,7 @@ getElementsFromStruct(Location loc, Value llvmStruct,\n   SmallVector<Value> results(types.size());\n   for (unsigned i = 0; i < types.size(); ++i) {\n     Type type = types[i];\n-    results[i] = extract_val(type, llvmStruct, rewriter.getI64ArrayAttr(i));\n+    results[i] = extract_val(type, llvmStruct, i64_arr_attr(i));\n   }\n   return results;\n }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/ViewOpToLLVM.cpp", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "file_content_changes": "@@ -62,28 +62,45 @@ struct SplatOpConversion\n     auto tensorTy = resType.cast<RankedTensorType>();\n     auto shape = tensorTy.getShape();\n     auto parent = layout.getParent();\n+    Value retVal = constVal;\n+    Type retTy = elemType;\n     int numElems{};\n     if (auto mmaLayout = parent.dyn_cast<MmaEncodingAttr>()) {\n+      Type matTy;\n       if (mmaLayout.isAmpere()) {\n         numElems = layout.getOpIdx() == 0\n                        ? MMA16816ConversionHelper::getANumElemsPerThread(\n                              tensorTy, mmaLayout.getWarpsPerCTA()[0])\n                        : MMA16816ConversionHelper::getBNumElemsPerThread(\n                              tensorTy, mmaLayout.getWarpsPerCTA()[1]);\n+        DotOpMmaV2ConversionHelper helper(mmaLayout);\n+        helper.deduceMmaType(tensorTy);\n+        matTy = helper.getMatType();\n       } else if (mmaLayout.isVolta()) {\n         DotOpMmaV1ConversionHelper helper(mmaLayout);\n         numElems = layout.getOpIdx() == 0\n                        ? helper.numElemsPerThreadA(shape, {0, 1})\n                        : helper.numElemsPerThreadB(shape, {0, 1});\n+        matTy = helper.getMatType(tensorTy);\n+      }\n+      auto numPackedElems = matTy.cast<LLVM::LLVMStructType>()\n+                                .getBody()[0]\n+                                .cast<VectorType>()\n+                                .getNumElements();\n+      retTy = vec_ty(elemType, numPackedElems);\n+      retVal = undef(retTy);\n+      for (auto i = 0; i < numPackedElems; ++i) {\n+        retVal = insert_element(retTy, retVal, constVal, i32_val(i));\n       }\n     } else if (auto blockedLayout = parent.dyn_cast<BlockedEncodingAttr>()) {\n       numElems = DotOpFMAConversionHelper::getNumElemsPerThread(shape, layout);\n     } else {\n       assert(false && \"Unsupported layout found\");\n     }\n+\n     auto structTy = LLVM::LLVMStructType::getLiteral(\n-        rewriter.getContext(), SmallVector<Type>(numElems, elemType));\n-    return getStructFromElements(loc, SmallVector<Value>(numElems, constVal),\n+        rewriter.getContext(), SmallVector<Type>(numElems, retTy));\n+    return getStructFromElements(loc, SmallVector<Value>(numElems, retVal),\n                                  rewriter, structTy);\n   }\n "}, {"filename": "lib/Dialect/TritonGPU/Transforms/UpdateMmaForVolta.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -220,14 +220,15 @@ class UpdateMMAForMMAv1 : public mlir::RewritePattern {\n \n     auto tensorTy = constant.getResult().getType().cast<RankedTensorType>();\n     auto mma = tensorTy.getEncoding().dyn_cast<MmaEncodingAttr>();\n-    if ((!mma))\n+    auto dot = tensorTy.getEncoding().dyn_cast<DotOperandEncodingAttr>();\n+    if (!mma && !dot)\n       return failure();\n \n     auto newTensorTy = getUpdatedType(tensorTy);\n     if (auto attr = constant.getValue().dyn_cast<SplatElementsAttr>()) {\n       auto newRet =\n           SplatElementsAttr::get(newTensorTy, attr.getSplatValue<Attribute>());\n-      rewriter.replaceOpWithNewOp<arith::ConstantOp>(op, newTensorTy, newRet);\n+      rewriter.replaceOpWithNewOp<arith::ConstantOp>(op, newRet);\n       return success();\n     }\n "}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "file_content_changes": "@@ -468,6 +468,12 @@ void init_triton_ir(py::module &&m) {\n              return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n                  loc, v, self.getI1Type()));\n            })\n+      .def(\"get_int8\",\n+           [](mlir::OpBuilder &self, int64_t v) -> mlir::Value {\n+             auto loc = self.getUnknownLoc();\n+             return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n+                 loc, v, self.getI8Type()));\n+           })\n       .def(\"get_int32\",\n            [](mlir::OpBuilder &self, int64_t v) -> mlir::Value {\n              auto loc = self.getUnknownLoc();\n@@ -480,9 +486,23 @@ void init_triton_ir(py::module &&m) {\n              return mlir::Value(self.create<mlir::arith::ConstantIntOp>(\n                  loc, v, self.getI64Type()));\n            })\n-      // .def(\"get_uint32\", &ir::builder::get_int32, ret::reference)\n-      // .def(\"get_float16\", &ir::builder::get_float16, ret::reference)\n-      .def(\"get_float32\",\n+      // bfloat16 cannot be initialized as it is treated as int16 for now\n+      //.def(\"get_bf16\",\n+      //     [](mlir::OpBuilder &self, float v) -> mlir::Value {\n+      //       auto loc = self.getUnknownLoc();\n+      //       auto type = self.getBF16Type();\n+      //       return self.create<mlir::arith::ConstantFloatOp>(\n+      //           loc,\n+      //           mlir::APFloat(type.getFloatSemantics(), std::to_string(v)),\n+      //           type);\n+      //     })\n+      .def(\"get_fp16\",\n+           [](mlir::OpBuilder &self, float v) -> mlir::Value {\n+             auto loc = self.getUnknownLoc();\n+             return self.create<mlir::arith::ConstantOp>(\n+                 loc, self.getF16FloatAttr(v));\n+           })\n+      .def(\"get_fp32\",\n            [](mlir::OpBuilder &self, float v) -> mlir::Value {\n              auto loc = self.getUnknownLoc();\n              return self.create<mlir::arith::ConstantOp>("}, {"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "file_content_changes": "@@ -1231,19 +1231,23 @@ def kernel(X, stride_xm, stride_xk,\n         assert 'mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32' in ptx\n \n \n-def test_dot_without_load():\n+@pytest.mark.parametrize(\"dtype_str\", ['float32', 'float16'])\n+def test_dot_without_load(dtype_str):\n     @triton.jit\n-    def kernel(out):\n-        pid = tl.program_id(axis=0)\n-        a = tl.zeros((32, 32), tl.float32)\n-        b = tl.zeros((32, 32), tl.float32)\n-        c = tl.zeros((32, 32), tl.float32)\n+    def _kernel(out):\n+        a = GENERATE_TEST_HERE\n+        b = GENERATE_TEST_HERE\n         c = tl.dot(a, b)\n-        pout = out + tl.arange(0, 32)[:, None] * 32 + tl.arange(0, 32)[None, :]\n-        tl.store(pout, c)\n-\n-    out = torch.ones((32, 32), dtype=torch.float32, device=\"cuda\")\n+        out_ptr = out + tl.arange(0, 32)[:, None] * 32 + tl.arange(0, 32)[None, :]\n+        tl.store(out_ptr, c)\n+\n+    kernel = patch_kernel(_kernel, {'GENERATE_TEST_HERE': f\"tl.full((32, 32), 1.0, tl.{dtype_str})\"})\n+    a = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n+    b = torch.ones((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n+    out_ref = torch.matmul(a, b)\n+    out = torch.zeros((32, 32), dtype=getattr(torch, dtype_str), device=\"cuda\")\n     kernel[(1,)](out)\n+    assert torch.all(out == out_ref)\n \n # ---------------\n # test arange"}, {"filename": "python/triton/language/__init__.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "file_content_changes": "@@ -31,6 +31,7 @@\n     dot,\n     dtype,\n     exp,\n+    full,\n     fdiv,\n     float16,\n     float32,\n@@ -124,6 +125,7 @@\n     \"float32\",\n     \"float64\",\n     \"float8\",\n+    \"full\",\n     \"function_type\",\n     \"int1\",\n     \"int16\","}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "file_content_changes": "@@ -26,7 +26,7 @@ def _to_tensor(x, builder):\n         else:\n             raise RuntimeError(f'Nonrepresentable integer {x}.')\n     elif isinstance(x, float):\n-        return tensor(builder.get_float32(x), float32)\n+        return tensor(builder.get_fp32(x), float32)\n     elif isinstance(x, constexpr):\n         return _to_tensor(x.value, builder)\n     elif isinstance(x, tensor):\n@@ -693,24 +693,31 @@ def arange(start, end, _builder=None):\n     return semantic.arange(start, end, _builder)\n \n \n+def _shape_check_impl(shape):\n+    shape = _constexpr_to_value(shape)\n+    for i, d in enumerate(shape):\n+        if not isinstance(d, constexpr):\n+            raise TypeError(f\"Shape element {i} must have type `constexpr`\")\n+        if not isinstance(d.value, int):\n+            raise TypeError(f\"Shape element {i} must have type `constexpr[int]`, got `constexpr[{type(d.value)}]\")\n+    return [_constexpr_to_value(x) for x in shape]\n+\n+\n @builtin\n-def zeros(shape, dtype, _builder=None):\n+def full(shape, value, dtype, _builder=None):\n     \"\"\"\n-    Returns a tensor filled with the scalar value 0 for the given :code:`shape` and :code:`dtype`.\n+    Returns a tensor filled with the scalar value for the given :code:`shape` and :code:`dtype`.\n \n     :param shape: Shape of the new array, e.g., (8, 16) or (8, )\n+    :value value: A scalar value to fill the array with\n     :type shape: tuple of ints\n     :param dtype: Data-type of the new array, e.g., :code:`tl.float16`\n     :type dtype: DType\n     \"\"\"\n-    for i, d in enumerate(shape):\n-        if not isinstance(d, constexpr):\n-            raise TypeError(f\"Shape element {i} must have type `constexpr`\")\n-        if not isinstance(d.value, int):\n-            raise TypeError(f\"Shape element {i} must have type `constexpr[int]`, got `constexpr[{type(d.value)}]\")\n-    shape = [x.value for x in shape]\n+    shape = _shape_check_impl(shape)\n+    value = _constexpr_to_value(value)\n     dtype = _constexpr_to_value(dtype)\n-    return semantic.zeros(shape, dtype, _builder)\n+    return semantic.full(shape, value, dtype, _builder)\n \n \n # -----------------------\n@@ -741,6 +748,7 @@ def broadcast_to(input, shape, _builder=None):\n     :param shape: The desired shape.\n     :type shape: Tuple[int]\n     \"\"\"\n+    shape = _shape_check_impl(shape)\n     return semantic.broadcast_impl_shape(input, shape, _builder)\n \n \n@@ -778,14 +786,14 @@ def view(input, shape, _builder=None):\n     :type shape: Tuple[int]\n \n     \"\"\"\n-    shape = [x.value for x in shape]\n+    shape = _shape_check_impl(shape)\n     return semantic.view(input, shape, _builder)\n \n \n @builtin\n def reshape(input, shape, _builder=None):\n     # TODO: should be more than just a view\n-    shape = [x.value for x in shape]\n+    shape = _shape_check_impl(shape)\n     return semantic.view(input, shape, _builder)\n \n # -----------------------\n@@ -1246,6 +1254,19 @@ def swizzle2d(i, j, size_i, size_j, size_g):\n     return new_i, new_j\n \n \n+@triton.jit\n+def zeros(shape, dtype):\n+    \"\"\"\n+    Returns a tensor filled with the scalar value 0 for the given :code:`shape` and :code:`dtype`.\n+\n+    :param shape: Shape of the new array, e.g., (8, 16) or (8, )\n+    :type shape: tuple of ints\n+    :param dtype: Data-type of the new array, e.g., :code:`tl.float16`\n+    :type dtype: DType\n+    \"\"\"\n+    return full(shape, 0, dtype)\n+\n+\n @triton.jit\n def zeros_like(input):\n     return zeros(input.shape, input.dtype)"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "file_content_changes": "@@ -471,10 +471,15 @@ def arange(start: int, end: int, builder: ir.builder) -> tl.tensor:\n     return tl.tensor(builder.create_make_range(start, end), ret_ty)\n \n \n-def zeros(shape: List[int], dtype: tl.dtype, builder: ir.builder) -> tl.tensor:\n-    _0 = builder.get_null_value(dtype.to_ir(builder))\n+def full(shape: List[int], value, dtype: tl.dtype, builder: ir.builder) -> tl.tensor:\n+    if value == 0:\n+        _value = builder.get_null_value(dtype.to_ir(builder))\n+    else:\n+        get_value_fn = getattr(builder, f\"get_{dtype.name}\")\n+        _value = get_value_fn(value)\n     ret_ty = tl.block_type(dtype, shape)\n-    return tl.tensor(builder.create_splat(_0, shape), ret_ty)\n+    return tl.tensor(builder.create_splat(_value, shape), ret_ty)\n+\n \n # ===----------------------------------------------------------------------===//\n #                               Shape Manipulation\n@@ -891,8 +896,8 @@ def atomic_max(ptr: tl.tensor,\n     # return atomic_umin(i_ptr, i_val) if val < 0\n     i_val = bitcast(val, tl.int32, builder)\n     i_ptr = bitcast(ptr, tl.pointer_type(tl.int32, 1), builder)\n-    pos = greater_equal(val, tl.tensor(builder.get_float32(0), sca_ty), builder)\n-    neg = less_than(val, tl.tensor(builder.get_float32(0), sca_ty), builder)\n+    pos = greater_equal(val, tl.tensor(builder.get_fp32(0), sca_ty), builder)\n+    neg = less_than(val, tl.tensor(builder.get_fp32(0), sca_ty), builder)\n     pos_ret = tl.tensor(builder.create_atomic_rmw(ir.ATOMIC_OP.MAX, i_ptr.handle, i_val.handle, and_(mask, pos, builder).handle), i_val.type)\n     neg_ret = tl.tensor(builder.create_atomic_rmw(ir.ATOMIC_OP.UMIN, i_ptr.handle, i_val.handle, and_(mask, neg, builder).handle), i_val.type)\n     return where(pos, pos_ret, neg_ret, builder)\n@@ -923,8 +928,8 @@ def atomic_min(ptr: tl.tensor,\n     # return atomic_umax(i_ptr, i_val) if val < 0\n     i_val = bitcast(val, tl.int32, builder)\n     i_ptr = bitcast(ptr, tl.pointer_type(tl.int32, 1), builder)\n-    pos = greater_equal(val, tl.tensor(builder.get_float32(0), sca_ty), builder)\n-    neg = less_than(val, tl.tensor(builder.get_float32(0), sca_ty), builder)\n+    pos = greater_equal(val, tl.tensor(builder.get_fp32(0), sca_ty), builder)\n+    neg = less_than(val, tl.tensor(builder.get_fp32(0), sca_ty), builder)\n     pos_ret = tl.tensor(builder.create_atomic_rmw(ir.ATOMIC_OP.MIN,\n                                                   i_ptr.handle,\n                                                   i_val.handle,\n@@ -998,7 +1003,7 @@ def dot(lhs: tl.tensor,\n         _0 = builder.get_int32(0)\n         ret_scalar_ty = tl.int32\n     else:\n-        _0 = builder.get_float32(0)\n+        _0 = builder.get_fp32(0)\n         ret_scalar_ty = tl.float32\n     M = lhs.type.shape[0]\n     N = rhs.type.shape[1]"}, {"filename": "test/Conversion/tritongpu_to_llvm.mlir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -923,10 +923,10 @@ module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n     %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma>\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: ldmatrix.sync.aligned.m8n8.x4.shared.b16\n-    // CHECK-SAME: (f32, f32, f32, f32)\n+    // CHECK-SAME: (vector<1xf32>, vector<1xf32>, vector<1xf32>, vector<1xf32>)\n     // CHECK: llvm.inline_asm\n     // CHECK-SAME: ldmatrix.sync.aligned.m8n8.x4.shared.b16\n-    // CHECK-SAME: (f32, f32, f32, f32)\n+    // CHECK-SAME: (vector<1xf32>, vector<1xf32>, vector<1xf32>, vector<1xf32>)\n     %a_mat = triton_gpu.convert_layout %a : (tensor<32x16xf32, #shared>) -> tensor<32x16xf32, #dot_operand_a>\n     %b_mat = triton_gpu.convert_layout %b : (tensor<16x32xf32, #shared>) -> tensor<16x32xf32, #dot_operand_b>\n "}]