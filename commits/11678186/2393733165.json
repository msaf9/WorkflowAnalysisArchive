[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "file_content_changes": "@@ -341,6 +341,26 @@ def __repr__(self) -> str:\n \n     def __bool__(self):\n         return bool(self.value)\n+    \n+    def __ge__(self, other):\n+        other = other.value if isinstance(other, constexpr) else other\n+        return self.value >= other\n+    \n+    def __gt__(self, other):\n+        other = other.value if isinstance(other, constexpr) else other\n+        return self.value >  other\n+\n+    def __le__(self, other):\n+        other = other.value if isinstance(other, constexpr) else other\n+        return self.value <= other\n+    \n+    def __lt__(self, other):\n+        other = other.value if isinstance(other, constexpr) else other\n+        return self.value <  other\n+\n+    def __eq__(self, other):\n+        other = other.value if isinstance(other, constexpr) else other\n+        return self.value == other\n \n     def __call__(self, *args, **kwds):\n         return self.value(*args, **kwds)"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -905,6 +905,10 @@ def dot(lhs: tl.tensor,\n         allow_tf32: bool,\n         builder: ir.builder) -> tl.tensor:\n     assert lhs.type.is_block() and rhs.type.is_block()\n+    assert len(lhs.shape) == 2 and len(rhs.shape) == 2\n+    assert lhs.shape[-1] == rhs.shape[0]\n+    assert lhs.shape[0] >= 16 and lhs.shape[1] >= 16 and rhs.shape[1] >= 16,\\\n+           \"small blocks not supported!\"\n     if lhs.type.scalar.is_int():\n         _0 = builder.get_int32(0)\n         ret_scalar_ty = tl.int32"}]