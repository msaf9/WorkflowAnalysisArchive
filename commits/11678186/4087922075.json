[{"filename": "python/setup.py", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "file_content_changes": "@@ -63,13 +63,13 @@ def get_llvm_package_info():\n         vglibc = tuple(map(int, platform.libc_ver()[1].split('.')))\n         vglibc = vglibc[0] * 100 + vglibc[1]\n         linux_suffix = 'ubuntu-18.04' if vglibc > 217 else 'centos-7'\n-        system_suffix = \"linux-gnu-{}\".format(linux_suffix)\n+        system_suffix = f\"linux-gnu-{linux_suffix}\"\n     else:\n-        raise RuntimeError(\"unsupported system: {}\".format(system))\n+        raise RuntimeError(f\"unsupported system: {system}\")\n     use_assert_enabled_llvm = check_env_flag(\"TRITON_USE_ASSERT_ENABLED_LLVM\", \"False\")\n     release_suffix = \"assert\" if use_assert_enabled_llvm else \"release\"\n-    name = 'llvm+mlir-14.0.6-x86_64-{}-{}'.format(system_suffix, release_suffix)\n-    url = \"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-14.0.6-f28c006a5895/{}.tar.xz\".format(name)\n+    name = f'llvm+mlir-14.0.6-x86_64-{system_suffix}-{release_suffix}'\n+    url = f\"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-14.0.6-f28c006a5895/{name}.tar.xz\"\n     return Package(\"llvm\", name, url, \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n \n \n@@ -88,14 +88,14 @@ def get_thirdparty_packages(triton_cache_path):\n             except Exception:\n                 pass\n             os.makedirs(package_root_dir, exist_ok=True)\n-            print('downloading and extracting {} ...'.format(p.url))\n+            print(f'downloading and extracting {p.url} ...')\n             ftpstream = urllib.request.urlopen(p.url)\n             file = tarfile.open(fileobj=ftpstream, mode=\"r|*\")\n             file.extractall(path=package_root_dir)\n         if p.include_flag:\n-            thirdparty_cmake_args.append(\"-D{}={}/include\".format(p.include_flag, package_dir))\n+            thirdparty_cmake_args.append(f\"-D{p.include_flag}={package_dir}/include\")\n         if p.lib_flag:\n-            thirdparty_cmake_args.append(\"-D{}={}/lib\".format(p.lib_flag, package_dir))\n+            thirdparty_cmake_args.append(f\"-D{p.lib_flag}={package_dir}/lib\")\n     return thirdparty_cmake_args\n \n # ---- package data ---\n@@ -109,7 +109,7 @@ def download_and_copy_ptxas():\n     dst_suffix = os.path.join(\"third_party\", \"cuda\", src_path)\n     dst_path = os.path.join(dst_prefix, dst_suffix)\n     if not os.path.exists(dst_path):\n-        print('downloading and extracting {} ...'.format(url))\n+        print(f'downloading and extracting {url} ...')\n         ftpstream = urllib.request.urlopen(url)\n         file = tarfile.open(fileobj=ftpstream, mode=\"r|*\")\n         with tempfile.TemporaryDirectory() as temp_dir:\n@@ -186,7 +186,7 @@ def build_extension(self, ext):\n         build_args = [\"--config\", cfg]\n \n         if platform.system() == \"Windows\":\n-            cmake_args += [\"-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{}={}\".format(cfg.upper(), extdir)]\n+            cmake_args += [f\"-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}\"]\n             if sys.maxsize > 2**32:\n                 cmake_args += [\"-A\", \"x64\"]\n             build_args += [\"--\", \"/m\"]"}]