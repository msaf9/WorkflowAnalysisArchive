[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "file_content_changes": "@@ -734,10 +734,6 @@ def visit_BoolOp(self, node: ast.BoolOp):\n         assert len(node.values) == 2\n         lhs = self.visit(node.values[0])\n         rhs = self.visit(node.values[1])\n-        if isinstance(lhs, triton.language.constexpr):\n-            lhs = lhs.value\n-        if isinstance(rhs, triton.language.constexpr):\n-            rhs = rhs.value\n \n         fn = {\n             ast.And: 'logical_and',"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "file_content_changes": "@@ -403,6 +403,18 @@ def __bool__(self):\n     def __neg__(self):\n         return constexpr(-self.value)\n \n+    def __and__(self, other):\n+        return constexpr(self.value & other.value)\n+\n+    def logical_and(self, other):\n+        return constexpr(self.value and other.value)\n+\n+    def __or__(self, other):\n+        return constexpr(self.value | other.value)\n+\n+    def logical_or(self, other):\n+        return constexpr(self.value or other.value)\n+\n     def __pos__(self):\n         return constexpr(+self.value)\n "}]