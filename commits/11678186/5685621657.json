[{"filename": "python/src/triton.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -645,7 +645,8 @@ void init_triton_ir(py::module &&m) {\n                auto val = self.getBuilder().getStringAttr(kv.second);\n                attrs.push_back(mlir::NamedAttribute(key, val));\n              }\n-             return mlir::DictionaryAttr::get(self.getBuilder().getContext(), attrs);\n+             return mlir::DictionaryAttr::get(self.getBuilder().getContext(),\n+                                              attrs);\n            })\n       // Use arith.ConstantOp to create constants\n       // Constants"}, {"filename": "python/test/unit/language/test_set_ptr_info.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -22,7 +22,7 @@ def legacy_pointer_explicit(\n         tl.store(y_ptr + offsets, x)\n \n     shape = (128, )\n-    ptr_info = { \"test_key\" : \"test_value\" }\n+    ptr_info = {\"test_key\": \"test_value\"}\n     x = torch.zeros(shape, dtype=torch.int32, device='cuda')\n     y = torch.zeros(shape, dtype=x.dtype, device=\"cuda\")\n     run = legacy_pointer_explicit[(1,)]\n@@ -63,7 +63,7 @@ def block_pointer_explicit(\n         tl.store(y_block_ptr, x, boundary_check=(0))\n \n     shape = (128, )\n-    ptr_info = { \"test_key\" : \"test_value\" }\n+    ptr_info = {\"test_key\": \"test_value\"}\n     x = torch.zeros(shape, dtype=torch.float32, device='cuda')\n     y = torch.zeros(shape, dtype=x.dtype, device=\"cuda\")\n     block_pointer_explicit[(1,)](x, y, BLOCK_SIZE=shape[0], PTR_INFO=ptr_info)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -293,8 +293,8 @@ def __eq__(self, other: pointer_type) -> bool:\n         if not isinstance(other, pointer_type):\n             return False\n         return self.element_ty == other.element_ty and \\\n-               self.address_space == other.address_space and \\\n-               self.ptr_info == other.ptr_info\n+            self.address_space == other.address_space and \\\n+            self.ptr_info == other.ptr_info\n \n     def __ne__(self, other: pointer_type) -> bool:\n         return not self.__eq__(other)\n@@ -1691,6 +1691,7 @@ def max_constancy(input, values, _builder=None):\n     values = [x.value for x in values]\n     return semantic.max_constancy(input, values)\n \n+\n @builtin\n def set_ptr_info(ptr: tensor, ptr_info: dict, _builder=None):\n     \"\"\""}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -1545,6 +1545,7 @@ def advance(base: tl.tensor, offsets, builder: ir.builder) -> tl.tensor:\n     # Advanced block pointer type is the same as before\n     return tl.tensor(builder.create_advance(base.handle, offsets), base.type)\n \n+\n def set_ptr_info(ptr: tl.tensor, ptr_info: dict, builder: ir.builder) -> tl.tensor:\n     ptr_info_attr = builder.get_ptr_info_attr(ptr_info)\n     ret = tl.tensor(builder.create_set_ptr_info(ptr.handle, ptr_info_attr), ptr.type)"}]