[{"filename": "include/triton/ir/value.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -21,7 +21,7 @@ class visitor;\n \n class value {\n public:\n-  typedef std::set<user*> users_t;\n+  typedef std::vector<user*> users_t;\n \n public:\n   // constructor\n@@ -30,7 +30,7 @@ class value {\n   // uses\n   void add_use(user* arg);\n   users_t::iterator erase_use(user* arg);\n-  const std::set<user*> &get_users() { return users_; }\n+  const std::vector<user*> &get_users() { return users_; }\n   void replace_all_uses_with(value *target);\n   // name\n   void set_name(const std::string &name);"}, {"filename": "lib/codegen/transform/pipeline.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -134,6 +134,7 @@ void pipeline::run(ir::module &mod) {\n   ir::builder &builder = mod.get_builder();\n   const int num_stages = num_stages_;\n   std::vector<std::pair<ir::phi_node*, std::vector<ir::value*>>> preheader_loads; // Used to reorder loads\n+\n   for(auto info: to_pipeline){\n     ir::load_inst* load = info.load;\n     ir::phi_node* ptr   = info.ptr;"}, {"filename": "lib/ir/module.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -52,7 +52,7 @@ ir::value *value_constructor::try_remove_trivial_phis(ir::phi_node *&phi){\n   assert(same != nullptr);\n   phi->replace_all_uses_with(same);\n   phi->erase_from_parent();\n-  std::set<ir::user*> users = phi->get_users();\n+  std::vector<ir::user*> users = phi->get_users();\n   for(ir::user* u: users)\n   if(auto *uphi = dynamic_cast<ir::phi_node*>(u))\n     if(uphi != phi)"}, {"filename": "lib/ir/value.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -1,5 +1,6 @@\n #include <cassert>\n #include <iostream>\n+#include <algorithm>\n #include \"triton/ir/value.h\"\n #include \"triton/ir/instructions.h\"\n \n@@ -17,11 +18,11 @@ value::value(type *ty, const std::string &name): ty_(ty){\n }\n \n void value::add_use(user *arg) {\n-  users_.insert(arg);\n+  users_.push_back(arg);\n }\n \n value::users_t::iterator value::erase_use(user *arg){\n-  auto it = users_.find(arg);\n+  auto it = std::find(users_.begin(), users_.end(), arg);\n   if(it == users_.end())\n     return it;\n   return users_.erase(it);"}]