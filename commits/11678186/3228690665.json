[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -1197,10 +1197,10 @@ def _build(name, src, srcdir):\n     return so\n \n \n-def make_so_cache_key(signature, constants):\n+def make_so_cache_key(version_hash, signature, constants):\n     # Get unique key for the compiled code\n     signature = {k: 'ptr' if v[0] == '*' else v for k, v in signature.items()}\n-    key = f\"{''.join(signature.values())}{constants}\"\n+    key = f\"{version_hash}-{''.join(signature.values())}{constants}\"\n     key = hashlib.md5(key.encode(\"utf-8\")).hexdigest()\n     return key\n \n@@ -1221,7 +1221,7 @@ def compile(fn, signature: str, device: int = -1, constants=dict(), num_warps: i\n     # cache manager\n     name = fn.__name__\n     # name of files that are cached\n-    so_cache_key = make_so_cache_key(signature, constants)\n+    so_cache_key = make_so_cache_key(triton.jit.version_key(), signature, constants)\n     so_cache_manager = CacheManager(so_cache_key)\n     so_name = f\"{name}.so\"\n     # retrieve stub from cache if it exists"}]