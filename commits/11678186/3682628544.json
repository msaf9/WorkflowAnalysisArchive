[{"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -176,10 +176,12 @@ class AllocationAnalysis {\n       unsigned outVec = 0;\n       auto smemShape = getScratchConfigForCvtLayout(cvtLayout, inVec, outVec);\n       unsigned elems = std::accumulate(smemShape.begin(), smemShape.end(), 1,\n-                                       std::multiplies{});\n+                                      std::multiplies{});\n+      unsigned elemBitWidth = std::max<unsigned>(srcTy.getElementTypeBitWidth(),\n+                                                 8);\n       auto bytes = srcTy.getElementType().isa<triton::PointerType>()\n                        ? elems * kPtrBitWidth / 8\n-                       : elems * srcTy.getElementTypeBitWidth() / 8;\n+                       : elems * elemBitWidth / 8;\n       allocation->addBuffer<BufferT::BufferKind::Scratch>(op, bytes);\n     } else if (auto atomicRMWOp = dyn_cast<triton::AtomicRMWOp>(op)) {\n       auto value = op->getOperand(0);"}]