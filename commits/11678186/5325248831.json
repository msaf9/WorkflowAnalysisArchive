[{"filename": "python/triton/tools/aot.py", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "file_content_changes": "@@ -1,117 +0,0 @@\n-import argparse\n-import sys\n-\n-from .._C.libtriton.triton import ir\n-# import triton.compiler.compiler as tc\n-from ..compiler.compiler import (get_amdgpu_arch_fulldetails, llir_to_amdgcn_and_hsaco,\n-                                 llir_to_ptx, optimize_ttgir, optimize_ttir,\n-                                 ttgir_to_llir, ttir_to_ttgir)\n-\n-if __name__ == '__main__':\n-\n-    # valid source and target formats\n-    VALID_FORMATS = ['triton-ir', 'triton-gpu-ir', 'llvm-ir', 'ptx', 'amdgcn']\n-\n-    # set up the argument parser\n-    # TODO: conditional requirements\n-    parser = argparse.ArgumentParser()\n-    parser.add_argument('src', help=\"Source file to compile\")\n-    parser.add_argument('--target', required=True,\n-                        help=\"Target format, one of: \" + ', '.join(VALID_FORMATS))\n-    parser.add_argument('--sm', type=int, help=\"Compute capability to compile for\")\n-    parser.add_argument('--ptx-version', type=int, help=\"PTX version to compile for\")\n-    parser.add_argument('--gfx', type=str, help=\"AMDGPU target to compile for\")\n-    parser.add_argument('--triple', type=str, help=\"target triple, for example: amdgcn-amd-amdhsa\")\n-    parser.add_argument('--features', type=str, help=\"target features, for example: +sramecc,-xnack\")\n-    parser.add_argument('--num_warps', type=int, help=\"number of warps to compile ttgir for\")\n-\n-    # parse the args\n-    args = parser.parse_args()\n-\n-    # TODO: clean-up and re-use triton.compiler primitive functions\n-    # check for validity of format arguments\n-    if args.target not in VALID_FORMATS:\n-        print(\"Invalid target format: \" + args.target)\n-        sys.exit(0)\n-\n-    # parse source file to MLIR module\n-    context = ir.context()\n-    module = ir.parse_mlir_module(args.src, context)\n-    module.context = context\n-\n-    # optimizer triton-ir\n-    module = optimize_ttir(module, arch=args.sm)\n-    if args.target == 'triton-ir':\n-        print(module.str())\n-        sys.exit(0)\n-\n-    if not args.num_warps:\n-        args.num_warps = 4\n-\n-    # llvm-ir -> amdgcn\n-    if args.target == 'amdgcn':\n-        # auto detect available architecture and features\n-        # if nothing detected, set with default values\n-        arch_details = get_amdgpu_arch_fulldetails()\n-        if not arch_details:\n-            arch_name = \"\"\n-            arch_triple = \"amdgcn-amd-amdhsa\"\n-            arch_features = \"\"\n-        else:\n-            arch_triple, arch_name, arch_features = arch_details\n-\n-        # stop processing if architecture name is not automatically detected and is not set manually\n-        if not args.gfx and not arch_name:\n-            raise argparse.ArgumentError(None, \"Must specify --gfx for AMDGCN compilation\")\n-\n-        # rewrite default and automatically detected values with manually provided data\n-        if args.gfx:\n-            arch_name = args.gfx\n-        if args.triple:\n-            arch_triple = args.triple\n-        if args.features:\n-            arch_features = args.features\n-\n-        # triton-ir -> triton-gpu-ir\n-        # use compute_capability == 80\n-        module = ttir_to_ttgir(module, num_warps=args.num_warps)  # num_stages=3, compute_capability=80)\n-        module = optimize_ttgir(module, num_stages=3, arch=80)\n-        # triton-gpu-ir -> llvm-ir\n-        # use compute_capability == 80\n-        module = ttgir_to_llir(module, extern_libs=None, arch=80)\n-        # llvm-ir -> amdgcn asm, hsaco binary\n-        module, hsaco_path = llir_to_amdgcn_and_hsaco(module, arch_name, arch_triple, arch_features)\n-\n-        print(hsaco_path)\n-        print(module)\n-        sys.exit(0)\n-\n-    if not args.sm:\n-        raise argparse.ArgumentError(None, \"Must specify --sm for PTX compilation\")\n-\n-    # triton-ir -> triton-gpu-ir\n-    module = ttir_to_ttgir(module, num_warps=args.num_warps)\n-    module = optimize_ttgir(module, num_stages=3, arch=args.sm)\n-    if args.target == 'triton-gpu-ir':\n-        print(module.str())\n-        sys.exit(0)\n-\n-    # triton-gpu-ir -> llvm-ir\n-    module = ttgir_to_llir(module, extern_libs=None, arch=args.sm)\n-    if args.target == 'llvm-ir':\n-        print(module)\n-        sys.exit(0)\n-\n-    # llvm-ir -> ptx\n-    if args.target == 'ptx':\n-        if not args.ptx_version:\n-            raise argparse.ArgumentError(None, \"Must specify --ptx-version for PTX compilation\")\n-        module = llir_to_ptx(module, arch=args.sm, ptx_version=args.ptx_version)\n-\n-    # llvm-ir -> amdgcn\n-    if args.target == 'amdgcn':\n-        if not args.gfx:\n-            raise argparse.ArgumentError(None, \"Must specify --gfx for AMDGCN compilation\")\n-        module, hsaco_path = llir_to_amdgcn_and_hsaco(module, args.gfx)\n-\n-    print(module)"}]