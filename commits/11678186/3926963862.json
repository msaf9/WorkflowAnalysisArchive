[{"filename": "python/triton/tools/aot.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -1,5 +1,5 @@\n import argparse\n-\n+import sys\n import triton\n import triton._C.libtriton.triton as libtriton\n \n@@ -24,7 +24,7 @@\n     # check for validity of format arguments\n     if args.target not in VALID_FORMATS:\n         print(\"Invalid target format: \" + args.target)\n-        exit(0)\n+        sys.exit(0)\n \n     # parse source file to MLIR module\n     context = libtriton.ir.context()\n@@ -35,7 +35,7 @@\n     module = triton.compiler.optimize_triton_ir(module)\n     if args.target == 'triton-ir':\n         print(module.str())\n-        exit(0)\n+        sys.exit(0)\n \n     if not args.sm:\n         raise argparse.ArgumentError(None, \"Must specify --sm for PTX compilation\")\n@@ -44,13 +44,13 @@\n     module = triton.compiler.ttir_to_ttgir(module, num_warps=4, num_stages=3, compute_capability=args.sm)\n     if args.target == 'triton-gpu-ir':\n         print(module.str())\n-        exit(0)\n+        sys.exit(0)\n \n     # triton-gpu-ir -> llvm-ir\n     module = triton.compiler.ttgir_to_llir(module, extern_libs=None, compute_capability=args.sm)\n     if args.target == 'llvm-ir':\n         print(module)\n-        exit(0)\n+        sys.exit(0)\n \n     if not args.ptx_version:\n         raise argparse.ArgumentError(None, \"Must specify --ptx-version for PTX compilation\")"}]