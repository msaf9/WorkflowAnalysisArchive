[{"filename": "include/triton/Analysis/Allocation.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "file_content_changes": "@@ -67,12 +67,12 @@ class Allocation {\n \n   /// Returns the offset of the given buffer in the shared memory.\n   size_t getOffset(BufferId bufferId) const {\n-    return bufferSet.lookup(bufferId).offset;\n+    return bufferSet.at(bufferId).offset;\n   }\n \n   /// Returns the size of the given buffer in the shared memory.\n   size_t getAllocatedSize(BufferId bufferId) const {\n-    return bufferSet.lookup(bufferId).size;\n+    return bufferSet.at(bufferId).size;\n   }\n \n   /// Returns the buffer id of the given value.\n@@ -115,8 +115,8 @@ class Allocation {\n   bool isIntersected(BufferId lhsId, BufferId rhsId) const {\n     if (lhsId == InvalidBufferId || rhsId == InvalidBufferId)\n       return false;\n-    auto lhsBuffer = bufferSet.lookup(lhsId);\n-    auto rhsBuffer = bufferSet.lookup(rhsId);\n+    auto lhsBuffer = bufferSet.at(lhsId);\n+    auto rhsBuffer = bufferSet.at(rhsId);\n     return lhsBuffer.intersects(rhsBuffer);\n   }\n \n@@ -137,7 +137,8 @@ class Allocation {\n     bool operator<(const BufferT &other) const { return id < other.id; }\n \n     BufferT() : BufferT(BufferKind::Explicit) {}\n-    BufferT(BufferKind kind) : BufferT(kind, 0, 0) {}\n+    BufferT(BufferKind kind)\n+        : kind(kind), id(InvalidBufferId), size(0), offset(0) {}\n     BufferT(BufferKind kind, size_t size) : BufferT(kind, size, 0) {}\n     BufferT(BufferKind kind, size_t size, size_t offset)\n         : kind(kind), id(nextId++), size(size), offset(offset) {}\n@@ -156,7 +157,7 @@ class Allocation {\n   /// Value -> Alias Buffer\n   using AliasBufferMapT = llvm::MapVector<Value, llvm::SetVector<BufferT *>>;\n   /// BufferId -> Buffer\n-  using BufferSetT = DenseMap<BufferId, BufferT>;\n+  using BufferSetT = std::map<BufferId, BufferT>;\n   /// Runs allocation analysis on the given top-level operation.\n   void run();\n "}]