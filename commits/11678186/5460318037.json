[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "file_content_changes": "@@ -3029,24 +3029,28 @@ def kernel(Cond1, Cond2, Cond3, Val1, Val2, Val3, Out):\n def test_while(device):\n \n     @triton.jit\n-    def kernel(InitI, Bound, CutOff, OutI, OutJ):\n+    def kernel(InitI, Bound, CutOff, OutI, OutInitI, OutJ):\n         init_i = tl.load(InitI)\n         curr_i = init_i\n         j = 0\n-        while curr_i == init_i and j < tl.load(Bound):\n+        # Check that init_i is not updated by the loop\n+        while j < tl.load(Bound):\n             curr_i = curr_i + (j == tl.load(CutOff))\n             j += 1\n+            tl.store(OutInitI, init_i)\n         tl.store(OutI, curr_i)\n         tl.store(OutJ, j)\n \n     out_i = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n     out_j = to_triton(np.zeros((1,), dtype=np.int32), device=device)\n     init_i = to_triton(np.full((1,), 1, dtype=np.int32), device=device)\n+    out_init_i = to_triton(np.full((1,), 0, dtype=np.int32), device=device)\n     bound = to_triton(np.full((1,), 10, dtype=np.int32), device=device)\n     cut_off = to_triton(np.full((1,), 5, dtype=np.int32), device=device)\n-    kernel[(1,)](init_i, bound, cut_off, out_i, out_j)\n+    kernel[(1,)](init_i, bound, cut_off, out_i, out_init_i, out_j)\n+    assert out_init_i[0] == init_i[0]\n     assert out_i[0] == init_i[0] + 1\n-    assert out_j[0] == cut_off[0] + 1\n+    assert out_j[0] == bound[0]\n \n # def test_for_if(device):\n "}, {"filename": "python/triton/compiler/code_generator.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "file_content_changes": "@@ -682,10 +682,6 @@ def visit_While(self, node):\n                     yields.append(loop_defs[name])\n             self.builder.create_yield_op([y.handle for y in yields])\n \n-        # update global uses in while_op\n-        for i, name in enumerate(names):\n-            after_block.replace_use_in_block_with(init_args[i].handle, after_block.arg(i))\n-\n         # WhileOp defines new values, update the symbol table (lscope, local_defs)\n         for i, name in enumerate(names):\n             new_def = language.core.tensor(while_op.get_result(i), ret_types[i])"}]