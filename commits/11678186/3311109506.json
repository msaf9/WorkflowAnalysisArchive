[{"filename": "lib/Dialect/TritonGPU/Transforms/Prefetch.cpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "file_content_changes": "@@ -172,10 +172,10 @@ void Prefetcher::emitPrologue() {\n                            .getEncoding()\n                            .cast<triton::gpu::MmaEncodingAttr>();\n     Value aPrefetched =\n-      generatePrefetch(dot2aHeaderDef[dot], 0, true, mmaEncoding, builder);\n+        generatePrefetch(dot2aHeaderDef[dot], 0, true, mmaEncoding, builder);\n     operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().a()] = aPrefetched;\n     Value bPrefetched =\n-      generatePrefetch(dot2bHeaderDef[dot], 1, true, mmaEncoding, builder);\n+        generatePrefetch(dot2bHeaderDef[dot], 1, true, mmaEncoding, builder);\n     operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().b()] = bPrefetched;\n   }\n }\n@@ -187,8 +187,10 @@ scf::ForOp Prefetcher::createNewForOp() {\n   for (auto v : forOp.getIterOperands())\n     loopArgs.push_back(v);\n   for (Value dot : dots) {\n-    loopArgs.push_back(operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().a()]);\n-    loopArgs.push_back(operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().b()]);\n+    loopArgs.push_back(\n+        operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().a()]);\n+    loopArgs.push_back(\n+        operand2headPrefetch[dot.getDefiningOp<triton::DotOp>().b()]);\n   }\n \n   auto newForOp = builder.create<scf::ForOp>(\n@@ -218,12 +220,10 @@ scf::ForOp Prefetcher::createNewForOp() {\n             1, newForOp.getRegionIterArgForOpOperand(*b.use_begin()));\n \n       // remaining part\n-      Value aRem =\n-          generatePrefetch(\n-            mapping.lookup(dot2aLoopArg[dot]), 0, false, mmaEncoding, builder);\n-      Value bRem =\n-          generatePrefetch(\n-            mapping.lookup(dot2bLoopArg[dot]), 1, false, mmaEncoding, builder);\n+      Value aRem = generatePrefetch(mapping.lookup(dot2aLoopArg[dot]), 0, false,\n+                                    mmaEncoding, builder);\n+      Value bRem = generatePrefetch(mapping.lookup(dot2bLoopArg[dot]), 1, false,\n+                                    mmaEncoding, builder);\n       newOp = builder.clone(*dot, mapping);\n       newOp->setOperand(0, aRem);\n       newOp->setOperand(1, bRem);\n@@ -245,10 +245,10 @@ scf::ForOp Prefetcher::createNewForOp() {\n                            .cast<RankedTensorType>()\n                            .getEncoding()\n                            .cast<triton::gpu::MmaEncodingAttr>();\n-    yieldValues.push_back(\n-      generatePrefetch(mapping.lookup(dot2aYield[dot]), 0, true, mmaEncoding, builder));\n-    yieldValues.push_back(\n-      generatePrefetch(mapping.lookup(dot2bYield[dot]), 1, true, mmaEncoding, builder));\n+    yieldValues.push_back(generatePrefetch(mapping.lookup(dot2aYield[dot]), 0,\n+                                           true, mmaEncoding, builder));\n+    yieldValues.push_back(generatePrefetch(mapping.lookup(dot2bYield[dot]), 1,\n+                                           true, mmaEncoding, builder));\n   }\n   // Update ops of yield\n   builder.create<scf::YieldOp>(yieldOp.getLoc(), yieldValues);"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Swizzle.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -89,9 +89,8 @@ struct SwizzlePass : public TritonGPUSwizzleBase<SwizzlePass> {\n                   .cast<triton::gpu::SharedEncodingAttr>()\n                   .getOrder());\n           // create conversion\n-          auto newType = RankedTensorType::get(ty.getShape(),\n-                                               ty.getElementType(),\n-                                               newEncoding);\n+          auto newType = RankedTensorType::get(\n+              ty.getShape(), ty.getElementType(), newEncoding);\n           Operation *newOp = builder.create<triton::gpu::ConvertLayoutOp>(\n               op.getLoc(), newType, op);\n           // bind new op to cvt operand"}]