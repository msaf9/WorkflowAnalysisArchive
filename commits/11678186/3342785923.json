[{"filename": "include/triton/Conversion/TritonGPUToLLVM/PtxAsmFormat.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "file_content_changes": "@@ -101,7 +101,7 @@ struct PTXBuilder {\n   };\n \n   template <typename INSTR = PTXInstr, typename... Args>\n-  INSTR *create(Args &&...args) {\n+  INSTR *create(Args &&... args) {\n     instrs.emplace_back(std::make_unique<INSTR>(this, args...));\n     return static_cast<INSTR *>(instrs.back().get());\n   }\n@@ -201,10 +201,17 @@ struct PTXInstrCommon {\n   // clang-format on\n \n   // Set operands of this instruction.\n-  PTXInstrExecution &operator()(llvm::ArrayRef<Operand *> oprs);\n+  // \\param justBindLLVMOprs Just bind the LLVM Operands to the PTX code\n+  // snippet.\n+  PTXInstrExecution &operator()(llvm::ArrayRef<Operand *> oprs,\n+                                bool justBindLLVMOprs = false);\n+\n+  // Bind the operands to the PTX code already having %n.\n+  PTXInstrExecution &bindOprs(llvm::ArrayRef<Operand *> oprs);\n \n protected:\n-  PTXInstrExecution &call(llvm::ArrayRef<Operand *> oprs);\n+  PTXInstrExecution &call(llvm::ArrayRef<Operand *> oprs,\n+                          bool justBindLLVMOprs = false);\n \n   PTXBuilder *builder{};\n   llvm::SmallVector<std::string, 4> instrParts;\n@@ -304,8 +311,9 @@ struct PTXInstrExecution {\n \n   PTXInstrExecution() = default;\n   explicit PTXInstrExecution(PTXInstrCommon *instr,\n-                             llvm::ArrayRef<Operand *> oprs)\n-      : instr(instr), argsInOrder(oprs.begin(), oprs.end()) {}\n+                             llvm::ArrayRef<Operand *> oprs, bool isRawBind)\n+      : instr(instr), argsInOrder(oprs.begin(), oprs.end()),\n+        justBindLLVMOpr(isRawBind) {}\n \n   // Prefix a predicate to the instruction.\n   PTXInstrExecution &predicate(mlir::Value value, StringRef constraint = \"b\") {\n@@ -326,6 +334,9 @@ struct PTXInstrExecution {\n \n   PTXInstrCommon *instr{};\n   Operand *pred{};\n+  // Whether to insert the $0,$1..$n in PTX code snippet, or just create a\n+  // LLVM::InlineASM Op.\n+  bool justBindLLVMOpr{};\n };\n \n } // namespace triton"}, {"filename": "lib/Conversion/TritonGPUToLLVM/PtxAsmFormat.cpp", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "file_content_changes": "@@ -128,14 +128,16 @@ std::string PTXBuilder::dump() const {\n   return strJoin(lines, \"\\r\\n\");\n }\n \n-PTXInstrExecution &PTXInstrCommon::call(ArrayRef<Operand *> oprs) {\n+PTXInstrExecution &PTXInstrCommon::call(llvm::ArrayRef<Operand *> oprs,\n+                                        bool justBindLLVMOprs) {\n   builder->executions.emplace_back(\n-      std::make_unique<PTXInstrExecution>(this, oprs));\n+      std::make_unique<PTXInstrExecution>(this, oprs, justBindLLVMOprs));\n   return *builder->executions.back();\n }\n \n-PTXInstrExecution &PTXInstrCommon::operator()(ArrayRef<Operand *> oprs) {\n-  return call(oprs);\n+PTXInstrExecution &PTXInstrCommon::operator()(ArrayRef<Operand *> oprs,\n+                                              bool justBindLLVMOprs) {\n+  return call(oprs, justBindLLVMOprs);\n }\n \n std::string PTXInstrExecution::dump() const {\n@@ -149,6 +151,8 @@ std::string PTXInstrExecution::dump() const {\n   }\n \n   std::string instrRepr = strJoin(instr->instrParts, \".\");\n+  if (justBindLLVMOpr)\n+    return instrRepr;\n \n   llvm::SmallVector<std::string, 4> argReprs;\n   for (auto *arg : argsInOrder) {"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "file_content_changes": "@@ -108,8 +108,9 @@ Value createLLVMIntegerConstant(OpBuilder &builder, Location loc, short width,\n \n void llPrintf(StringRef msg, std::initializer_list<Value> args,\n               ConversionPatternRewriter &rewriter) {\n-  assert(args ==``1 &&.size() == 1);\n-  auto msgStr = rewriter.create<mlir::ConstantOp>(UnknownLoc{},\n+  assert(args.size() == 1);\n+  auto *ctx = rewriter.getContext();\n+  auto msgStr = rewriter.create<mlir::ConstantOp>(UnknownLoc::get(ctx),\n                                                   rewriter.getStringAttr(msg));\n \n   PTXBuilder builder;\n@@ -135,17 +136,18 @@ void llPrintf(StringRef msg, std::initializer_list<Value> args,\n \n   // prepare the arguments for vprintf\n   auto msgOpr = builder.newOperand(msgStr, \"r\");\n-  SmallVector<PTXBuilder::Operand *> oprs(msgStr);\n+  SmallVector<PTXBuilder::Operand *> oprs({msgOpr});\n   for (auto arg : args) {\n     auto opr = builder.newOperand(arg, \"r\");\n     oprs.push_back(opr);\n   }\n \n   declareExternFn();\n-  callVPrintfPtrCode(oprs);\n+  callVPrintfPtrCode(oprs, true /*justBindLLVMOprs*/);\n \n-  auto *ctx = rewriter.getContext();\n-  builder.launch(rewriter, UnknownLoc{}, void_ty);\n+  llvm::outs() << \"PTX code snippet: \\n\" << builder.dump() << \"\\n\";\n+\n+  builder.launch(rewriter, UnknownLoc::get(ctx), void_ty, true);\n }\n \n } // namespace LLVM\n@@ -3110,6 +3112,7 @@ struct MMA16816ConversionHelper {\n     Value res = getStructFromElements(loc, fc, rewriter, structTy);\n     rewriter.replaceOp(op, res);\n \n+    LLVM::llPrintf(\"hello world %d\\n\", {i32_val(2008)}, rewriter);\n     return success();\n   }\n "}]