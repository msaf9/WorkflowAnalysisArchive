[{"filename": "lib/Target/LLVMIR/LLVMDIScope.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -21,15 +21,15 @@ namespace {\n \n /// Attempt to extract a filename for the given loc.\n FileLineColLoc extractFileLoc(Location loc) {\n-  if (auto fileLoc = loc.dyn_cast<FileLineColLoc>())\n+  if (auto fileLoc = dyn_cast<FileLineColLoc>(loc))\n     return fileLoc;\n-  if (auto nameLoc = loc.dyn_cast<NameLoc>())\n+  if (auto nameLoc = dyn_cast<NameLoc>(loc))\n     return extractFileLoc(nameLoc.getChildLoc());\n-  if (auto opaqueLoc = loc.dyn_cast<OpaqueLoc>())\n+  if (auto opaqueLoc = dyn_cast<OpaqueLoc>(loc))\n     return extractFileLoc(opaqueLoc.getFallbackLocation());\n-  if (auto fusedLoc = loc.dyn_cast<FusedLoc>())\n+  if (auto fusedLoc = dyn_cast<FusedLoc>(loc))\n     return extractFileLoc(fusedLoc.getLocations().front());\n-  if (auto callerLoc = loc.dyn_cast<CallSiteLoc>())\n+  if (auto callerLoc = dyn_cast<CallSiteLoc>(loc))\n     return extractFileLoc(callerLoc.getCaller());\n   StringAttr unknownFile = mlir::StringAttr::get(loc.getContext(), \"<unknown>\");\n   return mlir::FileLineColLoc::get(unknownFile, 0, 0);"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -350,7 +350,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n   // Simplify the IR\n   pm.addPass(mlir::createCSEPass());\n   pm.addPass(mlir::createSymbolDCEPass());\n-  if (::triton::tools::getBoolEnv(\"TRITON_LINE_INFO\"))\n+  if (!::triton::tools::getBoolEnv(\"TRITON_DISABLE_LINE_INFO\"))\n     pm.addPass(mlir::createLLVMDIScopePass());\n \n   if (failed(pm.run(module))) {"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "file_content_changes": "@@ -153,7 +153,7 @@ class TritonOpBuilder {\n private:\n   std::unique_ptr<mlir::OpBuilder> builder;\n   std::unique_ptr<mlir::Location> lastLoc;\n-  bool lineInfoEnabled = triton::tools::getBoolEnv(\"TRITON_LINE_INFO\");\n+  bool lineInfoEnabled = !triton::tools::getBoolEnv(\"TRITON_DISABLE_LINE_INFO\");\n };\n \n /*****************************************************************************/\n@@ -1664,7 +1664,9 @@ void init_triton_translation(py::module &m) {\n           ofs.close();\n \n           auto lineInfoOption =\n-              triton::tools::getBoolEnv(\"TRITON_LINE_INFO\") ? \" -lineinfo\" : \"\";\n+              triton::tools::getBoolEnv(\"TRITON_DISABLE_LINE_INFO\")\n+                  ? \"\"\n+                  : \" -lineinfo\";\n           auto capabilitySuffix = (capability == 90) ? \"a \" : \" \";\n           auto outputFileName = std::string(_fsrc) + \".o\";\n           auto logRedirect = \" 2> \" + std::string(_flog);"}, {"filename": "python/test/unit/language/test_line_info.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -1,4 +1,3 @@\n-import os\n import subprocess\n import tempfile\n \n@@ -84,7 +83,6 @@ def test_line_info(func: str):\n         subprocess.check_output([\"nvdisasm\", \"-h\"])\n     except BaseException:\n         pytest.skip(\"nvdisasm is not available\")\n-    os.environ[\"TRITON_LINE_INFO\"] = \"1\"\n \n     shape = (128, )\n     x = torch.arange(0, shape[0], dtype=torch.float32, device='cuda')"}]