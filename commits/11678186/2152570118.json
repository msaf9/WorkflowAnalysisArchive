[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -474,6 +474,10 @@ def visit_Compare(self, node):\n         assert len(node.ops) == 1\n         lhs = self.visit(node.left)\n         rhs = self.visit(node.comparators[0])\n+        is_lhs_constexpr = isinstance(lhs, triton.language.constexpr)\n+        is_rhs_constexpr = isinstance(rhs, triton.language.constexpr)\n+        lhs = lhs.value if is_lhs_constexpr else lhs\n+        rhs = rhs.value if is_rhs_constexpr else rhs\n         # handle `is`` and `is not``\n         if type(node.ops[0]) == ast.Is:\n             return triton.language.constexpr(lhs is rhs)\n@@ -489,20 +493,16 @@ def visit_Compare(self, node):\n             ast.GtE: '__ge__',\n         }[type(node.ops[0])]\n         # return a new constexpr if both arg are constexprs\n-        is_lhs_constexpr = isinstance(lhs, triton.language.constexpr)\n-        is_rhs_constexpr = isinstance(rhs, triton.language.constexpr)\n         if is_lhs_constexpr and is_rhs_constexpr:\n-            return triton.language.constexpr(getattr(lhs.value, fn)(rhs.value))\n+            return triton.language.constexpr(getattr(lhs, fn)(rhs))\n         # call operator\n-        lhs = lhs.value if is_lhs_constexpr else lhs\n-        rhs = rhs.value if is_rhs_constexpr else rhs\n         if is_triton_tensor(lhs):\n             return getattr(lhs, fn)(rhs, _builder=self.builder)\n         elif is_triton_tensor(rhs):\n             fn = fn[:2] + 'r' + fn[2:]\n             return getattr(rhs, fn)(lhs, _builder=self.builder)\n         else:\n-            return getattr(lhs, fn)(rhs)\n+            assert False\n \n     def visit_UnaryOp(self, node):\n         op = self.visit(node.operand)"}]