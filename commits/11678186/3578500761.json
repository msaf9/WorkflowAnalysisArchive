[{"filename": "python/matmul-debug.ttgir", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "file_content_changes": "@@ -1,62 +0,0 @@\n-#blocked0 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>\n-#mma = #triton_gpu.mma<{version = 2, warpsPerCTA = [2, 2]}>\n-module attributes {\"triton_gpu.num-warps\" = 4 : i32} {\n-  func public @kernel_0d1d2c3d4d5c6d7d8c9d10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) {\n-    %cst = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma>\n-    %cst_0 = arith.constant dense<0> : tensor<128x128xi32, #mma>\n-    %0 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>\n-    %1 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>\n-    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %3 = tt.splat %arg1 : (i32) -> tensor<128x1xi32, #blocked0>\n-    %4 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>, #blocked0>\n-    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>\n-    %6 = tt.expand_dims %5 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked0}>>) -> tensor<1x64xi32, #blocked0>\n-    %7 = tt.broadcast %6 : (tensor<1x64xi32, #blocked0>) -> tensor<128x64xi32, #blocked0>\n-    %8 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n-    %9 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked1>\n-    %10 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<64x1x!tt.ptr<f16>, #blocked1>\n-    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>\n-    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>\n-    %13 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>\n-    %14 = arith.muli %13, %9 : tensor<64x1xi32, #blocked1>\n-    %15 = tt.addptr %10, %14 : tensor<64x1x!tt.ptr<f16>, #blocked1>\n-    %16 = tt.broadcast %15 : (tensor<64x1x!tt.ptr<f16>, #blocked1>) -> tensor<64x128x!tt.ptr<f16>, #blocked1>\n-    %17 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi32, #blocked1>\n-    %18 = tt.broadcast %17 : (tensor<1x128xi32, #blocked1>) -> tensor<64x128xi32, #blocked1>\n-    %19 = tt.splat %arg7 : (i32) -> tensor<128x1xi32, #blocked1>\n-    %20 = tt.splat %arg6 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>, #blocked1>\n-    %21 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>>) -> tensor<1x128xi32, #mma>\n-    %22 = tt.broadcast %21 : (tensor<1x128xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %23 = tt.broadcast %17 : (tensor<1x128xi32, #blocked1>) -> tensor<128x128xi32, #blocked1>\n-    %24 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked0}>>) -> tensor<128x1xi32, #blocked0>\n-    %25 = arith.muli %24, %3 : tensor<128x1xi32, #blocked0>\n-    %26 = tt.addptr %4, %25 : tensor<128x1x!tt.ptr<f16>, #blocked0>\n-    %27 = tt.broadcast %26 : (tensor<128x1x!tt.ptr<f16>, #blocked0>) -> tensor<128x64x!tt.ptr<f16>, #blocked0>\n-    %28 = tt.addptr %27, %7 : tensor<128x64x!tt.ptr<f16>, #blocked0>\n-    %29 = tt.load %28 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked0>\n-    %30 = tt.addptr %16, %18 : tensor<64x128x!tt.ptr<f16>, #blocked1>\n-    %31 = tt.load %30 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x128xf16, #blocked1>\n-    %32 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<128x1xi32, #mma>\n-    %33 = tt.broadcast %32 : (tensor<128x1xi32, #mma>) -> tensor<128x128xi32, #mma>\n-    %34 = arith.sitofp %cst_0 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %35 = \"triton_gpu.cmpi\"(%33, %22) {predicate = 5 : i64} : (tensor<128x128xi32, #mma>, tensor<128x128xi32, #mma>) -> tensor<128x128xi1, #mma>\n-    %36 = \"triton_gpu.select\"(%35, %34, %cst) : (tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma>, tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #mma>\n-    %37 = triton_gpu.convert_layout %29 : (tensor<128x64xf16, #blocked0>) -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>>\n-    %38 = triton_gpu.convert_layout %31 : (tensor<64x128xf16, #blocked1>) -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>>\n-    %39 = tt.dot %37, %38, %36 {allowTF32 = false, transA = false, transB = false} : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x128xf32, #mma>\n-    %40 = triton_gpu.convert_layout %39 : (tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #blocked1>\n-    %41 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>\n-    %42 = arith.muli %41, %19 : tensor<128x1xi32, #blocked1>\n-    %43 = tt.addptr %20, %42 : tensor<128x1x!tt.ptr<f16>, #blocked1>\n-    %44 = tt.broadcast %43 : (tensor<128x1x!tt.ptr<f16>, #blocked1>) -> tensor<128x128x!tt.ptr<f16>, #blocked1>\n-    %45 = tt.addptr %44, %23 : tensor<128x128x!tt.ptr<f16>, #blocked1>\n-    %46 = arith.truncf %40 : tensor<128x128xf32, #blocked1> to tensor<128x128xf16, #blocked1>\n-    %47 = arith.sitofp %33 : tensor<128x128xi32, #mma> to tensor<128x128xf32, #mma>\n-    %48 = triton_gpu.convert_layout %47 : (tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #blocked1>\n-    %49 = arith.truncf %48 : tensor<128x128xf32, #blocked1> to tensor<128x128xf16, #blocked1>\n-\n-    tt.store %45, %49 : tensor<128x128xf16, #blocked1>\n-    return\n-  }\n-}"}]