[{"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "file_content_changes": "@@ -306,34 +306,26 @@ struct StoreOpConversion\n     if (tensorTy) {\n       auto layout = tensorTy.getEncoding();\n       auto shape = tensorTy.getShape();\n+      unsigned rank = shape.size();\n+      auto sizePerThread = triton::gpu::getSizePerThread(layout);\n+      auto threadsPerWarp = triton::gpu::getThreadsPerWarp(layout);\n+      auto warpsPerCTA = triton::gpu::getWarpsPerCTA(layout);\n+      auto order = triton::gpu::getOrder(layout);\n       auto shapePerCTA = triton::gpu::getShapePerCTA(layout, shape);\n       bool isUniqueData = true;\n-      for (unsigned i = 0; i < shape.size(); ++i) {\n+      for (unsigned i = 0; i < rank; ++i) {\n         if (shape[i] < shapePerCTA[i]) {\n-          isUniqueData = false;\n-          break;\n-        }\n-      }\n-      if (!isUniqueData) {\n-        Value warpSize = i32_val(32);\n-        Value laneId = urem(tid, warpSize);\n-        Value warpId = udiv(tid, warpSize);\n-        auto sizePerThread = triton::gpu::getSizePerThread(layout);\n-        auto threadsPerWarp = triton::gpu::getThreadsPerWarp(layout);\n-        auto warpsPerCTA = triton::gpu::getWarpsPerCTA(layout);\n-        auto order = triton::gpu::getOrder(layout);\n-        unsigned rank = shape.size();\n-\n-        // delinearize threadId to get the base index\n-        SmallVector<Value> multiDimWarpId =\n-            delinearize(rewriter, loc, warpId, warpsPerCTA, order);\n-        SmallVector<Value> multiDimThreadId =\n-            delinearize(rewriter, loc, laneId, threadsPerWarp, order);\n-        for (unsigned i = 0; i < rank; i++) {\n-          Value thread_col =\n+          Value warpSize = i32_val(32);\n+          Value laneId = urem(tid, warpSize);\n+          Value warpId = udiv(tid, warpSize);\n+          SmallVector<Value> multiDimWarpId =\n+              delinearize(rewriter, loc, warpId, warpsPerCTA, order);\n+          SmallVector<Value> multiDimThreadId =\n+              delinearize(rewriter, loc, laneId, threadsPerWarp, order);\n+          Value thread_i =\n               add(mul(multiDimWarpId[i], i32_val(threadsPerWarp[i])),\n                   multiDimThreadId[i]);\n-          mask = and_(mask, icmp_slt(mul(thread_col, i32_val(sizePerThread[i])),\n+          mask = and_(mask, icmp_slt(mul(thread_i, i32_val(sizePerThread[i])),\n                                      i32_val(shape[i])));\n         }\n       }"}]