[{"filename": "python/triton/ops/flash_attention.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "file_content_changes": "@@ -21,7 +21,7 @@ def _fwd_kernel(\n     Out,\n     stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n-    stride_vz, stride_vh, stride_vk, stride_vn,\n+    stride_vz, stride_vh, stride_vn, stride_vk,\n     stride_oz, stride_oh, stride_om, stride_on,\n     Z, H, N_CTX,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n@@ -50,7 +50,7 @@ def _fwd_kernel(\n     V_block_ptr = tl.make_block_ptr(\n         base=V + qvk_offset,\n         shape=(N_CTX, BLOCK_DMODEL),\n-        strides=(stride_vk, stride_vn),\n+        strides=(stride_vn, stride_vk),\n         offsets=(0, 0),\n         block_shape=(BLOCK_N, BLOCK_DMODEL),\n         order=(1, 0)\n@@ -137,7 +137,7 @@ def _bwd_kernel_one_col_block(\n     D,\n     stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n-    stride_vz, stride_vh, stride_vk, stride_vn,\n+    stride_vz, stride_vh, stride_vn, stride_vk,\n     Z, H, N_CTX,\n     off_hz, start_n, num_block,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n@@ -159,7 +159,7 @@ def _bwd_kernel_one_col_block(\n     # initialize pointers to value-like data\n     q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n     k_ptrs = K + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n-    v_ptrs = V + (offs_n[:, None] * stride_vk + offs_k[None, :] * stride_vn)\n+    v_ptrs = V + (offs_n[:, None] * stride_vn + offs_k[None, :] * stride_vk)\n     do_ptrs = DO + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n     dq_ptrs = DQ + (offs_qm[:, None] * stride_qm + offs_k[None, :] * stride_qk)\n     # pointer to row-wise quantities in value-like data\n@@ -212,7 +212,7 @@ def _bwd_kernel_one_col_block(\n         q_ptrs += BLOCK_M * stride_qm\n         do_ptrs += BLOCK_M * stride_qm\n     # write-back\n-    dv_ptrs = DV + (offs_n[:, None] * stride_vk + offs_k[None, :] * stride_vn)\n+    dv_ptrs = DV + (offs_n[:, None] * stride_vn + offs_k[None, :] * stride_vk)\n     dk_ptrs = DK + (offs_n[:, None] * stride_kn + offs_k[None, :] * stride_kk)\n     tl.store(dv_ptrs, dv)\n     tl.store(dk_ptrs, dk)\n@@ -228,7 +228,7 @@ def _bwd_kernel(\n     D,\n     stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n     stride_kz, stride_kh, stride_kn, stride_kk,\n-    stride_vz, stride_vh, stride_vk, stride_vn,\n+    stride_vz, stride_vh, stride_vn, stride_vk,\n     Z, H, N_CTX,\n     BLOCK_M: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n     BLOCK_N: tl.constexpr,\n@@ -259,7 +259,7 @@ def _bwd_kernel(\n                 D,\n                 stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n                 stride_kz, stride_kh, stride_kn, stride_kk,\n-                stride_vz, stride_vh, stride_vk, stride_vn,\n+                stride_vz, stride_vh, stride_vn, stride_vk,\n                 Z, H, N_CTX,\n                 off_hz, start_n, num_block_n,\n                 BLOCK_M=BLOCK_M, BLOCK_DMODEL=BLOCK_DMODEL,\n@@ -276,7 +276,7 @@ def _bwd_kernel(\n             D,\n             stride_dqa, stride_qz, stride_qh, stride_qm, stride_qk,\n             stride_kz, stride_kh, stride_kn, stride_kk,\n-            stride_vz, stride_vh, stride_vk, stride_vn,\n+            stride_vz, stride_vh, stride_vn, stride_vk,\n             Z, H, N_CTX,\n             off_hz, start_n, num_block_n,\n             BLOCK_M=BLOCK_M, BLOCK_DMODEL=BLOCK_DMODEL,"}]