[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "file_content_changes": "@@ -393,6 +393,10 @@ def visit_BinOp(self, node):\n         # visit operand\n         lhs = self.visit(node.left)\n         rhs = self.visit(node.right)\n+        is_lhs_constexpr = isinstance(lhs, triton.language.constexpr)\n+        is_rhs_constexpr = isinstance(rhs, triton.language.constexpr)\n+        lhs = lhs.value if is_lhs_constexpr else lhs\n+        rhs = rhs.value if is_rhs_constexpr else rhs\n         # get function name\n         fn = {\n             ast.Add: '__add__',\n@@ -409,13 +413,9 @@ def visit_BinOp(self, node):\n             ast.BitXor: '__xor__',\n         }[type(node.op)]\n         # return a new constexpr if both arg are constexprs\n-        is_lhs_constexpr = isinstance(lhs, triton.language.constexpr)\n-        is_rhs_constexpr = isinstance(rhs, triton.language.constexpr)\n         if is_lhs_constexpr and is_rhs_constexpr:\n-            return triton.language.constexpr(getattr(lhs.value, fn)(rhs.value))\n+            return triton.language.constexpr(getattr(lhs, fn)(rhs))\n         # call operator\n-        lhs = lhs.value if is_lhs_constexpr else lhs\n-        rhs = rhs.value if is_rhs_constexpr else rhs\n         if is_triton_tensor(lhs):\n             return getattr(lhs, fn)(rhs, _builder=self.builder)\n         elif is_triton_tensor(rhs):"}]