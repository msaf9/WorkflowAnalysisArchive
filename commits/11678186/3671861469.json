[{"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "file_content_changes": "@@ -43,8 +43,6 @@ def matmul_no_scf_kernel(\n     for trans_b in [False, True]\n ])\n def test_gemm_no_scf(SHAPE, NUM_WARPS, TRANS_A, TRANS_B):\n-    guard_for_volta(NUM_WARPS, TRANS_A, TRANS_B)\n-\n     SIZE_M, SIZE_N, SIZE_K = SHAPE\n     if (TRANS_A):\n         a = torch.randn((SIZE_K, SIZE_M), device='cuda', dtype=torch.float16).T\n@@ -83,7 +81,7 @@ def test_gemm_no_scf(SHAPE, NUM_WARPS, TRANS_A, TRANS_B):\n     for trans_b in [False, True]\n ])\n def test_gemm_no_scf_int8(SHAPE, NUM_WARPS, TRANS_A, TRANS_B):\n-    guard_for_volta(NUM_WARPS, TRANS_A, TRANS_B, is_int8=True)\n+    guard_for_volta(is_int8=True)\n \n     SIZE_M, SIZE_N, SIZE_K = SHAPE\n \n@@ -199,7 +197,6 @@ def get_proper_err(a, b, golden):\n     [128, 64, 128, 4, 128, 64, 32, False, True],\n ])\n def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, TRANS_A, TRANS_B):\n-    guard_for_volta(NUM_WARPS, TRANS_A, TRANS_B)\n \n     if (TRANS_A):\n         a = torch.randn((SIZE_K, SIZE_M), device='cuda', dtype=torch.float16).T\n@@ -278,7 +275,7 @@ def matmul_kernel(\n         c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n         tl.store(c_ptrs, accumulator, c_mask)\n \n-    guard_for_volta(num_warps, trans_a=False, trans_b=False, is_tf32=allow_tf32)\n+    guard_for_volta(is_tf32=allow_tf32)\n \n     # Configure the pytorch counterpart\n     torch.backends.cuda.matmul.allow_tf32 = allow_tf32\n@@ -304,7 +301,7 @@ def matmul_kernel(\n         torch.testing.assert_close(c, golden, rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err))\n \n \n-def guard_for_volta(num_warps, trans_a, trans_b, is_int8=False, is_tf32=False):\n+def guard_for_volta(is_int8=False, is_tf32=False):\n     '''\n     Tell whether the test case is valid on Volta GPU.\n     Some features are WIP, so the corresponding support are missing.\n@@ -313,8 +310,7 @@ def guard_for_volta(num_warps, trans_a, trans_b, is_int8=False, is_tf32=False):\n     is_on_Volta = capability[0] < 8\n     # TODO[Superjomn]: Remove the constraints below when features are ready\n     is_feature_supported = not (is_int8 or is_tf32)\n-    is_feature_ready = not (trans_a or trans_b)\n \n     if is_on_Volta:\n-        if (not is_feature_supported) or (not is_feature_ready):\n+        if (not is_feature_supported):\n             pytest.skip(\"Not valid on Volta\")\n\\ No newline at end of file"}]