[{"filename": "python/test/regression/test_performance.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "file_content_changes": "@@ -152,12 +152,11 @@ def test_elementwise(N):\n     cur_mem_clock = nvsmi(['clocks.current.memory'])[0]\n     ref_mem_clock = mem_clocks[DEVICE_NAME]\n     max_gpu_perf = get_dram_gbps()\n-    # assert abs(cur_mem_clock - ref_mem_clock) < 10, f'GPU memmory must run at {ref_mem_clock} MHz'\n+    assert abs(cur_mem_clock - ref_mem_clock) < 10, f'GPU memmory must run at {ref_mem_clock} MHz'\n     z = torch.empty((N, ), dtype=torch.float16, device='cuda')\n     x = torch.randn_like(z)\n     y = torch.randn_like(z)\n     grid = lambda args: (triton.cdiv(N, args['BLOCK_SIZE']), )\n-    pgm = _add[grid](x, y, z, N, BLOCK_SIZE=1024)\n     fn = lambda: _add[grid](x, y, z, N, BLOCK_SIZE=1024)\n     ms = triton.testing.do_bench(fn, percentiles=None, warmup=25, rep=250)\n     cur_gpu_perf = 3. * N * z.element_size() / ms * 1e-6"}]