[{"filename": "include/triton/Analysis/Utility.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "file_content_changes": "@@ -89,6 +89,14 @@ bool isSingleValue(Value value);\n bool isMmaToDotShortcut(triton::gpu::MmaEncodingAttr &mmaLayout,\n                         triton::gpu::DotOperandEncodingAttr &dotOperandLayout);\n \n+/// Multi-root DAG topological sort.\n+/// Performs a topological sort of the Operation in the `toSort` SetVector.\n+/// Returns a topologically sorted SetVector.\n+/// It is faster than mlir::topologicalSort because it prunes nodes that have\n+/// been visited before.\n+SetVector<Operation *>\n+multiRootTopologicalSort(const SetVector<Operation *> &toSort);\n+\n } // namespace mlir\n \n #endif // TRITON_ANALYSIS_UTILITY_H"}, {"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "file_content_changes": "@@ -228,7 +228,8 @@ def TT_AtomicCASOp : TT_Op<\"atomic_cas\", [MemoryEffects<[MemRead]>,\n // Shape Manipulation Ops\n //\n def TT_SplatOp : TT_Op<\"splat\", [NoSideEffect,\n-                                 SameOperandsAndResultElementType]> {\n+                                 SameOperandsAndResultElementType,\n+                                 SameOperandsAndResultEncoding]> {\n     let summary = \"splat\";\n \n     let arguments = (ins TT_Type:$src);\n@@ -253,7 +254,8 @@ def TT_ExpandDimsOp : TT_Op<\"expand_dims\", [NoSideEffect,\n }\n \n def TT_ViewOp : TT_Op<\"view\", [NoSideEffect,\n-                               SameOperandsAndResultElementType]> {\n+                               SameOperandsAndResultElementType,\n+                               SameOperandsAndResultEncoding]> {\n     let summary = \"view\";\n \n     let arguments = (ins TT_Tensor:$src);\n@@ -265,7 +267,8 @@ def TT_ViewOp : TT_Op<\"view\", [NoSideEffect,\n }\n \n def TT_BroadcastOp : TT_Op<\"broadcast\", [NoSideEffect,\n-                                         SameOperandsAndResultElementType]> {\n+                                         SameOperandsAndResultElementType,\n+                                         SameOperandsAndResultEncoding]> {\n     let summary = \"broadcast. No left-padding as of now.\";\n \n     let arguments = (ins TT_Type:$src);\n@@ -278,7 +281,8 @@ def TT_BroadcastOp : TT_Op<\"broadcast\", [NoSideEffect,\n }\n \n def TT_CatOp : TT_Op<\"cat\", [NoSideEffect,\n-                             SameOperandsAndResultElementType]> {\n+                             SameOperandsAndResultElementType,\n+                             SameOperandsAndResultEncoding]> {\n     let summary = \"concatenate 2 tensors\";\n \n     let arguments = (ins TT_Tensor:$lhs, TT_Tensor:$rhs);\n@@ -289,7 +293,9 @@ def TT_CatOp : TT_Op<\"cat\", [NoSideEffect,\n }\n \n def TT_TransOp : TT_Op<\"trans\", [NoSideEffect,\n-                                 DeclareOpInterfaceMethods<InferTypeOpInterface>]> {\n+                                 DeclareOpInterfaceMethods<InferTypeOpInterface>,\n+                                 SameOperandsAndResultElementType,\n+                                 SameOperandsAndResultEncoding]> {\n \n     let summary = \"transpose a tensor\";\n "}, {"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "file_content_changes": "@@ -2,6 +2,7 @@\n #include \"mlir/IR/Dialect.h\"\n #include \"triton/Dialect/Triton/IR/Dialect.h\"\n #include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n+#include <deque>\n \n namespace mlir {\n \n@@ -177,4 +178,126 @@ bool isSingleValue(Value value) {\n   return true;\n }\n \n+namespace {\n+\n+/// A data structure similar to SetVector but maintains\n+/// a deque instead of a vector to allow for efficient\n+/// push_back and pop_front operations.\n+/// Using SetVector doesn't suffice our needs because\n+/// it only pushes and pops from the back.\n+/// For example, if we have a queue like this:\n+/// 0->4 1->2->3\n+///    ^--------\n+/// where 3 depends on 4, once we pop 3, we found\n+/// 4 is not ready, so we check 2 and push 3 back\n+/// to the queue.\n+struct DFSSubgraphState {\n+  DFSSubgraphState() : set(), deque() {}\n+  DenseSet<Operation *> set;\n+  std::deque<Operation *> deque;\n+\n+  bool push_back(Operation *op) {\n+    if (set.insert(op).second) {\n+      deque.push_back(op);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  Operation *pop_front() {\n+    Operation *op = deque.front();\n+    deque.pop_front();\n+    set.erase(op);\n+    return op;\n+  }\n+\n+  bool empty() { return deque.empty(); }\n+};\n+\n+/// DFS post-order implementation that maintains a global count to work across\n+/// multiple invocations, to help implement topological sort on multi-root DAGs.\n+/// We traverse all operations but only record the ones that appear in\n+/// `toSort` for the final result.\n+struct DFSState {\n+  DFSState(const SetVector<Operation *> &set) : toSort(set), seen() {}\n+  const SetVector<Operation *> &toSort;\n+  SmallVector<Operation *, 16> topologicalCounts;\n+  DenseSet<Operation *> seen;\n+\n+  /// We mark each op as ready if all its operands are seen. If an op is ready,\n+  /// we add it to the queue. Otherwise, we keep adding its operands to the\n+  /// ancestors set.\n+  void addToReadyQueue(Operation *op, DFSSubgraphState &subGraph,\n+                       SmallVector<Operation *, 4> &readyQueue) {\n+    bool ready = true;\n+    for (Value operand : op->getOperands()) {\n+      auto def = operand.getDefiningOp();\n+      if (def && !seen.count(def)) {\n+        subGraph.push_back(def);\n+        ready = false;\n+      }\n+    }\n+    if (ready)\n+      readyQueue.push_back(op);\n+  }\n+};\n+\n+void dfsPostorder(Operation *root, DFSState *state) {\n+  DFSSubgraphState subGraph;\n+  subGraph.push_back(root);\n+  SmallVector<Operation *> ops;\n+  while (!subGraph.empty()) {\n+    // Nodes in the ready queue are ready to be processed.\n+    // Meaning that either their operands are all seen or they have null\n+    // operands.\n+    SmallVector<Operation *, 4> readyQueue;\n+    auto *current = subGraph.pop_front();\n+    state->addToReadyQueue(current, subGraph, readyQueue);\n+    while (!readyQueue.empty()) {\n+      Operation *current = readyQueue.pop_back_val();\n+      if (!state->seen.insert(current).second)\n+        continue;\n+      ops.push_back(current);\n+      for (Value result : current->getResults()) {\n+        for (Operation *op : result.getUsers())\n+          state->addToReadyQueue(op, subGraph, readyQueue);\n+      }\n+      for (Region &region : current->getRegions()) {\n+        for (Operation &op : region.getOps())\n+          state->addToReadyQueue(&op, subGraph, readyQueue);\n+      }\n+    }\n+  }\n+\n+  for (Operation *op : llvm::reverse(ops)) {\n+    if (state->toSort.count(op) > 0)\n+      state->topologicalCounts.push_back(op);\n+  }\n+}\n+\n+} // namespace\n+\n+SetVector<Operation *>\n+multiRootTopologicalSort(const SetVector<Operation *> &toSort) {\n+  if (toSort.empty()) {\n+    return toSort;\n+  }\n+\n+  // Run from each root with global count and `seen` set.\n+  DFSState state(toSort);\n+  for (auto *s : toSort) {\n+    assert(toSort.count(s) == 1 && \"NYI: multi-sets not supported\");\n+    dfsPostorder(s, &state);\n+  }\n+\n+  // Reorder and return.\n+  SetVector<Operation *> res;\n+  for (auto it = state.topologicalCounts.rbegin(),\n+            eit = state.topologicalCounts.rend();\n+       it != eit; ++it) {\n+    res.insert(*it);\n+  }\n+  return res;\n+}\n+\n } // namespace mlir"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -397,12 +397,12 @@ Operation *cloneWithInferType(mlir::PatternRewriter &rewriter, Operation *op,\n   newOp->getResult(0).setType(newType);\n   auto typeInfer = dyn_cast<InferTypeOpInterface>(newOp);\n   if (typeInfer) {\n-    SmallVector<Type, 1> newType;\n+    SmallVector<Type, 1> newTypes;\n     auto success = typeInfer.inferReturnTypes(\n         newOp->getContext(), newOp->getLoc(), newOp->getOperands(),\n-        newOp->getAttrDictionary(), newOp->getRegions(), newType);\n+        newOp->getAttrDictionary(), newOp->getRegions(), newTypes);\n     if (succeeded(success))\n-      newOp->getResult(0).setType(newType.front());\n+      newOp->getResult(0).setType(newTypes.front());\n   }\n   return newOp;\n }\n@@ -674,7 +674,7 @@ class RematerializeBackward : public mlir::RewritePattern {\n       else\n         sortedValues.push_back(v);\n     }\n-    tmp = mlir::topologicalSort(tmp);\n+    tmp = mlir::multiRootTopologicalSort(tmp);\n     for (Operation *op : tmp)\n       sortedValues.push_back(op->getResult(0));\n "}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "file_content_changes": "@@ -905,6 +905,13 @@ def kernel_suffix(signature, specialization):\n # ------------------------------------------------------------------------------\n \n \n+def parse_mlir_module(path, context):\n+    module = _triton.ir.parse_mlir_module(path, context)\n+    # module takes ownership of the context\n+    module.context = context\n+    return module\n+\n+\n def build_triton_ir(fn, signature, specialization, constants):\n     # canonicalize signature\n     if isinstance(signature, str):\n@@ -1541,9 +1548,9 @@ def compile(fn, **kwargs):\n     # build compilation stages\n     stages = {\n         \"ast\": (lambda path: fn, None),\n-        \"ttir\": (lambda path: _triton.ir.parse_mlir_module(path, context),\n+        \"ttir\": (lambda path: parse_mlir_module(path, context),\n                  lambda src: ast_to_ttir(src, signature, configs[0], constants)),\n-        \"ttgir\": (lambda path: _triton.ir.parse_mlir_module(path, context),\n+        \"ttgir\": (lambda path: parse_mlir_module(path, context),\n                   lambda src: ttir_to_ttgir(src, num_warps, num_stages, capability)),\n         \"llir\": (lambda path: Path(path).read_text(),\n                  lambda src: ttgir_to_llir(src, extern_libs, capability)),"}, {"filename": "test/TritonGPU/combine.mlir", "status": "modified", "additions": 477, "deletions": 1, "changes": 478, "file_content_changes": "@@ -234,4 +234,480 @@ func @select(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f6\n     scf.yield %30 : tensor<1x512xf64, #blocked2>\n   }\n   return\n-}\n\\ No newline at end of file\n+}\n+\n+// Make sure the following IR doesn't hang the compiler.\n+// CHECK-LABEL: long_func\n+func public @long_func(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f64> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f64> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg12: !tt.ptr<i32> {tt.divisibility = 16 : i32}, %arg13: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg14: !tt.ptr<f64> {tt.divisibility = 16 : i32}, %arg15: !tt.ptr<f64> {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}) {\n+  %cst = arith.constant dense<1.000000e+00> : tensor<1024xf32, #blocked0>\n+  %cst_0 = arith.constant dense<5.000000e-04> : tensor<1024xf32, #blocked0>\n+  %cst_1 = arith.constant dense<0.999499976> : tensor<1024xf32, #blocked0>\n+  %cst_2 = arith.constant dense<1.000000e+04> : tensor<1024xf32, #blocked0>\n+  %cst_3 = arith.constant dense<5000> : tensor<1024xi32, #blocked0>\n+  %cst_4 = arith.constant dense<150> : tensor<1024xi32, #blocked0>\n+  %cst_5 = arith.constant dense<false> : tensor<1024xi1, #blocked0>\n+  %cst_6 = arith.constant dense<2> : tensor<1024xi32, #blocked0>\n+  %cst_7 = arith.constant dense<4999> : tensor<1024xi32, #blocked0>\n+  %cst_8 = arith.constant dense<2499> : tensor<1024xi32, #blocked0>\n+  %cst_9 = arith.constant dense<2500> : tensor<1024xi32, #blocked0>\n+  %cst_10 = arith.constant dense<0.91629076> : tensor<1024xf32, #blocked0>\n+  %c2499_i32 = arith.constant 2499 : i32\n+  %cst_11 = arith.constant dense<1024> : tensor<1024xi32, #blocked0>\n+  %c1024_i32 = arith.constant 1024 : i32\n+  %cst_12 = arith.constant dense<1> : tensor<1024xi32, #blocked0>\n+  %cst_13 = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked0>\n+  %cst_14 = arith.constant dense<0> : tensor<1024xi32, #blocked0>\n+  %0 = tt.get_program_id {axis = 0 : i32} : i32\n+  %1 = arith.muli %0, %c1024_i32 : i32\n+  %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked0>\n+  %3 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked0>\n+  %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked0>\n+  %5 = \"triton_gpu.cmpi\"(%4, %cst_11) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %6 = tt.splat %arg5 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %7 = tt.addptr %6, %4 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %8 = triton_gpu.convert_layout %7 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked1>\n+  %9 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked1>\n+  %10 = tt.load %8, %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked1>\n+  %11 = triton_gpu.convert_layout %10 : (tensor<1024xf32, #blocked1>) -> tensor<1024xf32, #blocked0>\n+  %12 = tt.splat %arg7 : (!tt.ptr<i64>) -> tensor<1024x!tt.ptr<i64>, #blocked0>\n+  %13 = tt.addptr %12, %4 : tensor<1024x!tt.ptr<i64>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %14 = triton_gpu.convert_layout %13 : (tensor<1024x!tt.ptr<i64>, #blocked0>) -> tensor<1024x!tt.ptr<i64>, #blocked2>\n+  %15 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked2>\n+  %16 = tt.load %14, %15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xi64, #blocked2>\n+  %17 = triton_gpu.convert_layout %16 : (tensor<1024xi64, #blocked2>) -> tensor<1024xi64, #blocked0>\n+  %18 = tt.splat %arg8 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %19 = tt.addptr %18, %4 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %20 = triton_gpu.convert_layout %19 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked1>\n+  %21 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked1>\n+  %22 = tt.load %20, %21 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked1>\n+  %23 = triton_gpu.convert_layout %22 : (tensor<1024xf32, #blocked1>) -> tensor<1024xf32, #blocked0>\n+  %24 = arith.subf %cst_13, %11 : tensor<1024xf32, #blocked0>\n+  %25 = math.exp %24 : tensor<1024xf32, #blocked0>\n+  %26 = arith.sitofp %cst_12 : tensor<1024xi32, #blocked0> to tensor<1024xf32, #blocked0>\n+  %27 = arith.addf %25, %26 : tensor<1024xf32, #blocked0>\n+  %28 = arith.divf %26, %27 : tensor<1024xf32, #blocked0>\n+  %29 = tt.addptr %arg6, %c2499_i32 : !tt.ptr<f32>, i32\n+  %30 = tt.load %29 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32\n+  %31 = arith.subf %11, %cst_10 : tensor<1024xf32, #blocked0>\n+  %32 = arith.subf %cst_13, %31 : tensor<1024xf32, #blocked0>\n+  %33 = math.exp %32 : tensor<1024xf32, #blocked0>\n+  %34 = arith.addf %33, %26 : tensor<1024xf32, #blocked0>\n+  %35 = arith.divf %26, %34 : tensor<1024xf32, #blocked0>\n+  %36 = tt.splat %30 : (f32) -> tensor<1024xf32, #blocked0>\n+  %37 = \"triton_gpu.cmpf\"(%36, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %38 = \"triton_gpu.select\"(%37, %cst_14, %cst_9) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %39 = \"triton_gpu.select\"(%37, %cst_8, %cst_7) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %40 = arith.subi %39, %38 : tensor<1024xi32, #blocked0>\n+  %41 = \"triton_gpu.cmpi\"(%40, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %42 = \"triton_gpu.cmpi\"(%41, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %43 = arith.remsi %40, %cst_6 : tensor<1024xi32, #blocked0>\n+  %44 = \"triton_gpu.cmpi\"(%43, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %45 = arith.divsi %40, %cst_6 : tensor<1024xi32, #blocked0>\n+  %46 = arith.subi %45, %cst_12 : tensor<1024xi32, #blocked0>\n+  %47 = \"triton_gpu.select\"(%44, %46, %45) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %48 = \"triton_gpu.select\"(%42, %47, %45) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %49 = arith.addi %38, %48 : tensor<1024xi32, #blocked0>\n+  %50 = \"triton_gpu.cmpi\"(%38, %39) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %51 = \"triton_gpu.select\"(%50, %49, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %52 = tt.splat %arg6 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %53 = tt.addptr %52, %51 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %54 = triton_gpu.convert_layout %53 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %55 = tt.load %54 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %56 = \"triton_gpu.cmpf\"(%55, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %57 = \"triton_gpu.cmpi\"(%56, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %58 = arith.andi %57, %50 : tensor<1024xi1, #blocked0>\n+  %59 = arith.addi %51, %cst_12 : tensor<1024xi32, #blocked0>\n+  %60 = \"triton_gpu.select\"(%58, %59, %38) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %61 = arith.andi %56, %50 : tensor<1024xi1, #blocked0>\n+  %62 = \"triton_gpu.select\"(%61, %51, %39) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %63 = \"triton_gpu.cmpi\"(%60, %62) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %64 = arith.subi %62, %60 : tensor<1024xi32, #blocked0>\n+  %65 = \"triton_gpu.cmpi\"(%64, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %66 = \"triton_gpu.cmpi\"(%65, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %67 = arith.remsi %64, %cst_6 : tensor<1024xi32, #blocked0>\n+  %68 = \"triton_gpu.cmpi\"(%67, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %69 = arith.divsi %64, %cst_6 : tensor<1024xi32, #blocked0>\n+  %70 = arith.subi %69, %cst_12 : tensor<1024xi32, #blocked0>\n+  %71 = \"triton_gpu.select\"(%68, %70, %69) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %72 = \"triton_gpu.select\"(%66, %71, %69) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %73 = arith.addi %60, %72 : tensor<1024xi32, #blocked0>\n+  %74 = \"triton_gpu.select\"(%63, %73, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %75 = tt.addptr %52, %74 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %76 = triton_gpu.convert_layout %75 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %77 = tt.load %76 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %78 = \"triton_gpu.cmpf\"(%77, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %79 = \"triton_gpu.cmpi\"(%78, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %80 = arith.andi %79, %63 : tensor<1024xi1, #blocked0>\n+  %81 = arith.addi %74, %cst_12 : tensor<1024xi32, #blocked0>\n+  %82 = \"triton_gpu.select\"(%80, %81, %60) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %83 = arith.andi %78, %63 : tensor<1024xi1, #blocked0>\n+  %84 = \"triton_gpu.select\"(%83, %74, %62) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %85 = \"triton_gpu.cmpi\"(%82, %84) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %86 = arith.subi %84, %82 : tensor<1024xi32, #blocked0>\n+  %87 = \"triton_gpu.cmpi\"(%86, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %88 = \"triton_gpu.cmpi\"(%87, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %89 = arith.remsi %86, %cst_6 : tensor<1024xi32, #blocked0>\n+  %90 = \"triton_gpu.cmpi\"(%89, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %91 = arith.divsi %86, %cst_6 : tensor<1024xi32, #blocked0>\n+  %92 = arith.subi %91, %cst_12 : tensor<1024xi32, #blocked0>\n+  %93 = \"triton_gpu.select\"(%90, %92, %91) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %94 = \"triton_gpu.select\"(%88, %93, %91) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %95 = arith.addi %82, %94 : tensor<1024xi32, #blocked0>\n+  %96 = \"triton_gpu.select\"(%85, %95, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %97 = tt.addptr %52, %96 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %98 = triton_gpu.convert_layout %97 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %99 = tt.load %98 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %100 = \"triton_gpu.cmpf\"(%99, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %101 = \"triton_gpu.cmpi\"(%100, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %102 = arith.andi %101, %85 : tensor<1024xi1, #blocked0>\n+  %103 = arith.addi %96, %cst_12 : tensor<1024xi32, #blocked0>\n+  %104 = \"triton_gpu.select\"(%102, %103, %82) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %105 = arith.andi %100, %85 : tensor<1024xi1, #blocked0>\n+  %106 = \"triton_gpu.select\"(%105, %96, %84) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %107 = \"triton_gpu.cmpi\"(%104, %106) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %108 = arith.subi %106, %104 : tensor<1024xi32, #blocked0>\n+  %109 = \"triton_gpu.cmpi\"(%108, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %110 = \"triton_gpu.cmpi\"(%109, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %111 = arith.remsi %108, %cst_6 : tensor<1024xi32, #blocked0>\n+  %112 = \"triton_gpu.cmpi\"(%111, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %113 = arith.divsi %108, %cst_6 : tensor<1024xi32, #blocked0>\n+  %114 = arith.subi %113, %cst_12 : tensor<1024xi32, #blocked0>\n+  %115 = \"triton_gpu.select\"(%112, %114, %113) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %116 = \"triton_gpu.select\"(%110, %115, %113) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %117 = arith.addi %104, %116 : tensor<1024xi32, #blocked0>\n+  %118 = \"triton_gpu.select\"(%107, %117, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %119 = tt.addptr %52, %118 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %120 = triton_gpu.convert_layout %119 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %121 = tt.load %120 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %122 = \"triton_gpu.cmpf\"(%121, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %123 = \"triton_gpu.cmpi\"(%122, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %124 = arith.andi %123, %107 : tensor<1024xi1, #blocked0>\n+  %125 = arith.addi %118, %cst_12 : tensor<1024xi32, #blocked0>\n+  %126 = \"triton_gpu.select\"(%124, %125, %104) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %127 = arith.andi %122, %107 : tensor<1024xi1, #blocked0>\n+  %128 = \"triton_gpu.select\"(%127, %118, %106) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %129 = \"triton_gpu.cmpi\"(%126, %128) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %130 = arith.subi %128, %126 : tensor<1024xi32, #blocked0>\n+  %131 = \"triton_gpu.cmpi\"(%130, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %132 = \"triton_gpu.cmpi\"(%131, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %133 = arith.remsi %130, %cst_6 : tensor<1024xi32, #blocked0>\n+  %134 = \"triton_gpu.cmpi\"(%133, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %135 = arith.divsi %130, %cst_6 : tensor<1024xi32, #blocked0>\n+  %136 = arith.subi %135, %cst_12 : tensor<1024xi32, #blocked0>\n+  %137 = \"triton_gpu.select\"(%134, %136, %135) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %138 = \"triton_gpu.select\"(%132, %137, %135) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %139 = arith.addi %126, %138 : tensor<1024xi32, #blocked0>\n+  %140 = \"triton_gpu.select\"(%129, %139, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %141 = tt.addptr %52, %140 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %142 = triton_gpu.convert_layout %141 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %143 = tt.load %142 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %144 = \"triton_gpu.cmpf\"(%143, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %145 = \"triton_gpu.cmpi\"(%144, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %146 = arith.andi %145, %129 : tensor<1024xi1, #blocked0>\n+  %147 = arith.addi %140, %cst_12 : tensor<1024xi32, #blocked0>\n+  %148 = \"triton_gpu.select\"(%146, %147, %126) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %149 = arith.andi %144, %129 : tensor<1024xi1, #blocked0>\n+  %150 = \"triton_gpu.select\"(%149, %140, %128) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %151 = \"triton_gpu.cmpi\"(%148, %150) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %152 = arith.subi %150, %148 : tensor<1024xi32, #blocked0>\n+  %153 = \"triton_gpu.cmpi\"(%152, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %154 = \"triton_gpu.cmpi\"(%153, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %155 = arith.remsi %152, %cst_6 : tensor<1024xi32, #blocked0>\n+  %156 = \"triton_gpu.cmpi\"(%155, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %157 = arith.divsi %152, %cst_6 : tensor<1024xi32, #blocked0>\n+  %158 = arith.subi %157, %cst_12 : tensor<1024xi32, #blocked0>\n+  %159 = \"triton_gpu.select\"(%156, %158, %157) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %160 = \"triton_gpu.select\"(%154, %159, %157) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %161 = arith.addi %148, %160 : tensor<1024xi32, #blocked0>\n+  %162 = \"triton_gpu.select\"(%151, %161, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %163 = tt.addptr %52, %162 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %164 = triton_gpu.convert_layout %163 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %165 = tt.load %164 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %166 = \"triton_gpu.cmpf\"(%165, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %167 = \"triton_gpu.cmpi\"(%166, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %168 = arith.andi %167, %151 : tensor<1024xi1, #blocked0>\n+  %169 = arith.addi %162, %cst_12 : tensor<1024xi32, #blocked0>\n+  %170 = \"triton_gpu.select\"(%168, %169, %148) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %171 = arith.andi %166, %151 : tensor<1024xi1, #blocked0>\n+  %172 = \"triton_gpu.select\"(%171, %162, %150) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %173 = \"triton_gpu.cmpi\"(%170, %172) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %174 = arith.subi %172, %170 : tensor<1024xi32, #blocked0>\n+  %175 = \"triton_gpu.cmpi\"(%174, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %176 = \"triton_gpu.cmpi\"(%175, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %177 = arith.remsi %174, %cst_6 : tensor<1024xi32, #blocked0>\n+  %178 = \"triton_gpu.cmpi\"(%177, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %179 = arith.divsi %174, %cst_6 : tensor<1024xi32, #blocked0>\n+  %180 = arith.subi %179, %cst_12 : tensor<1024xi32, #blocked0>\n+  %181 = \"triton_gpu.select\"(%178, %180, %179) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %182 = \"triton_gpu.select\"(%176, %181, %179) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %183 = arith.addi %170, %182 : tensor<1024xi32, #blocked0>\n+  %184 = \"triton_gpu.select\"(%173, %183, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %185 = tt.addptr %52, %184 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %186 = triton_gpu.convert_layout %185 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %187 = tt.load %186 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %188 = \"triton_gpu.cmpf\"(%187, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %189 = \"triton_gpu.cmpi\"(%188, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %190 = arith.andi %189, %173 : tensor<1024xi1, #blocked0>\n+  %191 = arith.addi %184, %cst_12 : tensor<1024xi32, #blocked0>\n+  %192 = \"triton_gpu.select\"(%190, %191, %170) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %193 = arith.andi %188, %173 : tensor<1024xi1, #blocked0>\n+  %194 = \"triton_gpu.select\"(%193, %184, %172) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %195 = \"triton_gpu.cmpi\"(%192, %194) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %196 = arith.subi %194, %192 : tensor<1024xi32, #blocked0>\n+  %197 = \"triton_gpu.cmpi\"(%196, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %198 = \"triton_gpu.cmpi\"(%197, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %199 = arith.remsi %196, %cst_6 : tensor<1024xi32, #blocked0>\n+  %200 = \"triton_gpu.cmpi\"(%199, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %201 = arith.divsi %196, %cst_6 : tensor<1024xi32, #blocked0>\n+  %202 = arith.subi %201, %cst_12 : tensor<1024xi32, #blocked0>\n+  %203 = \"triton_gpu.select\"(%200, %202, %201) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %204 = \"triton_gpu.select\"(%198, %203, %201) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %205 = arith.addi %192, %204 : tensor<1024xi32, #blocked0>\n+  %206 = \"triton_gpu.select\"(%195, %205, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %207 = tt.addptr %52, %206 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %208 = triton_gpu.convert_layout %207 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %209 = tt.load %208 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %210 = \"triton_gpu.cmpf\"(%209, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %211 = \"triton_gpu.cmpi\"(%210, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %212 = arith.andi %211, %195 : tensor<1024xi1, #blocked0>\n+  %213 = arith.addi %206, %cst_12 : tensor<1024xi32, #blocked0>\n+  %214 = \"triton_gpu.select\"(%212, %213, %192) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %215 = arith.andi %210, %195 : tensor<1024xi1, #blocked0>\n+  %216 = \"triton_gpu.select\"(%215, %206, %194) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %217 = \"triton_gpu.cmpi\"(%214, %216) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %218 = arith.subi %216, %214 : tensor<1024xi32, #blocked0>\n+  %219 = \"triton_gpu.cmpi\"(%218, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %220 = \"triton_gpu.cmpi\"(%219, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %221 = arith.remsi %218, %cst_6 : tensor<1024xi32, #blocked0>\n+  %222 = \"triton_gpu.cmpi\"(%221, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %223 = arith.divsi %218, %cst_6 : tensor<1024xi32, #blocked0>\n+  %224 = arith.subi %223, %cst_12 : tensor<1024xi32, #blocked0>\n+  %225 = \"triton_gpu.select\"(%222, %224, %223) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %226 = \"triton_gpu.select\"(%220, %225, %223) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %227 = arith.addi %214, %226 : tensor<1024xi32, #blocked0>\n+  %228 = \"triton_gpu.select\"(%217, %227, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %229 = tt.addptr %52, %228 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %230 = triton_gpu.convert_layout %229 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %231 = tt.load %230 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %232 = \"triton_gpu.cmpf\"(%231, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %233 = \"triton_gpu.cmpi\"(%232, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %234 = arith.andi %233, %217 : tensor<1024xi1, #blocked0>\n+  %235 = arith.addi %228, %cst_12 : tensor<1024xi32, #blocked0>\n+  %236 = \"triton_gpu.select\"(%234, %235, %214) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %237 = arith.andi %232, %217 : tensor<1024xi1, #blocked0>\n+  %238 = \"triton_gpu.select\"(%237, %228, %216) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %239 = \"triton_gpu.cmpi\"(%236, %238) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %240 = arith.subi %238, %236 : tensor<1024xi32, #blocked0>\n+  %241 = \"triton_gpu.cmpi\"(%240, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %242 = \"triton_gpu.cmpi\"(%241, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %243 = arith.remsi %240, %cst_6 : tensor<1024xi32, #blocked0>\n+  %244 = \"triton_gpu.cmpi\"(%243, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %245 = arith.divsi %240, %cst_6 : tensor<1024xi32, #blocked0>\n+  %246 = arith.subi %245, %cst_12 : tensor<1024xi32, #blocked0>\n+  %247 = \"triton_gpu.select\"(%244, %246, %245) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %248 = \"triton_gpu.select\"(%242, %247, %245) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %249 = arith.addi %236, %248 : tensor<1024xi32, #blocked0>\n+  %250 = \"triton_gpu.select\"(%239, %249, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %251 = tt.addptr %52, %250 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %252 = triton_gpu.convert_layout %251 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %253 = tt.load %252 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %254 = \"triton_gpu.cmpf\"(%253, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %255 = \"triton_gpu.cmpi\"(%254, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %256 = arith.andi %255, %239 : tensor<1024xi1, #blocked0>\n+  %257 = arith.addi %250, %cst_12 : tensor<1024xi32, #blocked0>\n+  %258 = \"triton_gpu.select\"(%256, %257, %236) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %259 = arith.andi %254, %239 : tensor<1024xi1, #blocked0>\n+  %260 = \"triton_gpu.select\"(%259, %250, %238) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %261 = \"triton_gpu.cmpi\"(%258, %260) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %262 = arith.subi %260, %258 : tensor<1024xi32, #blocked0>\n+  %263 = \"triton_gpu.cmpi\"(%262, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %264 = \"triton_gpu.cmpi\"(%263, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %265 = arith.remsi %262, %cst_6 : tensor<1024xi32, #blocked0>\n+  %266 = \"triton_gpu.cmpi\"(%265, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %267 = arith.divsi %262, %cst_6 : tensor<1024xi32, #blocked0>\n+  %268 = arith.subi %267, %cst_12 : tensor<1024xi32, #blocked0>\n+  %269 = \"triton_gpu.select\"(%266, %268, %267) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %270 = \"triton_gpu.select\"(%264, %269, %267) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %271 = arith.addi %258, %270 : tensor<1024xi32, #blocked0>\n+  %272 = \"triton_gpu.select\"(%261, %271, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %273 = tt.addptr %52, %272 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %274 = triton_gpu.convert_layout %273 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %275 = tt.load %274 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %276 = \"triton_gpu.cmpf\"(%275, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %277 = \"triton_gpu.cmpi\"(%276, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %278 = arith.andi %277, %261 : tensor<1024xi1, #blocked0>\n+  %279 = arith.addi %272, %cst_12 : tensor<1024xi32, #blocked0>\n+  %280 = \"triton_gpu.select\"(%278, %279, %258) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %281 = arith.andi %276, %261 : tensor<1024xi1, #blocked0>\n+  %282 = \"triton_gpu.select\"(%281, %272, %260) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %283 = \"triton_gpu.cmpi\"(%280, %282) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %284 = arith.subi %282, %280 : tensor<1024xi32, #blocked0>\n+  %285 = \"triton_gpu.cmpi\"(%284, %cst_14) {predicate = 2 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %286 = \"triton_gpu.cmpi\"(%285, %cst_5) {predicate = 1 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %287 = arith.remsi %284, %cst_6 : tensor<1024xi32, #blocked0>\n+  %288 = \"triton_gpu.cmpi\"(%287, %cst_14) {predicate = 1 : i64} : (tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %289 = arith.divsi %284, %cst_6 : tensor<1024xi32, #blocked0>\n+  %290 = arith.subi %289, %cst_12 : tensor<1024xi32, #blocked0>\n+  %291 = \"triton_gpu.select\"(%288, %290, %289) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %292 = \"triton_gpu.select\"(%286, %291, %289) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %293 = arith.addi %280, %292 : tensor<1024xi32, #blocked0>\n+  %294 = \"triton_gpu.select\"(%283, %293, %cst_14) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %295 = tt.addptr %52, %294 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %296 = triton_gpu.convert_layout %295 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %297 = tt.load %296 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked0>\n+  %298 = \"triton_gpu.cmpf\"(%297, %35) {predicate = 3 : i64} : (tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %299 = \"triton_gpu.cmpi\"(%298, %cst_5) {predicate = 0 : i64} : (tensor<1024xi1, #blocked0>, tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %300 = arith.andi %299, %283 : tensor<1024xi1, #blocked0>\n+  %301 = arith.addi %294, %cst_12 : tensor<1024xi32, #blocked0>\n+  %302 = \"triton_gpu.select\"(%300, %301, %280) : (tensor<1024xi1, #blocked0>, tensor<1024xi32, #blocked0>, tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked0>\n+  %303 = arith.extsi %cst_12 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %304 = \"triton_gpu.cmpi\"(%17, %303) {predicate = 0 : i64} : (tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %305 = arith.fptosi %23 : tensor<1024xf32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %306 = arith.extsi %cst_14 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %307 = \"triton_gpu.cmpi\"(%306, %305) {predicate = 4 : i64} : (tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %308 = arith.extsi %cst_4 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %309 = \"triton_gpu.cmpi\"(%305, %308) {predicate = 4 : i64} : (tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %310 = \"triton_gpu.select\"(%309, %306, %305) : (tensor<1024xi1, #blocked0>, tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi64, #blocked0>\n+  %311 = \"triton_gpu.select\"(%307, %306, %310) : (tensor<1024xi1, #blocked0>, tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi64, #blocked0>\n+  %312 = \"triton_gpu.select\"(%304, %311, %306) : (tensor<1024xi1, #blocked0>, tensor<1024xi64, #blocked0>, tensor<1024xi64, #blocked0>) -> tensor<1024xi64, #blocked0>\n+  %313 = arith.extsi %cst_3 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %314 = arith.muli %312, %313 : tensor<1024xi64, #blocked0>\n+  %315 = arith.extsi %302 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %316 = arith.addi %315, %314 : tensor<1024xi64, #blocked0>\n+  %317 = arith.trunci %316 : tensor<1024xi64, #blocked0> to tensor<1024xi32, #blocked0>\n+  %318 = arith.extsi %317 : tensor<1024xi32, #blocked0> to tensor<1024xi64, #blocked0>\n+  %319 = tt.splat %arg9 : (!tt.ptr<f64>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %320 = tt.addptr %319, %318 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi64, #blocked0>\n+  %321 = triton_gpu.convert_layout %320 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %322 = tt.load %321 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf64, #blocked0>\n+  %323 = arith.extf %cst_2 : tensor<1024xf32, #blocked0> to tensor<1024xf64, #blocked0>\n+  %324 = \"triton_gpu.cmpf\"(%322, %323) {predicate = 2 : i64} : (tensor<1024xf64, #blocked0>, tensor<1024xf64, #blocked0>) -> tensor<1024xi1, #blocked0>\n+  %325 = tt.splat %arg10 : (!tt.ptr<f64>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %326 = tt.addptr %325, %318 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi64, #blocked0>\n+  %327 = triton_gpu.convert_layout %326 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %328 = tt.load %327 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf64, #blocked0>\n+  %329 = arith.divf %328, %322 : tensor<1024xf64, #blocked0>\n+  %330 = arith.truncf %329 : tensor<1024xf64, #blocked0> to tensor<1024xf32, #blocked0>\n+  %331 = arith.mulf %330, %cst_1 : tensor<1024xf32, #blocked0>\n+  %332 = arith.mulf %35, %cst_0 : tensor<1024xf32, #blocked0>\n+  %333 = arith.addf %331, %332 : tensor<1024xf32, #blocked0>\n+  %334 = \"triton_gpu.select\"(%324, %333, %35) : (tensor<1024xi1, #blocked0>, tensor<1024xf32, #blocked0>, tensor<1024xf32, #blocked0>) -> tensor<1024xf32, #blocked0>\n+  %335 = tt.addptr %319, %317 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %336 = triton_gpu.convert_layout %335 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %337 = tt.load %336 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf64, #blocked0>\n+  %338 = arith.extf %cst : tensor<1024xf32, #blocked0> to tensor<1024xf64, #blocked0>\n+  %339 = arith.mulf %337, %338 : tensor<1024xf64, #blocked0>\n+  %340 = tt.addptr %325, %317 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %341 = triton_gpu.convert_layout %340 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %342 = tt.load %341 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf64, #blocked0>\n+  %343 = arith.mulf %342, %338 : tensor<1024xf64, #blocked0>\n+  %344 = tt.splat %arg11 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %345 = tt.addptr %344, %4 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %346 = triton_gpu.convert_layout %345 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked1>\n+  %347 = triton_gpu.convert_layout %28 : (tensor<1024xf32, #blocked0>) -> tensor<1024xf32, #blocked1>\n+  %348 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked1>\n+  tt.store %346, %347, %348 : tensor<1024xf32, #blocked1>\n+  %349 = tt.splat %arg12 : (!tt.ptr<i32>) -> tensor<1024x!tt.ptr<i32>, #blocked0>\n+  %350 = tt.addptr %349, %4 : tensor<1024x!tt.ptr<i32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %351 = triton_gpu.convert_layout %350 : (tensor<1024x!tt.ptr<i32>, #blocked0>) -> tensor<1024x!tt.ptr<i32>, #blocked1>\n+  %352 = triton_gpu.convert_layout %317 : (tensor<1024xi32, #blocked0>) -> tensor<1024xi32, #blocked1>\n+  %353 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked1>\n+  tt.store %351, %352, %353 : tensor<1024xi32, #blocked1>\n+  %354 = tt.splat %arg13 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked0>\n+  %355 = tt.addptr %354, %4 : tensor<1024x!tt.ptr<f32>, #blocked0>, tensor<1024xi32, #blocked0>\n+  %356 = triton_gpu.convert_layout %355 : (tensor<1024x!tt.ptr<f32>, #blocked0>) -> tensor<1024x!tt.ptr<f32>, #blocked1>\n+  %357 = triton_gpu.convert_layout %334 : (tensor<1024xf32, #blocked0>) -> tensor<1024xf32, #blocked1>\n+  %358 = triton_gpu.convert_layout %5 : (tensor<1024xi1, #blocked0>) -> tensor<1024xi1, #blocked1>\n+  tt.store %356, %357, %358 : tensor<1024xf32, #blocked1>\n+  %359 = tt.splat %arg14 : (!tt.ptr<f64>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %360 = tt.addptr %359, %318 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi64, #blocked0>\n+  %361 = triton_gpu.convert_layout %360 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %362 = triton_gpu.convert_layout %339 : (tensor<1024xf64, #blocked0>) -> tensor<1024xf64, #blocked0>\n+  tt.store %361, %362 : tensor<1024xf64, #blocked0>\n+  %363 = tt.splat %arg15 : (!tt.ptr<f64>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %364 = tt.addptr %363, %318 : tensor<1024x!tt.ptr<f64>, #blocked0>, tensor<1024xi64, #blocked0>\n+  %365 = triton_gpu.convert_layout %364 : (tensor<1024x!tt.ptr<f64>, #blocked0>) -> tensor<1024x!tt.ptr<f64>, #blocked0>\n+  %366 = triton_gpu.convert_layout %343 : (tensor<1024xf64, #blocked0>) -> tensor<1024xf64, #blocked0>\n+  tt.store %365, %366 : tensor<1024xf64, #blocked0>\n+  return\n+}\n+\n+// A mnist model from torch inductor.\n+// Check if topological sort is working correct and there's no unnecessary convert\n+// CHECK-LABEL: mnist\n+func public @mnist(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32}, %arg3: i32) {\n+  // CHECK-NOT: triton_gpu.convert_layout\n+  %cst = arith.constant dense<10> : tensor<16x1xi32, #blocked2>\n+  %cst_0 = arith.constant dense<10> : tensor<1x16xi32, #blocked3>\n+  %c16_i32 = arith.constant 16 : i32\n+  %cst_1 = arith.constant dense<64> : tensor<16x1xi32, #blocked2>\n+  %cst_2 = arith.constant dense<0xFF800000> : tensor<16x16xf32, #blocked2>\n+  %cst_3 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked2>\n+  %cst_4 = arith.constant dense<0> : tensor<16x16xi32, #blocked2>\n+  %0 = tt.get_program_id {axis = 0 : i32} : i32\n+  %1 = arith.muli %0, %c16_i32 : i32\n+  %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked0>\n+  %3 = triton_gpu.convert_layout %2 : (tensor<16xi32, #blocked0>) -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+  %4 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<16x1xi32, #blocked1>\n+  %5 = triton_gpu.convert_layout %4 : (tensor<16x1xi32, #blocked1>) -> tensor<16x1xi32, #blocked2>\n+  %6 = tt.splat %1 : (i32) -> tensor<16x1xi32, #blocked2>\n+  %7 = arith.addi %6, %5 : tensor<16x1xi32, #blocked2>\n+  %8 = \"triton_gpu.cmpi\"(%7, %cst_1) {predicate = 2 : i64} : (tensor<16x1xi32, #blocked2>, tensor<16x1xi32, #blocked2>) -> tensor<16x1xi1, #blocked2>\n+  %9 = triton_gpu.convert_layout %2 : (tensor<16xi32, #blocked0>) -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>\n+  %10 = tt.expand_dims %9 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x16xi32, #blocked3>\n+  %11 = \"triton_gpu.cmpi\"(%10, %cst_0) {predicate = 2 : i64} : (tensor<1x16xi32, #blocked3>, tensor<1x16xi32, #blocked3>) -> tensor<1x16xi1, #blocked3>\n+  %12 = arith.muli %7, %cst : tensor<16x1xi32, #blocked2>\n+  %13 = tt.broadcast %10 : (tensor<1x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked3>\n+  %14 = triton_gpu.convert_layout %13 : (tensor<16x16xi32, #blocked3>) -> tensor<16x16xi32, #blocked2>\n+  %15 = tt.broadcast %12 : (tensor<16x1xi32, #blocked2>) -> tensor<16x16xi32, #blocked2>\n+  %16 = arith.addi %14, %15 : tensor<16x16xi32, #blocked2>\n+  %17 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x16x!tt.ptr<f32>, #blocked2>\n+  %18 = tt.addptr %17, %16 : tensor<16x16x!tt.ptr<f32>, #blocked2>, tensor<16x16xi32, #blocked2>\n+  %19 = tt.broadcast %11 : (tensor<1x16xi1, #blocked3>) -> tensor<16x16xi1, #blocked3>\n+  %20 = triton_gpu.convert_layout %19 : (tensor<16x16xi1, #blocked3>) -> tensor<16x16xi1, #blocked2>\n+  %21 = tt.broadcast %8 : (tensor<16x1xi1, #blocked2>) -> tensor<16x16xi1, #blocked2>\n+  %22 = arith.andi %20, %21 : tensor<16x16xi1, #blocked2>\n+  %23 = triton_gpu.convert_layout %18 : (tensor<16x16x!tt.ptr<f32>, #blocked2>) -> tensor<16x16x!tt.ptr<f32>, #blocked4>\n+  %24 = triton_gpu.convert_layout %22 : (tensor<16x16xi1, #blocked2>) -> tensor<16x16xi1, #blocked4>\n+  %25 = tt.load %23, %24 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32, #blocked4>\n+  %26 = triton_gpu.convert_layout %25 : (tensor<16x16xf32, #blocked4>) -> tensor<16x16xf32, #blocked2>\n+  %27 = \"triton_gpu.cmpf\"(%cst_2, %26) {predicate = 4 : i64} : (tensor<16x16xf32, #blocked2>, tensor<16x16xf32, #blocked2>) -> tensor<16x16xi1, #blocked2>\n+  %28 = arith.andi %22, %27 : tensor<16x16xi1, #blocked2>\n+  %29 = \"triton_gpu.select\"(%28, %26, %cst_2) : (tensor<16x16xi1, #blocked2>, tensor<16x16xf32, #blocked2>, tensor<16x16xf32, #blocked2>) -> tensor<16x16xf32, #blocked2>\n+  %30 = tt.reduce %29 {axis = 1 : i32, redOp = 12 : i32} : tensor<16x16xf32, #blocked2> -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+  %31 = triton_gpu.convert_layout %30 : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16xf32, #blocked0>\n+  %32 = triton_gpu.convert_layout %31 : (tensor<16xf32, #blocked0>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+  %33 = tt.expand_dims %32 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<16x1xf32, #blocked1>\n+  %34 = triton_gpu.convert_layout %33 : (tensor<16x1xf32, #blocked1>) -> tensor<16x1xf32, #blocked2>\n+  %35 = arith.sitofp %cst_4 : tensor<16x16xi32, #blocked2> to tensor<16x16xf32, #blocked2>\n+  %36 = arith.addf %35, %cst_3 : tensor<16x16xf32, #blocked2>\n+  %37 = triton_gpu.convert_layout %18 : (tensor<16x16x!tt.ptr<f32>, #blocked2>) -> tensor<16x16x!tt.ptr<f32>, #blocked4>\n+  %38 = triton_gpu.convert_layout %22 : (tensor<16x16xi1, #blocked2>) -> tensor<16x16xi1, #blocked4>\n+  %39 = tt.load %37, %38 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32, #blocked4>\n+  %40 = triton_gpu.convert_layout %39 : (tensor<16x16xf32, #blocked4>) -> tensor<16x16xf32, #blocked2>\n+  %41 = tt.broadcast %34 : (tensor<16x1xf32, #blocked2>) -> tensor<16x16xf32, #blocked2>\n+  %42 = arith.subf %40, %41 : tensor<16x16xf32, #blocked2>\n+  %43 = math.exp %42 : tensor<16x16xf32, #blocked2>\n+  %44 = arith.addf %36, %43 : tensor<16x16xf32, #blocked2>\n+  %45 = \"triton_gpu.select\"(%22, %44, %36) : (tensor<16x16xi1, #blocked2>, tensor<16x16xf32, #blocked2>, tensor<16x16xf32, #blocked2>) -> tensor<16x16xf32, #blocked2>\n+  %46 = tt.reduce %45 {axis = 1 : i32, redOp = 2 : i32} : tensor<16x16xf32, #blocked2> -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>\n+  %47 = triton_gpu.convert_layout %46 : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<16xf32, #blocked0>\n+  %48 = triton_gpu.convert_layout %47 : (tensor<16xf32, #blocked0>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>\n+  %49 = tt.expand_dims %48 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<16x1xf32, #blocked1>\n+  %50 = triton_gpu.convert_layout %49 : (tensor<16x1xf32, #blocked1>) -> tensor<16x1xf32, #blocked2>\n+  %51 = triton_gpu.convert_layout %18 : (tensor<16x16x!tt.ptr<f32>, #blocked2>) -> tensor<16x16x!tt.ptr<f32>, #blocked4>\n+  %52 = triton_gpu.convert_layout %22 : (tensor<16x16xi1, #blocked2>) -> tensor<16x16xi1, #blocked4>\n+  %53 = tt.load %51, %52 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32, #blocked4>\n+  %54 = triton_gpu.convert_layout %53 : (tensor<16x16xf32, #blocked4>) -> tensor<16x16xf32, #blocked2>\n+  %55 = arith.subf %54, %41 : tensor<16x16xf32, #blocked2>\n+  %56 = math.log %50 : tensor<16x1xf32, #blocked2>\n+  %57 = tt.broadcast %56 : (tensor<16x1xf32, #blocked2>) -> tensor<16x16xf32, #blocked2>\n+  %58 = arith.subf %55, %57 : tensor<16x16xf32, #blocked2>\n+  %59 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<16x16x!tt.ptr<f32>, #blocked2>\n+  %60 = tt.addptr %59, %16 : tensor<16x16x!tt.ptr<f32>, #blocked2>, tensor<16x16xi32, #blocked2>\n+  %61 = triton_gpu.convert_layout %60 : (tensor<16x16x!tt.ptr<f32>, #blocked2>) -> tensor<16x16x!tt.ptr<f32>, #blocked4>\n+  %62 = triton_gpu.convert_layout %58 : (tensor<16x16xf32, #blocked2>) -> tensor<16x16xf32, #blocked4>\n+  %63 = triton_gpu.convert_layout %22 : (tensor<16x16xi1, #blocked2>) -> tensor<16x16xi1, #blocked4>\n+  tt.store %61, %62, %63 : tensor<16x16xf32, #blocked4>\n+  return\n+}"}]