[{"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "file_content_changes": "@@ -105,22 +105,21 @@ static std::map<std::string, std::string> getExternLibs(mlir::ModuleOp module) {\n     }\n   }\n \n-  if (!funcs.empty() && externLibs.empty()) {\n+  if (!funcs.empty() && externLibs.count(\"libdevice\") == 0) {\n     // When using the Math Dialect, it is possible that some ops (e.g., log) are\n     // lowered to a function call. In this case, we need to link libdevice\n     // using its default path:\n     // [triton root dir]/python/triton/language/libdevice.10.bc\n     // TODO(Keren): handle external linkage other than libdevice?\n     namespace fs = std::filesystem;\n-    static const std::string libdevice = \"libdevice\";\n     static const std::filesystem::path path = std::filesystem::path(__FILE__)\n                                                   .parent_path()\n                                                   .parent_path()\n                                                   .parent_path()\n                                                   .parent_path() /\n                                               \"python\" / \"triton\" / \"language\" /\n                                               \"libdevice.10.bc\";\n-    externLibs[libdevice] = path.string();\n+    externLibs[\"libdevice\"] = path.string();\n   }\n \n   if (module.getOperation()->hasAttr(\"triton_gpu.externs\")) {"}]