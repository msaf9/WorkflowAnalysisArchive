[{"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "file_content_changes": "@@ -12,6 +12,7 @@\n import torch\n \n import triton\n+from triton.utils import MockTensor\n \n try:\n     from torch._C import _cuda_getCurrentRawStream as get_cuda_stream\n@@ -365,24 +366,6 @@ def __repr__(self):\n         return f\"JITFunction({self.module}:{self.fn.__name__})\"\n \n \n-class MockTensor:\n-    \"\"\"\n-    Can be used in place of real tensors when calling:\n-        kernel.warmup(MockTensor(torch.float32), ...)\n-    \"\"\"\n-    @staticmethod\n-    def wrap_dtype(arg):\n-        if isinstance(arg, torch.dtype):\n-            return MockTensor(arg)\n-        return arg\n-\n-    def __init__(self, dtype):\n-        self.dtype = dtype\n-\n-    def data_ptr(self):\n-        return 0  # optimistically assumes multiple of 16\n-\n-\n # -----------------------------------------------------------------------------\n # `jit` decorator\n # -----------------------------------------------------------------------------"}, {"filename": "python/triton/utils.py", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "file_content_changes": "@@ -19,6 +19,24 @@ def next_power_of_2(n):\n     return n\n \n \n+class MockTensor:\n+    \"\"\"\n+    Can be used in place of real tensors when calling:\n+        kernel.warmup(MockTensor(torch.float32), ...)\n+    \"\"\"\n+    @staticmethod\n+    def wrap_dtype(arg):\n+        if isinstance(arg, torch.dtype):\n+            return MockTensor(arg)\n+        return arg\n+\n+    def __init__(self, dtype):\n+        self.dtype = dtype\n+\n+    def data_ptr(self):\n+        return 0  # optimistically assumes multiple of 16\n+\n+\n class TensorWrapper:\n     def __init__(self, base, dtype):\n         self.dtype = dtype"}]