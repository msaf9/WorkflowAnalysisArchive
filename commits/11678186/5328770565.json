[{"filename": "python/test/unit/tools/test_aot.py", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "file_content_changes": "@@ -7,6 +7,7 @@\n import numpy as np\n \n import triton\n+from triton.common import cuda_include_dir, libcuda_dirs\n \n kernel_utils_src = \"\"\"\n import triton\n@@ -137,37 +138,47 @@ def test_compile_link_matmul():\n         with open(kernel_utils_path, \"w\") as file:\n             file.write(kernel_utils_src)\n \n-        compile_path = Path(triton.tools.__path__[0]) / \"compile.py\"\n+        compiler_path = Path(triton.tools.__path__[0]) / \"compile.py\"\n+        linker_path = Path(triton.tools.__path__[0]) / \"link.py\"\n+\n         dtype = \"fp16\"\n         M, N, K = 16, 16, 16\n         BM, BN, BK = 16, 16, 16\n-        # hints = [\":16\", \"\"]\n-        hints = [\":16\"]\n+\n+        # compile all desired configs\n+        hints = [\":16\", \"\"]\n         for ha in hints:\n             for hb in hints:\n                 sig = f'*fp32:16, *{dtype}:16, *{dtype}:16, i32{ha}, 1, i32{hb}, 1, i32:16, 1, {BM}, {BN}, {BK}'\n                 name = f\"matmul_{dtype}x{dtype}_{BM}x{BN}x{BK}\"\n-                subprocess.run([\"python\", compile_path, \"-n\", \"kernel\", \"--signature\", sig, \"--out-name\", name, \"-o\", tmp_dir + \"/\" + name, kernel_path], check=True)\n+                subprocess.run([\"python\", compiler_path, \"-n\", \"kernel\", \"--signature\", sig, \"--out-name\", name, \"-o\", name, kernel_path], check=True, cwd=tmp_dir)\n \n-        link_path = Path(triton.tools.__path__[0]) / \"link.py\"\n-        subprocess.run([\"python\", link_path] + glob.glob(tmp_dir + \"/*.h\") + [\"-o\", tmp_dir + \"/kernel\"], check=True)\n+        # link all desired configs\n+        h_files = glob.glob(os.path.join(tmp_dir, \"*.h\"))\n+        subprocess.run([\"python\", linker_path] + h_files + [\"-o\", \"kernel\"], check=True, cwd=tmp_dir)\n \n-        test_path = os.path.join(tmp_dir, \"test.c\")\n-        with open(test_path, \"w\") as file:\n+        # compile test case\n+        with open(os.path.join(tmp_dir, \"test.c\"), \"w\") as file:\n             file.write(test_src)\n-        subprocess.run([\"gcc\"] + glob.glob(tmp_dir + \"/*.c\") + [\"-I\", \"/usr/local/cuda/include/\"] + [\"-o\", tmp_dir + \"/test\", \"-L\", \"/usr/lib/wsl/lib/\", \"-l\", \"cuda\"], check=True)\n+        c_files = glob.glob(os.path.join(tmp_dir, \"*.c\"))\n+        subprocess.run([\"gcc\"] + c_files + [\"-I\", cuda_include_dir(),\n+                                            \"-L\", libcuda_dirs()[0],\n+                                            \"-l\", \"cuda\",\n+                                            \"-o\", \"test\"], check=True, cwd=tmp_dir)\n \n-        # create data\n+        # initialize test data\n         a = np.random.randn(M * K).astype(np.float16).reshape((M, K))\n         b = np.random.randn(M * K).astype(np.float16).reshape((K, N))\n-\n         a_path = os.path.join(tmp_dir, \"a.csv\")\n         b_path = os.path.join(tmp_dir, \"b.csv\")\n         c_path = os.path.join(tmp_dir, \"c.csv\")\n         for x, path in [(a, a_path), (b, b_path)]:\n             x.view(np.int16).ravel().tofile(path, sep=\",\")\n \n-        subprocess.run([os.path.join(tmp_dir, \"test\"), a_path, b_path, c_path], check=True)\n+        # run test case\n+        subprocess.run([\"./test\", a_path, b_path, c_path], check=True, cwd=tmp_dir)\n+\n+        # read data and compare against reference\n         c = np.genfromtxt(c_path, delimiter=\",\", dtype=np.int32)\n         c_tri = c.reshape((M, N)).view(np.float32)\n         c_ref = np.matmul(a.astype(np.float32), b.astype(np.float32))"}, {"filename": "python/triton/common/__init__.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1,3 +1,3 @@\n-from .build import _build\n+from .build import _build, cuda_include_dir, libcuda_dirs\n \n-__all__ = [\"_build\"]\n+__all__ = [\"_build\", \"libcuda_dirs\", \"cuda_include_dir\"]"}, {"filename": "python/triton/common/build.py", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "file_content_changes": "@@ -37,21 +37,20 @@ def quiet():\n         sys.stdout, sys.stderr = old_stdout, old_stderr\n \n \n+@functools.lru_cache()\n+def cuda_include_dir():\n+    base_dir = os.path.join(os.path.dirname(__file__), os.path.pardir)\n+    cuda_path = os.path.join(base_dir, \"third_party\", \"cuda\")\n+    return os.path.join(cuda_path, \"include\")\n+\n+\n def _build(name, src, srcdir):\n     if is_hip():\n         hip_lib_dir = os.path.join(rocm_path_dir(), \"lib\")\n         hip_include_dir = os.path.join(rocm_path_dir(), \"include\")\n     else:\n         cuda_lib_dirs = libcuda_dirs()\n-        base_dir = os.path.join(os.path.dirname(__file__), os.path.pardir)\n-        cuda_path = os.path.join(base_dir, \"third_party\", \"cuda\")\n-\n-        cu_include_dir = os.path.join(cuda_path, \"include\")\n-        triton_include_dir = os.path.join(os.path.dirname(__file__), \"include\")\n-        cuda_header = os.path.join(cu_include_dir, \"cuda.h\")\n-        triton_cuda_header = os.path.join(triton_include_dir, \"cuda.h\")\n-        if not os.path.exists(cuda_header) and os.path.exists(triton_cuda_header):\n-            cu_include_dir = triton_include_dir\n+        cu_include_dir = cuda_include_dir()\n     suffix = sysconfig.get_config_var('EXT_SUFFIX')\n     so = os.path.join(srcdir, '{name}{suffix}'.format(name=name, suffix=suffix))\n     # try to avoid setuptools if possible"}]