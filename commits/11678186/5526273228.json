[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "file_content_changes": "@@ -225,44 +225,48 @@ jobs:\n           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         run: |\n           OWNER_REPO=\"${{ github.repository }}\"\n-          echo \"OWNER_REPO: $OWNER_REPO\"\n           PR_NUMBER=$(gh api --method GET repos/$OWNER_REPO/pulls -f state=closed | jq \".[] | select(.merged_at != null) | .number\" | head -1)\n           echo \"Last merged PR number: $PR_NUMBER\"\n \n           BRANCH_NAME=$(gh api repos/$OWNER_REPO/pulls/$PR_NUMBER --jq '.head.ref')\n           echo \"BRANCH_NAME: $BRANCH_NAME\"\n \n           page=1\n+          num_retries=0\n           while true; do\n-            run_id=$(gh api --method GET \"repos/$OWNER_REPO/actions/runs?page=$page&per_page=100\" | jq --arg branch_name \"$BRANCH_NAME\" '.workflow_runs[] | select(.head_branch == $branch_name)' | jq '.id' | head -1)\n+            run_id=$(gh api --method GET \"repos/$OWNER_REPO/actions/runs?page=$page&per_page=100\" | jq --arg branch_name \"$BRANCH_NAME\" --arg run_name \"Integration Tests\" '.workflow_runs[] | select(.head_branch == $branch_name and .name == $run_name)' | jq '.id' | head -1)\n             if [ \"$run_id\" != \"\" ]; then\n               echo \"First run ID on branch $BRANCH_NAME is: $run_id\"\n               WORKFLOW_RUN_ID=$run_id\n-              break\n+              echo \"WORKFLOW_RUN_ID: $WORKFLOW_RUN_ID\"\n+              ARTIFACT_URL=$(gh api repos/$OWNER_REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts | jq --arg artifact_name \"$ARTIFACT_NAME\" '.artifacts[] | select(.name == $artifact_name).archive_download_url' --raw-output)\n+              echo \"ARTIFACT_URL: $ARTIFACT_URL\"\n+\n+              if [ -n \"$ARTIFACT_URL\" ]; then\n+                echo \"Downloading artifact: $ARTIFACT_URL\"\n+                curl --location --remote-header-name -H \"Authorization: token $GH_TOKEN\" -o reference.zip \"$ARTIFACT_URL\"\n+                # Print the size of the downloaded artifact\n+                echo \"Artifact size (stat): $(stat --printf=\"%s bytes\" reference.zip)\"\n+                echo \"Artifact size (du): $(du -sh reference.zip)\"\n+                unzip reference.zip\n+                tar -xzf artifacts.tar.gz\n+                rm reference.zip\n+                rm artifacts.tar.gz\n+                mv cache reference\n+                break\n+              else\n+                echo \"No artifact found with the name: $ARTIFACT_NAME, run_id: $WORKFLOW_RUN_ID, retrying...\"\n+                ((num_retries++))\n+                if [ $num_retries -gt 5 ]; then\n+                  echo \"Reach max number of retries, exiting...\"\n+                  exit 1\n+                fi\n+              fi\n             fi\n \n             ((page++))\n           done\n \n-          echo \"WORKFLOW_RUN_ID: $WORKFLOW_RUN_ID\"\n-          ARTIFACT_URL=$(gh api repos/$OWNER_REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts | jq --arg artifact_name \"$ARTIFACT_NAME\" '.artifacts[] | select(.name == $artifact_name).archive_download_url' --raw-output)\n-          echo \"ARTIFACT_URL: $ARTIFACT_URL\"\n-\n-          if [ -n \"$ARTIFACT_URL\" ]; then\n-            echo \"Downloading artifact: $ARTIFACT_URL\"\n-            curl --location --remote-header-name -H \"Authorization: token $GH_TOKEN\" -o reference.zip \"$ARTIFACT_URL\"\n-            # Print the size of the downloaded artifact\n-            echo \"Artifact size (stat): $(stat --printf=\"%s bytes\" reference.zip)\"\n-            echo \"Artifact size (du): $(du -sh reference.zip)\"\n-            unzip reference.zip\n-            tar -xzf artifacts.tar.gz\n-            rm reference.zip\n-            rm artifacts.tar.gz\n-            mv cache reference\n-          else\n-            echo \"No artifact found with the name: $ARTIFACT_NAME\"\n-            exit 1\n-          fi\n       - name: Download current job artifacts\n         uses: actions/download-artifact@v2\n         with:"}]