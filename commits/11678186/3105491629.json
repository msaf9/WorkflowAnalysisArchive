[{"filename": "lib/Analysis/Allocation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -43,7 +43,7 @@ getScratchConfigForCvtLayout(triton::gpu::ConvertLayoutOp op, unsigned &inVec,\n       return 0;\n     }\n   };\n-  // blocke -> blocked\n+  // blocked -> blocked\n   if (srcLayout.isa<BlockedEncodingAttr>() &&\n       dstLayout.isa<BlockedEncodingAttr>()) {\n     auto srcBlockedLayout = srcLayout.cast<BlockedEncodingAttr>();"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "file_content_changes": "@@ -1600,11 +1600,11 @@ class MMA16816SmemLoader {\n                      ArrayRef<int64_t> tileShape, ArrayRef<int> instrShape,\n                      ArrayRef<int> matShape, int perPhase, int maxPhase,\n                      int elemBytes, ConversionPatternRewriter &rewriter,\n-                     const Location &location)\n+                     TypeConverter *typeConverter, const Location &loc)\n       : wpt(wpt), order(order), kOrder(kOrder), tileShape(tileShape),\n         instrShape(instrShape), matShape(matShape), perPhase(perPhase),\n-        maxPhase(maxPhase), elemBytes(elemBytes), rewriter(rewriter), loc(loc),\n-        ctx(rewriter.getContext()) {\n+        maxPhase(maxPhase), elemBytes(elemBytes), rewriter(rewriter),\n+        typeConverter(typeConverter), loc(loc), ctx(rewriter.getContext()) {\n     cMatShape = matShape[order[0]];\n     sMatShape = matShape[order[1]];\n \n@@ -1874,6 +1874,7 @@ class MMA16816SmemLoader {\n \n private:\n   int wpt;\n+  ArrayRef<uint32_t> order;\n   int kOrder;\n   ArrayRef<int64_t> tileShape;\n   ArrayRef<int> instrShape;\n@@ -1882,6 +1883,9 @@ class MMA16816SmemLoader {\n   int maxPhase;\n   int elemBytes;\n   ConversionPatternRewriter &rewriter;\n+  TypeConverter *typeConverter{};\n+  const Location &loc;\n+  MLIRContext *ctx{};\n \n   int cMatShape;\n   int sMatShape;\n@@ -1899,12 +1903,6 @@ class MMA16816SmemLoader {\n \n   int matArrStride;\n   int warpOffStride;\n-\n-  ArrayRef<uint32_t> order;\n-\n-  const Location &loc;\n-\n-  MLIRContext *ctx{};\n };\n \n bool isSplatLike(Value value) {\n@@ -2332,9 +2330,10 @@ DotOpConversion::convertMMA16816(triton::DotOp op, OpAdaptor adapter,\n     const int maxPhase = sharedLayout.getMaxPhase();\n     const int elemBytes = tensorTy.getElementTypeBitWidth() / 8;\n \n-    MMA16816SmemLoader loader(\n-        wpt, sharedLayout.getOrder(), kOrder, tensorTy.getShape() /*tileShape*/,\n-        instrShape, matShape, perPhase, maxPhase, elemBytes, rewriter, loc);\n+    MMA16816SmemLoader loader(wpt, sharedLayout.getOrder(), kOrder,\n+                              tensorTy.getShape() /*tileShape*/, instrShape,\n+                              matShape, perPhase, maxPhase, elemBytes, rewriter,\n+                              typeConverter, loc);\n     SmallVector<Value> offs = loader.computeOffsets(warpId, lane);\n \n     const int numPtrs = loader.getNumPtr();"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -66,7 +66,7 @@ void extractNVVMMetadata(mlir::ModuleOp module,\n     // maxntid\n     if (op->hasAttr(NVVMMetadataField::MaxNTid)) {\n       auto attr = op->getAttr(NVVMMetadataField::MaxNTid);\n-      meta.maxntidx = attr.dyn_cast<IntegerAttr>().getSInt();\n+      meta.maxntidx = attr.dyn_cast<IntegerAttr>().getInt();\n       hasMetadata = true;\n     }\n "}]