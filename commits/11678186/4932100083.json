[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "file_content_changes": "@@ -1607,8 +1607,8 @@ def _welford_combine(mean_1, m2_1, weight_1, mean_2, m2_2, weight_2):\n \n layouts = [\n     BlockedLayout([1, 4], [1, 32], [4, 1], [1, 0]),\n-    BlockedLayout([1, 4], [1, 32], [2, 2], [1, 0]),\n-    BlockedLayout([1, 4], [1, 32], [1, 4], [1, 0]),\n+    BlockedLayout([1, 1], [1, 32], [2, 2], [1, 0]),\n+    BlockedLayout([1, 1], [1, 32], [1, 4], [1, 0]),\n     BlockedLayout([1, 4], [8, 4], [2, 2], [0, 1])\n ]\n \n@@ -1654,12 +1654,13 @@ def test_chain_reduce(M, N, src_layout, device='cuda'):\n         kernel = triton.compile(f.name)\n \n     rs = RandomState(17)\n-    x = rs.randint(0, 4, (M, N)).astype('int32')\n+    # x = rs.randint(0, 4, (M, N)).astype('int32')\n+    x = [[j * N + i for i in range(N)] for j in range(M)]\n \n     z = np.zeros((1,)).astype('int32')\n \n-    x_tri = torch.tensor(x, device=device)\n-    z_tri = torch.tensor(z, device=device)\n+    x_tri = torch.tensor(x, dtype=torch.int32, device=device)\n+    z_tri = torch.tensor(z, dtype=torch.int32, device=device)\n \n     pgm = kernel[(1, 1, 1)](x_tri, z_tri)\n     z_ref = np.sum(x)"}]