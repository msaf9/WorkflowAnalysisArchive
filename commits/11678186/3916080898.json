[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -1449,6 +1449,20 @@ def kernel(x):\n     kernel[(1, )](x)\n \n \n+@pytest.mark.parametrize(\"device\", ['cuda', 'cpu'])\n+def test_pointer_arguments(device):\n+    @triton.jit\n+    def kernel(x):\n+        pass\n+    x = torch.empty(1024, device=device)\n+    result = True\n+    try:\n+        kernel[(1,)](x)\n+    except ValueError:\n+        result = True if device == 'cpu' else False\n+    assert result\n+\n+\n @pytest.mark.parametrize(\"value, value_type\", [\n     (-1, 'i32'), (0, 'i32'), (-2**31, 'i32'), (2**31 - 1, 'i32'),\n     (2**31, 'u32'), (2**32 - 1, 'u32'), (2**32, 'i64'), (2**63 - 1, 'i64'),"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "file_content_changes": "@@ -1121,14 +1121,16 @@ def format_of(ty):\n       ptr_info.valid = false;\n       return ptr_info;\n     }}\n-    PyObject *is_cuda = PyObject_GetAttrString(obj, \"is_cuda\");\n-    if (is_cuda && PyObject_RichCompareBool(is_cuda, Py_False, Py_EQ)) {{\n-       PyErr_Format(PyExc_ValueError, \"Pointer argument (at %d) must be on cuda\", idx);\n-       Py_DECREF(is_cuda);\n+    ptr_info.dev_ptr = PyLong_AsUnsignedLongLong(ret);\n+    unsigned attr;\n+    CUresult status =\n+        cuPointerGetAttribute(&attr, CU_POINTER_ATTRIBUTE_MEMORY_TYPE, ptr_info.dev_ptr);\n+    if (!(attr == CU_MEMORYTYPE_DEVICE || attr == CU_MEMORYTYPE_UNIFIED) ||\n+        !(status == CUDA_SUCCESS)) {{\n+        PyErr_Format(PyExc_ValueError,\n+                     \"Pointer argument (at %d) cannot be accessed from Triton (cpu tensor?)\", idx);\n         ptr_info.valid = false;\n-       return ptr_info;\n     }}\n-    ptr_info.dev_ptr = PyLong_AsUnsignedLongLong(ret);\n     return ptr_info;\n   }}\n   PyErr_SetString(PyExc_TypeError, \"Pointer argument must be either uint64 or have data_ptr method\");"}]