[{"filename": "python/triton/ops/blocksparse/matmul.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -181,8 +181,8 @@ def _dsd_kernel(\n     inc_b = tl.load(pinc)\n     inc_b = tl.multiple_of(inc_b, 8)\n     for k in range(K, 0, -TILE_K):\n-        a = tl.load(pa, mask=True)\n-        b = tl.load(pb, mask=offs_bn[None, :] < DS0)\n+        a = tl.load(pa)\n+        b = tl.load(pb)\n         acc += tl.dot(a, b)\n         pa += inc_a\n         pb += inc_b * stride_bk"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -316,7 +316,9 @@ def __init__(self, fn, version=None, do_not_specialize=None, debug=None):\n         self.annotations = {self.arg_names.index(name): ty for name, ty in fn.__annotations__.items()}\n         self.__annotations__ = fn.__annotations__\n         # index of constexprs\n-        self.constexprs = [self.arg_names.index(ann) for ann in self.__annotations__.keys()]\n+        from triton.language.core import \\\n+            constexpr  # import here rather than at module level due to circular import tangle\n+        self.constexprs = [index for index, ty in self.annotations.items() if issubclass(ty, constexpr)]\n         # launcher\n         self.run = self._make_launcher()\n         # re-use docs of wrapped function"}]