[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "file_content_changes": "@@ -2,7 +2,6 @@\n \n import ast\n import builtins\n-import functools\n import hashlib\n import inspect\n import os\n@@ -1133,13 +1132,31 @@ def __init__(self, globals, src, wargs) -> None:\n         self.constants.update({i: None for i, arg in enumerate(wargs) if arg is None})\n \n     def visit_FunctionDef(self, node):\n-        arg_names, _ = self.visit(node.args)\n+        arg_names = self.visit(node.args)\n         for i, arg_name in enumerate(arg_names):\n             if i in self.constants:\n                 cst = self.constants[i]\n                 if not isinstance(cst, triton.language.constexpr):\n                     cst = triton.language.constexpr(self.constants[i])\n                 self.locals[arg_name] = cst\n+        self.visit_compound_statement(node.body)\n+\n+    def visit_arguments(self, node):\n+        arg_names = []\n+        for arg in node.args:\n+            arg_names += [self.visit(arg)]\n+        return arg_names\n+\n+    def visit_arg(self, node):\n+        ast.NodeVisitor.generic_visit(self, node)\n+        return node.arg\n+\n+    def visit_compound_statement(self, stmts):\n+        for stmt in stmts:\n+            self.last_ret = self.visit(stmt)\n+            if isinstance(stmt, ast.Return):\n+                break\n+        return stmts and isinstance(stmt, ast.Return)\n \n     def visit_Name(self, node):\n         if node.id in self.locals:\n@@ -1166,8 +1183,9 @@ def visit_Call(self, node):\n             return\n         assert isinstance(func, triton.JITFunction)\n         if func.hash is None:\n+            args = [self.visit(arg) for arg in node.args]\n             tree = ast.parse(func.src)\n-            finder = DependenciesFinder(func.__globals__, func.src)\n+            finder = DependenciesFinder(func.__globals__, func.src, args)\n             finder.visit(tree)\n             func.hash = finder.ret\n         self.ret = (self.ret + func.hash).encode(\"utf-8\")"}]