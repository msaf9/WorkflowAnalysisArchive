[{"filename": "include/triton/Conversion/TritonGPUToLLVM/PtxAsmFormat.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -101,7 +101,7 @@ struct PTXBuilder {\n   };\n \n   template <typename INSTR = PTXInstr, typename... Args>\n-  INSTR *create(Args &&... args) {\n+  INSTR *create(Args &&...args) {\n     instrs.emplace_back(std::make_unique<INSTR>(this, args...));\n     return static_cast<INSTR *>(instrs.back().get());\n   }"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -1565,7 +1565,7 @@ void ConvertLayoutOpConversion::processReplica(\n       auto elemPtrTy = ptr_ty(llvmElemTy, 3);\n       Value ptr = gep(elemPtrTy, smemBase, offset);\n       auto vecTy = vec_ty(llvmElemTy, vec);\n-      ptr = bit_cast(ptr_ty(vecTy, 3), ptr);\n+      ptr = bitcast(ptr_ty(vecTy, 3), ptr);\n       if (stNotRd) {\n         Value valVec = undef(vecTy);\n         for (unsigned v = 0; v < vec; ++v) {\n@@ -1598,7 +1598,7 @@ LogicalResult ConvertLayoutOpConversion::lowerDistributedToDistributed(\n   auto llvmElemTy = getTypeConverter()->convertType(dstTy.getElementType());\n   Value smemBase = getSharedMemoryBase(loc, rewriter, op.getOperation());\n   auto elemPtrTy = ptr_ty(llvmElemTy, 3);\n-  smemBase = bit_cast(elemPtrTy, smemBase);\n+  smemBase = bitcast(elemPtrTy, smemBase);\n   auto shape = dstTy.getShape();\n   unsigned rank = dstTy.getRank();\n   SmallVector<unsigned> numReplicates(rank);\n@@ -1716,7 +1716,7 @@ LogicalResult ConvertLayoutOpConversion::lowerBlockedToShared(\n   Value minVecVal = idx_val(minVec);\n   Value smemBase = getSharedMemoryBase(loc, rewriter, dst);\n   auto elemPtrTy = ptr_ty(getTypeConverter()->convertType(elemTy), 3);\n-  smemBase = bit_cast(elemPtrTy, smemBase);\n+  smemBase = bitcast(elemPtrTy, smemBase);\n   unsigned numWordsEachRep = product<unsigned>(wordsInEachRep);\n   SmallVector<Value> wordVecs(numWordsEachRep);\n   for (unsigned i = 0; i < numElems; ++i) {\n@@ -1767,7 +1767,7 @@ LogicalResult ConvertLayoutOpConversion::lowerBlockedToShared(\n \n         // step 3: store\n         Value smemAddr = gep(elemPtrTy, smemBase, offset);\n-        smemAddr = bit_cast(ptr_ty(wordTy, 3), smemAddr);\n+        smemAddr = bitcast(ptr_ty(wordTy, 3), smemAddr);\n         store(wordVecs[linearWordIdx], smemAddr);\n       }\n     }"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -77,7 +77,7 @@ SmallVector<unsigned> getThreadsPerCTA(const Attribute &layout) {\n   if (auto blockedLayout = layout.dyn_cast<BlockedEncodingAttr>()) {\n     for (int d = 0, n = blockedLayout.getOrder().size(); d < n; ++d)\n       threads.push_back(blockedLayout.getThreadsPerWarp()[d] *\n-                      blockedLayout.getWarpsPerCTA()[d]);\n+                        blockedLayout.getWarpsPerCTA()[d]);\n   } else if (auto mmaLayout = layout.dyn_cast<MmaEncodingAttr>()) {\n     assert(0 && \"Unimplemented usage of MmaEncodingAttr\");\n   } else {"}]