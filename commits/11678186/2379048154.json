[{"filename": "include/triton/codegen/analysis/liveness.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "file_content_changes": "@@ -1,12 +1,14 @@\n #ifndef TDL_INCLUDE_IR_CODEGEN_LIVENESS_H\n #define TDL_INCLUDE_IR_CODEGEN_LIVENESS_H\n \n-#include <map>\n-#include <set>\n-#include <vector>\n #include \"triton/codegen/analysis/layout.h\"\n #include \"triton/tools/graph.h\"\n \n+#include \"llvm/ADT/MapVector.h\"\n+\n+#include <set>\n+#include <vector>\n+\n namespace triton{\n \n namespace ir{\n@@ -42,14 +44,14 @@ struct segment {\n \n class liveness {\n private:\n-  typedef std::map<shared_layout*, segment>    intervals_map_t;\n+  typedef llvm::MapVector<shared_layout*, segment>    intervals_map_t;\n \n public:\n   // constructor\n   liveness(layouts *l): layouts_(l){ }\n   // accessors\n   const intervals_map_t& get()  const { return intervals_; }\n-  segment get(shared_layout* v)  const { return intervals_.at(v); }\n+  segment get(shared_layout* v)  const { return intervals_.lookup(v); }\n   // run\n   void run(ir::module &mod);\n "}, {"filename": "include/triton/tools/graph.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "file_content_changes": "@@ -3,8 +3,9 @@\n #ifndef _TRITON_TOOLS_THREAD_GRAPH_H_\n #define _TRITON_TOOLS_THREAD_GRAPH_H_\n \n+#include \"llvm/ADT/SetVector.h\"\n+\n #include <map>\n-#include <set>\n #include <vector>\n #include <iostream>\n \n@@ -13,21 +14,21 @@ namespace tools{\n \n template<class node_t>\n class graph {\n-  typedef std::map<node_t, std::set<node_t>> edges_t;\n+  typedef std::map<node_t, llvm::SetVector<node_t>> edges_t;\n \n public:\n   typedef std::map<size_t, std::vector<node_t>> cmap_t;\n   typedef std::map<node_t, size_t> nmap_t;\n \n private:\n-  void connected_components_impl(node_t x, std::set<node_t> &nodes,\n+  void connected_components_impl(node_t x, llvm::SetVector<node_t> &nodes,\n                                  nmap_t* nmap, cmap_t* cmap, int id) const {\n     if(nmap)\n       (*nmap)[x] = id;\n     if(cmap)\n       (*cmap)[id].push_back(x);\n-    if(nodes.find(x) != nodes.end()) {\n-      nodes.erase(x);\n+    if (nodes.count(x)) {\n+      nodes.remove(x);\n       for(const node_t &y: edges_.at(x))\n         connected_components_impl(y, nodes, nmap, cmap, id);\n     }\n@@ -39,7 +40,7 @@ class graph {\n       cmap->clear();\n     if(nmap)\n       nmap->clear();\n-    std::set<node_t> nodes = nodes_;\n+    llvm::SetVector<node_t> nodes = nodes_;\n     unsigned id = 0;\n     while(!nodes.empty()){\n       connected_components_impl(*nodes.begin(), nodes, nmap, cmap, id++);\n@@ -59,7 +60,7 @@ class graph {\n   }\n \n private:\n-  std::set<node_t> nodes_;\n+  llvm::SetVector<node_t> nodes_;\n   edges_t edges_;\n };\n "}, {"filename": "python/triton/tools/compare_asm.py", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "file_content_changes": "@@ -0,0 +1,76 @@\n+'''\n+Compare cached triton kernels in 2 directories.\n+\n+example:\n+python compare_asm.py --dir0=triton-works/ --dir1=triton-fails/ --asm=ttir \\\n+       --diff-out0=diff-works.ll --diff-out1=diff-fails.ll\n+'''\n+import argparse\n+import os\n+import pickle\n+\n+parser = argparse.ArgumentParser(description=\"unpickle\")\n+parser.add_argument('--dir0', dest='dir0', required=True,\n+                    help=\"Triton cache dir 0\")\n+parser.add_argument('--dir1', dest='dir1', required=True,\n+                    help=\"Triton cache dir 1\")\n+parser.add_argument('--asm', dest='asm',\n+                    choices=['ttir', 'llir', 'ptx', 'cubin'], required=True)\n+parser.add_argument('--early-stop', dest='early_stop', action='store_true',\n+                    help=\"Stop after first diff\")\n+parser.set_defaults(early_stop=True)\n+parser.add_argument('--diff-out0', dest='diff_out0', required=True,\n+                    help=\"output file path for kernels in dir0\")\n+parser.add_argument('--diff-out1', dest='diff_out1', required=True,\n+                    help=\"output file path for kernels in dir1\")\n+args = parser.parse_args()\n+dir0 = args.dir0\n+dir1 = args.dir1\n+asm = args.asm\n+\n+dir0_files = {}\n+dir1_files = {}\n+for root, _, files in os.walk(dir0):\n+    for file in files:\n+        if not file.endswith('.lock'):\n+            path = os.path.join(root, file)\n+            with open(path, 'rb') as f:\n+                loaded_file = pickle.load(f)\n+                bin = loaded_file['binary']\n+                key = loaded_file['key']\n+                info = key.split('-')[-3:]  # num_warps, num_stages, signature\n+                dict_key = bin.name + '-'.join(info)\n+                dir0_files[dict_key] = bin.asm\n+\n+for root, _, files in os.walk(dir1):\n+    for file in files:\n+        if not file.endswith('.lock'):\n+            path = os.path.join(root, file)\n+            with open(path, 'rb') as f:\n+                loaded_file = pickle.load(f)\n+                bin = loaded_file['binary']\n+                key = loaded_file['key']\n+                info = key.split('-')[-3:]  # num_warps, num_stages, signature\n+                dict_key = bin.name + '-'.join(info)\n+                dir1_files[dict_key] = bin.asm\n+\n+diff_keys = []\n+for key in dir0_files:\n+    asm0 = dir0_files[key]\n+    if key not in dir1_files:\n+        continue\n+    asm1 = dir1_files[key]\n+    if asm0[asm] != asm1[asm]:\n+        diff_keys.append(key)\n+\n+if args.early_stops:\n+    diff_keys = diff_keys[:1]\n+if diff_keys:\n+    with open(args.diff_out0, 'w') as f0, open(args.diff_out1, 'w') as f1:\n+        for key in diff_keys:\n+            f0.write(f'{asm} mismatch at {key}')\n+            f0.write(dir0_files[key][asm])\n+            f0.write('\\n')\n+            f1.write(f'{asm} mismatch at {key}')\n+            f1.write(dir1_files[key][asm])\n+            f1.write('\\n')"}]