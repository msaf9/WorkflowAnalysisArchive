[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -531,15 +531,17 @@ def kernel(X, Z):\n     else:\n         np.testing.assert_allclose(z_ref, to_numpy(z_tri), rtol=0.01)\n \n+\n @pytest.mark.parametrize(\"axis\", [0, 1])\n def test_tensor_atomic_rmw(axis, device=\"cuda\"):\n     shape0, shape1 = 8, 8\n     # triton kernel\n+\n     @triton.jit\n     def kernel(Z, X, AXIS: tl.constexpr, SHAPE0: tl.constexpr, SHAPE1: tl.constexpr):\n         off0 = tl.arange(0, SHAPE0)\n         off1 = tl.arange(0, SHAPE1)\n-        x = tl.load(X + off0[:, None]*SHAPE1 + off1[None, :])\n+        x = tl.load(X + off0[:, None] * SHAPE1 + off1[None, :])\n         z = tl.sum(x, axis=AXIS)\n         tl.atomic_add(Z + off0, z)\n     rs = RandomState(17)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -381,6 +381,7 @@ def to(self, dtype, bitcast=False, _builder=None):\n             ret_ty = float\n         return constexpr(ret_ty(self.value))\n \n+\n class tensor:\n     # infer dtype from ir type\n     @staticmethod"}]