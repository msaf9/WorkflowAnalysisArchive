[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -810,6 +810,7 @@ def __init__(self, required, limit, name):\n         self.message = f'out of resource: {name}, '\\\n                        f'Required: {required}, '\\\n                        f'Hardware limit: {limit}'\n+        self.message += '. Reducing block sizes or `num_stages` may help.'\n         self.required = required\n         self.limit = limit\n         self.name = name"}, {"filename": "python/triton/runtime/autotuner.py", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "file_content_changes": "@@ -87,13 +87,7 @@ def run(self, *args, **kwargs):\n         self.best_config = config\n         if config.pre_hook is not None:\n             config.pre_hook(self.nargs)\n-        try:\n-          return self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **kwargs, **config.kwargs)\n-        except OutOfResources as E:\n-          raise RuntimeError(\"Autotuner couldn't find an appropriate configuration. \"\\\n-                             \"All proposed configurations use too much shared memory. \"\\\n-                             \"Triton does support spilling to DRAM. \"\n-                             \"Try reducing block sizes or `num_stages`.\")\n+        return self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **kwargs, **config.kwargs)\n \n     def prune_configs(self, kwargs):\n         pruned_configs = self.configs"}]