[{"filename": "lib/Conversion/TritonToTritonGPU/TritonToTritonGPUPass.cpp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "file_content_changes": "@@ -625,6 +625,49 @@ void populateSCFPatterns(TritonGPUTypeConverter &typeConverter,\n                SCFConditionPattern>(typeConverter, context);\n }\n \n+// CF\n+\n+class CFBranchPattern : public OpConversionPattern<cf::BranchOp> {\n+public:\n+  using OpConversionPattern<cf::BranchOp>::OpConversionPattern;\n+\n+  LogicalResult\n+  matchAndRewrite(cf::BranchOp op, cf::BranchOp::Adaptor adaptor,\n+                  ConversionPatternRewriter &rewriter) const override {\n+    rewriter.replaceOpWithNewOp<cf::BranchOp>(op, op.getSuccessor(),\n+                                              adaptor.getOperands());\n+    return success();\n+  }\n+};\n+\n+class CFCondBranchPattern : public OpConversionPattern<cf::CondBranchOp> {\n+public:\n+  using OpConversionPattern<cf::CondBranchOp>::OpConversionPattern;\n+\n+  LogicalResult\n+  matchAndRewrite(cf::CondBranchOp op, cf::CondBranchOp::Adaptor adaptor,\n+                  ConversionPatternRewriter &rewriter) const override {\n+    auto converter = getTypeConverter();\n+    auto newOp = rewriter.replaceOpWithNewOp<cf::CondBranchOp>(\n+        op, adaptor.getCondition(), op.getTrueDest(),\n+        adaptor.getTrueDestOperands(), op.getFalseDest(),\n+        adaptor.getFalseDestOperands());\n+\n+    if (failed(rewriter.convertRegionTypes(newOp.getTrueDest()->getParent(),\n+                                           *converter)))\n+      return failure();\n+    if (failed(rewriter.convertRegionTypes(newOp.getFalseDest()->getParent(),\n+                                           *converter)))\n+      return failure();\n+    return success();\n+  }\n+};\n+\n+void populateCFPatterns(TritonGPUTypeConverter &typeConverter,\n+                        RewritePatternSet &patterns) {\n+  MLIRContext *context = patterns.getContext();\n+  patterns.add<CFBranchPattern, CFCondBranchPattern>(typeConverter, context);\n+}\n //\n \n class ConvertTritonToTritonGPU\n@@ -650,6 +693,7 @@ class ConvertTritonToTritonGPU\n     // TODO: can we use\n     //    mlir::scf::populateSCFStructurealTypeConversionsAndLegality(...) here?\n     populateSCFPatterns(typeConverter, patterns);\n+    populateCFPatterns(typeConverter, patterns);\n \n     if (failed(applyPartialConversion(mod, target, std::move(patterns))))\n       return signalPassFailure();"}]