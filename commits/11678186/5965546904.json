[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -2177,7 +2177,7 @@ def kernel(X, stride_xm, stride_xk,\n                ALLOW_TF32: tl.constexpr,\n                DO_SOFTMAX: tl.constexpr, CHAIN_DOT: tl.constexpr,\n                COL_A: tl.constexpr, COL_B: tl.constexpr,\n-               out_dtype : tl.constexpr = tl.float32):\n+               out_dtype: tl.constexpr = tl.float32):\n         off_m = tl.arange(0, BLOCK_M)\n         off_n = tl.arange(0, BLOCK_N)\n         off_l = tl.arange(0, BLOCK_N)"}, {"filename": "python/triton/language/standard.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "file_content_changes": "@@ -1,8 +1,7 @@\n from __future__ import annotations\n \n from ..runtime.jit import jit\n-from . import core\n-from . import math\n+from . import core, math\n \n # -----------------------\n # Standard library\n@@ -98,6 +97,7 @@ def zeros(shape, dtype):\n def zeros_like(input):\n     return zeros(input.shape, input.dtype)\n \n+\n @jit\n def minimum(x, y):\n     \"\"\"\n@@ -150,8 +150,8 @@ def _argmax_combine_tie_break_fast(value1, index1, value2, index2):\n \n @jit\n @core._add_reduction_docstr(\"maximum\",\n-                       return_indices_arg=\"return_indices\",\n-                       tie_break_arg=\"return_indices_tie_break_left\")\n+                            return_indices_arg=\"return_indices\",\n+                            tie_break_arg=\"return_indices_tie_break_left\")\n def max(input, axis=None, return_indices=False, return_indices_tie_break_left=True):\n     input = core._promote_reduction_input(input)\n     if return_indices:\n@@ -202,8 +202,8 @@ def _argmin_combine_tie_break_fast(value1, index1, value2, index2):\n \n @jit\n @core._add_reduction_docstr(\"minimum\",\n-                       return_indices_arg=\"return_indices\",\n-                       tie_break_arg=\"return_indices_tie_break_left\")\n+                            return_indices_arg=\"return_indices\",\n+                            tie_break_arg=\"return_indices_tie_break_left\")\n def min(input, axis=None, return_indices=False, return_indices_tie_break_left=True):\n     input = core._promote_reduction_input(input)\n     if return_indices:\n@@ -223,7 +223,7 @@ def min(input, axis=None, return_indices=False, return_indices_tie_break_left=Tr\n \n @jit\n @core._add_reduction_docstr(\"minimum index\",\n-                       tie_break_arg=\"tie_break_left\")\n+                            tie_break_arg=\"tie_break_left\")\n def argmin(input, axis, tie_break_left=True):\n     _, ret = min(input, axis, return_indices=True, return_indices_tie_break_left=tie_break_left)\n     return ret\n@@ -259,7 +259,7 @@ def xor_sum(input, axis=None, _builder=None, _generator=None):\n \n     input = core._promote_reduction_input(input, _builder=_builder)\n     return core.reduce(input, axis, _xor_combine,\n-                  _builder=_builder, _generator=_generator)\n+                       _builder=_builder, _generator=_generator)\n \n # cumsum\n "}]