[{"filename": "python/tests/test_vecadd.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -150,7 +150,7 @@ def kernel(x_ptr,\n         y = tl.load(y_ptrs, mask=io_mask)\n \n         z = x + y\n-        val_mask = offset < n_elements and z > 0.\n+        val_mask = offset < n_elements and (z < 0. or z > 1.)\n \n         z_ptrs = z_ptr + offset\n         tl.store(z_ptrs, z, mask=val_mask)\n@@ -165,7 +165,7 @@ def kernel(x_ptr,\n     golden_z: torch.Tensor = x + y\n     gz_data = torch.flatten(golden_z)\n     for i in range(golden_z.numel()):\n-        gz_data[i] = gz_data[i] if gz_data[i] > 0. else 0.\n+        gz_data[i] = gz_data[i] if gz_data[i] < 0. or gz_data[i] > 1. else 0.\n \n     assert_close(z, golden_z, rtol=1e-7, atol=1e-7)\n "}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -295,9 +295,9 @@ def bool_and(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tens\n \n def bool_or(input: tl.tensor, other: tl.tensor, builder: ir.builder) -> tl.tensor:\n     if not input.type.is_int1():\n-        input = bitcast(input, builder.get_int1_ty(), builder)\n+        input = bitcast(input, tl.dtype(\"int1\"), builder)\n     if not other.type.is_int1():\n-        other = bitcast(other, builder.get_int1_ty(), builder)\n+        other = bitcast(other, tl.dtype(\"int1\"), builder)\n     return or_(input, other, builder)\n \n "}]