[{"filename": "python/test/unit/language/assert_helper.py", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "file_content_changes": "@@ -14,6 +14,14 @@ def kernel_device_assert(X, Y, BLOCK: tl.constexpr):\n     tl.store(Y + tl.arange(0, BLOCK), x)\n \n \n+@triton.jit\n+def kernel_device_assert_scalar(X, Y, BLOCK: tl.constexpr):\n+    x = tl.load(X + tl.arange(0, BLOCK))\n+    # Trivial assert\n+    tl.device_assert(0 == 0, \"x != 0\")\n+    tl.store(Y + tl.arange(0, BLOCK), x)\n+\n+\n @triton.jit\n def kernel_assert(X, Y, BLOCK: tl.constexpr):\n     x = tl.load(X + tl.arange(0, BLOCK))\n@@ -34,6 +42,7 @@ def test_assert(func: str):\n     y = torch.zeros(shape, dtype=x.dtype, device=\"cuda\")\n     if func == \"device_assert\":\n         kernel_device_assert[(1,)](x, y, BLOCK=shape[0])\n+        kernel_device_assert_scalar[(1,)](x, y, BLOCK=shape[0])\n     elif func == \"assert\":\n         kernel_assert[(1,)](x, y, BLOCK=shape[0])\n     elif func == \"static_assert\":"}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -1379,6 +1379,10 @@ def device_print(prefix: str, args: List[tl.tensor], builder: ir.builder) -> tl.\n \n \n def device_assert(cond: tl.tensor, msg: str, file_name: str, func_name, lineno: int, builder: ir.builder) -> tl.tensor:\n+    cond_ty = cond.type\n+    if not cond_ty.is_block():\n+        cond_ty = tl.block_type(cond_ty.scalar, (1,))\n+        cond = tl.tensor(builder.create_splat(cond.handle, (1,)), cond_ty)\n     return tl.tensor(builder.create_assert(cond.handle, msg, file_name, func_name, lineno), tl.void)\n \n "}]