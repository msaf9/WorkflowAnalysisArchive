[{"filename": "CMakeLists.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -215,6 +215,7 @@ if(TRITON_BUILD_PYTHON_MODULE)\n     ${conversion_libs}\n \n     # optimizations\n+    MLIRBytecodeWriter\n     MLIRPass\n     MLIRTransforms\n     MLIRLLVMDialect"}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "file_content_changes": "@@ -3,6 +3,8 @@\n #include \"mlir/IR/MLIRContext.h\"\n #include \"mlir/IR/Verifier.h\"\n \n+#include \"mlir/Bytecode/BytecodeWriter.h\"\n+\n #include \"mlir/Conversion/Passes.h\"\n #include \"mlir/Pass/Pass.h\"\n #include \"mlir/Pass/PassManager.h\"\n@@ -348,6 +350,14 @@ void init_triton_ir(py::module &&m) {\n              self.print(os);\n              return str;\n            })\n+      .def(\"bytecode\",\n+           [](mlir::ModuleOp &self) -> py::bytearray {\n+             std::string bytecode;\n+             llvm::raw_string_ostream os(bytecode);\n+             if (failed(mlir::writeBytecodeToFile(self, os)))\n+               throw std::runtime_error(\"Failed to write module bytecode\");\n+             return py::bytearray(bytecode);\n+           })\n       .def(\"push_back\",\n            [](mlir::ModuleOp &self, mlir::triton::FuncOp &funcOp) -> void {\n              self.push_back(funcOp);"}]