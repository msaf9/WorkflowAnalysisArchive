[{"filename": "python/tutorials/09-illegal-memory-access-analysis.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -51,7 +51,7 @@ def add(x: torch.Tensor, y: torch.Tensor):\n # %%\n # Before running the kernel, we disable PyTorch's caching allocator.\n # Otherwise, PyTorch could allocate additional memory for tensors.\n-# We register the exception handling hook to print the exception stack trace.\n+# It is not required in production.\n os.environ[\"PYTORCH_NO_CUDA_MEMORY_CACHING\"] = \"1\"\n \n triton.enable_invalid_memory_access_analysis('./core_file')"}]