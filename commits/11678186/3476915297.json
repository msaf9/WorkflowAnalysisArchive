[{"filename": "include/triton/Dialect/TritonGPU/IR/TritonGPUAttrDefs.td", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "file_content_changes": "@@ -74,11 +74,9 @@ A_{3, 2}  A_{3, 3}  A_{3, 0}  A_{3, 1} ...   [phase 1] /\n   let builders = [\n     AttrBuilder<(ins \"DotOperandEncodingAttr\":$dotOpEnc,\n                      \"ArrayRef<int64_t>\":$shape,\n+                     \"ArrayRef<unsigned>\":$order,\n                      \"Type\":$eltTy), [{\n         auto mmaEnc = dotOpEnc.getParent().dyn_cast<MmaEncodingAttr>();\n-        // Only support row major for now\n-        // TODO(Keren): check why column major code crashes\n-        SmallVector<unsigned> order = {1, 0};\n \n         if(!mmaEnc)\n           return $_get(context, 1, 1, 1, order);"}, {"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -6148,6 +6148,7 @@ class ConvertTritonGPUToLLVM\n             dstType.getShape(), dstType.getElementType(),\n             triton::gpu::SharedEncodingAttr::get(mod.getContext(), dstDotOp,\n                                                  srcType.getShape(),\n+                                                 getOrder(srcBlocked),\n                                                  srcType.getElementType()));\n         auto tmp = builder.create<triton::gpu::ConvertLayoutOp>(\n             cvtOp.getLoc(), tmpType, cvtOp.getOperand());"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "file_content_changes": "@@ -201,7 +201,9 @@ LogicalResult LoopPipeliner::initialize() {\n                                              ty.getShape().end());\n             bufferShape.insert(bufferShape.begin(), numStages);\n             auto sharedEnc = ttg::SharedEncodingAttr::get(\n-                ty.getContext(), dotOpEnc, ty.getShape(), ty.getElementType());\n+                ty.getContext(), dotOpEnc, ty.getShape(),\n+                triton::gpu::getOrder(ty.getEncoding()),\n+                ty.getElementType());\n             loadsBufferType[loadOp] = RankedTensorType::get(\n                 bufferShape, ty.getElementType(), sharedEnc);\n           }"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -878,11 +878,11 @@ def ttir_to_ttgir(mod, num_warps, num_stages):\n     pm.enable_debug()\n     # Convert blocked layout to mma layout for dot ops so that pipeline\n     # can get shared memory swizzled correctly.\n+    pm.add_coalesce_pass()\n     pm.add_triton_gpu_combine_pass()\n     pm.add_tritongpu_pipeline_pass(num_stages)\n     pm.add_canonicalizer_pass()\n     pm.add_cse_pass()\n-    pm.add_coalesce_pass()\n     pm.add_triton_gpu_combine_pass()\n     pm.add_licm_pass()\n     pm.add_triton_gpu_combine_pass()"}, {"filename": "unittest/Dialect/TritonGPU/SwizzleTest.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -34,7 +34,7 @@ TEST_P(SwizzleDotOperandTestFixture, DotOperands) {\n \n   // create element type\n   Type eltType = IntegerType::get(&ctx, params.typeWidth);\n-  auto layout = SharedEncodingAttr::get(&ctx, encoding, params.shape, eltType);\n+  auto layout = SharedEncodingAttr::get(&ctx, encoding, params.shape, {1, 0}, eltType);\n \n   ASSERT_EQ(layout.getVec(), params.refSwizzle.vec);\n   ASSERT_EQ(layout.getPerPhase(), params.refSwizzle.perPhase);"}]