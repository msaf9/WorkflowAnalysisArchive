[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "file_content_changes": "@@ -3557,13 +3557,13 @@ DotOpConversion::convertMMA884(triton::DotOp op, DotOpAdaptor adaptor,\n \n   // Initialize accumulators with external values, the acc holds the accumulator\n   // value that is shared between the MMA instructions inside a DotOp, we can\n-  // call its layout the accumulator-internal layout.\n+  // call the order of the values the accumulator-internal order.\n   SmallVector<Value> acc = getElementsFromStruct(loc, loadedC, rewriter);\n   size_t resSize = acc.size();\n \n   // The resVals holds the final result of the DotOp.\n-  // NOTE The current layout of resVals is different from acc, we call it the\n-  // accumulator-external layout. and\n+  // NOTE The current order of resVals is different from acc, we call it the\n+  // accumulator-external order. and\n   SmallVector<Value> resVals(resSize);\n \n   auto getIdx = [&](int m, int n) {\n@@ -3580,18 +3580,18 @@ DotOpConversion::convertMMA884(triton::DotOp op, DotOpAdaptor adaptor,\n     return idx;\n   };\n \n-  { // convert the acc's value from accumuator-external layout to\n-    // accumulator-internal layout.\n-    SmallVector<Value> acc2(acc);\n+  { // convert the acc's value from accumuator-external order to\n+    // accumulator-internal order.\n+    SmallVector<Value> accInit(acc.size());\n \n     for (unsigned m = 0; m < numM / 2; ++m)\n       for (unsigned n = 0; n < numN / 2; ++n) {\n         auto idx = getIdx(m, n);\n         for (unsigned i = 0; i < 8; ++i)\n-          acc2[idx[i]] = acc[(m * numN / 2 + n) * 8 + i];\n+          accInit[idx[i]] = acc[(m * numN / 2 + n) * 8 + i];\n       }\n \n-    acc = acc2;\n+    acc = accInit;\n   }\n \n   auto callMMA = [&](unsigned m, unsigned n, unsigned k) {"}]