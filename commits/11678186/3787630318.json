[{"filename": "lib/Conversion/TritonGPUToLLVM/DotOpHelpers.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "file_content_changes": "@@ -204,11 +204,11 @@ struct DotOpMmaV1ConversionHelper {\n       offA[i] = add(mul(offA0I, strideA0), mul(offA1, strideA1));\n     }\n \n-    Type f16x2Ty = vec_ty(f16_ty, 2);\n-    Type f16PtrTy = ptr_ty(f16_ty);\n+    Type elemX2Ty = vec_ty(f16_ty, 2);\n+    Type elemPtrTy = ptr_ty(f16_ty);\n     if (tensorTy.getElementType().isBF16()) {\n-      f16x2Ty = vec_ty(i16_ty, 2);\n-      f16PtrTy = ptr_ty(i16_ty);\n+      elemX2Ty = vec_ty(i16_ty, 2);\n+      elemPtrTy = ptr_ty(i16_ty);\n     }\n \n     // prepare arguments\n@@ -223,23 +223,23 @@ struct DotOpMmaV1ConversionHelper {\n     };\n     auto loadA = [&](int m, int k) {\n       int offidx = (isARow ? k / 4 : m) % numPtrA;\n-      Value thePtrA = gep(f16PtrTy, smemBase, offA[offidx]);\n+      Value thePtrA = gep(elemPtrTy, smemBase, offA[offidx]);\n \n       int stepAM = isARow ? m : m / numPtrA * numPtrA;\n       int stepAK = isARow ? k / (numPtrA * vecA) * (numPtrA * vecA) : k;\n       Value offset = add(mul(i32_val(stepAM * strideRepM), strideAM),\n                          mul(i32_val(stepAK), strideAK));\n-      Value pa = gep(f16PtrTy, thePtrA, offset);\n+      Value pa = gep(elemPtrTy, thePtrA, offset);\n       Type aPtrTy = ptr_ty(vec_ty(i32_ty, std::max<int>(vecA / 2, 1)), 3);\n       Value ha = load(bitcast(pa, aPtrTy));\n       // record lds that needs to be moved\n-      Value ha00 = bitcast(extract_element(ha, i32_val(0)), f16x2Ty);\n-      Value ha01 = bitcast(extract_element(ha, i32_val(1)), f16x2Ty);\n+      Value ha00 = bitcast(extract_element(ha, i32_val(0)), elemX2Ty);\n+      Value ha01 = bitcast(extract_element(ha, i32_val(1)), elemX2Ty);\n       ld(has, m, k, ha00, ha01);\n \n       if (vecA > 4) {\n-        Value ha10 = bitcast(extract_element(ha, i32_val(2)), f16x2Ty);\n-        Value ha11 = bitcast(extract_element(ha, i32_val(3)), f16x2Ty);\n+        Value ha10 = bitcast(extract_element(ha, i32_val(2)), elemX2Ty);\n+        Value ha11 = bitcast(extract_element(ha, i32_val(3)), elemX2Ty);\n         if (isARow)\n           ld(has, m, k + 4, ha10, ha11);\n         else\n@@ -259,7 +259,7 @@ struct DotOpMmaV1ConversionHelper {\n       elems.push_back(item.second.second);\n     }\n \n-    Type resTy = struct_ty(SmallVector<Type>(elems.size(), f16x2Ty));\n+    Type resTy = struct_ty(SmallVector<Type>(elems.size(), elemX2Ty));\n     Value res = getStructFromElements(loc, elems, rewriter, resTy);\n     return res;\n   }\n@@ -322,11 +322,11 @@ struct DotOpMmaV1ConversionHelper {\n       offB[i] = add(mul(offB0I, strideB0), mul(offB1, strideB1));\n     }\n \n-    Type f16PtrTy = ptr_ty(f16_ty);\n-    Type f16x2Ty = vec_ty(f16_ty, 2);\n+    Type elemPtrTy = ptr_ty(f16_ty);\n+    Type elemX2Ty = vec_ty(f16_ty, 2);\n     if (tensorTy.getElementType().isBF16()) {\n-      f16PtrTy = ptr_ty(i16_ty);\n-      f16x2Ty = vec_ty(i16_ty, 2);\n+      elemPtrTy = ptr_ty(i16_ty);\n+      elemX2Ty = vec_ty(i16_ty, 2);\n     }\n \n     SmallVector<Value> ptrB(numPtrB);\n@@ -346,17 +346,17 @@ struct DotOpMmaV1ConversionHelper {\n       int stepBK = isBRow ? K : K / (numPtrB * vecB) * (numPtrB * vecB);\n       Value offset = add(mul(i32_val(stepBN * strideRepN), strideBN),\n                          mul(i32_val(stepBK), strideBK));\n-      Value pb = gep(f16PtrTy, thePtrB, offset);\n+      Value pb = gep(elemPtrTy, thePtrB, offset);\n \n       Value hb =\n           load(bitcast(pb, ptr_ty(vec_ty(i32_ty, std::max(vecB / 2, 1)), 3)));\n       // record lds that needs to be moved\n-      Value hb00 = bitcast(extract_element(hb, i32_val(0)), f16x2Ty);\n-      Value hb01 = bitcast(extract_element(hb, i32_val(1)), f16x2Ty);\n+      Value hb00 = bitcast(extract_element(hb, i32_val(0)), elemX2Ty);\n+      Value hb01 = bitcast(extract_element(hb, i32_val(1)), elemX2Ty);\n       ld(hbs, n, K, hb00, hb01);\n       if (vecB > 4) {\n-        Value hb10 = bitcast(extract_element(hb, i32_val(2)), f16x2Ty);\n-        Value hb11 = bitcast(extract_element(hb, i32_val(3)), f16x2Ty);\n+        Value hb10 = bitcast(extract_element(hb, i32_val(2)), elemX2Ty);\n+        Value hb11 = bitcast(extract_element(hb, i32_val(3)), elemX2Ty);\n         if (isBRow)\n           ld(hbs, n + 1, K, hb10, hb11);\n         else\n@@ -376,7 +376,7 @@ struct DotOpMmaV1ConversionHelper {\n       elems.push_back(item.second.first);\n       elems.push_back(item.second.second);\n     }\n-    Type resTy = struct_ty(SmallVector<Type>(elems.size(), f16x2Ty));\n+    Type resTy = struct_ty(SmallVector<Type>(elems.size(), elemX2Ty));\n     Value res = getStructFromElements(loc, elems, rewriter, resTy);\n     return res;\n   }"}]