[{"filename": "include/triton/Analysis/Utility.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "file_content_changes": "@@ -2,6 +2,7 @@\n #define TRITON_ANALYSIS_UTILITY_H\n \n #include \"triton/Dialect/TritonGPU/IR/Dialect.h\"\n+#include \"mlir/Analysis/SliceAnalysis.h\"\n #include <algorithm>\n #include <numeric>\n #include <string>\n@@ -97,6 +98,11 @@ bool isMmaToDotShortcut(triton::gpu::MmaEncodingAttr &mmaLayout,\n SetVector<Operation *>\n multiRootTopologicalSort(const SetVector<Operation *> &toSort);\n \n+// This uses the toplogicalSort above\n+SetVector<Operation *> multiRootGetSlice(Operation *op,\n+                                        TransitiveFilter backwardFilter = nullptr,\n+                                        TransitiveFilter forwardFilter = nullptr);\n+\n } // namespace mlir\n \n #endif // TRITON_ANALYSIS_UTILITY_H"}, {"filename": "lib/Analysis/CMakeLists.txt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "file_content_changes": "@@ -8,4 +8,7 @@ add_mlir_library(TritonAnalysis\n   DEPENDS\n   TritonTableGen\n   TritonGPUAttrDefsIncGen\n+  \n+  LINK_LIBS PUBLIC\n+  MLIRAnalysis\n )"}, {"filename": "lib/Analysis/Utility.cpp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "file_content_changes": "@@ -300,4 +300,29 @@ multiRootTopologicalSort(const SetVector<Operation *> &toSort) {\n   return res;\n }\n \n+SetVector<Operation *> multiRootGetSlice(Operation *op,\n+                                        TransitiveFilter backwardFilter,\n+                                        TransitiveFilter forwardFilter) {\n+  SetVector<Operation *> slice;\n+  slice.insert(op);\n+\n+  unsigned currentIndex = 0;\n+  SetVector<Operation *> backwardSlice;\n+  SetVector<Operation *> forwardSlice;\n+  while (currentIndex != slice.size()) {\n+    auto *currentOp = (slice)[currentIndex];\n+    // Compute and insert the backwardSlice starting from currentOp.\n+    backwardSlice.clear();\n+    getBackwardSlice(currentOp, &backwardSlice, backwardFilter);\n+    slice.insert(backwardSlice.begin(), backwardSlice.end());\n+\n+    // Compute and insert the forwardSlice starting from currentOp.\n+    forwardSlice.clear();\n+    getForwardSlice(currentOp, &forwardSlice, forwardFilter);\n+    slice.insert(forwardSlice.begin(), forwardSlice.end());\n+    ++currentIndex;\n+  }\n+  return multiRootTopologicalSort(slice);\n+}\n+\n } // namespace mlir"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Coalesce.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -36,7 +36,7 @@ struct CoalescePass : public TritonGPUCoalesceBase<CoalescePass> {\n     SetVector<Value> withSameOrder;\n     withSameOrder.insert(ptr);\n     if (ptr.getDefiningOp())\n-      for (Operation *op : mlir::getSlice(ptr.getDefiningOp())) {\n+      for (Operation *op : mlir::multiRootGetSlice(ptr.getDefiningOp())) {\n         for (Value val : op->getResults()) {\n           if (val.getType() != origType)\n             continue;"}]