[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVMPass.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -99,7 +99,7 @@ struct FuncOpConversion : public FuncOpConversionBase {\n         this->getTypeConverter()->convertType(rewriter.getI8Type()), 3);\n     // 1. Modify the function type to add the new argument.\n     auto funcTy = funcOp.getFunctionType();\n-    auto amendedInputTy = llvm::to_vector(funcTy.getInputs());\n+    auto amendedInputTy = llvm::to_vector<4>(funcTy.getInputs());\n     amendedInputTy.push_back(ptrTy);\n     auto amendedFuncTy = FunctionType::get(funcTy.getContext(), amendedInputTy,\n                                            funcTy.getResults());\n@@ -109,7 +109,7 @@ struct FuncOpConversion : public FuncOpConversionBase {\n         rewriter.getNamedAttr(\"noinline\", rewriter.getBoolAttr(true)));\n     filterFuncAttributes(funcOp, /*filterArgAttrs=*/true, amendedAttrs);\n     // 3. Modify the argument attributes to add the new argument.\n-    auto amendedArgAttrs = llvm::to_vector(funcOp.getAllArgAttrs());\n+    auto amendedArgAttrs = llvm::to_vector<4>(funcOp.getAllArgAttrs());\n     amendedArgAttrs.emplace_back(DictionaryAttr::get(ctx));\n     amendedAttrs.push_back(rewriter.getNamedAttr(\n         funcOp.getArgAttrsAttrName(), rewriter.getArrayAttr(amendedArgAttrs)));\n@@ -188,7 +188,7 @@ struct CallOpConversion : public ConvertOpToLLVMPattern<triton::CallOp> {\n   }\n \n private:\n-  SmallVector<Value>\n+  SmallVector<Value, 4>\n   promoteOperands(triton::CallOp callOp,\n                   typename triton::CallOp::Adaptor adaptor,\n                   ConversionPatternRewriter &rewriter) const {\n@@ -216,7 +216,7 @@ struct CallOpConversion : public ConvertOpToLLVMPattern<triton::CallOp> {\n     // Pack the result types into a struct.\n     Type packedResult = nullptr;\n     unsigned numResults = callOp.getNumResults();\n-    auto resultTypes = llvm::to_vector(callOp.getResultTypes());\n+    auto resultTypes = llvm::to_vector<4>(callOp.getResultTypes());\n \n     if (numResults != 0) {\n       if (!(packedResult ="}]