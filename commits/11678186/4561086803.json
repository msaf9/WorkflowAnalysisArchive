[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -163,8 +163,8 @@ def _define_name_lookup(self):\n         ))\n         # TODO: this needs to be moved to class scope when cyclic imports untangled and `triton.language` can be imported at module level\n         self.statically_implemented_functions.update((\n-            (triton.language.core.static_assert, self.execute_static_assert),\n-            (triton.language.core.static_print, self.execute_static_print),\n+            (triton.language.core.static_assert, CodeGenerator.execute_static_assert),\n+            (triton.language.core.static_print, CodeGenerator.execute_static_print),\n         ))\n \n         def local_lookup(name: str, absent):\n@@ -813,7 +813,7 @@ def visit_Call(self, node):\n \n         static_implementation = self.statically_implemented_functions.get(fn)\n         if static_implementation is not None:\n-            return static_implementation(node)\n+            return static_implementation(self, node)\n \n         kws = dict(self.visit(keyword) for keyword in node.keywords)\n         args = [self.visit(arg) for arg in node.args]"}]