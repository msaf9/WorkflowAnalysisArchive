[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -374,7 +374,7 @@ struct ConvertTritonGPUOpToLLVMPatternBase {\n   static SmallVector<Value>\n   getElementsFromStruct(Location loc, Value llvmStruct,\n                         ConversionPatternRewriter &rewriter) {\n-    if (llvmStruct.getType().isIntOrFloat() ||\n+    if (llvmStruct.getType().isIntOrIndexOrFloat() ||\n         llvmStruct.getType().isa<triton::PointerType>() ||\n         llvmStruct.getType().isa<LLVM::LLVMPointerType>())\n       return {llvmStruct};\n@@ -1795,6 +1795,7 @@ class ElementwiseOpConversionBase\n                   ConversionPatternRewriter &rewriter) const override {\n     auto resultTy = op.getType();\n     Location loc = op->getLoc();\n+\n     unsigned elems = getElemsPerThread(resultTy);\n     auto resultElementTy = getElementTypeOrSelf(resultTy);\n     Type elemTy = this->getTypeConverter()->convertType(resultElementTy);"}, {"filename": "lib/Dialect/TritonGPU/IR/Dialect.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -44,7 +44,7 @@ namespace gpu {\n \n // TODO: Inheritation of layout attributes\n unsigned getElemsPerThread(Type type) {\n-  if (type.isIntOrFloat() || type.isa<triton::PointerType>())\n+  if (type.isIntOrIndexOrFloat() || type.isa<triton::PointerType>())\n     return 1;\n   auto tensorType = type.cast<RankedTensorType>();\n   auto layout = tensorType.getEncoding();"}]