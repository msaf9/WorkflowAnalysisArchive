[{"filename": "include/triton/Target/LLVMIR/LLVMIRTranslation.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -1,5 +1,6 @@\n #ifndef TRITON_TARGET_LLVMIRTRANSLATION_H\n #define TRITON_TARGET_LLVMIRTRANSLATION_H\n+#include \"llvm/ADT/StringRef.h\"\n #include <memory>\n #include <vector>\n \n@@ -29,7 +30,7 @@ translateTritonGPUToLLVMIR(llvm::LLVMContext *llvmContext,\n std::unique_ptr<llvm::Module>\n translateLLVMToLLVMIR(llvm::LLVMContext *llvmContext, mlir::ModuleOp module);\n \n-bool linkLibdevice(llvm::Module &module, const std::string &path);\n+bool linkLibdevice(llvm::Module &module, llvm::StringRef path);\n \n } // namespace triton\n } // namespace mlir"}, {"filename": "lib/Target/LLVMIR/LLVMIRTranslation.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -232,7 +232,7 @@ void addExternalLibs(mlir::ModuleOp &module,\n   return;\n }\n \n-bool linkLibdevice(llvm::Module &module, const std::string &path) {\n+bool linkLibdevice(llvm::Module &module, llvm::StringRef path) {\n   llvm::SMDiagnostic err;\n   auto &ctx = module.getContext();\n "}, {"filename": "lib/Target/PTX/PTXTranslation.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "file_content_changes": "@@ -72,6 +72,7 @@ static std::string llir_to_ptx(llvm::Module *module, int capability, int ptx) {\n \n   if (hasExternal) {\n     namespace fs = std::filesystem;\n+    // [triton root dir]/python/triton/language/libdevice.10.bc\n     static const fs::path libdevice = fs::path(__FILE__)\n                                           .parent_path()\n                                           .parent_path()"}]