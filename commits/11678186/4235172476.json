[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "file_content_changes": "@@ -6,6 +6,8 @@ on:\n     branches:\n       - main\n       - triton-mlir\n+  merge_group:\n+    types: [checks_requested]\n \n concurrency:\n   group: ${{ github.ref }}\n@@ -21,7 +23,7 @@ jobs:\n         id: set-matrix\n         run: |\n           if [ x\"${{ github.repository }}\" == x\"openai/triton\" ]; then\n-            echo '::set-output name=matrix::[[\"self-hosted\", \"A10\"], [\"self-hosted\", \"V100\"], [\"self-hosted\", \"gfx908\"],  \"macos-10.15\"]'\n+            echo '::set-output name=matrix::[[\"self-hosted\", \"A100\"], [\"self-hosted\", \"V100\"], [\"self-hosted\", \"gfx908\"], \"macos-10.15\"]'\n           else\n             echo '::set-output name=matrix::[\"ubuntu-latest\", \"macos-10.15\"]'\n           fi\n@@ -43,29 +45,33 @@ jobs:\n         run: |\n           rm -rf ~/.triton/cache/\n \n+      - name: Update path\n+        run: |\n+          echo \"$HOME/.local/bin/\" >> $GITHUB_PATH\n+\n       - name: Check imports\n         if: ${{ matrix.runner != 'macos-10.15' }}\n         run: |\n-          pip install isort\n+          pip3 install isort\n           isort -c ./python || ( echo '::error title=Imports not sorted::Please run \\\"isort ./python\\\"' ; exit 1 )\n \n       - name: Check python style\n         if: ${{ matrix.runner != 'macos-10.15' }}\n         run: |\n-          pip install autopep8\n+          pip3 install autopep8\n           autopep8 -a -r -d --exit-code ./python || ( echo '::error title=Style issues::Please run \\\"autopep8 -a -r -i ./python\\\"' ; exit 1 )\n \n       - name: Check cpp style\n         if: ${{ matrix.runner != 'macos-10.15' }}\n         run: |\n-          pip install clang-format\n+          pip3 install clang-format\n           find . -regex '.*\\.\\(cpp\\|hpp\\|h\\|cc\\)' -not -path \"./python/triton/*\" -not -path \"./python/build/*\" -not -path \"./include/triton/external/*\" -print0 | xargs -0 -n1 clang-format -style=file --dry-run -Werror -i ||\n           (echo '::error title=Style issues:: Please run `find . -regex \".*\\.\\(cpp\\|hpp\\|h\\|cc\\)\" -not -path \"./python/triton/*\" -not -path \"./python/build/*\" -not -path \"./include/triton/external/*\" -print0 | xargs -0 -n1 clang-format -style=file -i`' ; exit 1)\n \n       - name: Flake8\n         if: ${{ matrix.runner != 'macos-10.15' }}\n         run: |\n-          pip install flake8\n+          pip3 install flake8\n           flake8 --config ./python/setup.cfg ./python || ( echo '::error::Flake8 failed; see logs for errors.' ; exit 1 )\n \n       - name: Install Triton"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "file_content_changes": "@@ -1316,11 +1316,6 @@ def default_cache_dir():\n     return os.path.join(os.environ[\"HOME\"], \".triton\", \"cache\")\n \n \n-def default_cuda_dir():\n-    default_dir = \"/usr/local/cuda\"\n-    return os.getenv(\"CUDA_HOME\", default=default_dir)\n-\n-\n class CacheManager:\n \n     def __init__(self, key):\n@@ -1378,7 +1373,9 @@ def quiet():\n \n def _build(name, src, srcdir):\n     cuda_lib_dirs = libcuda_dirs()\n-    cuda_path = os.environ.get('CUDA_PATH', default_cuda_dir())\n+    base_dir = os.path.dirname(__file__)\n+    cuda_path = os.path.join(base_dir, \"third_party\", \"cuda\")\n+\n     cu_include_dir = os.path.join(cuda_path, \"include\")\n     triton_include_dir = os.path.join(os.path.dirname(__file__), \"include\")\n     cuda_header = os.path.join(cu_include_dir, \"cuda.h\")"}]