[{"filename": "lib/codegen/pass.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -52,8 +52,6 @@ std::unique_ptr<llvm::Module> add_passes_to_emit_bin(ir::module &ir, llvm::LLVMC\n   // run passes\n   inliner.run(ir);\n   dce.run(ir);\n-  ir.print(std::cout);\n-  exit(1);\n   peephole.run(ir);\n   dce.run(ir);\n   pipeline.run(ir);"}, {"filename": "lib/driver/llvm.cc", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "file_content_changes": "@@ -203,8 +203,8 @@ std::string llir_to_ptx(llvm::Module* module, int cc, int version){\n   return result;\n }\n \n+\n std::string ptx_to_cubin(const std::string& ptx, const std::string& ptxas, int cc) {\n-  // std::cout << ptx << std::endl;\n   // compile ptx with ptxas\n   char _fsrc[L_tmpnam];\n   char _flog[L_tmpnam];\n@@ -219,7 +219,7 @@ std::string ptx_to_cubin(const std::string& ptx, const std::string& ptxas, int c\n   ofs.close();\n   std::string cmd;\n   int err;\n-  cmd = ptxas + \" -v -c --gpu-name=sm_\" + std::to_string(cc) + \" \" + fsrc + \" -o \" + fsrc + \".o 2> \" + flog;\n+  cmd = ptxas + \" -v --gpu-name=sm_\" + std::to_string(cc) + \" \" + fsrc + \" -o \" + fsrc + \".o 2> \" + flog;\n   err = system(cmd.c_str());\n   if(err != 0){\n     std::ifstream _log(_flog);\n@@ -232,25 +232,10 @@ std::string ptx_to_cubin(const std::string& ptx, const std::string& ptxas, int c\n   std::ifstream _cubin(_fbin, std::ios::binary );\n   std::string cubin(std::istreambuf_iterator<char>(_cubin), {});\n   _cubin.close();\n-  CUlinkState link_state;\n-  // TODO: fix path\n-  // TODO: only add if necessary\n-  CUjit_option options[1];\n-   void* optionVals[1];\n-   options[0] = CU_JIT_LTO;\n-   optionVals[0] = (void*)0;\n-  dispatch::cuLinkCreate_v2(0, options, optionVals, &link_state);\n-  dispatch::cuLinkAddFile_v2(link_state, CU_JIT_INPUT_LIBRARY, \"/usr/local/cuda/lib64/libcudadevrt.a\", 0, nullptr, nullptr);\n-  dispatch::cuLinkAddFile_v2(link_state, CU_JIT_INPUT_PTX, fsrc.c_str(), 0, nullptr, nullptr);\n-  size_t cubin_size;\n-  void* cubin_data;\n-  dispatch::cuLinkComplete(link_state, &cubin_data, &cubin_size);\n-  cubin = std::string((char*)cubin_data, cubin_size);\n-  dispatch::cuModuleLoadDataEx(&ret, cubin_data, 0, nullptr, nullptr);\n-  dispatch::cuLinkDestroy(link_state);\n   unlink(_fsrc);\n   unlink(_flog);\n   unlink(_fbin);\n+  dispatch::cuModuleLoadData(&ret, cubin.c_str());\n   return cubin;\n }\n "}]