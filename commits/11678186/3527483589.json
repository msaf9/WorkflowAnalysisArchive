[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -4148,8 +4148,7 @@ struct MMA16816ConversionHelper {\n                            TypeConverter *typeConverter, Location loc)\n       : mmaLayout(mmaLayout), thread(thread), helper(mmaLayout),\n         rewriter(rewriter), typeConverter(typeConverter), loc(loc),\n-        ctx(mmaLayout.getContext()) {\n-    wpt = mmaLayout.getWarpsPerCTA();\n+        ctx(mmaLayout.getContext()), wpt(mmaLayout.getWarpsPerCTA()) {\n     helper.deduceMmaType(dotOperand);\n \n     Value _32 = i32_val(32);\n@@ -4170,7 +4169,7 @@ struct MMA16816ConversionHelper {\n     return urem(urem(warpMN, i32_val(wpt[1])), i32_val(N / matShape[1]));\n   }\n \n-  // Get the mmaInstrShape from either $a or $b.\n+  // Get the mmaInstrShape deducing either from $a or $b.\n   std::tuple<int, int, int> getMmaInstrShape(Type operand) const {\n     helper.deduceMmaType(operand);\n     auto mmaInstrShape = helper.getMmaInstrShape();\n@@ -4180,6 +4179,7 @@ struct MMA16816ConversionHelper {\n     return std::make_tuple(mmaInstrM, mmaInstrN, mmaInstrK);\n   }\n \n+  // Get the mmaMatShape deducing either from $a or $b.\n   std::tuple<int, int, int> getMmaMatShape(Type operand) const {\n     helper.deduceMmaType(operand);\n     auto matShape = helper.getMmaMatShape();"}]