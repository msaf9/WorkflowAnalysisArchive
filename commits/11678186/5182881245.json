[{"filename": "lib/Conversion/TritonGPUToLLVM/LoadStoreOpToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "file_content_changes": "@@ -406,11 +406,6 @@ struct AtomicCASOpConversion\n                  : valueTy;\n     auto valueElemNBits = valueElemTy.getIntOrFloatBitWidth();\n     Value mask = getMask(valueTy, rewriter, loc);\n-    PTXBuilder ptxBuilderMemfence;\n-    auto memfence = ptxBuilderMemfence.create<PTXInstr>(\"membar\")->o(\"gl\");\n-    memfence();\n-    auto ASMReturnTy = void_ty(ctx);\n-    ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n \n     Value atomPtr = getSharedMemoryBase(loc, rewriter, op.getOperation());\n     atomPtr = bitcast(atomPtr, ptr_ty(valueElemTy, 3));\n@@ -436,7 +431,6 @@ struct AtomicCASOpConversion\n     st.shared().o(\"b32\");\n     st(dstOprStore, valOprStore).predicate(mask);\n     ptxBuilderStore.launch(rewriter, loc, ASMReturnTy);\n-    ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n     barrier();\n     Value ret = load(atomPtr);\n     barrier();\n@@ -578,11 +572,7 @@ struct AtomicRMWOpConversion\n               vec == 1 ? ret : extract_element(valueElemTy, ret, i32_val(ii));\n         }\n       } else {\n-        PTXBuilder ptxBuilderMemfence;\n-        auto memfenc = ptxBuilderMemfence.create<PTXInstr>(\"membar\")->o(\"gl\");\n-        memfenc();\n         auto ASMReturnTy = void_ty(ctx);\n-        ptxBuilderMemfence.launch(rewriter, loc, ASMReturnTy);\n         atom(dstOpr, ptrOpr, valOpr).predicate(rmwMask);\n         auto old = ptxBuilderAtomicRMW.launch(rewriter, loc, valueElemTy);\n         if (op->user_begin() == op->user_end()) {"}]