[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -1042,7 +1042,7 @@ def kernel(VALUE, X):\n @pytest.mark.parametrize(\"is_lhs_constexpr\", [False, True])\n @pytest.mark.parametrize(\"is_rhs_constexpr\", [True, False])\n def test_bin_op_constexpr(op, is_lhs_constexpr, is_rhs_constexpr):\n-    \n+\n     @triton.jit\n     def kernel(Z, X, Y):\n         x = tl.load(X)\n@@ -1062,13 +1062,14 @@ def kernel(Z, X, Y):\n     kernel[(1,)](z_tri, x_tri, y_tri)\n     np.testing.assert_allclose(z, to_numpy(z_tri))\n \n+\n def test_constexpr_shape():\n \n     @triton.jit\n     def kernel(X):\n         off = tl.arange(0, 128 + 128)\n         tl.store(X + off, off)\n-    \n+\n     x_tri = to_triton(np.empty((256, ), dtype=np.int32))\n     kernel[(1,)](x_tri)\n-    np.testing.assert_equal(to_numpy(x_tri), np.arange(0, 256))\n\\ No newline at end of file\n+    np.testing.assert_equal(to_numpy(x_tri), np.arange(0, 256))"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -433,12 +433,12 @@ def __floordiv__(self, other, _builder=None):\n     def __mod__(self, other, _builder=None):\n         other = _to_tensor(other, _builder)\n         return semantic.mod(self, other, _builder)\n-    \n+\n     @builtin\n     def __rmod__(self, other, _builder=None):\n         other = _to_tensor(other, _builder)\n         return semantic.mod(other, self, _builder)\n-    \n+\n     # unary operators\n     @builtin\n     def __neg__(self, _builder=None):"}]