[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -227,8 +227,8 @@ def _try_remove_trivial_phi(self, phi: triton.language.tensor) -> triton.languag\n \n class CodeGenerator(ast.NodeVisitor):\n \n-    def __init__(self, context, prototype, gscope, attributes, constants, function_name, constexprs=None, prototypes=None, module=None, is_kernel=False):\n-        self.constexprs = dict() if constexprs is None else constexprs\n+    def __init__(self, context, prototype, gscope, attributes, constants, function_name, spec_to_1=None, prototypes=None, module=None, is_kernel=False):\n+        self.spec_to_1 = set() if spec_to_1 is None else spec_to_1\n         self.prototypes = dict() if prototypes is None else prototypes\n         self.builder = _triton.ir.builder(context)\n         self.module = _triton.ir.module('', self.builder) if module is None else module\n@@ -295,7 +295,7 @@ def visit_FunctionDef(self, node):\n                 if not isinstance(cst, triton.language.constexpr):\n                     cst = triton.language.constexpr(self.constants[i])\n                 arg_values.append(cst)\n-                if i not in self.constexprs:\n+                if i in self.spec_to_1:\n                     idx += 1\n             else:\n                 if i in self.attributes:\n@@ -829,7 +829,7 @@ def make_triton_ir(fn, signature, specialization, constants):\n     all_constants.update(new_constants)\n \n     prototype = triton.language.function_type(triton.language.void, arg_types)\n-    generator = CodeGenerator(context, prototype, gscope=gscope, constants=all_constants, function_name=function_name, constexprs=constants, attributes=new_attrs, is_kernel=True)\n+    generator = CodeGenerator(context, prototype, gscope=gscope, constants=all_constants, function_name=function_name, spec_to_1=specialization.equal_to_1, attributes=new_attrs, is_kernel=True)\n     try:\n         generator.visit(fn.parse())\n     except Exception as e:"}]