[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -678,7 +678,7 @@ def change_value(Lock):\n     Lock = torch.zeros((1,), device='cuda', dtype=torch.int32)\n     change_value[(1,)](Lock)\n \n-    assert(Lock[0] == 1)\n+    assert (Lock[0] == 1)\n \n     # 2. only one block enters the critical section\n     @triton.jit"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "file_content_changes": "@@ -1102,9 +1102,9 @@ def put(self, data, filename, binary=True):\n \n \n @functools.lru_cache()\n-def libcuda_dir():\n-    loc = subprocess.check_output([\"whereis\", \"libcuda.so\"]).decode().strip().split()[-1]\n-    return os.path.dirname(loc)\n+def libcuda_dirs():\n+    locs = subprocess.check_output([\"whereis\", \"libcuda.so\"]).decode().strip().split()[1:]\n+    return [os.path.dirname(loc) for loc in locs]\n \n \n @contextlib.contextmanager\n@@ -1118,7 +1118,7 @@ def quiet():\n \n \n def _build(name, src, srcdir):\n-    cuda_lib_dir = libcuda_dir()\n+    cuda_lib_dirs = libcuda_dirs()\n     cu_include_dir = \"/usr/local/cuda/include\"\n     suffix = sysconfig.get_config_var('EXT_SUFFIX')\n     so = os.path.join(srcdir, '{name}{suffix}'.format(name=name, suffix=suffix))\n@@ -1130,12 +1130,14 @@ def _build(name, src, srcdir):\n         gcc = shutil.which(\"gcc\")\n         cc = gcc if gcc is not None else clang\n     py_include_dir = get_paths()[\"include\"]\n-    ret = subprocess.check_call([cc, src, \"-O3\", f\"-I{cu_include_dir}\", f\"-I{py_include_dir}\", f\"-I{srcdir}\", \"-shared\", \"-fPIC\", f\"-L{cuda_lib_dir}\", \"-lcuda\", \"-o\", so])\n+    cc_cmd = [cc, src, \"-O3\", f\"-I{cu_include_dir}\", f\"-I{py_include_dir}\", f\"-I{srcdir}\", \"-shared\", \"-fPIC\", \"-lcuda\", \"-o\", so]\n+    cc_cmd += [f\"-L{dir}\" for dir in cuda_lib_dirs]\n+    ret = subprocess.check_call(cc_cmd)\n     if ret == 0:\n         return so\n     # fallback on setuptools\n     extra_compile_args = []\n-    library_dirs = [cuda_lib_dir]\n+    library_dirs = cuda_lib_dirs\n     include_dirs = [srcdir, cu_include_dir]\n     libraries = ['cuda']\n     # extra arguments"}]