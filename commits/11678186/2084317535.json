[{"filename": "lib/codegen/pass.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "file_content_changes": "@@ -52,8 +52,6 @@ std::unique_ptr<llvm::Module> add_passes_to_emit_bin(ir::module &ir, llvm::LLVMC\n   // run passes\n   inliner.run(ir);\n   dce.run(ir);\n-  ir.print(std::cout);\n-  exit(1);\n   peephole.run(ir);\n   dce.run(ir);\n   pipeline.run(ir);"}, {"filename": "lib/codegen/transform/inline.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "file_content_changes": "@@ -119,7 +119,7 @@ void inliner::run(ir::module &mod) {\n   }\n \n \n-\n+  // remove empty blocks\n   for(ir::function* fn: mod.get_function_list()){\n     std::vector<ir::basic_block*> rpo = ir::cfg::reverse_post_order(fn);\n     for(ir::basic_block* bb: rpo){\n@@ -138,6 +138,26 @@ void inliner::run(ir::module &mod) {\n     }\n   }\n \n+  // replace chains of insertvalue + extractvalue from packing and unpacking return values\n+  for(ir::function* fn: mod.get_function_list())\n+  for(ir::basic_block* bb: fn->blocks()){\n+      std::map<ir::value*, std::vector<ir::value*>> vals;\n+      for(ir::instruction* ii: bb->get_inst_list()){\n+        if(auto* insert = dynamic_cast<ir::insert_value_inst*>(ii)){\n+            ir::value* tupl = insert->get_operand(0);\n+            ir::value* elt = insert->get_operand(1);\n+            vals[insert] = vals[tupl];\n+            vals[insert].push_back(elt);\n+        }\n+        if(auto* extract = dynamic_cast<ir::extract_value_inst*>(ii)){\n+            ir::value* new_val = vals[extract->get_operand(0)][extract->get_idx()];\n+            extract->replace_all_uses_with(new_val);\n+//            extract->erase_from_parent();\n+        }\n+      }\n+  }\n+\n+\n \n }\n "}]