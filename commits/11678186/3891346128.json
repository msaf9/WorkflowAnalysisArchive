[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -874,7 +874,7 @@ def build_triton_ir(fn, signature, specialization, constants):\n     context = _triton.ir.context()\n     context.load_triton()\n     # create kernel prototype\n-    def cst_key(i): return fn.arg_names.index(i) if isinstance(i, str) else i\n+    def cst_key(i): return fn.arg_names.index(i) if isinstance(i, str) else i  # noqa: E704\n     constants = {cst_key(key): value for key, value in constants.items()}\n     # visit kernel AST\n     gscope = fn.__globals__.copy()\n@@ -1365,7 +1365,7 @@ def make_so_cache_key(version_hash, signature, constants):\n \n def make_fn_cache_key(fn_hash, signature, configs, constants, num_warps, num_stages):\n     # Get unique key for the compiled code\n-    def get_conf_key(conf): return (\n+    def get_conf_key(conf): return (  # noqa: E704\n         sorted(conf.divisible_by_16), sorted(conf.equal_to_1))\n     configs_key = [get_conf_key(conf) for conf in configs]\n     key = f\"{fn_hash}-{''.join(signature.values())}-{configs_key}-{constants}-{num_warps}-{num_stages}\"\n@@ -1428,7 +1428,7 @@ def make_hash(fn, **kwargs):\n         num_warps = kwargs.get(\"num_warps\", 4)\n         num_stages = kwargs.get(\"num_stages\", 3)\n         # Get unique key for the compiled code\n-        def get_conf_key(conf): return (\n+        def get_conf_key(conf): return (  # noqa: E704\n             sorted(conf.divisible_by_16), sorted(conf.equal_to_1))\n         configs_key = [get_conf_key(conf) for conf in configs]\n         key = f\"{fn.cache_key}-{''.join(signature.values())}-{configs_key}-{constants}-{num_warps}-{num_stages}\""}]