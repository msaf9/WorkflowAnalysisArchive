[{"filename": "python/setup.py", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "file_content_changes": "@@ -1,6 +1,6 @@\n-# import distutils\n+import distutils\n+import itertools\n # import distutils.spawn\n-\n import os\n import platform\n import re\n@@ -17,8 +17,73 @@\n from setuptools import Extension, setup\n from setuptools.command.build_ext import build_ext\n \n-for (i, j) in sysconfig.get_config_vars().items():\n-    print(f\"{i}: {j}\")\n+\n+def get_python_library():\n+    \"\"\"Get path to the python library associated with the current python\n+    interpreter.\"\"\"\n+    # determine direct path to libpython\n+    python_version = sysconfig.get_python_version()\n+    python_library = sysconfig.get_config_var('LIBRARY')\n+\n+    # if static (or nonexistent), try to find a suitable dynamic libpython\n+    if (python_library is None or\n+            os.path.splitext(python_library)[1][-2:] == '.a'):\n+\n+        candidate_lib_prefixes = ['', 'lib']\n+\n+        candidate_extensions = ['.lib', '.so', '.a']\n+        if sysconfig.get_config_var('WITH_DYLD'):\n+            candidate_extensions.insert(0, '.dylib')\n+\n+        candidate_versions = [python_version]\n+        if python_version:\n+            candidate_versions.append('')\n+            candidate_versions.insert(\n+                0, \"\".join(python_version.split(\".\")[:2]))\n+\n+        abiflags = getattr(sys, 'abiflags', '')\n+        candidate_abiflags = [abiflags]\n+        if abiflags:\n+            candidate_abiflags.append('')\n+\n+        # Ensure the value injected by virtualenv is\n+        # returned on windows.\n+        # Because calling `sysconfig.get_config_var('multiarchsubdir')`\n+        # returns an empty string on Linux, `du_sysconfig` is only used to\n+        # get the value of `LIBDIR`.\n+        libdir = distutils.sysconfig.get_config_var('LIBDIR')\n+        if sysconfig.get_config_var('MULTIARCH'):\n+            masd = sysconfig.get_config_var('multiarchsubdir')\n+            if masd:\n+                if masd.startswith(os.sep):\n+                    masd = masd[len(os.sep):]\n+                libdir = os.path.join(libdir, masd)\n+\n+        if libdir is None:\n+            libdir = os.path.abspath(os.path.join(\n+                sysconfig.get_config_var('LIBDEST'), \"..\", \"libs\"))\n+\n+        candidates = (\n+            os.path.join(\n+                libdir,\n+                ''.join((pre, 'python', ver, abi, ext))\n+            )\n+            for (pre, ext, ver, abi) in itertools.product(\n+                candidate_lib_prefixes,\n+                candidate_extensions,\n+                candidate_versions,\n+                candidate_abiflags\n+            )\n+        )\n+\n+        for candidate in candidates:\n+            if os.path.exists(candidate):\n+                # we found a (likely alternate) libpython\n+                python_library = candidate\n+                break\n+\n+    return python_library\n+\n \n # Taken from https://github.com/pytorch/pytorch/blob/master/tools/setup_helpers/env.py\n def check_env_flag(name: str, default: str = \"\") -> bool:\n@@ -140,19 +205,19 @@ def build_extension(self, ext):\n         if not os.path.exists(llvm_build_dir):\n             os.makedirs(llvm_build_dir)\n         # python directories\n-        # python_include_dir = distutils.sysconfig.get_python_inc()\n-        # python_link_dir = distutils.sysconfig.get_python_lib()\n-        # python_library = distutils.sysconfig.get_config_var('LDLIBRARY')\n+        python_include_dir = distutils.sysconfig.get_python_inc()\n+        python_link_dir = distutils.sysconfig.get_python_lib()\n+        python_library = get_python_library()\n         cmake_args = [\n             \"-DLLVM_ENABLE_WERROR=ON\",\n             \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\" + extdir,\n             \"-DTRITON_BUILD_TUTORIALS=OFF\",\n             \"-DTRITON_BUILD_PYTHON_MODULE=ON\",\n             # '-DPYTHON_EXECUTABLE=' + sys.executable,\n             # '-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON',\n-            # \"-DPYTHON_INCLUDE_DIRS=\" + python_include_dir,\n-            # \"-DPYTHON_LINK_DIRS=\" + python_link_dir,\n-            # \"-DPYTHON_LIBRARIES=\" + python_library,\n+            \"-DPYTHON_INCLUDE_DIRS=\" + python_include_dir,\n+            \"-DPYTHON_LINK_DIRS=\" + python_link_dir,\n+            \"-DPYTHON_LIBRARIES=\" + python_library,\n             \"-DLLVM_EXTERNAL_LIT=\" + lit_dir\n         ] + thirdparty_cmake_args\n "}]