[{"filename": "lib/Analysis/AxisInfo.cpp", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "file_content_changes": "@@ -206,14 +206,16 @@ class AddSubOpAxisInfoVisitor final : public BinaryOpVisitorImpl<OpTy> {\n   std::optional<int64_t> getConstantValue(OpTy op, const AxisInfo &lhs,\n                                           const AxisInfo &rhs) override {\n     if (lhs.getConstantValue().has_value() &&\n-        rhs.getConstantValue().has_value())\n+        rhs.getConstantValue().has_value()) {\n       if constexpr (std::is_same_v<OpTy, arith::AddIOp> ||\n-                    std::is_same_v<OpTy, triton::AddPtrOp>)\n+                    std::is_same_v<OpTy, triton::AddPtrOp>) {\n         return {lhs.getConstantValue().value() +\n                 rhs.getConstantValue().value()};\n-      else\n+      } else if constexpr (std::is_same_v<OpTy, arith::SubIOp>) {\n         return {lhs.getConstantValue().value() -\n                 rhs.getConstantValue().value()};\n+      }\n+    }\n     return {};\n   }\n };\n@@ -634,16 +636,18 @@ class LogicalOpAxisInfoVisitor final : public BinaryOpVisitorImpl<OpTy> {\n   std::optional<int64_t> getConstantValue(OpTy op, const AxisInfo &lhs,\n                                           const AxisInfo &rhs) override {\n     if (lhs.getConstantValue().has_value() &&\n-        rhs.getConstantValue().has_value())\n-      if constexpr (std::is_same<OpTy, arith::AndIOp>::value)\n+        rhs.getConstantValue().has_value()) {\n+      if constexpr (std::is_same<OpTy, arith::AndIOp>::value) {\n         return {lhs.getConstantValue().value() &\n                 rhs.getConstantValue().value()};\n-      else if constexpr (std::is_same<OpTy, arith::OrIOp>::value)\n+      } else if constexpr (std::is_same<OpTy, arith::OrIOp>::value) {\n         return {lhs.getConstantValue().value() |\n                 rhs.getConstantValue().value()};\n-      else if constexpr (std::is_same<OpTy, arith::XOrIOp>::value)\n+      } else if constexpr (std::is_same<OpTy, arith::XOrIOp>::value) {\n         return {lhs.getConstantValue().value() ^\n                 rhs.getConstantValue().value()};\n+      }\n+    }\n     return {};\n   }\n };\n@@ -741,13 +745,14 @@ class MaxMinOpAxisInfoVisitor final : public AxisInfoVisitorImpl<OpTy> {\n     if (lhsInfo.getConstantValue().has_value() &&\n         rhsInfo.getConstantValue().has_value()) {\n       if constexpr (std::is_same_v<OpTy, arith::MaxSIOp> ||\n-                    std::is_same_v<OpTy, arith::MaxUIOp>)\n+                    std::is_same_v<OpTy, arith::MaxUIOp>) {\n         constantValue = {std::max(lhsInfo.getConstantValue().value(),\n                                   rhsInfo.getConstantValue().value())};\n-      else if constexpr (std::is_same_v<OpTy, arith::MinSIOp> ||\n-                         std::is_same_v<OpTy, arith::MinUIOp>)\n+      } else if constexpr (std::is_same_v<OpTy, arith::MinSIOp> ||\n+                           std::is_same_v<OpTy, arith::MinUIOp>) {\n         constantValue = {std::min(lhsInfo.getConstantValue().value(),\n                                   rhsInfo.getConstantValue().value())};\n+      }\n     }\n     auto rank = lhsInfo.getRank();\n     return AxisInfo(/*knownContiguity=*/AxisInfo::DimVectorT(rank, 1),"}]