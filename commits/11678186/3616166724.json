[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "file_content_changes": "@@ -3168,9 +3168,7 @@ LogicalResult ConvertLayoutOpConversion::lowerBlockedToShared(\n \n   auto smemObj = SharedMemoryObject(smemBase, dstShape, outOrd, loc, rewriter);\n   auto retVal = getStructFromSharedMemoryObject(loc, smemObj, rewriter);\n-  barrier(); // DEBUG\n   rewriter.replaceOp(op, retVal);\n-  barrier(); // DEBUG\n   return success();\n }\n \n@@ -3432,9 +3430,7 @@ LogicalResult ConvertLayoutOpConversion::lowerSharedToDotOperand(\n     assert(false && \"Unsupported dot operand layout found\");\n   }\n \n-  barrier();\n   rewriter.replaceOp(op, res);\n-  barrier();\n   return success();\n }\n "}, {"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "file_content_changes": "@@ -756,7 +756,6 @@ class BlockedToMMA : public mlir::RewritePattern {\n     auto mod = op->getParentOfType<mlir::ModuleOp>();\n     int numWarps = triton::gpu::TritonGPUDialect::getNumWarps(mod);\n     int version = computeCapabilityToMMAVersion(computeCapability);\n-    version = 1;\n \n     auto newRetType = RankedTensorType::get(\n         retShape, oldRetType.getElementType(),"}, {"filename": "python/tests/test_gemm.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "file_content_changes": "@@ -294,6 +294,7 @@ def matmul_kernel(\n         torch.testing.assert_close(c, golden, rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err))\n \n \n+# NOTE this is useful only on Volta GPU.\n @pytest.mark.parametrize('SHAPE,NUM_WARPS,TRANS_A,TRANS_B', [\n     (shape, num_warps, trans_a, trans_b)\n     for shape in [\n@@ -308,5 +309,5 @@ def matmul_kernel(\n     for trans_a in [False]\n     for trans_b in [False]\n ])\n-def test_gemmno_scf_for_mmav1(SHAPE, NUM_WARPS, TRANS_A, TRANS_B):\n+def test_gemm_no_scf_for_mmav1(SHAPE, NUM_WARPS, TRANS_A, TRANS_B):\n     test_gemm_no_scf(SHAPE, NUM_WARPS, TRANS_A, TRANS_B)"}]