[{"filename": "python/tests/test_core.py", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "file_content_changes": "@@ -411,12 +411,12 @@ def where_kernel(cond_ptr, a_ptr, b_ptr, output_ptr, n_elements,\n     assert (z == to_numpy(z_tri)).all()\n \n \n-# TODO: wrong result\n def test_where_broadcast():\n     @triton.jit\n     def where_kernel(cond_ptr, a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n         xoffsets = tl.arange(0, BLOCK_SIZE)[:, None]\n         yoffsets = tl.arange(0, BLOCK_SIZE)[None, :]\n+\n         mask = tl.load(cond_ptr + yoffsets)\n         vals = tl.load(a_ptr + yoffsets + BLOCK_SIZE * xoffsets)\n         res = tl.where(mask, vals, 0.)\n@@ -426,26 +426,25 @@ def where_kernel(cond_ptr, a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n     def where_scalar_condition(a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n         xoffsets = tl.arange(0, BLOCK_SIZE)[:, None]\n         yoffsets = tl.arange(0, BLOCK_SIZE)[None, :]\n+        mask = 0\n         vals = tl.load(a_ptr + yoffsets + BLOCK_SIZE * xoffsets)\n         res = tl.where(mask, vals, 0.)\n         tl.store(out_ptr + yoffsets + BLOCK_SIZE * xoffsets, res)\n \n-    SIZE = 16\n+    SIZE = 32\n     dtype = 'float32'\n     rs = RandomState(17)\n     x = numpy_random((SIZE, SIZE), dtype_str=dtype, rs=rs)\n     mask = numpy_random(SIZE, 'bool', rs=rs)\n     z = np.where(mask, x, 0)\n     cond_tri = to_triton(mask, device=\"cuda\")\n     x_tri = to_triton(x, device='cuda', dst_type=dtype)\n-    z_tri = to_triton(np.zeros((SIZE, SIZE), dtype=z.dtype), device='cuda', dst_type=dtype)\n-    # print(z)\n-    # print(z_tri)\n-    where_kernel[(1,)](cond_tri, x_tri, z_tri, SIZE, num_warps=1)\n+    z_tri = to_triton(np.empty((SIZE, SIZE), dtype=z.dtype), device='cuda', dst_type=dtype)\n+    where_kernel[(1,)](cond_tri, x_tri, z_tri, SIZE)\n+    assert (z == to_numpy(z_tri)).all()\n+    where_scalar_condition[(1,)](x_tri, z_tri, SIZE)\n+    z = np.where(0, x, 0)\n     assert (z == to_numpy(z_tri)).all()\n-    # where_scalar_condition[(1,)](x_tri, z_tri, SIZE)\n-    # z = np.where(0, x, 0)\n-    # assert (z == to_numpy(z_tri)).all()\n \n # # ---------------\n # # test unary ops"}]