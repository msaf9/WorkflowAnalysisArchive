[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -826,7 +826,7 @@ def make_triton_ir(fn, signature, specialization, constants):\n     gscope = fn.__globals__.copy()\n     function_name = '_'.join([fn.__name__, kernel_suffix(signature.values(), specialization)])\n     tys = list(signature.values())\n-    new_constants = {k: True if tys[k] == \"i1\" else 1 for k in specialization.equal_to_1}\n+    new_constants = {k: True if k in tys and tys[k] == \"i1\" else 1 for k in specialization.equal_to_1}\n     new_attrs = {k: (\"multiple_of\", 16) for k in specialization.divisible_by_16}\n     all_constants = constants.copy()\n     all_constants.update(new_constants)"}, {"filename": "python/triton/runtime/jit.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -259,12 +259,12 @@ def {self.fn.__name__}({', '.join(self.arg_names)}, grid, num_warps=4, num_stage\n     except KeyError:\n       # build dict of constant values\n       args = [{args}]\n-      configs = self._get_config(*args),\n+      all_args = {', '.join([f'{arg}' for arg in self.arg_names])},\n+      configs = self._get_config(*all_args),\n       constants = self._make_constants(constexpr_key)\n-      constants.update({{i: None for i, arg in enumerate(args) if arg is None}})\n+      constants.update({{i: None for i, arg in enumerate(all_args) if arg is None}})\n       constants.update({{i: 1 for i in configs[0].equal_to_1}})\n       # build kernel signature -- doesn't include specialized arguments\n-      all_args = {', '.join([f'{arg}' for arg in self.arg_names])},\n       signature = {{ i: self._type_of(_key_of(arg)) for i, arg in enumerate(all_args) if i not in self.constexprs }}\n       # build stub signature -- includes arguments that are specialized\n       for i, arg in constants.items():"}]