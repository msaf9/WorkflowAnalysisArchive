[{"filename": "python/tutorials/03-matrix-multiplication.py", "status": "modified", "additions": 113, "deletions": 151, "changes": 264, "file_content_changes": "@@ -1,19 +1,25 @@\n \"\"\"\n Matrix Multiplication\n-======================\n-In this tutorial, you will write a 25-lines high-performance FP16 matrix multiplication\n-kernel that achieves performance on par with cuBLAS.\n+=====================\n+In this tutorial, you will write a very short high-performance FP16 matrix multiplication kernel that achieves\n+performance on parallel with cuBLAS.\n+\n You will specifically learn about:\n \n-- Block-level matrix multiplications\n-- Multi-dimensional pointer arithmetic\n-- Program re-ordering for improved L2 cache hit rate\n-- Automatic performance tuning\n+* Block-level matrix multiplications.\n+\n+* Multi-dimensional pointer arithmetics.\n+\n+* Program re-ordering for improved L2 cache hit rate.\n+\n+* Automatic performance tuning.\n+\n \"\"\"\n \n # %%\n # Motivations\n-# -------------\n+# -----------\n+#\n # Matrix multiplications are a key building block of most modern high-performance computing systems.\n # They are notoriously hard to optimize, hence their implementation is generally done by\n # hardware vendors themselves as part of so-called \"kernel libraries\" (e.g., cuBLAS).\n@@ -27,30 +33,30 @@\n #\n #  .. code-block:: python\n #\n-#    # do in parallel\n+#    # Do in parallel\n #    for m in range(0, M, BLOCK_SIZE_M):\n-#      # do in parallel\n+#      # Do in parallel\n #      for n in range(0, N, BLOCK_SIZE_N):\n #        acc = zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=float32)\n #        for k in range(0, K, BLOCK_SIZE_K):\n #          a = A[m : m+BLOCK_SIZE_M, k : k+BLOCK_SIZE_K]\n #          b = B[k : k+BLOCK_SIZE_K, n : n+BLOCK_SIZE_N]\n #          acc += dot(a, b)\n-#        C[m : m+BLOCK_SIZE_M, n : n+BLOCK_SIZE_N] = acc;\n+#        C[m : m+BLOCK_SIZE_M, n : n+BLOCK_SIZE_N] = acc\n #\n # where each iteration of the doubly-nested for-loop is performed by a dedicated Triton program instance.\n \n # %%\n # Compute Kernel\n-# ----------------\n+# --------------\n #\n # The above algorithm is, actually, fairly straightforward to implement in Triton.\n # The main difficulty comes from the computation of the memory locations at which blocks\n # of :code:`A` and :code:`B` must be read in the inner loop. For that, we need\n # multi-dimensional pointer arithmetics.\n #\n # Pointer Arithmetics\n-# ~~~~~~~~~~~~~~~~~~~~\n+# ~~~~~~~~~~~~~~~~~~~\n #\n # For a row-major 2D tensor :code:`X`, the memory location of :code:`X[i, j]` is given b\n # y :code:`&X[i, j] = X + i*stride_xi + j*stride_xj`.\n@@ -62,12 +68,16 @@\n #    &A[m : m+BLOCK_SIZE_M, k:k+BLOCK_SIZE_K] =  a_ptr + (m : m+BLOCK_SIZE_M)[:, None]*A.stride(0) + (k : k+BLOCK_SIZE_K)[None, :]*A.stride(1);\n #    &B[k : k+BLOCK_SIZE_K, n:n+BLOCK_SIZE_N] =  b_ptr + (k : k+BLOCK_SIZE_K)[:, None]*B.stride(0) + (n : n+BLOCK_SIZE_N)[None, :]*B.stride(1);\n #\n-# Which means that pointers for blocks of A and B can be initialized (i.e., :code:`k=0`) in Triton as:\n+# Which means that pointers for blocks of A and B can be initialized (i.e., :code:`k=0`) in Triton as the following\n+# code. Also note that we need an extra modulo to handle the case where :code:`M` is not a multiple of\n+# :code:`BLOCK_SIZE_M` or :code:`N` is not a multiple of :code:`BLOCK_SIZE_N`, in which case we can pad the data with\n+# some useless values, which will not contribute to the results. For the :code:`K` dimension, we will handle that later\n+# using masking load semantics.\n #\n #  .. code-block:: python\n #\n-#    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n-#    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n+#    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n+#    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n #    offs_k = tl.arange(0, BLOCK_SIZE_K)\n #    a_ptrs = a_ptr + (offs_am[:, None]*stride_am + offs_k [None, :]*stride_ak)\n #    b_ptrs = b_ptr + (offs_k [:, None]*stride_bk + offs_bn[None, :]*stride_bn)\n@@ -81,7 +91,7 @@\n #\n #\n # L2 Cache Optimizations\n-# ~~~~~~~~~~~~~~~~~~~~~~~~\n+# ~~~~~~~~~~~~~~~~~~~~~~\n #\n # As mentioned above, each program instance computes a :code:`[BLOCK_SIZE_M, BLOCK_SIZE_N]`\n # block of :code:`C`.\n@@ -105,30 +115,31 @@\n #\n #  .. code-block:: python\n #\n-#    # program ID\n+#    # Program ID\n #    pid = tl.program_id(axis=0)\n-#    # number of program ids along the M axis\n+#    # Number of program ids along the M axis\n #    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n-#    # number of programs ids along the N axis\n+#    # Number of programs ids along the N axis\n #    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n-#    # number of programs in group\n+#    # Number of programs in group\n #    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n-#    # id of the group this program is in\n+#    # Id of the group this program is in\n #    group_id = pid // num_pid_in_group\n-#    # row-id of the first program in the group\n+#    # Row-id of the first program in the group\n #    first_pid_m = group_id * GROUP_SIZE_M\n-#    # if `num_pid_m` isn't divisible by `GROUP_SIZE_M`, the last group is smaller\n+#    # If `num_pid_m` isn't divisible by `GROUP_SIZE_M`, the last group is smaller\n #    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n-#    # *within groups*, programs are ordered in a column-major order\n-#    # row-id of the program in the *launch grid*\n+#    # *Within groups*, programs are ordered in a column-major order\n+#    # Row-id of the program in the *launch grid*\n #    pid_m = first_pid_m + (pid % group_size_m)\n-#    # col-id of the program in the *launch grid*\n+#    # Col-id of the program in the *launch grid*\n #    pid_n = (pid % num_pid_in_group) // group_size_m\n #\n # For example, in the following matmul where each matrix is 9 blocks by 9 blocks,\n # we can see that if we compute the output in row-major ordering, we need to load 90\n # blocks into SRAM to compute the first 9 output blocks, but if we do it in grouped\n # ordering, we only need to load 54 blocks.\n+#\n #   .. image:: grouped_vs_row_major_ordering.png\n #\n # In practice, this can improve the performance of our matrix multiplication kernel by\n@@ -137,26 +148,29 @@\n \n # %%\n # Final Result\n-# -------------\n-#\n+# ------------\n \n import torch\n \n import triton\n import triton.language as tl\n \n-# %\n-# :code:`triton.jit`'ed functions can be auto-tuned by using the `triton.autotune`\n-# decorator, which consumes:\n-#   - A list of :code:`triton.Config` objects that define different configurations of\n-#       meta-parameters (e.g., BLOCK_SIZE_M) and compilation options (e.g., num_warps) to try\n-#   - An autotuning *key* whose change in values will trigger evaluation of all the\n-#       provided configs\n-\n \n+# `triton.jit`'ed functions can be auto-tuned by using the `triton.autotune` decorator, which consumes:\n+#   - A list of `triton.Config` objects that define different configurations of\n+#       meta-parameters (e.g., `BLOCK_SIZE_M`) and compilation options (e.g., `num_warps`) to try\n+#   - An auto-tuning *key* whose change in values will trigger evaluation of all the\n+#       provided configs\n @triton.autotune(\n     configs=[\n-        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=3, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=3, num_warps=8),\n+        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n+        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=5, num_warps=2),\n+        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=5, num_warps=2),\n     ],\n     key=['M', 'N', 'K'],\n )\n@@ -167,28 +181,26 @@ def matmul_kernel(\n     # Matrix dimensions\n     M, N, K,\n     # The stride variables represent how much to increase the ptr by when moving by 1\n-    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n-    # by to get the element one row down (A has M rows)\n+    # element in a particular dimension. E.g. `stride_am` is how much to increase `a_ptr`\n+    # by to get the element one row down (A has M rows).\n     stride_am, stride_ak,\n     stride_bk, stride_bn,\n     stride_cm, stride_cn,\n     # Meta-parameters\n     BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n     GROUP_SIZE_M: tl.constexpr,\n     ACTIVATION: tl.constexpr,\n-    IS_INT8: tl.constexpr,\n ):\n     \"\"\"Kernel for computing the matmul C = A x B.\n     A has shape (M, K), B has shape (K, N) and C has shape (M, N)\n     \"\"\"\n     # -----------------------------------------------------------\n     # Map program ids `pid` to the block of C it should compute.\n-    # This is done in a grouped ordering to promote L2 data reuse\n-    # See above `L2 Cache Optimizations` section for details\n+    # This is done in a grouped ordering to promote L2 data reuse.\n+    # See above `L2 Cache Optimizations` section for details.\n     pid = tl.program_id(axis=0)\n     num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n     num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n-    num_pid_k = tl.cdiv(K, BLOCK_SIZE_K)\n     num_pid_in_group = GROUP_SIZE_M * num_pid_n\n     group_id = pid // num_pid_in_group\n     first_pid_m = group_id * GROUP_SIZE_M\n@@ -200,71 +212,67 @@ def matmul_kernel(\n     # Create pointers for the first blocks of A and B.\n     # We will advance this pointer as we move in the K direction\n     # and accumulate\n-    # a_ptrs is a block of [BLOCK_SIZE_M, BLOCK_SIZE_K] pointers\n-    # b_ptrs is a block of [BLOCK_SIZE_K, BLOCK_SIZE_n] pointers\n-    # see above `Pointer Arithmetics` section for details\n-    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n-    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n+    # `a_ptrs` is a block of [BLOCK_SIZE_M, BLOCK_SIZE_K] pointers\n+    # `b_ptrs` is a block of [BLOCK_SIZE_K, BLOCK_SIZE_N] pointers\n+    # See above `Pointer Arithmetics` section for details\n+    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n+    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n     offs_k = tl.arange(0, BLOCK_SIZE_K)\n     a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n     b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n \n     # -----------------------------------------------------------\n-    # Iterate to compute a block of the C matrix\n+    # Iterate to compute a block of the C matrix.\n     # We accumulate into a `[BLOCK_SIZE_M, BLOCK_SIZE_N]` block\n     # of fp32 values for higher accuracy.\n-    # `accumulator` will be converted back to fp16 after the loop\n+    # `accumulator` will be converted back to fp16 after the loop.\n     accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-    for k in range(0, num_pid_k):\n-        # Note that for simplicity, we don't apply a mask here.\n-        # This means that if K is not a multiple of BLOCK_SIZE_K,\n-        # this will access out-of-bounds memory and produce an\n-        # error or (worse!) incorrect results.\n-        a = tl.load(a_ptrs)\n-        b = tl.load(b_ptrs)\n-        if IS_INT8:\n-            # a = a.to(tl.float8e5, bitcast=True).to(tl.float16)\n-            b = b.to(tl.float8e5, bitcast=True).to(tl.float16)\n-        # b = b * 2\n-        # We accumulate along the K dimension\n+    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n+        # Load the next block of A and B, generate a mask by checking the K dimension.\n+        # If it is out of bounds, set it to 0.\n+        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)\n+        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n+        # We accumulate along the K dimension.\n         accumulator += tl.dot(a, b)\n-        # Advance the ptrs to the next K block\n+        # Advance the ptrs to the next K block.\n         a_ptrs += BLOCK_SIZE_K * stride_ak\n         b_ptrs += BLOCK_SIZE_K * stride_bk\n-    # you can fuse arbitrary activation functions here\n+    # You can fuse arbitrary activation functions here\n     # while the accumulator is still in FP32!\n+    if ACTIVATION == \"leaky_relu\":\n+        accumulator = leaky_relu(accumulator)\n     c = accumulator.to(tl.float16)\n \n     # -----------------------------------------------------------\n-    # Write back the block of the output matrix C\n+    # Write back the block of the output matrix C with masks.\n     offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n     offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n     c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n     c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n     tl.store(c_ptrs, c, mask=c_mask)\n \n \n-# we can fuse `leaky_relu` by providing it as an `ACTIVATION` meta-parameter in `_matmul`\n+# We can fuse `leaky_relu` by providing it as an `ACTIVATION` meta-parameter in `_matmul`.\n @triton.jit\n def leaky_relu(x):\n+    x = x + 1\n     return tl.where(x >= 0, x, 0.01 * x)\n \n \n # %%\n-# We can now create a convenience wrapper function that only takes two input tensors\n-# and (1) checks any shape constraint; (2) allocates the output; (3) launches the above kernel\n+# We can now create a convenience wrapper function that only takes two input tensors,\n+# and (1) checks any shape constraint; (2) allocates the output; (3) launches the above kernel.\n \n \n-def matmul(a, b, activation=None):\n-    # checks constraints\n-    assert a.shape[1] == b.shape[0], \"incompatible dimensions\"\n+def matmul(a, b, activation=\"\"):\n+    # Check constraints.\n+    assert a.shape[1] == b.shape[0], \"Incompatible dimensions\"\n+    assert a.is_contiguous(), \"Matrix A must be contiguous\"\n+    assert b.is_contiguous(), \"Matrix B must be contiguous\"\n     M, K = a.shape\n     K, N = b.shape\n-    assert (\n-        K % 32 == 0\n-    ), \"We don't check memory-out-of-bounds with K so K must be divisible by BLOCK_SIZE_K\"\n-    # allocates output\n-    c = torch.empty((M, N), device=a.device, dtype=torch.float16)\n+    # Allocates output.\n+    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n     # 1D launch kernel where each block gets its own program.\n     grid = lambda META: (\n         triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),\n@@ -275,67 +283,22 @@ def matmul(a, b, activation=None):\n         a.stride(0), a.stride(1),\n         b.stride(0), b.stride(1),\n         c.stride(0), c.stride(1),\n-        ACTIVATION=activation,\n-        IS_INT8=b.dtype == torch.int8,\n+        ACTIVATION=activation\n     )\n-    # if b.dtype == torch.int8:\n-    #     print(h.asm[\"ptx\"])\n-    #     print(h.n_spills)\n     return c\n \n \n-def f8_to_f16(x):\n-\n-    @triton.jit\n-    def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n-        pid = tl.program_id(0)\n-        offs = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n-        mask = offs < N\n-        x = tl.load(X + offs, mask=mask)\n-        y = x.to(tl.float8e5)\n-        tl.store(Y + offs, y, mask=mask)\n-\n-    ret = torch.empty(x.shape, dtype=torch.float16, device=x.device)\n-    grid = lambda META: (triton.cdiv(x.numel(), META['BLOCK_SIZE']),)\n-    kernel[grid](ret, triton.reinterpret(x, tl.float8e5), ret.numel(), BLOCK_SIZE=1024)\n-    return ret\n-\n-\n-def f16_to_f8(x):\n-\n-    @triton.jit\n-    def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n-        pid = tl.program_id(0)\n-        offs = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n-        mask = offs < N\n-        x = tl.load(X + offs, mask=mask)\n-        y = x.to(tl.float8e5)\n-        tl.store(Y + offs, y, mask=mask)\n-\n-    ret = torch.empty(x.shape, dtype=torch.int8, device=x.device)\n-    grid = lambda META: (triton.cdiv(x.numel(), META['BLOCK_SIZE']),)\n-    kernel[grid](triton.reinterpret(ret, tl.float8e5), x, x.numel(), BLOCK_SIZE=1024)\n-    return ret\n # %%\n # Unit Test\n-# -----------\n+# ---------\n #\n-# We can test our custom matrix multiplication operation against a native torch implementation (i.e., cuBLAS)\n-\n+# We can test our custom matrix multiplication operation against a native torch implementation (i.e., cuBLAS).\n \n torch.manual_seed(0)\n-# a = torch.randn((512, 512), device='cuda', dtype=torch.float16)\n-a = torch.randint(10, 50, (2048, 2048), dtype=torch.int8, device='cuda')\n-# a = a*0 + a[:,0][:,None]\n-b = torch.randint(10, 50, (2048, 2048), dtype=torch.int8, device='cuda')\n-b = b.T\n-# for i in range(0, a.shape[1], 16):\n-#     a[:, i:i+16] = a[:, :16]\n-\n-triton_output = matmul(f8_to_f16(a), b, activation=None)\n-# triton_output = matmul(f8_to_f16(a), f8_to_f16(b).T, activation=None)\n-torch_output = torch.matmul(f8_to_f16(a), f8_to_f16(b).T)\n-# # print(triton_output[0, 1933], torch_output[0, 1933])\n+a = torch.randn((512, 512), device='cuda', dtype=torch.float16)\n+b = torch.randn((512, 512), device='cuda', dtype=torch.float16)\n+triton_output = matmul(a, b)\n+torch_output = torch.matmul(a, b)\n print(f\"triton_output={triton_output}\")\n print(f\"torch_output={torch_output}\")\n if torch.allclose(triton_output, torch_output, atol=1e-2, rtol=0):\n@@ -345,42 +308,41 @@ def kernel(Y, X, N, BLOCK_SIZE: tl.constexpr):\n \n # %%\n # Benchmark\n-# --------------\n+# ---------\n #\n # Square Matrix Performance\n # ~~~~~~~~~~~~~~~~~~~~~~~~~~\n-# We can now compare the performance of our kernel against that of cuBLAS. Here we focus on square matrices, but feel free to arrange this script as you wish to benchmark any other matrix shape.\n+#\n+# We can now compare the performance of our kernel against that of cuBLAS. Here we focus on square matrices,\n+# but feel free to arrange this script as you wish to benchmark any other matrix shape.\n \n \n @triton.testing.perf_report(\n     triton.testing.Benchmark(\n-        x_names=['M', 'N', 'K'],  # argument names to use as an x-axis for the plot\n+        x_names=['M', 'N', 'K'],  # Argument names to use as an x-axis for the plot\n         x_vals=[\n-            8192\n-        ],  # different possible values for `x_name`\n-        line_arg='provider',  # argument name whose value corresponds to a different line in the plot\n-        # possible values for `line_arg``\n-        line_vals=['triton'],\n-        # label name for the lines\n-        line_names=[\"Triton\"],\n-        # line styles\n-        styles=[('green', '-'), ('green', '--'), ('blue', '-'), ('blue', '--')],\n-        ylabel=\"TFLOPS\",  # label name for the y-axis\n-        plot_name=\"matmul-performance\",  # name for the plot. Used also as a file name for saving the plot.\n+            128 * i for i in range(2, 33)\n+        ],  # Different possible values for `x_name`\n+        line_arg='provider',  # Argument name whose value corresponds to a different line in the plot\n+        # Possible values for `line_arg`\n+        line_vals=['cublas', 'triton'],\n+        # Label name for the lines\n+        line_names=[\"cuBLAS\", \"Triton\"],\n+        # Line styles\n+        styles=[('green', '-'), ('blue', '-')],\n+        ylabel=\"TFLOPS\",  # Label name for the y-axis\n+        plot_name=\"matmul-performance\",  # Name for the plot, used also as a file name for saving the plot.\n         args={},\n     )\n )\n def benchmark(M, N, K, provider):\n-    # a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n-    # b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n-    a = torch.randint(10, 50, (M, K), dtype=torch.int8, device='cuda')\n-    b = torch.randint(10, 50, (K, N), dtype=torch.int8, device='cuda')\n-    b = b.T\n-    a = f8_to_f16(a)\n+    a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n+    b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n+    quantiles = [0.5, 0.2, 0.8]\n     if provider == 'cublas':\n-        ms, min_ms, max_ms = triton.testing.do_bench(lambda: torch.matmul(a, b), quantiles=[0.2, 0.5, 0.8], rep=500)\n+        ms, min_ms, max_ms = triton.testing.do_bench(lambda: torch.matmul(a, b), quantiles=quantiles)\n     if provider == 'triton':\n-        ms, min_ms, max_ms = triton.testing.do_bench(lambda: matmul(a, b), quantiles=[0.2, 0.5, 0.8], rep=500)\n+        ms, min_ms, max_ms = triton.testing.do_bench(lambda: matmul(a, b), quantiles=quantiles)\n     perf = lambda ms: 2 * M * N * K * 1e-12 / (ms * 1e-3)\n     return perf(ms), perf(max_ms), perf(min_ms)\n "}]