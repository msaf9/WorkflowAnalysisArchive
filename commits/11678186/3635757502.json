[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "file_content_changes": "@@ -625,10 +625,12 @@ def visit_For(self, node):\n                 if name in liveins:\n                     assert self.is_triton_tensor(self.local_defs[name]), f'{name} is not tensor'\n                     assert self.is_triton_tensor(liveins[name])\n-                    if self.local_defs[name].type == liveins[name].type:\n-                        names.append(name)\n-                        init_args.append(triton.language.core._to_tensor(liveins[name], self.builder))\n-                        yields.append(triton.language.core._to_tensor(self.local_defs[name], self.builder))\n+                    if self.local_defs[name].type != liveins[name].type:\n+                        local_value = self.local_defs[name]\n+                        self.local_defs[name] = local_value.to(liveins[name].dtype, _builder=self.builder)\n+                    names.append(name)\n+                    init_args.append(triton.language.core._to_tensor(liveins[name], self.builder))\n+                    yields.append(triton.language.core._to_tensor(self.local_defs[name], self.builder))\n \n             # create ForOp\n             self.builder.set_insertion_point_to_end(insert_block)"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -17,11 +17,11 @@ def _to_tensor(x, builder):\n         if -2**31 <= x < 2**31:\n             return tensor(builder.get_int32(x), int32)\n         elif 2**31 <= x < 2**32:\n-            return tensor(builder.get_uint32(x), uint32)\n+            return tensor(builder.get_int32(x), uint32)\n         elif -2**63 <= x < 2**63:\n             return tensor(builder.get_int64(x), int64)\n         elif 2**63 <= x < 2**64:\n-            return tensor(builder.get_uint64(x), uint64)\n+            return tensor(builder.get_int64(x), uint64)\n         else:\n             raise RuntimeError(f'Nonrepresentable integer {x}.')\n     elif isinstance(x, float):"}, {"filename": "python/triton/language/random.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -1,10 +1,10 @@\n import triton\n from . import core as tl\n \n-PHILOX_KEY_A: tl.constexpr = -1640531527  # 0x9E3779B9\n-PHILOX_KEY_B: tl.constexpr = -1150833019  # 0xBB67AE85\n-PHILOX_ROUND_A: tl.constexpr = -766435501  # 0xD2511F53\n-PHILOX_ROUND_B: tl.constexpr = -845247145  # 0xCD9E8D57\n+PHILOX_KEY_A: tl.constexpr = 0x9E3779B9\n+PHILOX_KEY_B: tl.constexpr = 0xBB67AE85\n+PHILOX_ROUND_A: tl.constexpr = 0xD2511F53\n+PHILOX_ROUND_B: tl.constexpr = 0xCD9E8D57\n N_ROUNDS_DEFAULT = 10  # Default number of rounds for philox\n \n # -------------------"}]