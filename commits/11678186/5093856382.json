[{"filename": ".github/workflows/integration-tests.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -204,4 +204,4 @@ jobs:\n         run: |\n           pwd\n           ls\n-          python3 python/test/tools/compare_files.py --path1 reference --path2 current --hash python/test/kernel_comparison/kernels.yml\n+          python3 python/test/tools/compare_files.py --path1 reference --path2 current --kernels python/test/kernel_comparison/kernels.yml"}, {"filename": "python/test/kernel_comparison/kernels.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -1,3 +1,3 @@\n-hashes_and_extensions:\n-  - hash: dae598764ad4ffa8e3ff4b8d77739677\n+name_and_extension:\n+  - name: kernel_0d1d\n     extension: ptx"}, {"filename": "python/test/tools/compare_files.py", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "file_content_changes": "@@ -21,30 +21,77 @@ def compare_files(file1, file2):\n         content1 = f1.read()\n         content2 = f2.read()\n \n-    assert content1 == content2, f\"Files {file1} and {file2} are not identical.\"\n+    return content1 == content2\n \n \n-def main(args):\n-    yaml_file_path = args.hash\n-    assert os.path.exists(yaml_file_path), f\"Path {yaml_file_path} does not exist!\"\n-    hashes_and_extensions = load_yaml_file(yaml_file_path)[\"hashes_and_extensions\"]\n+def get_json_file(path):\n+    # get json file in directory\n+    json_files = list_files_with_extension(path, \"json\")\n+    if len(json_files) == 0:\n+        return None\n+    # filter out json files with grp in their name\n+    json_files = [f for f in json_files if \"grp\" not in f]\n+    assert len(json_files) == 1, f\"Found {len(json_files)} files in {path} with extension json!\"\n+    json_file = os.path.join(path, json_files[0])\n+    return json_file\n+\n+\n+def get_name_to_hashes_dict(path):\n+    name_to_hashes = {}\n+    for hash in os.listdir(path):\n+        full_path = os.path.join(path, hash)\n+        assert os.path.isdir(full_path), f\"Path {full_path} is not a directory!\"\n+        json_file = get_json_file(full_path)\n+        if json_file is None:\n+            continue\n+        # load json file\n+        with open(json_file, 'r') as file:\n+            content = yaml.safe_load(file)\n+            # get name\n+            name = content[\"name\"]\n+            name_to_hashes.setdefault(name, []).append(hash)\n+    return name_to_hashes\n+\n \n+def compare_matching_files(name, extension, name_to_hashes1, name_to_hashes2, args):\n+    hashes1 = name_to_hashes1[name]\n+    hashes2 = name_to_hashes2[name]\n+    for hash1 in hashes1:\n+        json1 = get_json_file(os.path.join(args.path1, hash1))\n+        assert json1 is not None\n+        for hash2 in hashes2:\n+            json2 = get_json_file(os.path.join(args.path2, hash2))\n+            assert json2 is not None\n+            if not compare_files(json1, json2):\n+                continue\n+            ext_file1 = list_files_with_extension(os.path.join(args.path1, hash1), extension)[0]\n+            ext_file2 = list_files_with_extension(os.path.join(args.path2, hash2), extension)[0]\n+            if not compare_files(ext_file1, ext_file2):\n+                return (ext_file1, ext_file2)\n+    return ()\n+\n+\n+def main(args):\n     assert args.path1 != args.path2, \"Cannot compare files in the same directory!\"\n+    name_to_hashes1 = get_name_to_hashes_dict(args.path1)\n+    name_to_hashes2 = get_name_to_hashes_dict(args.path2)\n+\n+    yaml_file_path = args.kernels\n+    assert os.path.exists(yaml_file_path), f\"Path {yaml_file_path} does not exist!\"\n+    name_and_extension = load_yaml_file(yaml_file_path)[\"name_and_extension\"]\n \n-    for d in hashes_and_extensions:\n-        hash = d[\"hash\"]\n+    mismatches = {}\n+    for d in name_and_extension:\n+        name = d[\"name\"]\n         extension = d[\"extension\"]\n-        full_path1 = os.path.join(args.path1, hash)\n-        full_path2 = os.path.join(args.path2, hash)\n-        assert os.path.exists(full_path1), f\"Path {full_path1} does not exist!\"\n-        assert os.path.exists(full_path2), f\"Path {full_path2} does not exist!\"\n-        files1 = list_files_with_extension(full_path1, extension)\n-        files2 = list_files_with_extension(full_path2, extension)\n-        assert len(files1) == 1, f\"Found {len(files1)} files in {full_path1} with extension {extension}!\"\n-        assert len(files2) == 1, f\"Found {len(files2)} files in {full_path2} with extension {extension}!\"\n-        file1 = os.path.join(full_path1, files1[0])\n-        file2 = os.path.join(full_path2, files2[0])\n-        compare_files(file1, file2)\n+        result = compare_matching_files(name, extension, name_to_hashes1, name_to_hashes2, args)\n+        if len(result) > 0:\n+            mismatches[name] = result\n+    if len(mismatches) > 0:\n+        print(f\"Found {len(mismatches)} mismatches:\")\n+        for name, mismatch in mismatches.items():\n+            print(f\"{name}: {mismatch}\")\n+        assert False, \"Found mismatches!\"\n \n \n if __name__ == \"__main__\":\n@@ -64,11 +111,11 @@ def main(args):\n         help=(\"Path to second cache directory\"),\n     )\n     parser.add_argument(\n-        \"--hash\",\n+        \"--kernels\",\n         type=str,\n         default=None,\n         required=True,\n-        help=(\"Path to hash file\"),\n+        help=(\"Path to kernels yaml file\"),\n     )\n     args = parser.parse_args()\n     main(args)"}]