[{"filename": "lib/Conversion/TritonGPUToLLVM/ElementwiseOpToLLVM.cpp", "status": "modified", "additions": 40, "deletions": 61, "changes": 101, "file_content_changes": "@@ -10,12 +10,10 @@ using ::mlir::triton::gpu::getTotalElemsPerThread;\n const std::string Fp16_to_Fp8E5M2 =\n     \"{                            \\n\"\n     \".reg .b32 a<2>;              \\n\"\n-    \"and.b32 a0, $1, 0x7fff7fff;  \\n\"           // a0 &= 0x7fff7fff\n-    \"and.b32 a1, $2, 0x7fff7fff;  \\n\"           // (strip sign)\n+    \"and.b32 a0, $1, 0xfffefffe;  \\n\"           // a0 &= 0xfffefffe\n+    \"and.b32 a1, $2, 0xfffefffe;  \\n\"           // (strip lowest bit)\n     \"add.u32 a0, a0, 0x00800080;  \\n\"           // a0 += 0x00800080\n     \"add.u32 a1, a1, 0x00800080;  \\n\"           // (round to nearest)\n-    \"lop3.b32 a0, $1, 0x80008000, a0, 0xea; \\n\" // a0 = a0|(0x80008000&in0)\n-    \"lop3.b32 a1, $2, 0x80008000, a1, 0xea; \\n\" // (restore sign)\n     \"prmt.b32 $0, a0, a1, 0x7531; \\n\\t\"         // output = a1a0\n     \"}\";\n \n@@ -93,32 +91,27 @@ const std::string Bf16_to_Fp8E5M2 =\n const std::string Fp8E4M3B15_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\"\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\"\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\"\n-    \"lop3.b32 b0, a0, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"lop3.b32 b1, a1, 0x7fff7fff, 0, 0xc0;  \\n\"\n+    \"prmt.b32 a0, 0, $2, 0x5746;            \\n\"\n+    \"and.b32 b0, a0, 0x7f007f00;            \\n\"\n+    \"and.b32 b1, a0, 0x00ff00ff;            \\n\"\n+    \"and.b32 a1, a0, 0x00800080;            \\n\"\n     \"shr.b32  b0, b0, 1;                    \\n\"\n-    \"shr.b32  b1, b1, 1;                    \\n\"\n+    \"add.u32 b1, b1, a1;                    \\n\"\n     \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\"\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\"\n+    \"shl.b32 $1, b1, 7;                     \\n\"\n     \"}                                      \\n\";\n \n const std::string Fp16_to_Fp8E4M3B15 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\"\n-    \".reg .b32 min_val, max_val;            \\n\"\n-    \"mov.b32 min_val, 0xBF80BF80;           \\n\"\n+    \".reg .b32 max_val;                     \\n\"\n     \"mov.b32 max_val, 0x3F803F80;           \\n\"\n-    \"max.f16x2 $1, $1, min_val;             \\n\"\n-    \"min.f16x2 $1, $1, max_val;             \\n\"\n-    \"max.f16x2 $2, $2, min_val;             \\n\"\n-    \"min.f16x2 $2, $2, max_val;             \\n\"\n-    \"shl.b32 a0, $1, 1;                     \\n\"\n-    \"shl.b32 a1, $2, 1;                     \\n\"\n-    \"lop3.b32 a0, a0, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"lop3.b32 a1, a1, 0x7fff7fff, 0, 0xc0;  \\n\"\n-    \"add.u32 a0, a0, 0x00800080;            \\n\"\n-    \"add.u32 a1, a1, 0x00800080;            \\n\"\n+    \"and.b32 a0, $1, 0x7fff7fff;            \\n\"\n+    \"and.b32 a1, $2, 0x7fff7fff;            \\n\"\n+    \"min.f16x2 a0, a0, max_val;             \\n\"\n+    \"min.f16x2 a1, a1, max_val;             \\n\"\n+    \"mad.lo.u32 a0, a0, 2, 0x00800080;      \\n\"\n+    \"mad.lo.u32 a1, a1, 2, 0x00800080;      \\n\"\n     \"lop3.b32 b0, $1, 0x80008000, a0, 0xea; \\n\"\n     \"lop3.b32 b1, $2, 0x80008000, a1, 0xea; \\n\"\n     \"prmt.b32 $0, b0, b1, 0x7531;           \\n\"\n@@ -137,12 +130,11 @@ const std::string Fp16_to_Fp8E4M3B15 =\n const std::string Fp8E4M3B15x4_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>;                        \\n\"\n-    \"shl.b32 a0, $2, 1;                     \\n\"\n+    \"add.u32 a0, $2, $2;                    \\n\"\n     \"shl.b32 a1, $2, 7;                     \\n\"\n     \"and.b32  $0, a0, 0x80008000;           \\n\"\n     \"lop3.b32 $0, $0, a1, 0x3f803f80, 0xf8; \\n\"\n-    \"and.b32  $1, $2, 0x80008000;           \\n\"\n-    \"lop3.b32 $1, $1, $2, 0x3f803f80, 0xf8; \\n\"\n+    \"and.b32  $1, $2, 0xbf80bf80;           \\n\"\n     \"}\";\n \n // Fp16 -> Fp8E4M3B15 (packed)\n@@ -159,8 +151,7 @@ const std::string Fp16_to_Fp8E4M3B15x4 =\n     \"shr.b32  a1, $1, 7;                     \\n\"\n     \"and.b32  $0,     a0, 0x40004000;        \\n\"\n     \"lop3.b32 $0, $0, a1, 0x007f007f, 0xf8;  \\n\"\n-    \"lop3.b32 $0, $0, $2, 0x80008000, 0xf8;  \\n\"\n-    \"lop3.b32 $0, $0, $2, 0x3f803f80, 0xf8;  \\n\"\n+    \"lop3.b32 $0, $0, $2, 0xbf80bf80, 0xf8;  \\n\"\n     \"}\";\n \n /* ----- FP8E4M3 ------ */\n@@ -172,53 +163,41 @@ const std::string Fp16_to_Fp8E4M3B15x4 =\n const std::string Fp8E4M3_to_Fp16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // if input = 0xf1f2f3f4\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\" // a0 = 0xf300f400\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\" // a1 = 0xf100f200\n-    \"lop3.b32 b0, a0, 0x7fff7fff, 0, 0xc0;  \\n\" // b0 = a0 & 0x7fff7fff\n-    \"lop3.b32 b1, a1, 0x7fff7fff, 0, 0xc0;  \\n\" // (strip sign)\n-    \"shr.b32  b0, b0, 1;                    \\n\" // b0 >>= 1\n-    \"shr.b32  b1, b1, 1;                    \\n\" // shift into fp16 position\n-    \"add.u32  b0, b0, 0x20002000;           \\n\" // b0.exp += 2**4-2**3\n-                                                // exponent compensate = 8\n-    \"add.u32  b1, b1, 0x20002000;           \\n\" // b1 += 8<<10 | 8<<10<<16\n-    \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\" // out0 = b0|(0x80008000&a0)\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\" // (restore sign)\n+    \"prmt.b32 a0, 0, $2, 0x0504;            \\n\" // a0 = 0x00f300f4\n+    \"prmt.b32 a1, 0, $2, 0x0706;            \\n\" // a1 = 0x00f100f2\n+    \"and.b32  b0, a0, 0x00800080;           \\n\" // b0 = a0 & 0x00800080\n+    \"and.b32  b1, a1, 0x00800080;           \\n\" // (extract sign)\n+    \"add.u32  b0, b0, a0;                   \\n\" // b0 = b0 + a0\n+    \"add.u32  b1, b1, a1;                   \\n\" // (move sign to the left)\n+    \"mad.lo.u32 $0, b0, 128, 0x20002000;    \\n\" // out0 = (b0 << 7) + 0x20002000\n+    \"mad.lo.u32 $1, b1, 128, 0x20002000;    \\n\" // (shift into position and bias exponent)\n     \"}\";\n \n // Fp16 -> Fp8E4M3 (packed)\n const std::string Fp16_to_Fp8E4M3 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // see Fp8E4M3x4ToFp16x4\n-    \"sub.u32 a0, $1, 0x20002000;            \\n\" // a0 = input0 - 0x20002000\n-                                                // (compensate offset)\n-    \"sub.u32 a1, $2, 0x20002000;            \\n\" // a1 = input1 - 0x20002000\n-                                                // (8 << 10 | 8 << 10 << 16)\n-    \"shl.b32 a0, a0, 1;                     \\n\" // a0 <<= 1\n-    \"shl.b32 a1, a1, 1;                     \\n\" // shift into fp8e4 position\n-    \"lop3.b32 a0, a0, 0x7fff7fff, 0, 0xc0;  \\n\" // a0 &= 0x7fff7fff\n-    \"lop3.b32 a1, a1, 0x7fff7fff, 0, 0xc0;  \\n\" // (strip sign)\n-    \"add.u32 a0, a0, 0x00800080;            \\n\" // a0 += 0x00800080\n-    \"add.u32 a1, a1, 0x00800080;            \\n\" // (round to nearest)\n-    \"lop3.b32 b0, $1, 0x80008000, a0, 0xea; \\n\" // b0 = a0|(0x80008000&in0)\n-    \"lop3.b32 b1, $2, 0x80008000, a1, 0xea; \\n\" // (restore sign)\n+    \"and.b32 a0, $1, 0x7fff7fff;            \\n\" // a0 = input0 & 0x7fff7fff\n+    \"and.b32 a1, $2, 0x7fff7fff;            \\n\" // (strip sign)\n+    \"mad.lo.u32 a0, a0, 2, 0x40804080;      \\n\" // shift exponent (<< 1),\n+    \"mad.lo.u32 a1, a1, 2, 0x40804080;      \\n\" // correct bias (0x40004000), and round to nearest\n+    \"lop3.b32 b0, $1, 0x80008000, a0, 0xe2; \\n\" // b0 = 0x80008000 ? in0 : a0\n+    \"lop3.b32 b1, $2, 0x80008000, a1, 0xe2; \\n\" // (restore sign)\n     \"prmt.b32 $0, b0, b1, 0x7531;           \\n\" // output = b1b0\n     \"}\";\n \n // WARN: subnormal (0bs0000xxx) are not handled\n const std::string Fp8E4M3_to_Bf16 =\n     \"{                                      \\n\"\n     \".reg .b32 a<2>, b<2>;                  \\n\" // if input = 0xf1f2f3f4\n-    \"prmt.b32 a0, 0, $2, 0x5040;            \\n\" // a0 = 0xf300f400\n-    \"prmt.b32 a1, 0, $2, 0x7060;            \\n\" // a1 = 0xf100f200\n-    \"and.b32 b0, a0, 0x7fff7fff;            \\n\" // b0 = a0 & 0x7fff7fff\n-    \"and.b32 b1, a1, 0x7fff7fff;            \\n\" // (strip sign)\n-    \"shr.b32 b0, b0, 4;                     \\n\" // b0 >>= 4\n-    \"shr.b32 b1, b1, 4;                     \\n\" // shift into fp16 position\n-    \"add.u32 b0, b0, 0x3c003c00;            \\n\" // b0.exp += 2**7-2**3\n-                                                // exponent compensate = 120\n-    \"add.u32 b1, b1, 0x3c003c00;            \\n\" // b1 += 120<<7 | 120<<7<<16\n-    \"lop3.b32 $0, b0, 0x80008000, a0, 0xf8; \\n\" // out0 = b0|(0x80008000&a0)\n-    \"lop3.b32 $1, b1, 0x80008000, a1, 0xf8; \\n\" // (restore sign)\n+    \"prmt.b32 a0, 0, $2, 0x0504;            \\n\" // a0 = 0x00f300f4\n+    \"prmt.b32 a1, 0, $2, 0x0706;            \\n\" // a1 = 0x00f100f2\n+    \"and.b32  b0, a0, 0x00800080;           \\n\" // b0 = a0 & 0x00800080\n+    \"and.b32  b1, a1, 0x00800080;           \\n\" // (extract sign)\n+    \"mad.lo.u32 b0, b0, 15, a0;             \\n\" // b0 = b0 * 15 + a0\n+    \"mad.lo.u32 b1, b1, 15, a1;             \\n\" // (move sign to the left)\n+    \"mad.lo.u32 $0, b0, 16, 0x3c003c00;     \\n\" // out0 = (b0 << 4) + 0x3c003c00\n+    \"mad.lo.u32 $1, b1, 16, 0x3c003c00;     \\n\" // (shift into position and bias exponent)\n     \"}\";\n \n const std::string Bf16_to_Fp8E4M3 ="}]