[{"filename": "lib/Conversion/TritonGPUToLLVM/TritonGPUToLLVM.cpp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "file_content_changes": "@@ -2065,11 +2065,6 @@ struct DotOpConversion : public ConvertTritonGPUOpToLLVMPattern<triton::DotOp> {\n     return failure();\n   }\n \n-  Value getSmemAddr(Value value, Location loc,\n-                    ConversionPatternRewriter &rewriter) const {\n-    return getSharedMemoryBase(loc, rewriter, value.getDefiningOp());\n-  }\n-\n   const Allocation *allocation;\n   Value smem;\n };\n@@ -2408,7 +2403,7 @@ DotOpConversion::convertMMA16816(triton::DotOp op, OpAdaptor adapter,\n     SmallVector<Value> ptrs(numPtrs);\n \n     Type smemPtrTy = helper.getShemPtrTy();\n-    auto smemBase = getSmemAddr(tensor, loc, rewriter);\n+    auto smemBase = getSharedMemoryBase(loc, rewriter, tensor);\n     for (int i = 0; i < numPtrs; i++) {\n       ptrs[i] = bit_cast(\n           smemPtrTy, gep(smemBase.getType(), smemBase, ValueRange({offs[i]})));"}, {"filename": "python/setup.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -20,8 +20,8 @@ def check_env_flag(name: str, default: str = \"\") -> bool:\n     return os.getenv(name, default).upper() in [\"ON\", \"1\", \"YES\", \"TRUE\", \"Y\"]\n \n \n-def check_submodule():\n-    submodule_paths = [\"third-party/pybind11/include/pybind11\"]\n+def check_submodule(base_dir: str):\n+    submodule_paths = [\"{}/third-party/pybind11/include/pybind11\".format(base_dir)]\n     if not all([os.path.exists(p) for p in submodule_paths]):\n         print(\"initializing submodules ...\")\n         try:\n@@ -95,7 +95,7 @@ def run(self):\n             self.build_extension(ext)\n \n     def build_extension(self, ext):\n-        check_submodule()\n+        check_submodule(self.base_dir)\n         llvm_include_dir, llvm_library_dir = get_llvm()\n         # lit is used by the test suite\n         lit_dir = shutil.which('lit')"}]