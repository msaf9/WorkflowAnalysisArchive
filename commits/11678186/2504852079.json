[{"filename": "include/triton/codegen/selection/generator.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "file_content_changes": "@@ -118,14 +118,15 @@ class generator: public ir::visitor, public analysis::layout_visitor {\n   llvm::Attribute cvt(ir::attribute attr);\n   void packed_type(ir::value* i);\n   void forward_declare(ir::function* fn);\n+  Value *cast_shared_layout_ptr(analysis::data_layout *layout, Type *ty);\n \n-private:\n- typedef std::function<void(\n-     std::pair<Value *, Value *> &acc, std::function<Value *()> load_value_fn,\n-     std::function<Value *()> load_index_fn, bool is_first)>\n-     acc_fn_t;\n+ private:\n+  typedef std::function<void(\n+      std::pair<Value *, Value *> &acc, std::function<Value *()> load_value_fn,\n+      std::function<Value *()> load_index_fn, bool is_first)>\n+      acc_fn_t;\n \n-public:\n+ public:\n   generator(analysis::axes *a_axes,\n             analysis::layouts *layouts,\n             analysis::align *alignment,"}, {"filename": "lib/codegen/selection/generator.cc", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "file_content_changes": "@@ -2341,7 +2341,7 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n   const auto with_index = x->with_index();\n   unsigned axis = x->get_axis();\n   analysis::distributed_layout* layout = dynamic_cast<analysis::distributed_layout*>(layouts_->get(arg));\n-  std::vector<unsigned> shapes = layout->get_shape();\n+  const auto &shapes = layout->get_shape();\n \n   Type* sca_ty = cvt(arg->get_type()->get_scalar_ty());\n   size_t n_bits = sca_ty->getPrimitiveSizeInBits();\n@@ -2353,11 +2353,15 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n   FunctionType *ld_shared_ty = FunctionType::get(sca_ty, {i1_ty, ptr_ty(sca_ty, 3)}, false);\n   InlineAsm *ld_shared = InlineAsm::get(ld_shared_ty, \"@$1 ld.shared.b\" + n_bits_str + \" $0, [$2];\", \"=\" + cst + \",b,\" + cst, true);\n \n-  Type* index_ty = IntegerType::get(*ctx_, 32);\n-  FunctionType *st_shared_index_ty = FunctionType::get(void_ty, {i1_ty, ptr_ty(index_ty, 3), index_ty}, false);\n-  InlineAsm *st_shared_index = InlineAsm::get(st_shared_index_ty, \"@$0 st.shared.b32 [$1], $2;\", \"b,r,r\", true);\n-  FunctionType *ld_shared_index_ty = FunctionType::get(index_ty, {i1_ty, ptr_ty(index_ty, 3)}, false);\n-  InlineAsm *ld_shared_index = InlineAsm::get(ld_shared_index_ty, \"@$1 ld.shared.b32 $0, [$2];\", \"=r,b,r\", true);\n+  Type *index_ty = IntegerType::get(*ctx_, 32);\n+  FunctionType *st_shared_index_ty =\n+      FunctionType::get(void_ty, {i1_ty, ptr_ty(index_ty, 3), index_ty}, false);\n+  InlineAsm *st_shared_index = InlineAsm::get(\n+      st_shared_index_ty, \"@$0 st.shared.b32 [$1], $2;\", \"b,r,r\", true);\n+  FunctionType *ld_shared_index_ty =\n+      FunctionType::get(index_ty, {i1_ty, ptr_ty(index_ty, 3)}, false);\n+  InlineAsm *ld_shared_index = InlineAsm::get(\n+      ld_shared_index_ty, \"@$1 ld.shared.b32 $0, [$2];\", \"=r,b,r\", true);\n \n   Value* thread = tgt_->get_local_id(mod_, *builder_, 0);\n   Value* warp = udiv(thread, i32(32));\n@@ -2369,7 +2373,7 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n   std::vector<indices_t> arg_idxs = idxs_.at(arg);\n   size_t n_elts = arg_idxs.size();\n   unsigned col_per_thread = 0;\n-  Value* warp_j;\n+  Value* warp_j = nullptr;\n   if (analysis::scanline_layout *scanline = layout->to_scanline()) {\n     std::vector<int> order = layout->get_order();\n     unsigned mts = scanline->mts(order[0]);\n@@ -2382,15 +2386,17 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n     warps_per_inner = layout->to_mma()->wpt(1);\n     col_per_thread = 16;\n     warp_j = axes_.at(a_axes_->get(arg, 1)).thread_id;\n-  }\n+  } \n+  assert(warp_j != nullptr);\n \n   // unsigned col_per_thread = 2 * shapes[order[0]] / layout->shape_per_cta(order[0]);\n   //\n-  Type* ret_ty = cvt(x->get_type()->get_scalar_ty());\n-  analysis::data_layout* data_layout = layouts_->get(layouts_->tmp(x));\n-  unsigned addr_space = shmem_->getType()->getPointerAddressSpace();\n-  Value *base = bit_cast(shared_ptr_.at(data_layout), ptr_ty(ret_ty, addr_space));\n-  Value *index_base = with_index ? shared_ptr_.at(layouts_->get(layouts_->tmp_index(x))) : nullptr;\n+  Value *base = cast_shared_layout_ptr(layouts_->get(layouts_->tmp(x)),\n+                                       cvt(x->get_type()->get_scalar_ty()));\n+  Value *index_base =\n+      with_index ? cast_shared_layout_ptr(layouts_->get(layouts_->tmp_index(x)),\n+                                          IntegerType::get(*ctx_, 32))\n+                 : nullptr;\n \n   // preds\n   Value* is_lane0 = icmp_eq(lane, i32(0));\n@@ -2422,7 +2428,8 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n     Value* st_off = add(mul(x_idx, i32(warps_per_inner)), warp_j);\n     call(st_shared, {icmp_eq(lane_j, i32(0)), gep(base, st_off), acc.first});\n     if (with_index) {\n-      call(st_shared_index, {icmp_eq(lane_j, i32(0)), gep(index_base, st_off), acc.second});\n+      call(st_shared_index,\n+           {icmp_eq(lane_j, i32(0)), gep(index_base, st_off), acc.second});\n     }\n   }\n   add_barrier();\n@@ -2434,8 +2441,10 @@ void generator::visit_reducend_inst_fast(ir::reduce_inst* x, acc_fn_t do_acc, Va\n     Value* ld_off = add(mul(x_idx, i32(warps_per_inner)), urem(lane_j, i32(warps_per_inner)));\n     std::pair<Value*, Value*> acc;\n     acc.first = call(ld_shared, {builder_->getInt1(true), gep(base, ld_off)});\n-    acc.second = with_index ? call(ld_shared_index, {builder_->getInt1(true), gep(index_base, ld_off)}) : nullptr;\n-    for(int k = warps_per_inner/2; k > 0; k >>= 1) {\n+    acc.second = with_index ? call(ld_shared_index, {builder_->getInt1(true),\n+                                                     gep(index_base, ld_off)})\n+                            : nullptr;\n+    for (int k = warps_per_inner / 2; k > 0; k >>= 1) {\n       do_acc(\n           acc, [&]() -> Value * { return shfl_sync(acc.first, k); },\n           [&]() -> Value * { return shfl_sync(acc.second, k); }, false);\n@@ -2464,21 +2473,13 @@ void generator::visit_reducend_inst(ir::reduce_inst* x, acc_fn_t do_acc, Value *\n   };\n \n   // reduce within blocks\n-  auto get_layout_and_ptr = [&](size_t id, Type *ty) -> auto {\n-    analysis::data_layout* layout = layouts_->get(id);\n-    Value *base = shared_ptr_.at(layout);\n-    auto shape  = layout->get_shape();\n-    int  space = base->getType()->getPointerAddressSpace();\n-    Value *ptr = bit_cast(base, ptr_ty(ty, space));\n-    return std::make_tuple(layout, ptr);\n-  };\n-\n-  auto [data_layout, data_ptr] =\n-      get_layout_and_ptr(layouts_->tmp(x), cvt(x->get_type()->get_scalar_ty()));\n-  auto [index_layout, index_ptr] =\n-      with_index ? get_layout_and_ptr(layouts_->tmp_index(x),\n-                                      IntegerType::get(*ctx_, 32))\n-                 : std::make_tuple(data_layout, data_ptr);\n+  auto *data_layout = layouts_->get(layouts_->tmp(x));\n+  auto *data_ptr =\n+      cast_shared_layout_ptr(data_layout, cvt(x->get_type()->get_scalar_ty()));\n+  auto *index_ptr =\n+      with_index ? cast_shared_layout_ptr(layouts_->get(layouts_->tmp_index(x)),\n+                                          IntegerType::get(*ctx_, 32))\n+                 : data_ptr;\n \n   auto shape  = data_layout->get_shape();\n   auto order  = data_layout->get_order();\n@@ -2526,7 +2527,8 @@ void generator::visit_reducend_inst(ir::reduce_inst* x, acc_fn_t do_acc, Value *\n     indices_t read_idx = idx;\n     read_idx.insert(read_idx.begin() + axis, i32(0));\n     Value *read_off = shared_off(shape, order, read_idx);\n-    Value *read_ptr = with_index ? gep(index_ptr, read_off) : gep(data_ptr, read_off);\n+    Value *read_ptr =\n+        with_index ? gep(index_ptr, read_off) : gep(data_ptr, read_off);\n     vals_[x][idx] = load(read_ptr);\n   };\n }\n@@ -3012,6 +3014,13 @@ void generator::forward_declare(ir::function* fn){\n   fns_[fn] = ret;\n }\n \n+Value *generator::cast_shared_layout_ptr(analysis::data_layout *layout,\n+                                         Type *ty) {\n+  unsigned addr_space = shmem_->getType()->getPointerAddressSpace();\n+  Value *base = bit_cast(shared_ptr_.at(layout), ptr_ty(ty, addr_space));\n+  return base;\n+}\n+\n void generator::visit_function(ir::function* fn) {\n   idxs_.clear();\n   vals_.clear();"}]