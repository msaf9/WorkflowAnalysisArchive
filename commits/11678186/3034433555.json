[{"filename": "python/triton/compiler.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -825,10 +825,11 @@ def make_triton_ir(fn, signature, specialization, constants):\n     function_name = '_'.join([fn.__name__, kernel_suffix(signature, specialization)])\n     new_constants = {k: 1 for k in specialization.equal_to_1}\n     new_attrs = {k: (\"multiple_of\", 16) for k in specialization.divisible_by_16}\n-    constants.update(new_constants)\n+    all_constants = constants.copy()\n+    all_constants.update(new_constants)\n \n     prototype = triton.language.function_type(triton.language.void, arg_types)\n-    generator = CodeGenerator(context, prototype, gscope=gscope, constants=constants, function_name=function_name, constexprs=constants, attributes=new_attrs, is_kernel=True)\n+    generator = CodeGenerator(context, prototype, gscope=gscope, constants=all_constants, function_name=function_name, constexprs=constants, attributes=new_attrs, is_kernel=True)\n     try:\n         generator.visit(fn.parse())\n     except Exception as e:"}]