[{"filename": "python/setup.py", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "file_content_changes": "@@ -61,21 +61,6 @@ def get_llvm_package_info():\n     url = \"https://github.com/ptillet/triton-llvm-releases/releases/download/llvm-14.0.6-f28c006a5895/{}.tar.xz\".format(name)\n     return Package(\"llvm\", name, url, \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n \n-# def get_llvm_package_info():\n-#     # download if nothing is installed\n-#     system = platform.system()\n-#     system_suffix = {\"Linux\": \"linux-gnu-ubuntu-18.04\", \"Darwin\": \"apple-darwin\"}[system]\n-#     use_assert_enabled_llvm = check_env_flag(\"TRITON_USE_ASSERT_ENABLED_LLVM\", \"False\")\n-#     if use_assert_enabled_llvm:\n-#         name = 'llvm+mlir-14.0.0-x86_64-{}-assert'.format(system_suffix)\n-#         url = \"https://github.com/shintaro-iwasaki/llvm-releases/releases/download/llvm-14.0.0-329fda39c507/{}.tar.xz\".format(name)\n-#     else:\n-#         name = 'clang+llvm-14.0.0-x86_64-{}'.format(system_suffix)\n-#         url = \"https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/{}.tar.xz\".format(name)\n-#     return Package(\"llvm\", name, url, \"lib\", \"LLVM_INCLUDE_DIRS\", \"LLVM_LIBRARY_DIR\", \"LLVM_SYSPATH\")\n-\n-\n-\n def get_thirdparty_packages(triton_cache_path):\n     packages = [get_pybind11_package_info(), get_llvm_package_info()]\n     thirdparty_cmake_args = []"}, {"filename": "python/triton/compiler.py", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "file_content_changes": "@@ -1061,17 +1061,14 @@ def ptx_get_version(cuda_version) -> int:\n \n \n def path_to_ptxas():\n-    prefixes = [\n+    base_dir = os.path.dirname(__file__)\n+    paths = [\n         os.environ.get(\"TRITON_PTXAS_PATH\", \"\"),\n-        \"\",\n-        \"/usr\",\n-        os.environ.get('CUDA_PATH', default_cuda_dir())\n+        os.path.join(base_dir, \"third_party\", \"cuda\", \"bin\", \"ptxas\")\n     ]\n-    if not os.getenv(\"TRITON_IGNORE_BUNDLED_PTXAS\"):\n-        prefixes.insert(0, os.path.dirname(__file__))\n \n-    for prefix in prefixes:\n-        ptxas = os.path.join(prefix, \"bin\", \"ptxas\")\n+    for ptxas in paths:\n+        print(ptxas)\n         if os.path.exists(ptxas):\n             result = subprocess.check_output([ptxas, \"--version\"], stderr=subprocess.STDOUT)\n             if result is not None:"}]