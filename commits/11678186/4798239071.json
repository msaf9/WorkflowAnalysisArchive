[{"filename": "python/triton/language/core.py", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "file_content_changes": "@@ -1595,22 +1595,23 @@ def extern_elementwise(lib_name: str, lib_path: str, args: list, arg_type_symbol\n         arg_types.append(dispatch_args[i].dtype)\n         if dispatch_args[i].type.is_block():\n             all_scalar = False\n-    arg_types = tuple(arg_types)\n-    arithmetic_check = True\n-    # If there's a type tuple that is not supported by the library, we will do arithmetic check\n-    if arg_types in arg_type_symbol_dict:\n-        arithmetic_check = False\n-    broadcast_arg = dispatch_args[0]\n-    # Get the broadcast shape over all the arguments\n-    for i, item in enumerate(dispatch_args):\n-        _, broadcast_arg = semantic.binary_op_type_checking_impl(\n-            item, broadcast_arg, _builder, arithmetic_check=arithmetic_check)\n-    # Change the shape of each argument based on the broadcast shape\n-    for i in range(len(dispatch_args)):\n-        dispatch_args[i], _ = semantic.binary_op_type_checking_impl(\n-            dispatch_args[i], broadcast_arg, _builder, arithmetic_check=arithmetic_check)\n-    if not all_scalar:\n-        ret_shape = broadcast_arg.shape\n+    if len(arg_types) > 0:\n+        arg_types = tuple(arg_types)\n+        arithmetic_check = True\n+        # If there's a type tuple that is not supported by the library, we will do arithmetic check\n+        if arg_types in arg_type_symbol_dict:\n+            arithmetic_check = False\n+        broadcast_arg = dispatch_args[0]\n+        # Get the broadcast shape over all the arguments\n+        for i, item in enumerate(dispatch_args):\n+            _, broadcast_arg = semantic.binary_op_type_checking_impl(\n+                item, broadcast_arg, _builder, arithmetic_check=arithmetic_check)\n+        # Change the shape of each argument based on the broadcast shape\n+        for i in range(len(dispatch_args)):\n+            dispatch_args[i], _ = semantic.binary_op_type_checking_impl(\n+                dispatch_args[i], broadcast_arg, _builder, arithmetic_check=arithmetic_check)\n+        if not all_scalar:\n+            ret_shape = broadcast_arg.shape\n     func = getattr(_builder, \"create_extern_elementwise\")\n     return dispatch(func, lib_name, lib_path, dispatch_args, arg_type_symbol_dict, ret_shape, is_pure, _builder)\n "}]