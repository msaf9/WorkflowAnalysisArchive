[{"filename": ".github/CODEOWNERS", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "file_content_changes": "@@ -27,9 +27,9 @@ lib/Analysis/Utility.cpp @Jokeren\n # Dialects\n # ----------\n # Pipeline pass\n-lib/Dialect/TritonGPU/Transforms/Pipeline.cpp @daadaada\n+lib/Dialect/TritonGPU/Transforms/Pipeline.cpp @ptillet\n # Prefetch pass\n-lib/Dialect/TritonGPU/Transforms/Prefetch.cpp @daadaada\n+lib/Dialect/TritonGPU/Transforms/Prefetch.cpp @ptillet\n # Coalesce pass\n lib/Dialect/TritonGPU/Transforms/Coalesce.cpp @ptillet\n # Layout simplification pass\n@@ -42,8 +42,8 @@ lib/Dialect/TritonGPU/Transforms/Combine.cpp @ptillet\n include/triton/Conversion/TritonGPUToLLVM/ @goostavz @Superjomn\n lib/Conversions/TritonGPUToLLVM @goostavz @Superjomn\n # TritonToTritonGPU\n-include/triton/Conversion/TritonToTritonGPU/ @daadaada\n-lib/Dialect/TritonGPU/Transforms/TritonGPUConversion.cpp @daadaada\n+include/triton/Conversion/TritonToTritonGPU/ @ptillet\n+lib/Dialect/TritonGPU/Transforms/TritonGPUConversion.cpp @ptillet\n \n \n # -------"}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "file_content_changes": "@@ -807,11 +807,11 @@ void LoopPipeliner::prefetchNextIteration(scf::ForOp newForOp,\n                                     nextIV, newForOp.getUpperBound());\n \n   pipelineIterIdx = newForOp.getRegionIterArgs()[ivIndex + 1];\n-  Value insertSliceIndex = builder.create<arith::RemUIOp>(\n+  Value insertSliceIndex = builder.create<arith::RemSIOp>(\n       nextIV.getLoc(), pipelineIterIdx,\n       builder.create<arith::ConstantIntOp>(nextIV.getLoc(), numStages, 32));\n   loopIterIdx = newForOp.getRegionIterArgs()[ivIndex + 2];\n-  Value extractSliceIndex = builder.create<arith::RemUIOp>(\n+  Value extractSliceIndex = builder.create<arith::RemSIOp>(\n       nextIV.getLoc(), loopIterIdx,\n       builder.create<arith::ConstantIntOp>(nextIV.getLoc(), numStages, 32));\n "}, {"filename": "python/src/triton.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "file_content_changes": "@@ -1524,19 +1524,21 @@ void init_triton_ir(py::module &&m) {\n       .def(py::init<mlir::MLIRContext *>())\n       .def(\"enable_debug\",\n            [](mlir::PassManager &self) {\n+             if (!::triton::tools::getBoolEnv(\"MLIR_ENABLE_DUMP\"))\n+               return;\n+             self.getContext()->disableMultithreading();\n              auto printingFlags = mlir::OpPrintingFlags();\n              printingFlags.elideLargeElementsAttrs(16);\n              printingFlags.enableDebugInfo();\n+             auto print_always = [](mlir::Pass *, mlir::Operation *) {\n+               return true;\n+             };\n              self.enableIRPrinting(\n-                 /*shouldPrintBeforePass=*/nullptr,\n-                 /*shouldPrintAfterPass=*/\n-                 [](mlir::Pass *pass, mlir::Operation *) {\n-                   return ::triton::tools::getBoolEnv(\"MLIR_ENABLE_DUMP\");\n-                 },\n-                 /*printModuleScope=*/false,\n-                 /*printAfterOnlyOnChange=*/true,\n-                 /*printAfterOnlyOnFailure*/ false, llvm::dbgs(),\n-                 printingFlags);\n+                 /*shouldPrintBeforePass=*/print_always,\n+                 /*shouldPrintAfterPass=*/print_always,\n+                 /*printModuleScope=*/true,\n+                 /*printAfterOnlyOnChange=*/false,\n+                 /*printAfterOnlyOnFailure*/ true, llvm::dbgs(), printingFlags);\n            })\n       .def(\"run\",\n            [](mlir::PassManager &self, mlir::ModuleOp &mod) {"}, {"filename": "test/TritonGPU/loop-pipeline.mlir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "file_content_changes": "@@ -37,8 +37,8 @@\n // CHECK:   %[[arg_b0_dot_op_0:.*]] = triton_gpu.convert_layout %[[arg_b0]]\n // CHECK:   %[[arg_b0_dot_op_1:.*]] = arith.mulf %[[arg_b0_dot_op_0]]\n // CHECK:   tt.dot %[[arg_a0_dot_op]], %[[arg_b0_dot_op_1]], {{.*}}\n-// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remui %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n-// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remui %[[LOOP_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remsi %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remsi %[[LOOP_IDX]], %[[CONSTANT_3]]\n // CHECK:   %[[NEXT_A_BUFFER:.*]] = triton_gpu.insert_slice_async {{.*}}, {{.*}}, %[[INSERT_IDX]]\n // CHECK:   %[[NEXT_B_BUFFER:.*]] = triton_gpu.insert_slice_async {{.*}}, {{.*}}, %[[INSERT_IDX]]\n // CHECK:   triton_gpu.async_wait {num = 2 : i32}\n@@ -110,8 +110,8 @@ tt.func @matmul_loop(%lb : index, %ub : index, %step : index,\n // CHECK:     %[[arg_a0_dot_op:.*]] = triton_gpu.convert_layout %[[arg_a0]]\n // CHECK:     %[[arg_b0_dot_op:.*]] = triton_gpu.convert_layout %[[arg_b0]]\n // CHECK:     tt.dot %[[arg_a0_dot_op]], %[[arg_b0_dot_op]], {{.*}}\n-// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remui %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n-// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remui %[[LOOP_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remsi %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remsi %[[LOOP_IDX]], %[[CONSTANT_3]]\n // CHECK:     %[[NEXT_A_BUFFER:.*]] = triton_gpu.insert_slice_async {{.*}}, {{.*}}, %[[INSERT_IDX]]\n // CHECK:     %[[NEXT_B_BUFFER:.*]] = triton_gpu.insert_slice_async {{.*}}, {{.*}}, %[[INSERT_IDX]]\n // CHECK:     triton_gpu.async_wait {num = 2 : i32}\n@@ -179,8 +179,8 @@ tt.func @matmul_loop_nested(%lb : index, %ub : index, %step : index,\n // CHECK: scf.for {{.*}} iter_args({{.*}}, {{.*}}, {{.*}}, %[[arg_b0:.*]] = %[[B0]], {{.*}}, {{.*}}, %[[PIPELINE_IDX:.*]] = %[[CONSTANT_2]], %[[LOOP_IDX:.*]] = %[[CONSTANT_1]]\n // CHECK:   %[[arg_b0_dot_op:.*]] = triton_gpu.convert_layout %[[arg_b0]]\n // CHECK:   tt.dot {{.*}}, %[[arg_b0_dot_op]], {{.*}}\n-// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remui %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n-// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remui %[[LOOP_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[INSERT_IDX:.*]] = arith.remsi %[[PIPELINE_IDX]], %[[CONSTANT_3]]\n+// CHECK-DAG: %[[EXTRACT_IDX:.*]] = arith.remsi %[[LOOP_IDX]], %[[CONSTANT_3]]\n // CHECK:   %[[NEXT_B_BUFFER:.*]] = triton_gpu.insert_slice_async {{.*}}, {{.*}}, %[[INSERT_IDX]]\n // CHECK:   triton_gpu.async_wait {num = 1 : i32}\n // CHECK:   %[[NEXT_B:.*]] = triton_gpu.extract_slice %[[NEXT_B_BUFFER]][%[[EXTRACT_IDX]], 0, 0]"}]