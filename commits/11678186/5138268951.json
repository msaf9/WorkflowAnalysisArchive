[{"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "file_content_changes": "@@ -61,6 +61,17 @@\n // 1. It can handle loop-carried dependencies of distance greater than 1.\n // 2. It does not have a complicated epilogue but instead uses masking to handle\n // boundary conditions.\n+// 3. Each operation/loop-carried argument cannot provide values to both\n+// immediate and non-immediate dependencies. Otherwise, we have to rematerialize\n+// the operation and arguments, which would likely increase register pressure.\n+// For example:\n+// scf.for (%arg0, %arg1, %arg2) {\n+//  %0 = load %arg0\n+//  %1 = load %arg1, %0  <--- %0 is both a post-load op at numStages-2 and a\n+//  pre-load op at numStages-1, so that we need two versions of %0.\n+//  %2 = add %0, %arg2\n+//  scf.yield %arg0, %2, %arg2\n+//  }\n //\n //===----------------------------------------------------------------------===//\n \n@@ -345,19 +356,15 @@ LogicalResult LoopPipeliner::checkOpUses(SetVector<Operation *> &ops) {\n           use = *use->getResult(0).getUsers().begin();\n         }\n \n-        auto convertLayout = llvm::dyn_cast<ttg::ConvertLayoutOp>(use);\n-        if (!convertLayout)\n-          continue;\n-        auto tensorType =\n-            convertLayout.getResult().getType().dyn_cast<RankedTensorType>();\n-        if (!tensorType)\n-          continue;\n-        auto dotOpEnc =\n-            tensorType.getEncoding().dyn_cast<ttg::DotOperandEncodingAttr>();\n-        if (!dotOpEnc)\n-          continue;\n-        isCandidate = true;\n-        loadsMapping[loadOp] = convertLayout;\n+        if (auto convertLayout = llvm::dyn_cast<ttg::ConvertLayoutOp>(use))\n+          if (auto tensorType = convertLayout.getResult()\n+                                    .getType()\n+                                    .dyn_cast<RankedTensorType>())\n+            if (auto dotOpEnc = tensorType.getEncoding()\n+                                    .dyn_cast<ttg::DotOperandEncodingAttr>()) {\n+              isCandidate = true;\n+              loadsMapping[loadOp] = convertLayout;\n+            }\n       } else\n         isCandidate = false;\n "}]