[{"filename": "lib/Dialect/TritonGPU/Transforms/Combine.cpp", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "file_content_changes": "@@ -1256,7 +1256,6 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n   const DenseMap<MmaEncodingAttr, MmaEncodingAttr> &mmaToUpdate;\n   enum class Kind {\n     kUnk,\n-    kCvtMma,\n     kCvtToMma,\n     kCvtToDotOp,\n     kDot,\n@@ -1280,7 +1279,7 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n     auto tensorTy = op->getResult(0).getType().dyn_cast<RankedTensorType>();\n     if (!tensorTy)\n       return failure();\n-    bool hit{};\n+\n     // ConvertLayoutOp\n     if (auto cvt = llvm::dyn_cast<ConvertLayoutOp>(op)) {\n       auto srcTensorTy =\n@@ -1299,19 +1298,6 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n         if (mma && mmaToUpdate.count(mma))\n           return success();\n       }\n-      if (srcTensorTy &&\n-          (mma = srcTensorTy.getEncoding().dyn_cast<MmaEncodingAttr>())) {\n-        // cvt mma -> X\n-        rewriteKind = Kind::kCvtMma;\n-        llvm::outs() << \"cvt op: \" << *op << \"\\n\";\n-        auto retTypes = op->getOperand(0).getDefiningOp()->getResultTypes();\n-        for (auto t : retTypes) {\n-          llvm::outs() << \"- \" << t << \"\\n\";\n-        }\n-        return failure();\n-        if (mma && mmaToUpdate.count(mma))\n-          return success();\n-      }\n     } else if (auto dot = llvm::dyn_cast<DotOp>(op)) {\n       // DotOp\n       mma = dot.d()\n@@ -1337,9 +1323,6 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n     case Kind::kConstant:\n       rewriteConstant(op, rewriter);\n       break;\n-    case Kind::kCvtMma:\n-      rewriteCvtMma(op, rewriter);\n-      break;\n     case Kind::kCvtToDotOp:\n       rewriteCvtDotOp(op, rewriter);\n       break;\n@@ -1391,28 +1374,6 @@ class UpdateMMAVersionMinorForVolta : public mlir::RewritePattern {\n                                                  cvt.getOperand());\n   }\n \n-  void rewriteCvtMma(Operation *op, PatternRewriter &rewriter) const {\n-    auto *ctx = op->getContext();\n-    auto cvt = llvm::cast<ConvertLayoutOp>(op);\n-    auto tensorTy = cvt.getOperand().getType().cast<RankedTensorType>();\n-    auto mma = tensorTy.getEncoding().cast<MmaEncodingAttr>();\n-    auto newMma = mmaToUpdate.lookup(mma);\n-    auto newTensorTy = RankedTensorType::get(tensorTy.getShape(),\n-                                             tensorTy.getElementType(), newMma);\n-    llvm::outs() << \"for.types: \";\n-    for (auto t : cvt.getOperand().getDefiningOp()->getResultTypes())\n-      llvm::outs() << \"- \" << t << \"\\n\";\n-    llvm::outs() << \"cvt.operand: \" << cvt.getOperand().getType() << \"\\n\";\n-    auto forOp = cast<scf::ForOp>(cvt.getOperand().getDefiningOp());\n-    llvm::outs() << \"cvt.operand forop.types : \"\n-                 << \"\\n\";\n-    for (auto t : forOp.getBody()->getTerminator()->getResultTypes())\n-      llvm::outs() << \"- \" << t << \"\\n\";\n-    // TODO\n-    rewriter.replaceOpWithNewOp<ConvertLayoutOp>(op, newTensorTy,\n-                                                 cvt.getOperand());\n-  }\n-\n   void rewriteConstant(Operation *op, PatternRewriter &rewriter) const {\n     auto *ctx = op->getContext();\n     auto constant = llvm::cast<arith::ConstantOp>(op);\n@@ -1469,7 +1430,6 @@ class RematerializeForloop : public RewritePattern {\n \n   SmallVector<Value, 4> rematerializeForLoop(mlir::PatternRewriter &rewriter,\n                                              scf::ForOp &forOp) const {\n-    llvm::outs() << \"initArgs:\" << forOp.getInitArgs()[0].getType() << \"\\n\";\n     auto newForOp = rewriter.create<scf::ForOp>(\n         forOp.getLoc(), forOp.getLowerBound(), forOp.getUpperBound(),\n         forOp.getStep(), forOp.getInitArgs());\n@@ -1530,7 +1490,6 @@ class TritonGPUCombineOpsPass\n       signalPassFailure();\n     }\n \n-    llvm::outs() << \"before:\\n\" << m << \"\\n\";\n     llvm::DenseMap<MmaEncodingAttr, MmaEncodingAttr> mmaToUpdate;\n     {\n       mlir::RewritePatternSet patterns(context);\n@@ -1548,15 +1507,12 @@ class TritonGPUCombineOpsPass\n       if (applyPatternsAndFoldGreedily(m, std::move(patterns), config).failed())\n         signalPassFailure();\n     }\n-    llvm::outs() << \"after:\\n\" << m << \"\\n\";\n-\n     {\n       mlir::RewritePatternSet patterns(context);\n       patterns.add<RematerializeForloop>(context, mmaToUpdate);\n       if (applyPatternsAndFoldGreedily(m, std::move(patterns)).failed())\n         signalPassFailure();\n     }\n-    llvm::outs() << \"final:\\n\" << m << \"\\n\";\n \n     mlir::RewritePatternSet loopFixup(context);\n     loopFixup.add<FixupLoop>(context);"}]