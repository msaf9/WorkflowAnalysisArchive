[{"filename": "docs/python-api/triton.language.rst", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "file_content_changes": "@@ -23,6 +23,8 @@ Creation Ops\n     :nosignatures:\n \n     arange\n+    cat\n+    full\n     zeros\n \n \n@@ -33,11 +35,13 @@ Shape Manipulation Ops\n     :toctree: generated\n     :nosignatures:\n \n+    broadcast\n     broadcast_to\n     expand_dims\n-    reshape\n     ravel\n-\n+    reshape\n+    trans\n+    view\n \n \n Linear Algebra Ops\n@@ -83,11 +87,13 @@ Math Ops\n     abs\n     exp\n     log\n+    fdiv\n     cos\n     sin\n     sqrt\n     sigmoid\n     softmax\n+    umulhi\n \n \n Reduction Ops\n@@ -151,4 +157,27 @@ Compiler Hint Ops\n     :toctree: generated\n     :nosignatures:\n \n+    debug_barrier\n+    max_contiguous\n     multiple_of\n+\n+Debug Ops\n+-----------------\n+\n+.. autosummary::\n+    :toctree: generated\n+    :nosignatures:\n+\n+    static_print\n+    static_assert\n+    device_print\n+    device_assert\n+\n+Iterators\n+-----------------\n+\n+.. autosummary::\n+    :toctree: generated\n+    :nosignatures:\n+\n+    static_range"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "file_content_changes": "@@ -1451,12 +1451,15 @@ def xor_sum(input, axis, _builder=None, _generator=None):\n \n \n # -----------------------\n-# Internal for debugging\n+# Compiler Hint Ops\n # -----------------------\n \n \n @builtin\n def debug_barrier(_builder=None):\n+    '''\n+    Insert a barrier to synchronize all threads in a block.\n+    '''\n     return semantic.debug_barrier(_builder)\n \n \n@@ -1498,16 +1501,28 @@ def max_contiguous(input, values, _builder=None):\n \n @builtin\n def static_print(*values, sep: str = \" \", end: str = \"\\n\", file=None, flush=False, _builder=None):\n+    '''\n+    Print the values at compile time. The parameters are the same as the builtin :code:`print`.\n+    '''\n     pass\n \n \n @builtin\n def static_assert(cond, msg=\"\", _builder=None):\n+    '''\n+    Assert the condition at compile time. The parameters are the same as the builtin :code:`assert`.\n+    '''\n     pass\n \n \n @builtin\n def device_print(prefix, *args, _builder=None):\n+    '''\n+    Print the values at runtime from the device.\n+\n+    :param prefix: a prefix to print before the values. This is required to be a string literal.\n+    :param args: the values to print. They can be any tensor or scalar.\n+    '''\n     import string\n     prefix = _constexpr_to_value(prefix)\n     assert isinstance(prefix, str), f\"{prefix} is not string\"\n@@ -1525,6 +1540,12 @@ def device_print(prefix, *args, _builder=None):\n \n @builtin\n def device_assert(cond, msg=\"\", _builder=None):\n+    '''\n+    Assert the condition at runtime from the device.\n+\n+    :param cond: the condition to assert. This is required to be a boolean tensor.\n+    :param msg: the message to print if the assertion fails. This is required to be a string literal.\n+    '''\n     msg = _constexpr_to_value(msg)\n     import inspect\n     frame = inspect.currentframe()\n@@ -1550,7 +1571,22 @@ def device_assert(cond, msg=\"\", _builder=None):\n \n class static_range:\n \n-    \"\"\"Iterator that counts upward forever.\"\"\"\n+    \"\"\"\n+    Iterator that counts upward forever.\n+\n+    .. highlight:: python\n+    .. code-block:: python\n+\n+        @triton.jit\n+        def kernel(...):\n+            for i in tl.static_range(10):\n+                ...\n+    :note: This is a special iterator used to implement similar semantics to Python's :code:`range` in the context of\n+        :code:`triton.jit` functions. In addition, it also guides the compiler to unroll the loop aggressively.\n+    :param arg1: the start value.\n+    :param arg2: the end value.\n+    :param step: the step value.\n+    \"\"\"\n \n     def __init__(self, arg1, arg2=None, step=None):\n         assert isinstance(arg1, constexpr)"}]