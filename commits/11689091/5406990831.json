[{"filename": "python/triton/runtime/autotuner.py", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "file_content_changes": "@@ -25,7 +25,7 @@ def __reduce__(self):\n \n \n class Autotuner(KernelInterface):\n-    def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by: Dict = None):\n+    def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by: Dict = None, warmup=25, rep=100):\n         '''\n         :param prune_configs_by: a dict of functions that are used to prune configs, fields:\n             'perf_model': performance model used to predicate running time with different configs, returns running time\n@@ -58,6 +58,8 @@ def _hook(args):\n         self.perf_model, self.configs_top_k = perf_model, top_k\n         self.early_config_prune = early_config_prune\n         self.fn = fn\n+        self.warmup = warmup\n+        self.rep = rep\n \n     def _bench(self, *args, config, **meta):\n         # check for conflicts, i.e. meta-parameters both provided\n@@ -78,7 +80,7 @@ def kernel_call():\n             self.hook(args)\n             self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **current)\n         try:\n-            return do_bench(kernel_call, quantiles=(0.5, 0.2, 0.8))\n+            return do_bench(kernel_call, warmup=self.warmup, rep=self.rep, quantiles=(0.5, 0.2, 0.8))\n         except OutOfResources:\n             return [float('inf'), float('inf'), float('inf')]\n \n@@ -173,7 +175,7 @@ def __str__(self):\n         return ', '.join(res)\n \n \n-def autotune(configs, key, prune_configs_by=None, reset_to_zero=None):\n+def autotune(configs, key, prune_configs_by=None, reset_to_zero=None, warmup=25, rep=100):\n     \"\"\"\n     Decorator for auto-tuning a :code:`triton.jit`'d function.\n \n@@ -204,9 +206,13 @@ def kernel(x_ptr, x_size, **META):\n         'early_config_prune'(optional): a function used to do early prune (eg, num_stages). It takes configs:List[Config] as its input, and returns pruned configs.\n     :param reset_to_zero: a list of argument names whose value will be reset to zero before evaluating any configs.\n     :type reset_to_zero: list[str]\n+    :param warmup: Warmup time (in ms) to pass to benchmarking, defaults to 25.\n+    :type warmup: int\n+    :param rep: Repetition time (in ms) to pass to benchmarking, defaults to 100.\n+    :type rep: int\n     \"\"\"\n     def decorator(fn):\n-        return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, prune_configs_by)\n+        return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, prune_configs_by, warmup, rep)\n \n     return decorator\n "}]