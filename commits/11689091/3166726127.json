[{"filename": "python/test/unit/language/test_core.py", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "file_content_changes": "@@ -410,9 +410,34 @@ def where_kernel(cond_ptr, a_ptr, b_ptr, output_ptr, n_elements,\n     assert (z == to_numpy(z_tri)).all()\n \n \n+def test_where_broadcast():\n+    @triton.jit\n+    def where_kernel(cond_ptr, a_ptr, out_ptr, BLOCK_SIZE: tl.constexpr):\n+        xoffsets = tl.reshape(tl.arange(0, BLOCK_SIZE), [BLOCK_SIZE, 1])\n+        yoffsets = tl.reshape(tl.arange(0, BLOCK_SIZE), [1, BLOCK_SIZE])\n+\n+        mask = tl.load(cond_ptr + yoffsets)\n+        vals = tl.load(a_ptr + yoffsets + BLOCK_SIZE * xoffsets)\n+        res = tl.where(mask, vals, 0.)\n+        tl.store(out_ptr + yoffsets + BLOCK_SIZE * xoffsets, res)\n+\n+    SIZE = 32\n+    dtype = 'float32'\n+    rs = RandomState(17)\n+    x = numpy_random((SIZE, SIZE), dtype_str=dtype, rs=rs)\n+    mask = numpy_random(SIZE, 'bool', rs=rs)\n+    z = np.where(mask, x, 0)\n+    cond_tri = to_triton(mask, device=\"cuda\")\n+    x_tri = to_triton(x, device='cuda', dst_type=dtype)\n+    z_tri = to_triton(np.empty((SIZE, SIZE), dtype=z.dtype), device='cuda', dst_type=dtype)\n+    where_kernel[(1,)](cond_tri, x_tri, z_tri, SIZE)\n+    assert (z == to_numpy(z_tri)).all()\n+\n # ---------------\n # test unary ops\n # ---------------\n+\n+\n @pytest.mark.parametrize(\"dtype_x, expr\", [\n     (dtype_x, ' -x') for dtype_x in dtypes_with_bfloat16\n ] + ["}, {"filename": "python/triton/language/semantic.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "file_content_changes": "@@ -973,8 +973,9 @@ def where(condition: tl.tensor,\n           builder: ir.builder) -> tl.tensor:\n     condition = cast(condition, tl.int1, builder)\n     if condition.type.is_block():\n-        x = broadcast_impl_shape(x, condition.type.get_block_shapes(), builder)\n-        y = broadcast_impl_shape(y, condition.type.get_block_shapes(), builder)\n+        condition, x = broadcast_impl_value(condition, x, builder)\n+        x, y = broadcast_impl_value(x, y, builder)\n+        condition, x = broadcast_impl_value(condition, x, builder)\n \n     x, y = binary_op_type_checking_impl(x, y, builder, True, True)\n     ret_ty = x.type"}]