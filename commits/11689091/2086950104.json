[{"filename": "lib/driver/llvm.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "file_content_changes": "@@ -94,6 +94,7 @@ static bool find_and_replace(std::string& str, const std::string& begin, const s\n }\n \n std::string path_to_ptxas(int& version) {\n+  std::vector<std::string> rets;\n   std::string ret;\n   // search pathes for ptxas\n   std::vector<std::string> ptxas_prefixes = {\"\", \"/usr/local/cuda/bin/\"};\n@@ -105,8 +106,10 @@ std::string path_to_ptxas(int& version) {\n   for(std::string prefix: ptxas_prefixes){\n     std::string ptxas = prefix + \"ptxas\";\n     bool works = tools::exec(ptxas + \" --version 2>&1\", ret) == 0;\n-    if(works)\n+    if(works) {\n       working_ptxas.push_back(ptxas);\n+      rets.push_back(ret);\n+    }\n   }\n   // error if no working ptxas was found\n   if(working_ptxas.empty())\n@@ -116,13 +119,20 @@ std::string path_to_ptxas(int& version) {\n   // parse version\n   std::regex version_regex(\"release (\\\\d+)\\\\.(\\\\d+)\");\n   std::smatch match;\n-  if(std::regex_search(ret, match, version_regex)){\n-    int major = std::stoi(match[1]);\n-    int minor = std::stoi(match[2]);\n-    version = major*1000 + minor*10;\n+  bool found = false;\n+  // currently choosing the first ptxas. Other logics can be implemented in future\n+  for(std::string ret : rets) {\n+    if(std::regex_search(ret, match, version_regex)){\n+      int major = std::stoi(match[1]);\n+      int minor = std::stoi(match[2]);\n+      version = major*1000 + minor*10;\n+      found = true;\n+      break;\n+    }\n+  }\n+  if ( not found) {\n+    throw std::runtime_error(\"Error in parsing version\");\n   }\n-  else\n-    throw std::runtime_error(\"couldn't parse ptxas version: \" + ret);\n   return ptxas;\n }\n "}]