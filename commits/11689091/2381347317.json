[{"filename": "python/triton/code_gen.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "file_content_changes": "@@ -584,13 +584,17 @@ def visit_For(self, node):\n                     for stmt in node.orelse:\n                         ast.NodeVisitor.generic_visit(self, stmt)\n                 return\n+\n         # create nodes\n         st_target = ast.Name(id=node.target.id, ctx=ast.Store())\n         ld_target = ast.Name(id=node.target.id, ctx=ast.Load())\n         arg_0 = node.iter.args[0] if len(node.iter.args) > 1 else ast.Num(0)\n         arg_1 = node.iter.args[1] if len(node.iter.args) > 1 else node.iter.args[0]\n         arg_2 = node.iter.args[2] if len(node.iter.args) > 2 else ast.Num(1)\n+        # init node\n         init_node = ast.Assign(targets=[st_target], value=arg_0)\n+\n+        # step node\n         pos_cond_node = ast.Compare(ld_target, [ast.Lt()], [arg_1])\n         neg_cond_node = ast.Compare(ld_target, [ast.Gt()], [arg_1])\n         pos_step_node = ast.Compare(arg_2, [ast.Gt()], [ast.Num(0)])\n@@ -610,7 +614,17 @@ def continue_fn():\n             cond = build_cond()\n             return self.builder.cond_br(cond.handle, loop_bb, next_bb)\n \n+        # init loop induction variable\n         self.visit(init_node)\n+        # promote it to right type\n+        init_val = self.value_constructor.get_value(node.target.id)\n+        promote = lambda a, b: triton.language.semantic.computation_type_impl(a, b, False)\n+        start_ty = triton.language.core._to_tensor(iter_args[0], self.builder).type\n+        stop_ty = triton.language.core._to_tensor(iter_args[1], self.builder).type if len(iter_args) > 1 else None\n+        ty = promote(start_ty, stop_ty) if len(iter_args) > 1 else start_ty\n+        casted = triton.language.semantic.cast(init_val, ty, self.builder)\n+        self.value_constructor.set_value(node.target.id, casted)\n+        # create cond\n         cond = build_cond()\n         self.builder.cond_br(cond.handle, loop_bb, next_bb)\n         self.builder.set_insert_block(loop_bb)"}]