[{"filename": "lib/codegen/analysis/layout.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -213,7 +213,7 @@ mma_layout::mma_layout(size_t num_warps,\n   else{\n     // fpw_ = {1, 1, 1};\n     spw_ = mma_instr_shape_.at(tensor_core_type_); // e.g., {16, 8, 16} for f32.f16.f16.f32\n-    contig_per_thread_ = {1, 1};\n+    contig_per_thread_ = {1, 2};\n     // rep_ = {2,  2, 1};\n   }\n   order_ = {0, 1};"}, {"filename": "lib/codegen/analysis/swizzle.cc", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "file_content_changes": "@@ -14,42 +14,41 @@ void swizzle::run(ir::module &) {\n     max_phase_.clear();\n \n     for(auto &x: layouts_->get_all()){\n-      shared_layout* out_layout = dynamic_cast<shared_layout*>(x.second);\n-      if(!out_layout)\n+      shared_layout* layout = dynamic_cast<shared_layout*>(x.second);\n+      if(!layout)\n         continue;\n-      scanline_layout* in_layout = dynamic_cast<scanline_layout*>(out_layout->get_arg_layout());\n-      if(!in_layout)\n-        continue;\n-\n-      ir::value* mma_dot_a = out_layout->hmma_dot_a();\n-      ir::value* mma_dot_b = out_layout->hmma_dot_b();\n+      ir::value* mma_dot_a = layout->hmma_dot_a();\n+      ir::value* mma_dot_b = layout->hmma_dot_b();\n \n       if(!mma_dot_a && !mma_dot_b){\n-        per_phase_[out_layout] = 1;\n-        max_phase_[out_layout] = 1;\n-        vec_[out_layout] = 1;\n+        per_phase_[layout] = 1;\n+        max_phase_[layout] = 1;\n+        vec_[layout] = 1;\n         continue;\n       }\n-      auto ord = out_layout->get_order();\n-      int dtsize = out_layout->get_type()->get_scalar_ty()->get_primitive_size_in_bits() / 8;\n+      auto ord = layout->get_order();\n+      scanline_layout* in_layout = dynamic_cast<scanline_layout*>(layout->get_arg_layout());\n+      if(!in_layout)\n+        continue;\n+      int dtsize = layout->get_type()->get_scalar_ty()->get_primitive_size_in_bits() / 8;\n       if(tgt_->as_nvidia() && tgt_->as_nvidia()->sm() < 80){\n         int inner = mma_dot_a ? 0 : 1;\n-        per_phase_[out_layout] = std::max<int>(128 / (in_layout->mts(ord[0])*in_layout->nts(ord[0])*dtsize), 1);\n-        max_phase_[out_layout] = (ord[inner] == 1 ? 8 : 4) / per_phase_[out_layout];\n+        per_phase_[layout] = std::max<int>(128 / (in_layout->mts(ord[0])*in_layout->nts(ord[0])*dtsize), 1);\n+        max_phase_[layout] = (ord[inner] == 1 ? 8 : 4) / per_phase_[layout];\n         if(mma_dot_a)\n-          vec_[out_layout] = 2*layouts_->get(mma_dot_a)->to_mma()->rep(0);\n+          vec_[layout] = 2*layouts_->get(mma_dot_a)->to_mma()->rep(0);\n         else\n-          vec_[out_layout] = 2*layouts_->get(mma_dot_b)->to_mma()->rep(1);\n+          vec_[layout] = 2*layouts_->get(mma_dot_b)->to_mma()->rep(1);\n       }\n       else {\n-        if (!out_layout->allow_swizzle()) {\n-          per_phase_[out_layout] = 1;\n-          max_phase_[out_layout] = 1;\n-          vec_[out_layout] = 1;\n+        if (!layout->allow_swizzle()) {\n+          per_phase_[layout] = 1;\n+          max_phase_[layout] = 1;\n+          vec_[layout] = 1;\n         } else {\n-          per_phase_[out_layout] = std::max<int>(128 / (in_layout->mts(ord[0])*in_layout->nts(ord[0])*dtsize), 1);\n-          max_phase_[out_layout] = out_layout->get_mma_strided() / per_phase_[out_layout];\n-          vec_[out_layout]       = out_layout->get_mma_vec();\n+          per_phase_[layout] = std::max<int>(128 / (in_layout->mts(ord[0])*in_layout->nts(ord[0])*dtsize), 1);\n+          max_phase_[layout] = layout->get_mma_strided() / per_phase_[layout];\n+          vec_[layout]       = layout->get_mma_vec();\n         }\n       }\n     }"}]