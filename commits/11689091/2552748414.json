[{"filename": "docs/python-api/triton.language.rst", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "file_content_changes": "@@ -106,9 +106,13 @@ Atomic Ops\n     :nosignatures:\n \n     atomic_cas\n+    atomic_xchg\n     atomic_add\n     atomic_max\n     atomic_min\n+    atomic_and\n+    atomic_or\n+    atomic_xor\n \n \n Comparison ops"}, {"filename": "python/triton/language/core.py", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "file_content_changes": "@@ -806,6 +806,25 @@ def store(pointer, value, mask=None, _builder=None):\n # Atomic Memory Operations\n # -----------------------\n \n+@builtin\n+def atomic_cas(pointer, cmp, val, _builder=None):\n+    \"\"\"\n+        Performs an atomic compare-and-swap at the memory location specified by :code:`pointer`.\n+\n+        Return the data stored at :code:`pointer` before the atomic operation.\n+\n+        :param pointer: The memory locations to compare-and-swap.\n+        :type pointer: Block of dtype=triton.PointerDType\n+        :param cmp: The values expected to be found in the atomic object\n+        :type cmp: Block of dtype=`pointer.dtype.element_ty`\n+        :param val: The values to copy in case the expected value matches the contained value.\n+        :type val: Block of dtype=`pointer.dtype.element_ty`\n+    \"\"\"\n+    cmp = _to_tensor(cmp, _builder)\n+    val = _to_tensor(val, _builder)\n+    return semantic.atomic_cas(pointer, cmp, val, _builder)\n+\n+\n def _add_atomic_docstr(name):\n \n     def _decorator(func):\n@@ -814,27 +833,19 @@ def _decorator(func):\n \n     Return the data stored at :code:`pointer` before the atomic operation.\n \n-    :param pointer: The memory locations to compare-and-swap.\n+    :param pointer: The memory locations to apply {name}.\n     :type pointer: Block of dtype=triton.PointerDType\n-    :param cmp: The values expected to be found in the atomic object\n-    :type cmp: Block of dtype=`pointer.dtype.element_ty`\n-    :param val: The values to copy in case the expected value matches the contained value.\n+    :param val: The values to {name} in the atomic object.\n     :type val: Block of dtype=`pointer.dtype.element_ty`\n+    :param mask: If mask[idx] is false, do not apply {name}.\n+    :type mask: Block of triton.int1, optional\n     \"\"\"\n         func.__doc__ = docstr.format(name=name)\n         return func\n \n     return _decorator\n \n \n-@builtin\n-@_add_atomic_docstr(\"compare-and-swap\")\n-def atomic_cas(pointer, cmp, val, _builder=None):\n-    cmp = _to_tensor(cmp, _builder)\n-    val = _to_tensor(val, _builder)\n-    return semantic.atomic_cas(pointer, cmp, val, _builder)\n-\n-\n @builtin\n @_add_atomic_docstr(\"exchange\")\n def atomic_xchg(pointer, val, mask=None, _builder=None):"}]