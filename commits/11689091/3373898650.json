[{"filename": "python/triton/language/libdevice.py", "status": "modified", "additions": 167, "deletions": 303, "changes": 470, "file_content_changes": "@@ -58,13 +58,7 @@ def mulhi(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.int32, core.int32,): (\"__nv_mulhi\", core.int32),\n                                (core.uint32, core.uint32,): (\"__nv_umulhi\", core.uint32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def mul64hi(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.int64, core.int64,): (\"__nv_mul64hi\", core.int64),\n+                               (core.int64, core.int64,): (\"__nv_mul64hi\", core.int64),\n                                (core.uint64, core.uint64,): (\"__nv_umul64hi\", core.uint64),\n                                }, _builder)\n \n@@ -157,262 +151,138 @@ def saturatef(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def fmaf_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rn\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rz\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rd\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ru\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rn(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ieee_rn\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rz(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ieee_rz\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_rd(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ieee_rd\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmaf_ieee_ru(arg0, arg1, arg2, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ieee_ru\", core.float32),\n-                               }, _builder)\n-\n-\n @extern.extern\n def fma_rn(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float64, core.float64, core.float64,): (\"__nv_fma_rn\", core.float64),\n+                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rn\", core.float32),\n+                               (core.float64, core.float64, core.float64,): (\"__nv_fma_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rz(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float64, core.float64, core.float64,): (\"__nv_fma_rz\", core.float64),\n+                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rz\", core.float32),\n+                               (core.float64, core.float64, core.float64,): (\"__nv_fma_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def fma_rd(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float64, core.float64, core.float64,): (\"__nv_fma_rd\", core.float64),\n+                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_rd\", core.float32),\n+                               (core.float64, core.float64, core.float64,): (\"__nv_fma_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def fma_ru(arg0, arg1, arg2, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, arg2, ],\n-                              {(core.float64, core.float64, core.float64,): (\"__nv_fma_ru\", core.float64),\n+                              {(core.float32, core.float32, core.float32,): (\"__nv_fmaf_ru\", core.float32),\n+                               (core.float64, core.float64, core.float64,): (\"__nv_fma_ru\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fast_fdividef(arg0, arg1, _builder=None):\n+def fast_dividef(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fast_fdividef\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rn(arg0, arg1, _builder=None):\n+def div_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fdiv_rn\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_ddiv_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rz(arg0, arg1, _builder=None):\n+def div_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fdiv_rz\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_ddiv_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_rd(arg0, arg1, _builder=None):\n+def div_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fdiv_rd\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_ddiv_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fdiv_ru(arg0, arg1, _builder=None):\n+def div_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fdiv_ru\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_ddiv_ru\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rn(arg0, _builder=None):\n+def rcp_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_frcp_rn\", core.float32),\n+                               (core.float64,): (\"__nv_drcp_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rz(arg0, _builder=None):\n+def rcp_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_frcp_rz\", core.float32),\n+                               (core.float64,): (\"__nv_drcp_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_rd(arg0, _builder=None):\n+def rcp_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_frcp_rd\", core.float32),\n+                               (core.float64,): (\"__nv_drcp_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def frcp_ru(arg0, _builder=None):\n+def rcp_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_frcp_ru\", core.float32),\n+                               (core.float64,): (\"__nv_drcp_ru\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rn(arg0, _builder=None):\n+def sqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_fsqrt_rn\", core.float32),\n+                               (core.float64,): (\"__nv_dsqrt_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rz(arg0, _builder=None):\n+def sqrt_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_fsqrt_rz\", core.float32),\n+                               (core.float64,): (\"__nv_dsqrt_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_rd(arg0, _builder=None):\n+def sqrt_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_fsqrt_rd\", core.float32),\n+                               (core.float64,): (\"__nv_dsqrt_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsqrt_ru(arg0, _builder=None):\n+def sqrt_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_fsqrt_ru\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_ddiv_rn\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_ddiv_rz\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_ddiv_rd\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def ddiv_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_ddiv_ru\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_drcp_rn\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_drcp_rz\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_drcp_rd\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def drcp_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_drcp_ru\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rn(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_dsqrt_rn\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rz(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_dsqrt_rz\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_rd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_dsqrt_rd\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsqrt_ru(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_dsqrt_ru\", core.float64),\n+                               (core.float64,): (\"__nv_dsqrt_ru\", core.float64),\n                                }, _builder)\n \n \n@@ -425,114 +295,66 @@ def sqrt(arg0, _builder=None):\n \n \n @extern.extern\n-def dadd_rn(arg0, arg1, _builder=None):\n+def add_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dadd_rn\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fadd_rn\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rz(arg0, arg1, _builder=None):\n+def add_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dadd_rz\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fadd_rz\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_rd(arg0, arg1, _builder=None):\n+def add_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dadd_rd\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fadd_rd\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dadd_ru(arg0, arg1, _builder=None):\n+def add_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dadd_ru\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fadd_ru\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rn(arg0, arg1, _builder=None):\n+def mul_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dmul_rn\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fmul_rn\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rz(arg0, arg1, _builder=None):\n+def mul_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dmul_rz\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fmul_rz\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_rd(arg0, arg1, _builder=None):\n+def mul_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dmul_rd\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_fmul_rd\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n-def dmul_ru(arg0, arg1, _builder=None):\n+def mul_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float64, core.float64,): (\"__nv_dmul_ru\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fadd_rd\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fadd_ru\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fmul_rd\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fmul_ru\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fadd_rn\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fadd_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fadd_rz\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fmul_rn\", core.float32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def fmul_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float32, core.float32,): (\"__nv_fmul_rz\", core.float32),\n+                               (core.float32, core.float32,): (\"__nv_fmul_ru\", core.float32),\n                                }, _builder)\n \n \n@@ -624,7 +446,13 @@ def double2uint_ru(arg0, _builder=None):\n def int2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int2double_rn\", core.float64),\n-                               (core.uint32,): (\"__nv_uint2double_rn\", core.float64),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint2double_rn\", core.float64),\n                                }, _builder)\n \n \n@@ -688,31 +516,55 @@ def float2uint_ru(arg0, _builder=None):\n def int2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int2float_rn\", core.float32),\n-                               (core.uint32,): (\"__nv_uint2float_rn\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int2float_rz\", core.float32),\n-                               (core.uint32,): (\"__nv_uint2float_rz\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int2float_rd\", core.float32),\n-                               (core.uint32,): (\"__nv_uint2float_rd\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def int2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int2float_ru\", core.float32),\n-                               (core.uint32,): (\"__nv_uint2float_ru\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint2float_rn\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint2float_rz\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint2float_rd\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def uint2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint2float_ru\", core.float32),\n                                }, _builder)\n \n \n@@ -853,71 +705,118 @@ def double2ull_ru(arg0, _builder=None):\n def ll2float_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2float_rn\", core.float32),\n-                               (core.uint64,): (\"__nv_ull2float_rn\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2float_rz\", core.float32),\n-                               (core.uint64,): (\"__nv_ull2float_rz\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2float_rd\", core.float32),\n-                               (core.uint64,): (\"__nv_ull2float_rd\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def ll2float_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2float_ru\", core.float32),\n-                               (core.uint64,): (\"__nv_ull2float_ru\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2float_rn\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2float_rz\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2float_rd\", core.float32),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2float_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2float_ru\", core.float32),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2double_rn\", core.float64),\n-                               (core.uint64,): (\"__nv_ull2double_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rz(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2double_rz\", core.float64),\n-                               (core.uint64,): (\"__nv_ull2double_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_rd(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2double_rd\", core.float64),\n-                               (core.uint64,): (\"__nv_ull2double_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def ll2double_ru(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int64,): (\"__nv_ll2double_ru\", core.float64),\n-                               (core.uint64,): (\"__nv_ull2double_ru\", core.float64),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rn(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2double_rn\", core.float64),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rz(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2double_rz\", core.float64),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_rd(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2double_rd\", core.float64),\n+                               }, _builder)\n+\n+\n+@extern.extern\n+def ull2double_ru(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint64,): (\"__nv_ull2double_ru\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n def int_as_float(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.int32,): (\"__nv_int_as_float\", core.float32),\n-                               (core.uint32,): (\"__nv_uint_as_float\", core.float32),\n                                }, _builder)\n \n \n@@ -928,6 +827,13 @@ def float_as_int(arg0, _builder=None):\n                                }, _builder)\n \n \n+@extern.extern\n+def uint_as_float(arg0, _builder=None):\n+    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n+                              {(core.uint32,): (\"__nv_uint_as_float\", core.float32),\n+                               }, _builder)\n+\n+\n @extern.extern\n def float_as_uint(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n@@ -1006,11 +912,9 @@ def fast_log10f(arg0, _builder=None):\n \n \n @extern.extern\n-def pow(arg0, arg1, _builder=None):\n+def fast_powf(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fast_powf\", core.float32),\n-                               (core.float32, core.float32,): (\"__nv_powf\", core.float32),\n-                               (core.float64, core.float64,): (\"__nv_pow\", core.float64),\n                                }, _builder)\n \n \n@@ -1031,35 +935,39 @@ def rhadd(arg0, arg1, _builder=None):\n \n \n @extern.extern\n-def fsub_rn(arg0, arg1, _builder=None):\n+def sub_rn(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fsub_rn\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_dsub_rn\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rz(arg0, arg1, _builder=None):\n+def sub_rz(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fsub_rz\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_dsub_rz\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_rd(arg0, arg1, _builder=None):\n+def sub_rd(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fsub_rd\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_dsub_rd\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def fsub_ru(arg0, arg1, _builder=None):\n+def sub_ru(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.float32,): (\"__nv_fsub_ru\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_dsub_ru\", core.float64),\n                                }, _builder)\n \n \n @extern.extern\n-def frsqrt_rn(arg0, _builder=None):\n+def rsqrt_rn(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_frsqrt_rn\", core.float32),\n                                }, _builder)\n@@ -1098,16 +1006,18 @@ def nearbyint(arg0, _builder=None):\n \n \n @extern.extern\n-def isnanf(arg0, _builder=None):\n+def isnan(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_isnanf\", core.int32),\n+                               (core.float64,): (\"__nv_isnand\", core.int32),\n                                }, _builder)\n \n \n @extern.extern\n-def signbitf(arg0, _builder=None):\n+def signbit(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_signbitf\", core.int32),\n+                               (core.float64,): (\"__nv_signbitd\", core.int32),\n                                }, _builder)\n \n \n@@ -1127,9 +1037,10 @@ def finitef(arg0, _builder=None):\n \n \n @extern.extern\n-def isinff(arg0, _builder=None):\n+def isinf(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float32,): (\"__nv_isinff\", core.int32),\n+                               (core.float64,): (\"__nv_isinfd\", core.int32),\n                                }, _builder)\n \n \n@@ -1550,10 +1461,12 @@ def fma(arg0, arg1, arg2, _builder=None):\n \n \n @extern.extern\n-def powi(arg0, arg1, _builder=None):\n+def pow(arg0, arg1, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n                               {(core.float32, core.int32,): (\"__nv_powif\", core.float32),\n                                (core.float64, core.int32,): (\"__nv_powi\", core.float64),\n+                               (core.float32, core.float32,): (\"__nv_powf\", core.float32),\n+                               (core.float64, core.float64,): (\"__nv_pow\", core.float64),\n                                }, _builder)\n \n \n@@ -1605,57 +1518,8 @@ def logb(arg0, _builder=None):\n                                }, _builder)\n \n \n-@extern.extern\n-def signbitd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_signbitd\", core.int32),\n-                               }, _builder)\n-\n-\n @extern.extern\n def isfinited(arg0, _builder=None):\n     return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n                               {(core.float64,): (\"__nv_isfinited\", core.int32),\n                                }, _builder)\n-\n-\n-@extern.extern\n-def isinfd(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_isinfd\", core.int32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def isnand(arg0, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, ],\n-                              {(core.float64,): (\"__nv_isnand\", core.int32),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rn(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_dsub_rn\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rz(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_dsub_rz\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_ru(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_dsub_ru\", core.float64),\n-                               }, _builder)\n-\n-\n-@extern.extern\n-def dsub_rd(arg0, arg1, _builder=None):\n-    return extern.elementwise(\"libdevice\", LIBDEVICE_PATH, [arg0, arg1, ],\n-                              {(core.float64, core.float64,): (\"__nv_dsub_rd\", core.float64),\n-                               }, _builder)"}, {"filename": "python/triton/tools/build_extern.py", "status": "modified", "additions": 65, "deletions": 51, "changes": 116, "file_content_changes": "@@ -149,6 +149,9 @@ def _extract_symbol(self, line):\n         func_strs = func_str.split(\"(\")\n         func_name = func_strs[0].replace(\"@\", \"\")\n         op_name = func_name.replace(\"__nv_\", \"\")\n+        # To filter some interfaces unlisted in NVIDIA's official documents.\n+        if 'ieee' in op_name:\n+            return None\n         # Get arg_types\n         arg_strs = func_strs[1].split(\",\")\n         arg_types = []\n@@ -176,55 +179,66 @@ def _group_symbols(self):\n         for symbol in self._symbols.values():\n             op_name = symbol.op_name\n             symbol_set[op_name] = symbol\n-        # The following cases are grouped together:\n-        # op_name, <u/ull/ll>op_name<ll/f/i>\n+\n+        # Group functions together by renaming.\n+        renaming = {\n+            'llabs': 'abs', 'acosf': 'acos', 'acoshf': 'acosh',\n+            'dadd_rd': 'add_rd', 'fadd_rd': 'add_rd', 'dadd_rn': 'add_rn',\n+            'fadd_rn': 'add_rn', 'dadd_ru': 'add_ru', 'fadd_ru': 'add_ru',\n+            'dadd_rz': 'add_rz', 'fadd_rz': 'add_rz', 'asinf': 'asin',\n+            'asinhf': 'asinh', 'atanf': 'atan', 'atan2f': 'atan2',\n+            'atanhf': 'atanh', 'brevll': 'brev', 'cbrtf': 'cbrt',\n+            'ceilf': 'ceil', 'clzll': 'clz', 'copysignf': 'copysign',\n+            'cosf': 'cos', 'coshf': 'cosh', 'cospif': 'cospi',\n+            'cyl_bessel_i0f': 'cyl_bessel_i0', 'cyl_bessel_i1f': 'cyl_bessel_i1',\n+            'fdiv_rd': 'div_rd', 'ddiv_rd': 'div_rd', 'fdiv_rn': 'div_rn',\n+            'ddiv_rn': 'div_rn', 'fdiv_ru': 'div_ru', 'ddiv_ru': 'div_ru',\n+            'fdiv_rz': 'div_rz', 'ddiv_rz': 'div_rz', 'erff': 'erf',\n+            'erfcf': 'erfc', 'erfcinvf': 'erfcinv', 'erfcxf': 'erfcx',\n+            'erfinvf': 'erfinv', 'expf': 'exp', 'exp10f': 'exp10',\n+            'exp2f': 'exp2', 'expm1f': 'expm1', 'fabsf': 'abs',\n+            'fabs': 'abs', 'fast_fdividef': 'fast_dividef',\n+            'fdimf': 'fdim', 'ffsll': 'ffs', 'floorf': 'floor',\n+            'fmaf': 'fma', 'fmaf_rd': 'fma_rd', 'fmaf_rn': 'fma_rn',\n+            'fmaf_ru': 'fma_ru', 'fmaf_rz': 'fma_rz', 'fmodf': 'fmod',\n+            'uhadd': 'hadd', 'hypotf': 'hypot', 'ilogbf': 'ilogb',\n+            'isinff': 'isinf', 'isinfd': 'isinf', 'isnanf': 'isnan',\n+            'isnand': 'isnan', 'j0f': 'j0', 'j1f': 'j1', 'jnf': 'jn',\n+            'ldexpf': 'ldexp', 'lgammaf': 'lgamma', 'llrintf': 'llrint',\n+            'llroundf': 'llround', 'logf': 'log', 'log10f': 'log10',\n+            'log1pf': 'log1p', 'log2f': 'log2', 'logbf': 'logb',\n+            'umax': 'max', 'llmax': 'max', 'ullmax': 'max', 'fmaxf': 'max',\n+            'fmax': 'max', 'umin': 'min', 'llmin': 'min', 'ullmin': 'min',\n+            'fminf': 'min', 'fmin': 'min', 'dmul_rd': 'mul_rd', 'fmul_rd': 'mul_rd',\n+            'dmul_rn': 'mul_rn', 'fmul_rn': 'mul_rn', 'dmul_ru': 'mul_ru',\n+            'fmul_ru': 'mul_ru', 'dmul_rz': 'mul_rz', 'fmul_rz': 'mul_rz',\n+            'umul24': 'mul24', 'umulhi': 'mulhi', 'mul64hi': 'mulhi',\n+            'umul64hi': 'mulhi', 'nearbyintf': 'nearbyint', 'nextafterf': 'nextafter',\n+            'norm3df': 'norm3d', 'norm4df': 'norm4d', 'normcdff': 'normcdf',\n+            'normcdfinvf': 'normcdfinv', 'popcll': 'popc', 'powif': 'pow', 'powi': 'pow',\n+            'powf': 'pow', 'rcbrtf': 'rcbrt', 'frcp_rd': 'rcp_rd', 'drcp_rd': 'rcp_rd',\n+            'frcp_rn': 'rcp_rn', 'drcp_rn': 'rcp_rn', 'frcp_ru': 'rcp_ru',\n+            'drcp_ru': 'rcp_ru', 'frcp_rz': 'rcp_rz', 'drcp_rz': 'rcp_rz',\n+            'remainderf': 'remainder', 'urhadd': 'rhadd', 'rhypotf': 'rhypot',\n+            'rintf': 'rint', 'rnorm3df': 'rnorm3d', 'rnorm4df': 'rnorm4d',\n+            'roundf': 'round', 'rsqrtf': 'rsqrt', 'frsqrt_rn': 'rsqrt_rn',\n+            'usad': 'sad', 'scalbnf': 'scalbn', 'signbitf': 'signbit',\n+            'signbitd': 'signbit', 'sinf': 'sin', 'sinhf': 'sinh',\n+            'sinpif': 'sinpi', 'sqrtf': 'sqrt', 'fsqrt_rd': 'sqrt_rd',\n+            'dsqrt_rd': 'sqrt_rd', 'fsqrt_rn': 'sqrt_rn', 'dsqrt_rn': 'sqrt_rn',\n+            'fsqrt_ru': 'sqrt_ru', 'dsqrt_ru': 'sqrt_ru', 'fsqrt_rz': 'sqrt_rz',\n+            'dsqrt_rz': 'sqrt_rz', 'fsub_rd': 'sub_rd', 'dsub_rd': 'sub_rd',\n+            'fsub_rn': 'sub_rn', 'dsub_rn': 'sub_rn', 'fsub_ru': 'sub_ru',\n+            'dsub_ru': 'sub_ru', 'fsub_rz': 'sub_rz', 'dsub_rz': 'sub_rz',\n+            'tanf': 'tan', 'tanhf': 'tanh', 'tgammaf': 'tgamma', 'truncf': 'trunc',\n+            'y0f': 'y0', 'y1f': 'y1', 'ynf': 'yn'\n+        }\n+\n         for symbol in self._symbols.values():\n             op_name = symbol.op_name\n-            if \"max\" in op_name:\n-                op_name = \"max\"\n-            elif \"min\" in op_name:\n-                op_name = \"min\"\n-            elif \"abs\" in op_name:\n-                op_name = \"abs\"\n-            elif \"pow\" in op_name and \"fast\" in op_name:\n-                op_name = \"pow\"\n-            elif \"round\" in op_name:\n-                if \"llround\" in op_name:\n-                    op_name = \"llround\"\n-                else:\n-                    op_name = \"round\"\n-            elif \"rint\" in op_name:\n-                if \"llrint\" in op_name:\n-                    op_name = \"llrint\"\n-                else:\n-                    op_name = \"rint\"\n-            elif op_name.startswith(\"ull\"):\n-                if \"2\" not in op_name:\n-                    # e.g., ullmax->max\n-                    op_name = op_name[3:]\n-                else:\n-                    # e.g., ull2double->ll2double\n-                    op_name = op_name[1:]\n-            elif op_name.startswith(\"u\"):\n-                if \"2\" not in op_name:\n-                    # e.g., uhadd->hadd\n-                    op_name = op_name[1:]\n-                else:\n-                    # e.g., uint2double_rn->int2double_rn\n-                    op_name = op_name[1:]\n-            elif op_name.startswith(\"ll\"):\n-                if \"2\" not in op_name:\n-                    # e.g., llmax->max\n-                    op_name = op_name[2:]\n-            elif op_name.endswith(\"ll\"):\n-                op_name = op_name[:-2]\n-            elif op_name.endswith(\"f\"):\n-                op_name = op_name[:-1]\n-            if op_name in symbol_set:\n-                # Update op_name only if there's an existing symbol\n+            if op_name in renaming:\n+                op_name = renaming[op_name]\n                 symbol._op_name = op_name\n-            else:\n-                op_name = symbol._op_name\n             if op_name in self._symbol_groups:\n                 self._symbol_groups[op_name].append(symbol)\n             else:\n@@ -250,7 +264,7 @@ def _output_stubs(self):\n         #   return extern.dispatch(\"libdevice\", <path>, <args>, <arg_type_symbol_dict>, _builder)\n         import_str = \"from . import core, extern\\n\"\n         import_str += \"import os\\n\"\n-        header_str = \"LIBDEVICE_PATH = os.path.dirname(os.path.abspath(__file__)) + \\\"/libdevice.10.bc\\\"\\n\"\n+        header_str = \"LIBDEVICE_PATH = os.path.dirname(\\n\\tos.path.abspath(__file__)) + \\\"/libdevice.10.bc\\\"\\n\"\n         func_str = \"\"\n         for symbols in self._symbol_groups.values():\n             func_str += \"@extern.extern\\n\"\n@@ -331,10 +345,10 @@ def build(llvm_dis_path, lib_path, lib_name, output_dir):\n \n if __name__ == \"__main__\":\n     parser = argparse.ArgumentParser()\n-    parser.add_argument(\"-llvm\", dest=\"llvm_dis_path\", help=\"path to llvm-dis\", default=\"llvm-dis\")\n-    parser.add_argument(\"--lib-path\", dest=\"lib_path\", help=\"path to the extern library\")\n-    parser.add_argument(\"--lib-name\", dest=\"lib_name\", help=\"name of the extern library\")\n-    parser.add_argument(\"-o\", dest=\"output_dir\", help=\"output file path\", default=\"/tmp/\")\n+    parser.add_argument(\"--llvm-dis\", dest=\"llvm_dis_path\", help=\"Path to llvm-dis\", default=\"llvm-dis\")\n+    parser.add_argument(\"--lib-path\", dest=\"lib_path\", help=\"Path to the extern library\")\n+    parser.add_argument(\"--lib-name\", dest=\"lib_name\", help=\"Name of the extern library\")\n+    parser.add_argument(\"--output\", dest=\"output_dir\", help=\"Output file path\", default=\"/tmp/\")\n     args = parser.parse_args()\n \n     build(args.llvm_dis_path, args.lib_path, args.lib_name, args.output_dir)"}, {"filename": "python/tutorials/07-libdevice-function.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "file_content_changes": "@@ -7,7 +7,7 @@\n \n In `trition/language/libdevice.py`, we try to aggregate functions with the same computation but different data types together.\n For example, both `__nv_asin` and `__nvasinf` calculate the principal value of the arc sine of the input, but `__nv_asin` operates on `double` and `__nv_asinf` operates on `float`.\n-Using triton, you can simply call `tl.libdevice.asinf`.\n+Using triton, you can simply call `tl.libdevice.asin`.\n triton automatically selects the correct underlying device function to invoke based on input and output types.\n \"\"\"\n "}]