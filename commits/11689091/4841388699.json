[{"filename": "python/triton/compiler/compiler.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "file_content_changes": "@@ -251,7 +251,7 @@ def convert_type_repr(x):\n     return x\n \n \n-def make_hash(fn, **kwargs):\n+def make_hash(fn, arch, **kwargs):\n     if isinstance(fn, triton.runtime.JITFunction):\n         configs = kwargs[\"configs\"]\n         signature = kwargs[\"signature\"]\n@@ -262,7 +262,7 @@ def make_hash(fn, **kwargs):\n         # Get unique key for the compiled code\n         get_conf_key = lambda conf: (sorted(conf.divisible_by_16), sorted(conf.equal_to_1))\n         configs_key = [get_conf_key(conf) for conf in configs]\n-        key = f\"{fn.cache_key}-{''.join(signature.values())}-{configs_key}-{constants}-{num_warps}-{num_stages}-{debug}\"\n+        key = f\"{fn.cache_key}-{''.join(signature.values())}-{configs_key}-{constants}-{num_warps}-{num_stages}-{debug}-{arch}\"\n         return hashlib.md5(key.encode(\"utf-8\")).hexdigest()\n     assert isinstance(fn, str)\n     return hashlib.md5((Path(fn).read_text() + triton.runtime.jit.version_key()).encode(\"utf-8\")).hexdigest()\n@@ -418,7 +418,7 @@ def compile(fn, **kwargs):\n     # cache manager\n     so_path = make_stub(name, signature, constants)\n     # create cache manager\n-    fn_cache_manager = get_cache_manager(make_hash(fn, **kwargs))\n+    fn_cache_manager = get_cache_manager(make_hash(fn, arch, **kwargs))\n     # determine name and extension type of provided function\n     if isinstance(fn, triton.runtime.JITFunction):\n         name, ext = fn.__name__, \"ast\""}]