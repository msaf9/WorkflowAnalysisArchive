[{"filename": "include/triton/Dialect/Triton/IR/TritonOps.td", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "file_content_changes": "@@ -155,7 +155,7 @@ def TT_LoadOp : TT_Op<\"load\",\n                        \"triton::EvictionPolicy\":$evict, \"bool\":$isVolatile)>,\n         // A tensor pointer with boundary check and padding\n         OpBuilder<(ins \"Value\":$ptr, \"ArrayRef<int32_t>\":$boundaryCheck,\n-                       \"Optional<triton::PaddingOption>\":$padding, \"triton::CacheModifier\":$cache,\n+                       \"std::optional<triton::PaddingOption>\":$padding, \"triton::CacheModifier\":$cache,\n                        \"triton::EvictionPolicy\":$evict, \"bool\":$isVolatile)>,\n         // A tensor of pointers or a pointer to a scalar with mask\n         OpBuilder<(ins \"Value\":$ptr, \"Value\":$mask, \"triton::CacheModifier\":$cache,\n@@ -164,8 +164,9 @@ def TT_LoadOp : TT_Op<\"load\",\n         OpBuilder<(ins \"Value\":$ptr, \"Value\":$mask, \"Value\":$other, \"triton::CacheModifier\":$cache,\n                        \"triton::EvictionPolicy\":$evict, \"bool\":$isVolatile)>,\n         // A utility function to build the operation with all attributes\n-        OpBuilder<(ins \"Value\":$ptr, \"Value\":$mask, \"Value\":$other, \"Optional<ArrayRef<int32_t>>\":$boundaryCheck,\n-                       \"Optional<triton::PaddingOption>\":$padding, \"triton::CacheModifier\":$cache,\n+        OpBuilder<(ins \"Value\":$ptr, \"Value\":$mask, \"Value\":$other,\n+                       \"std::optional<ArrayRef<int32_t>>\":$boundaryCheck,\n+                       \"std::optional<triton::PaddingOption>\":$padding, \"triton::CacheModifier\":$cache,\n                        \"triton::EvictionPolicy\":$evict, \"bool\":$isVolatile)>\n     ];\n "}, {"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "file_content_changes": "@@ -364,10 +364,6 @@ Value LoopPipeliner::getLoadMask(triton::LoadOp loadOp, Value mappedMask,\n }\n \n void LoopPipeliner::emitPrologue() {\n-  // llvm::errs() << \"loads to pipeline...:\\n\";\n-  // for (Value load : loads)\n-  //   llvm::errs() << load << \"\\n\";\n-\n   OpBuilder builder(forOp);\n   for (BlockArgument &arg : forOp.getRegionIterArgs()) {\n     OpOperand &operand = forOp.getOpOperandForRegionIterArg(arg);\n@@ -392,7 +388,7 @@ void LoopPipeliner::emitPrologue() {\n     for (Operation &op : forOp.getLoopBody().front()) {\n       if (depOps.contains(&op))\n         orderedDeps.push_back(&op);\n-      else if (loads.contains(op.getResult(0)))\n+      else if (op.getNumResults() > 0 && loads.contains(op.getResult(0)))\n         orderedDeps.push_back(&op);\n     }\n     assert(depOps.size() + loads.size() == orderedDeps.size() &&\n@@ -601,7 +597,7 @@ scf::ForOp LoopPipeliner::createNewForOp() {\n   for (Operation &op : forOp.getLoopBody().front()) {\n     if (depOps.contains(&op))\n       orderedDeps.push_back(&op);\n-    else if (loads.contains(op.getResult(0)))\n+    else if (op.getNumResults() > 0 && loads.contains(op.getResult(0)))\n       orderedDeps.push_back(&op);\n   }\n   assert(depOps.size() + loads.size() == orderedDeps.size() &&"}]