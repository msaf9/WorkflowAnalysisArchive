[{"filename": "python/tutorials/05-layer-norm.py", "status": "removed", "additions": 0, "deletions": 376, "changes": 376, "file_content_changes": "@@ -1,376 +0,0 @@\n-\"\"\"\n-Layer Normalization\n-====================\n-In this tutorial, you will write a high-performance layer normalization\n-kernel that runs faster than the PyTorch implementation.\n-\n-In doing so, you will learn about:\n-\n-* Implementing backward pass in Triton.\n-\n-* Implementing parallel reduction in Triton.\n-\n-\"\"\"\n-\n-# %%\n-# Motivations\n-# -----------\n-#\n-# The *LayerNorm* operator was first introduced in [BA2016]_ as a way to improve the performance\n-# of sequential models (e.g., Transformers) or neural networks with small batch size.\n-# It takes a vector :math:`x` as input and produces a vector :math:`y` of the same shape as output.\n-# The normalization is performed by subtracting the mean and dividing by the standard deviation of :math:`x`.\n-# After the normalization, a learnable linear transformation with weights :math:`w` and biases :math:`b` is applied.\n-# The forward pass can be expressed as follows:\n-#\n-# .. math::\n-#    y = \\frac{ x - \\text{E}[x] }{ \\sqrt{\\text{Var}(x) + \\epsilon} } * w + b\n-#\n-# where :math:`\\epsilon` is a small constant added to the denominator for numerical stability.\n-# Let\u2019s first take a look at the forward pass implementation.\n-\n-import torch\n-\n-import triton\n-import triton.language as tl\n-\n-try:\n-    # This is https://github.com/NVIDIA/apex, NOT the apex on PyPi, so it\n-    # should not be added to extras_require in setup.py.\n-    import apex\n-    HAS_APEX = True\n-except ModuleNotFoundError:\n-    HAS_APEX = False\n-\n-\n-@triton.jit\n-def _layer_norm_fwd_fused(\n-    X,  # pointer to the input\n-    Y,  # pointer to the output\n-    W,  # pointer to the weights\n-    B,  # pointer to the biases\n-    Mean,  # pointer to the mean\n-    Rstd,  # pointer to the 1/std\n-    stride,  # how much to increase the pointer when moving by 1 row\n-    N,  # number of columns in X\n-    eps,  # epsilon to avoid division by zero\n-    BLOCK_SIZE: tl.constexpr,\n-):\n-    # Map the program id to the row of X and Y it should compute.\n-    row = tl.program_id(0)\n-    Y += row * stride\n-    X += row * stride\n-    # Compute mean\n-    mean = 0\n-    _mean = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n-    for off in range(0, N, BLOCK_SIZE):\n-        cols = off + tl.arange(0, BLOCK_SIZE)\n-        a = tl.load(X + cols, mask=cols < N, other=0.).to(tl.float32)\n-        _mean += a\n-    mean = tl.sum(_mean, axis=0) / N\n-    # Compute variance\n-    _var = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n-    for off in range(0, N, BLOCK_SIZE):\n-        cols = off + tl.arange(0, BLOCK_SIZE)\n-        x = tl.load(X + cols, mask=cols < N, other=0.).to(tl.float32)\n-        x = tl.where(cols < N, x - mean, 0.)\n-        _var += x * x\n-    var = tl.sum(_var, axis=0) / N\n-    rstd = 1 / tl.sqrt(var + eps)\n-    # Write mean / rstd\n-    tl.store(Mean + row, mean)\n-    tl.store(Rstd + row, rstd)\n-    # Normalize and apply linear transformation\n-    for off in range(0, N, BLOCK_SIZE):\n-        cols = off + tl.arange(0, BLOCK_SIZE)\n-        mask = cols < N\n-        w = tl.load(W + cols, mask=mask)\n-        b = tl.load(B + cols, mask=mask)\n-        x = tl.load(X + cols, mask=mask, other=0.).to(tl.float32)\n-        x_hat = (x - mean) * rstd\n-        y = x_hat * w + b\n-        # Write output\n-        tl.store(Y + cols, y, mask=mask)\n-\n-\n-# %%\n-# Backward pass\n-# -------------\n-#\n-# The backward pass for the layer normalization operator is a bit more involved than the forward pass.\n-# Let :math:`\\hat{x}` be the normalized inputs :math:`\\frac{ x - \\text{E}[x] }{ \\sqrt{\\text{Var}(x) + \\epsilon} }` before the linear transformation,\n-# the Vector-Jacobian Products (VJP) :math:`\\nabla_{x}` of :math:`x` are given by:\n-#\n-# .. math::\n-#    \\nabla_{x} = \\frac{1}{\\sigma}\\Big( \\nabla_{y} \\odot w - \\underbrace{ \\big( \\frac{1}{N} \\hat{x} \\cdot (\\nabla_{y} \\odot w) \\big) }_{c_1} \\odot \\hat{x} - \\underbrace{ \\frac{1}{N} \\nabla_{y} \\cdot w }_{c_2} \\Big)\n-#\n-# where :math:`\\odot` denotes the element-wise multiplication, :math:`\\cdot` denotes the dot product, and :math:`\\sigma` is the standard deviation.\n-# :math:`c_1` and :math:`c_2` are intermediate constants that improve the readability of the following implementation.\n-#\n-# For the weights :math:`w` and biases :math:`b`, the VJPs :math:`\\nabla_{w}` and :math:`\\nabla_{b}` are more straightforward:\n-#\n-# .. math::\n-#    \\nabla_{w} = \\nabla_{y} \\odot \\hat{x} \\quad \\text{and} \\quad \\nabla_{b} = \\nabla_{y}\n-#\n-# Since the same weights :math:`w` and biases :math:`b` are used for all rows in the same batch, their gradients need to sum up.\n-# To perform this step efficiently, we use a parallel reduction strategy: each kernel instance accumulates\n-# partial :math:`\\nabla_{w}` and :math:`\\nabla_{b}` across certain rows into one of :math:`\\text{GROUP_SIZE_M}` independent buffers.\n-# These buffers stay in the L2 cache and then are further reduced by another function to compute the actual :math:`\\nabla_{w}` and :math:`\\nabla_{b}`.\n-#\n-# Let the number of input rows :math:`M = 4` and :math:`\\text{GROUP_SIZE_M} = 2`,\n-# here's a diagram of the parallel reduction strategy for :math:`\\nabla_{w}` (:math:`\\nabla_{b}` is omitted for brevity):\n-#\n-#   .. image:: parallel_reduction.png\n-#\n-# In Stage 1, the rows of X that have the same color share the same buffer and thus a lock is used to ensure that only one kernel instance writes to the buffer at a time.\n-# In Stage 2, the buffers are further reduced to compute the final :math:`\\nabla_{w}` and :math:`\\nabla_{b}`.\n-# In the following implementation, Stage 1 is implemented by the function :code:`_layer_norm_bwd_dx_fused` and Stage 2 is implemented by the function :code:`_layer_norm_bwd_dwdb`.\n-\n-@triton.jit\n-def _layer_norm_bwd_dx_fused(\n-    DX,  # pointer to the input gradient\n-    DY,  # pointer to the output gradient\n-    DW,  # pointer to the partial sum of weights gradient\n-    DB,  # pointer to the partial sum of biases gradient\n-    X,   # pointer to the input\n-    W,   # pointer to the weights\n-    B,   # pointer to the biases\n-    Mean,   # pointer to the mean\n-    Rstd,   # pointer to the 1/std\n-    Lock,  # pointer to the lock\n-    stride,  # how much to increase the pointer when moving by 1 row\n-    N,  # number of columns in X\n-    eps,  # epsilon to avoid division by zero\n-    GROUP_SIZE_M: tl.constexpr,\n-    BLOCK_SIZE_N: tl.constexpr\n-):\n-    # Map the program id to the elements of X, DX, and DY it should compute.\n-    row = tl.program_id(0)\n-    cols = tl.arange(0, BLOCK_SIZE_N)\n-    mask = cols < N\n-    X += row * stride\n-    DY += row * stride\n-    DX += row * stride\n-    # Offset locks and weights/biases gradient pointer for parallel reduction\n-    lock_id = row % GROUP_SIZE_M\n-    Lock += lock_id\n-    Count = Lock + GROUP_SIZE_M\n-    DW = DW + lock_id * N + cols\n-    DB = DB + lock_id * N + cols\n-    # Load data to SRAM\n-    x = tl.load(X + cols, mask=mask, other=0).to(tl.float32)\n-    dy = tl.load(DY + cols, mask=mask, other=0).to(tl.float32)\n-    w = tl.load(W + cols, mask=mask).to(tl.float32)\n-    mean = tl.load(Mean + row)\n-    rstd = tl.load(Rstd + row)\n-    # Compute dx\n-    xhat = (x - mean) * rstd\n-    wdy = w * dy\n-    xhat = tl.where(mask, xhat, 0.)\n-    wdy = tl.where(mask, wdy, 0.)\n-    c1 = tl.sum(xhat * wdy, axis=0) / N\n-    c2 = tl.sum(wdy, axis=0) / N\n-    dx = (wdy - (xhat * c1 + c2)) * rstd\n-    # Write dx\n-    tl.store(DX + cols, dx, mask=mask)\n-    # Accumulate partial sums for dw/db\n-    partial_dw = (dy * xhat).to(w.dtype)\n-    partial_db = (dy).to(w.dtype)\n-    while tl.atomic_cas(Lock, 0, 1) == 1:\n-        pass\n-    count = tl.load(Count)\n-    # First store doesn't accumulate\n-    if count == 0:\n-        tl.atomic_xchg(Count, 1)\n-    else:\n-        partial_dw += tl.load(DW, mask=mask)\n-        partial_db += tl.load(DB, mask=mask)\n-    tl.store(DW, partial_dw, mask=mask)\n-    tl.store(DB, partial_db, mask=mask)\n-    # Release the lock\n-    tl.atomic_xchg(Lock, 0)\n-\n-\n-@triton.jit\n-def _layer_norm_bwd_dwdb(\n-    DW,  # pointer to the partial sum of weights gradient\n-    DB,  # pointer to the partial sum of biases gradient\n-    FINAL_DW,  # pointer to the weights gradient\n-    FINAL_DB,  # pointer to the biases gradient\n-    M,  # GROUP_SIZE_M\n-    N,  # number of columns\n-    BLOCK_SIZE_M: tl.constexpr,\n-    BLOCK_SIZE_N: tl.constexpr\n-):\n-    # Map the program id to the elements of DW and DB it should compute.\n-    pid = tl.program_id(0)\n-    cols = pid * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n-    dw = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-    db = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-    # Iterate through the rows of DW and DB to sum the partial sums.\n-    for i in range(0, M, BLOCK_SIZE_M):\n-        rows = i + tl.arange(0, BLOCK_SIZE_M)\n-        mask = (rows[:, None] < M) & (cols[None, :] < N)\n-        offs = rows[:, None] * N + cols[None, :]\n-        dw += tl.load(DW + offs, mask=mask, other=0.)\n-        db += tl.load(DB + offs, mask=mask, other=0.)\n-    # Write the final sum to the output.\n-    sum_dw = tl.sum(dw, axis=0)\n-    sum_db = tl.sum(db, axis=0)\n-    tl.store(FINAL_DW + cols, sum_dw, mask=cols < N)\n-    tl.store(FINAL_DB + cols, sum_db, mask=cols < N)\n-\n-\n-# %%\n-# Benchmark\n-# ---------\n-#\n-# We can now compare the performance of our kernel against that of PyTorch.\n-# Here we focus on inputs that have Less than 64KB per feature.\n-# Specifically, one can set :code:`'mode': 'backward'` to benchmark the backward pass.\n-\n-\n-class LayerNorm(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, x, normalized_shape, weight, bias, eps):\n-        # allocate output\n-        y = torch.empty_like(x)\n-        # reshape input data into 2D tensor\n-        x_arg = x.reshape(-1, x.shape[-1])\n-        M, N = x_arg.shape\n-        mean = torch.empty((M, ), dtype=torch.float32, device='cuda')\n-        rstd = torch.empty((M, ), dtype=torch.float32, device='cuda')\n-        # Less than 64KB per feature: enqueue fused kernel\n-        MAX_FUSED_SIZE = 65536 // x.element_size()\n-        BLOCK_SIZE = min(MAX_FUSED_SIZE, triton.next_power_of_2(N))\n-        if N > BLOCK_SIZE:\n-            raise RuntimeError(\"This layer norm doesn't support feature dim >= 64KB.\")\n-        # heuristics for number of warps\n-        num_warps = min(max(BLOCK_SIZE // 256, 1), 8)\n-        # enqueue kernel\n-        _layer_norm_fwd_fused[(M,)](x_arg, y, weight, bias, mean, rstd,\n-                                    x_arg.stride(0), N, eps,\n-                                    BLOCK_SIZE=BLOCK_SIZE, num_warps=num_warps, num_ctas=1)\n-        ctx.save_for_backward(x, weight, bias, mean, rstd)\n-        ctx.BLOCK_SIZE = BLOCK_SIZE\n-        ctx.num_warps = num_warps\n-        ctx.eps = eps\n-        return y\n-\n-    @staticmethod\n-    def backward(ctx, dy):\n-        x, w, b, m, v = ctx.saved_tensors\n-        # heuristics for amount of parallel reduction stream for DW/DB\n-        N = w.shape[0]\n-        GROUP_SIZE_M = 64\n-        if N <= 8192: GROUP_SIZE_M = 96\n-        if N <= 4096: GROUP_SIZE_M = 128\n-        if N <= 1024: GROUP_SIZE_M = 256\n-        # allocate output\n-        locks = torch.zeros(2 * GROUP_SIZE_M, dtype=torch.int32, device='cuda')\n-        _dw = torch.empty((GROUP_SIZE_M, w.shape[0]), dtype=x.dtype, device=w.device)\n-        _db = torch.empty((GROUP_SIZE_M, w.shape[0]), dtype=x.dtype, device=w.device)\n-        dw = torch.empty((w.shape[0],), dtype=w.dtype, device=w.device)\n-        db = torch.empty((w.shape[0],), dtype=w.dtype, device=w.device)\n-        dx = torch.empty_like(dy)\n-        # enqueue kernel using forward pass heuristics\n-        # also compute partial sums for DW and DB\n-        x_arg = x.reshape(-1, x.shape[-1])\n-        M, N = x_arg.shape\n-        _layer_norm_bwd_dx_fused[(M,)](dx, dy, _dw, _db, x, w, b, m, v, locks,\n-                                       x_arg.stride(0), N, ctx.eps,\n-                                       BLOCK_SIZE_N=ctx.BLOCK_SIZE,\n-                                       GROUP_SIZE_M=GROUP_SIZE_M,\n-                                       num_warps=ctx.num_warps)\n-        grid = lambda meta: [triton.cdiv(N, meta['BLOCK_SIZE_N'])]\n-        # accumulate partial sums in separate kernel\n-        _layer_norm_bwd_dwdb[grid](_dw, _db, dw, db, GROUP_SIZE_M, N,\n-                                   BLOCK_SIZE_M=32,\n-                                   BLOCK_SIZE_N=128, num_ctas=1)\n-        return dx, None, dw, db, None\n-\n-\n-layer_norm = LayerNorm.apply\n-\n-\n-def test_layer_norm(M, N, dtype, eps=1e-5, device='cuda'):\n-    # create data\n-    x_shape = (M, N)\n-    w_shape = (x_shape[-1], )\n-    weight = torch.rand(w_shape, dtype=dtype, device='cuda', requires_grad=True)\n-    bias = torch.rand(w_shape, dtype=dtype, device='cuda', requires_grad=True)\n-    x = -2.3 + 0.5 * torch.randn(x_shape, dtype=dtype, device='cuda')\n-    dy = .1 * torch.randn_like(x)\n-    x.requires_grad_(True)\n-    # forward pass\n-    y_tri = layer_norm(x, w_shape, weight, bias, eps)\n-    y_ref = torch.nn.functional.layer_norm(x, w_shape, weight, bias, eps).to(dtype)\n-    # backward pass (triton)\n-    y_tri.backward(dy, retain_graph=True)\n-    dx_tri, dw_tri, db_tri = [_.grad.clone() for _ in [x, weight, bias]]\n-    x.grad, weight.grad, bias.grad = None, None, None\n-    # backward pass (torch)\n-    y_ref.backward(dy, retain_graph=True)\n-    dx_ref, dw_ref, db_ref = [_.grad.clone() for _ in [x, weight, bias]]\n-    # compare\n-    assert torch.allclose(y_tri, y_ref, atol=1e-2, rtol=0)\n-    assert torch.allclose(dx_tri, dx_ref, atol=1e-2, rtol=0)\n-    assert torch.allclose(db_tri, db_ref, atol=1e-2, rtol=0)\n-    assert torch.allclose(dw_tri, dw_ref, atol=1e-2, rtol=0)\n-\n-\n-@triton.testing.perf_report(\n-    triton.testing.Benchmark(\n-        x_names=['N'],\n-        x_vals=[512 * i for i in range(2, 32)],\n-        line_arg='provider',\n-        line_vals=['triton', 'torch'] + (['apex'] if HAS_APEX else []),\n-        line_names=['Triton', 'Torch'] + (['Apex'] if HAS_APEX else []),\n-        styles=[('blue', '-'), ('green', '-'), ('orange', '-')],\n-        ylabel='GB/s',\n-        plot_name='layer-norm-backward',\n-        args={'M': 4096, 'dtype': torch.float16, 'mode': 'backward'}\n-    )\n-)\n-def bench_layer_norm(M, N, dtype, provider, mode='backward', eps=1e-5, device='cuda'):\n-    # create data\n-    x_shape = (M, N)\n-    w_shape = (x_shape[-1], )\n-    weight = torch.rand(w_shape, dtype=dtype, device='cuda', requires_grad=True)\n-    bias = torch.rand(w_shape, dtype=dtype, device='cuda', requires_grad=True)\n-    x = -2.3 + 0.5 * torch.randn(x_shape, dtype=dtype, device='cuda')\n-    dy = .1 * torch.randn_like(x)\n-    x.requires_grad_(True)\n-    quantiles = [0.5, 0.2, 0.8]\n-    # utility functions\n-    if provider == 'triton':\n-        def y_fwd(): return layer_norm(x, w_shape, weight, bias, eps)  # noqa: F811, E704\n-    if provider == 'torch':\n-        def y_fwd(): return torch.nn.functional.layer_norm(x, w_shape, weight, bias, eps)  # noqa: F811, E704\n-    if provider == 'apex':\n-        apex_layer_norm = apex.normalization.FusedLayerNorm(\n-            w_shape).to(x.device).to(x.dtype)\n-\n-        def y_fwd(): return apex_layer_norm(x)  # noqa: F811, E704\n-    # forward pass\n-    if mode == 'forward':\n-        gbps = lambda ms: 2 * x.numel() * x.element_size() / ms * 1e-6\n-        ms, min_ms, max_ms = triton.testing.do_bench(y_fwd, quantiles=quantiles, rep=500)\n-    # backward pass\n-    if mode == 'backward':\n-        def gbps(ms): return 3 * x.numel() * x.element_size() / ms * 1e-6  # noqa: F811, E704\n-        y = y_fwd()\n-        ms, min_ms, max_ms = triton.testing.do_bench(lambda: y.backward(dy, retain_graph=True),\n-                                                     quantiles=quantiles, grad_to_none=[x], rep=500)\n-    return gbps(ms), gbps(max_ms), gbps(min_ms)\n-\n-\n-test_layer_norm(1151, 8192, torch.float16)\n-bench_layer_norm.run(save_path='.', print_data=True)\n-\n-# %%\n-# References\n-# ----------\n-#\n-# .. [BA2016] Jimmy Lei Ba and Jamie Ryan Kiros and Geoffrey E. Hinton, \"Layer Normalization\", Arxiv 2016"}, {"filename": "python/tutorials/09-experimental-tma-matrix-multiplication.py", "status": "removed", "additions": 0, "deletions": 200, "changes": 200, "file_content_changes": "@@ -1,200 +0,0 @@\n-\"\"\"\n-Matrix Multiplication with TMA (Experimental)\n-================================================\n-In this tutorial, you will write a very short high-performance multiplication kernel that achieves\n-performance on parallel with cuBLAS.\n-\"\"\"\n-\n-# Copyright (c) 2023 NVIDIA Corporation & Affiliates. All rights reserved.\n-#\n-# Permission is hereby granted, free of charge, to any person obtaining\n-# a copy of this software and associated documentation files\n-# (the \"Software\"), to deal in the Software without restriction,\n-# including without limitation the rights to use, copy, modify, merge,\n-# publish, distribute, sublicense, and/or sell copies of the Software,\n-# and to permit persons to whom the Software is furnished to do so,\n-# subject to the following conditions:\n-#\n-# The above copyright notice and this permission notice shall be\n-# included in all copies or substantial portions of the Software.\n-#\n-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n-# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n-# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n-# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n-# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-\n-import torch\n-from torch.testing import assert_close\n-\n-import triton\n-import triton.language as tl\n-\n-\n-@triton.autotune(\n-    configs=[\n-        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=7, num_warps=4),\n-        # triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=7, num_warps=4, num_ctas=2),\n-        # triton.Config({'BLOCK_SIZE_M': 512, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=7, num_warps=4, num_ctas=4),\n-    ],\n-    key=['M', 'N', 'K'],\n-)\n-@triton.jit\n-def matmul_kernel(\n-    a_ptr, b_ptr, z_ptr,\n-    M, N, K,\n-    stride_am, stride_ak,\n-    stride_bk, stride_bn,\n-    stride_zm, stride_zn,\n-    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr, GROUP_SIZE_M: tl.constexpr,\n-    A_ORDER_0: tl.constexpr, A_ORDER_1: tl.constexpr,\n-    B_ORDER_0: tl.constexpr, B_ORDER_1: tl.constexpr\n-):\n-    pid = tl.program_id(axis=0)\n-    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n-    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n-    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n-    group_id = pid // num_pid_in_group\n-    first_pid_m = group_id * GROUP_SIZE_M\n-    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n-    pid_m = first_pid_m + (pid % group_size_m)\n-    pid_n = (pid % num_pid_in_group) // group_size_m\n-    block_offset_m = pid_m * BLOCK_SIZE_M\n-    block_offset_n = pid_n * BLOCK_SIZE_N\n-\n-    a_tile_ptr = tl.make_block_ptr(base=a_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n-                                   offsets=(block_offset_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(A_ORDER_0, A_ORDER_1))\n-    b_tile_ptr = tl.make_block_ptr(base=b_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n-                                   offsets=(0, block_offset_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(B_ORDER_0, B_ORDER_1))\n-    z = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-\n-    offs_m = block_offset_m + tl.arange(0, BLOCK_SIZE_M)\n-    offs_n = block_offset_n + tl.arange(0, BLOCK_SIZE_N)\n-    z_ptrs = z_ptr + offs_m[:, None] * stride_zm + offs_n[None, :] * stride_zn\n-    mask = (offs_m < M)[:, None] & (offs_n < N)[None, :]\n-\n-    for k in range(0, K, BLOCK_SIZE_K):\n-        a = tl.load(a_tile_ptr)\n-        b = tl.load(b_tile_ptr)\n-        z += tl.dot(a, b)\n-        a_tile_ptr = tl.advance(a_tile_ptr, [0, BLOCK_SIZE_K])\n-        b_tile_ptr = tl.advance(b_tile_ptr, [BLOCK_SIZE_K, 0])\n-\n-    z = z.to(tl.float16)\n-\n-    tl.store(z_ptrs, z, mask=mask)\n-\n-\n-def matmul(a, b, a_order, b_order):\n-    # checks constraints\n-    assert a.shape[1] == b.shape[0], \"incompatible dimensions\"\n-    M, K = a.shape\n-    K, N = b.shape\n-\n-    z = torch.empty((M, N), device=a.device, dtype=torch.float16)\n-\n-    def grid(META):\n-        return (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)\n-    matmul_kernel[grid](a_ptr=a, b_ptr=b, z_ptr=z,\n-                        M=M, N=N, K=K,\n-                        stride_am=a.stride(0), stride_ak=a.stride(1),\n-                        stride_bk=b.stride(0), stride_bn=b.stride(1),\n-                        stride_zm=z.stride(0), stride_zn=z.stride(1),\n-                        A_ORDER_0=a_order[0], A_ORDER_1=a_order[1],\n-                        B_ORDER_0=b_order[0], B_ORDER_1=b_order[1]\n-                        )\n-    return z\n-\n-\n-problem_list = [\n-    [2048, 512, 512, False, True],\n-    [2048, 1024, 1024, False, False],\n-    [2048, 2048, 2048, True, False],\n-    [2048, 4096, 4096, True, True],\n-]\n-\n-\n-def test_matmul():\n-    for case in problem_list:\n-        M, N, K, TRANS_A, TRANS_B = case\n-        print(M, N, K, TRANS_A, TRANS_B)\n-        if (TRANS_A):\n-            a = torch.randn((K, M), device='cuda', dtype=torch.float16).T\n-            a_order = [0, 1]\n-        else:\n-            a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n-            a_order = [1, 0]\n-\n-        if (TRANS_B):\n-            b = torch.randn((N, K), device='cuda', dtype=torch.float16).T\n-            b_order = [0, 1]\n-        else:\n-            b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n-            b_order = [1, 0]\n-\n-        golden = torch.matmul(a, b)\n-        z = matmul(a, b, a_order, b_order)\n-\n-        golden = torch.nn.functional.normalize(golden)\n-        z = torch.nn.functional.normalize(z)\n-        torch.set_printoptions(profile=\"full\")\n-        assert_close(z, golden, rtol=1e-2, atol=1e-3, check_dtype=False)\n-\n-\n-@triton.testing.perf_report(\n-    triton.testing.Benchmark(\n-        # argument names to use as an x-axis for the plot\n-        x_names=['M', 'N', 'K', 'TRANS_A', 'TRANS_B'],\n-        x_vals=problem_list,  # different possible values for `x_name`\n-        line_arg='provider',\n-        # argument name whose value corresponds to a different line in the plot\n-        # possible values for `line_arg``\n-        line_vals=['cublas', 'triton'],\n-        # label name for the lines\n-        line_names=[\"cuBLAS\", \"Triton\"],\n-        # line styles\n-        styles=[('green', '-'), ('green', '--'),\n-                ('blue', '-'), ('blue', '--')],\n-        ylabel=\"TFLOPS\",  # label name for the y-axis\n-        plot_name=\"matmul-performance\",\n-        # name for the plot. Used also as a file name for saving the plot.\n-        args={},\n-    )\n-)\n-def benchmark(M, N, K, TRANS_A, TRANS_B, provider):\n-    if (TRANS_A):\n-        a = torch.randn((K, M), device='cuda', dtype=torch.float16).T\n-        a_order = [0, 1]\n-    else:\n-        a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n-        a_order = [1, 0]\n-\n-    if (TRANS_B):\n-        b = torch.randn((N, K), device='cuda', dtype=torch.float16).T\n-        b_order = [0, 1]\n-    else:\n-        b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n-        b_order = [1, 0]\n-\n-    quantiles = [0.5, 0.2, 0.8]\n-    if provider == 'cublas':\n-        ms, min_ms, max_ms = triton.testing.do_bench(\n-            lambda: torch.matmul(a, b), rep=100, quantiles=quantiles, fast_flush=False)\n-    if provider == 'triton':\n-        ms, min_ms, max_ms = triton.testing.do_bench(\n-            lambda: matmul(a, b, a_order, b_order), rep=100, quantiles=quantiles, fast_flush=False)\n-\n-    def perf(ms):\n-        return 2 * M * N * K * 1e-12 / (ms * 1e-3)\n-    return perf(ms), perf(max_ms), perf(min_ms)\n-\n-\n-if torch.cuda.get_device_capability()[0] < 9:\n-    import sys\n-    print(\"Skipping TMA benchmark for GPU with compute capability < 9\")\n-    sys.exit(0)\n-\n-test_matmul()\n-benchmark.run(show_plots=False, print_data=True)"}, {"filename": "python/tutorials/10-experimental-tma-store-matrix-multiplication.py", "status": "removed", "additions": 0, "deletions": 179, "changes": 179, "file_content_changes": "@@ -1,179 +0,0 @@\n-\"\"\"\n-Matrix Multiplication with TMA Store (Experimental)\n-================================================\n-In this tutorial, you will write a very short high-performance multiplication kernel that achieves\n-performance on parallel with cuBLAS.\n-\"\"\"\n-\n-# Copyright (c) 2023 NVIDIA Corporation & Affiliates. All rights reserved.\n-#\n-# Permission is hereby granted, free of charge, to any person obtaining\n-# a copy of this software and associated documentation files\n-# (the \"Software\"), to deal in the Software without restriction,\n-# including without limitation the rights to use, copy, modify, merge,\n-# publish, distribute, sublicense, and/or sell copies of the Software,\n-# and to permit persons to whom the Software is furnished to do so,\n-# subject to the following conditions:\n-#\n-# The above copyright notice and this permission notice shall be\n-# included in all copies or substantial portions of the Software.\n-#\n-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n-# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n-# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n-# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n-# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-\n-import torch\n-from torch.testing import assert_close\n-\n-import triton\n-import triton.language as tl\n-\n-\n-@triton.autotune(\n-    configs=[\n-        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=7, num_warps=4),\n-        # triton.Config({'BLOCK_SIZE_M': 512, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=7, num_warps=4, num_ctas=4),\n-    ],\n-    key=['M', 'N', 'K'],\n-)\n-@triton.jit\n-def matmul_kernel(\n-    a_ptr, b_ptr, c_ptr,\n-    M, N, K,\n-    stride_am, stride_ak,\n-    stride_bk, stride_bn,\n-    stride_cm, stride_cn,\n-    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n-    GROUP_SIZE_M: tl.constexpr,\n-):\n-    pid = tl.program_id(axis=0)\n-    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n-    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n-    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n-    group_id = pid // num_pid_in_group\n-    first_pid_m = group_id * GROUP_SIZE_M\n-    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n-    pid_m = first_pid_m + (pid % group_size_m)\n-    pid_n = (pid % num_pid_in_group) // group_size_m\n-    block_offset_m = pid_m * BLOCK_SIZE_M\n-    block_offset_n = pid_n * BLOCK_SIZE_N\n-\n-    a_tile_ptr = tl.make_block_ptr(\n-        base=a_ptr, shape=(\n-            M, K), strides=(\n-            stride_am, stride_ak), offsets=(\n-                block_offset_m, 0), block_shape=(\n-                    BLOCK_SIZE_M, BLOCK_SIZE_K), order=(\n-                        1, 0))\n-    b_tile_ptr = tl.make_block_ptr(\n-        base=b_ptr, shape=(\n-            K, N), strides=(\n-            stride_bk, stride_bn), offsets=(\n-                0, block_offset_n), block_shape=(\n-                    BLOCK_SIZE_K, BLOCK_SIZE_N), order=(\n-                        0, 1))\n-    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n-\n-    for k in range(0, K, BLOCK_SIZE_K):\n-        a = tl.load(a_tile_ptr)\n-        b = tl.load(b_tile_ptr)\n-        accumulator += tl.dot(a, b)\n-        a_tile_ptr = tl.advance(a_tile_ptr, [0, BLOCK_SIZE_K])\n-        b_tile_ptr = tl.advance(b_tile_ptr, [BLOCK_SIZE_K, 0])\n-\n-    c_block_ptr = tl.make_block_ptr(base=c_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n-                                    offsets=(block_offset_m, block_offset_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0))\n-\n-    tl.store(c_block_ptr, accumulator)\n-\n-\n-def matmul(a, b):\n-    # checks constraints\n-    assert a.shape[1] == b.shape[0], \"incompatible dimensions\"\n-    M, K = a.shape\n-    K, N = b.shape\n-    assert (\n-        K % 32 == 0\n-    ), \"We don't check memory-out-of-bounds with K so K must be divisible by BLOCK_SIZE_K\"\n-\n-    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n-\n-    def grid(META):\n-        return (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)\n-\n-    matmul_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,\n-                        M=M, N=N, K=K,\n-                        stride_am=a.stride(0), stride_ak=a.stride(1),\n-                        stride_bk=b.stride(0), stride_bn=b.stride(1),\n-                        stride_cm=c.stride(0), stride_cn=c.stride(1))\n-    return c\n-\n-\n-a = torch.randn((512, 512), device='cuda', dtype=torch.float16)\n-b = torch.randn((512, 512), device='cuda', dtype=torch.float16).T\n-c = matmul(a, b)\n-c = torch.nn.functional.normalize(c)\n-\n-golden = torch.nn.functional.normalize(torch.matmul(a, b))\n-\n-torch.set_printoptions(profile=\"full\")\n-assert_close(\n-    c,\n-    golden,\n-    rtol=1e-2,\n-    atol=1e-3,\n-    check_dtype=False)\n-\n-\n-@triton.testing.perf_report(\n-    triton.testing.Benchmark(\n-        # argument names to use as an x-axis for the plot\n-        x_names=['M', 'N', 'K'],\n-        x_vals=[\n-            [2048, 512, 512],\n-            [2048, 1024, 1024],\n-            [2048, 2048, 2048],\n-            [2048, 4096, 4096],\n-            [2048, 8192, 8192]\n-        ],  # different possible values for `x_name`\n-        line_arg='provider',\n-        # argument name whose value corresponds to a different line in the plot\n-        # possible values for `line_arg``\n-        line_vals=['cublas', 'triton'],\n-        # label name for the lines\n-        line_names=[\"cuBLAS\", \"Triton\"],\n-        # line styles\n-        styles=[('green', '-'), ('green', '--'),\n-                ('blue', '-'), ('blue', '--')],\n-        ylabel=\"TFLOPS\",  # label name for the y-axis\n-        plot_name=\"matmul-performance\",\n-        # name for the plot. Used also as a file name for saving the plot.\n-        args={},\n-    )\n-)\n-def benchmark(M, N, K, provider):\n-    a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n-    b = torch.randn((N, K), device='cuda', dtype=torch.float16).T\n-    quantiles = [0.5, 0.2, 0.8]\n-    if provider == 'cublas':\n-        ms, min_ms, max_ms = triton.testing.do_bench(\n-            lambda: torch.matmul(a, b), rep=100, quantiles=quantiles, fast_flush=False)\n-    if provider == 'triton':\n-        ms, min_ms, max_ms = triton.testing.do_bench(\n-            lambda: matmul(a, b), rep=100, quantiles=quantiles, fast_flush=False)\n-\n-    def perf(ms):\n-        return 2 * M * N * K * 1e-12 / (ms * 1e-3)\n-    return perf(ms), perf(max_ms), perf(min_ms)\n-\n-\n-if torch.cuda.get_device_capability()[0] < 9:\n-    import sys\n-    print(\"Skipping TMA benchmark for GPU with compute capability < 9\")\n-    sys.exit(0)\n-\n-benchmark.run(show_plots=False, print_data=True)"}]