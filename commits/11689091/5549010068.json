[{"filename": "lib/Dialect/TritonGPU/Transforms/Pipeline.cpp", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "file_content_changes": "@@ -761,27 +761,29 @@ scf::ForOp LoopPipeliner::cloneForOp(ArrayRef<Value> newLoopArgs,\n     mapping.map(arg.value(), newForOp.getRegionIterArgs()[arg.index()]);\n   mapping.map(forOp.getInductionVar(), newForOp.getInductionVar());\n \n-  // Clone the loop body, replace original args with args of the new ForOp\n-  // Insert async wait if necessary.\n+  // Clone the loop body, replace original args with args of the new ForOp.\n+  // We want to find cvt ops that match the following pattern:\n+  // %0 = load %ptr\n+  // %1 (dotOperand) = cvt %0\n   for (Operation &op : forOp.getBody()->without_terminator()) {\n-    // is modified\n-    auto it = std::find(validLoads.begin(), validLoads.end(), op.getOperand(0));\n-    if (it == validLoads.end()) {\n-      Operation *newOp = cloneWithInferType(builder, &op, mapping);\n-      continue;\n-    }\n-\n-    // we replace the use new load use with a convert layout\n-    size_t i = std::distance(validLoads.begin(), it);\n-    auto cvtDstTy = op.getResult(0).getType().cast<RankedTensorType>();\n-    if (!cvtDstTy.getEncoding().isa<ttg::DotOperandEncodingAttr>()) {\n-      builder.clone(op, mapping);\n-      continue;\n+    if (auto cvtOp = dyn_cast<triton::gpu::ConvertLayoutOp>(op)) {\n+      auto result = op.getResult(0);\n+      auto cvtDstTy = result.getType().cast<RankedTensorType>();\n+      if (cvtDstTy.getEncoding().isa<ttg::DotOperandEncodingAttr>()) {\n+        auto it =\n+            std::find(validLoads.begin(), validLoads.end(), op.getOperand(0));\n+        if (it != validLoads.end()) {\n+          // We replace the use new load use with a convert layout\n+          auto loadArgIdx = std::distance(validLoads.begin(), it);\n+          auto cvt = builder.create<ttg::ConvertLayoutOp>(\n+              result.getLoc(), cvtDstTy,\n+              newForOp.getRegionIterArgs()[loadIdx + loadArgIdx]);\n+          mapping.map(result, cvt.getResult());\n+          continue;\n+        }\n+      }\n     }\n-    auto cvt = builder.create<ttg::ConvertLayoutOp>(\n-        op.getResult(0).getLoc(), cvtDstTy,\n-        newForOp.getRegionIterArgs()[loadIdx + i]);\n-    mapping.map(op.getResult(0), cvt.getResult());\n+    cloneWithInferType(builder, &op, mapping);\n   }\n \n   return newForOp;"}]